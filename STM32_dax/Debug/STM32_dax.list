
STM32_dax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000177c  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800854c  0800854c  00095384  2**0
                  CONTENTS
  4 .ARM          00000008  0800854c  0800854c  0001854c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008554  08008554  00095384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008554  08008554  00018554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008558  08008558  00018558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00075384  20000000  0800855c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf0  20075384  0807d8e0  00095384  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20075f74  0807d8e0  00095f74  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00095384  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157de  00000000  00000000  000953b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f00  00000000  00000000  000aab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  000ada90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  000aee50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029987  00000000  00000000  000b0100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fd8  00000000  00000000  000d9a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9395  00000000  00000000  000eda5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e6df4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005530  00000000  00000000  001e6e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20075384 	.word	0x20075384
 8000214:	00000000 	.word	0x00000000
 8000218:	08006db8 	.word	0x08006db8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20075388 	.word	0x20075388
 8000234:	08006db8 	.word	0x08006db8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <add_note_last>:

// Add a note at the end of the list
// ---------------------------------

llist add_note_last(llist list, uint8_t midi_note, uint8_t velocity)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
 800053c:	4613      	mov	r3, r2
 800053e:	70bb      	strb	r3, [r7, #2]
    // Add a new element in memory

    note* new_note = malloc(sizeof(note));
 8000540:	2008      	movs	r0, #8
 8000542:	f005 ff5b 	bl	80063fc <malloc>
 8000546:	4603      	mov	r3, r0
 8000548:	60bb      	str	r3, [r7, #8]

    // Set the new element values

    new_note->midi_note = midi_note;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	701a      	strb	r2, [r3, #0]
    new_note->velocity = velocity;
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	78ba      	ldrb	r2, [r7, #2]
 8000554:	705a      	strb	r2, [r3, #1]

    // There is no next element

    new_note->nxt = NULL;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]

    // If list is empty, then simply return the newly created element

    if(list == NULL)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <add_note_last+0x36>
    {
        return new_note;
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	e00d      	b.n	8000582 <add_note_last+0x52>

    // Else, walk through the list to find the actual last element

    else
    {
    	note* temp=list;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 800056a:	e002      	b.n	8000572 <add_note_last+0x42>
        {
            temp = temp->nxt;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1f8      	bne.n	800056c <add_note_last+0x3c>
        }
        temp->nxt = new_note;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	605a      	str	r2, [r3, #4]
        return list;
 8000580:	687b      	ldr	r3, [r7, #4]
    }
}
 8000582:	4618      	mov	r0, r3
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <delete_note>:

// Delete a note based on the midi_note
// ------------------------------------

llist delete_note(llist list, uint8_t midi_note)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	70fb      	strb	r3, [r7, #3]
    // If list is empty, then just returns

    if(list == NULL)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d101      	bne.n	80005a0 <delete_note+0x16>
        return NULL;
 800059c:	2300      	movs	r3, #0
 800059e:	e01d      	b.n	80005dc <delete_note+0x52>

    // If the current element is the one to delete

    if(list->midi_note == midi_note)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	78fa      	ldrb	r2, [r7, #3]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d10d      	bne.n	80005c6 <delete_note+0x3c>
    {
        note* tmp = list->nxt;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	60fb      	str	r3, [r7, #12]
        free(list);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f005 ff2b 	bl	800640c <free>
        tmp = delete_note(tmp, midi_note);
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	4619      	mov	r1, r3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f7ff ffe5 	bl	800058a <delete_note>
 80005c0:	60f8      	str	r0, [r7, #12]
        return tmp;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	e00a      	b.n	80005dc <delete_note+0x52>

    // Else, the current element is not the one to delete

    else
    {
        list->nxt = delete_note(list->nxt, midi_note);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ffdb 	bl	800058a <delete_note>
 80005d4:	4602      	mov	r2, r0
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	605a      	str	r2, [r3, #4]
        return list;
 80005da:	687b      	ldr	r3, [r7, #4]
    }
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <get_last_note>:

// Get pointer to last note in the list
// ------------------------------------

note* get_last_note(llist list)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

    if(list == NULL)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <get_last_note+0x12>
    {
        return NULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e00a      	b.n	800060c <get_last_note+0x28>
    }

    else
        {
        	note* temp=list;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 80005fa:	e002      	b.n	8000602 <get_last_note+0x1e>
            {
                temp = temp->nxt;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f8      	bne.n	80005fc <get_last_note+0x18>
            }
            return temp;
 800060a:	68fb      	ldr	r3, [r7, #12]
        }
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f001 fb44 	bl	8001caa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f8c3 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 fa75 	bl	8000b14 <MX_GPIO_Init>
  MX_I2S1_Init();
 800062a:	f000 f9b1 	bl	8000990 <MX_I2S1_Init>
  MX_DMA_Init();
 800062e:	f000 fa3f 	bl	8000ab0 <MX_DMA_Init>
  MX_UART4_Init();
 8000632:	f000 fa0d 	bl	8000a50 <MX_UART4_Init>
  MX_I2C2_Init();
 8000636:	f000 f96b 	bl	8000910 <MX_I2C2_Init>
  MX_SAI1_Init();
 800063a:	f000 f9d3 	bl	80009e4 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);
 800063e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000642:	4949      	ldr	r1, [pc, #292]	; (8000768 <main+0x150>)
 8000644:	4849      	ldr	r0, [pc, #292]	; (800076c <main+0x154>)
 8000646:	f003 f825 	bl	8003694 <HAL_I2S_Transmit_DMA>
	//HAL_SAI_Transmit_DMA(&hsai_BlockA1, sendBuff, AUDIO_BUFFER_LENGTH);
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 800064a:	2206      	movs	r2, #6
 800064c:	4948      	ldr	r1, [pc, #288]	; (8000770 <main+0x158>)
 800064e:	4849      	ldr	r0, [pc, #292]	; (8000774 <main+0x15c>)
 8000650:	f005 f939 	bl	80058c6 <HAL_UART_Receive_DMA>
	SSD1306_Init(); // initialize the LCD screen display
 8000654:	f000 fd66 	bl	8001124 <SSD1306_Init>
	SSD1306_Menu();
 8000658:	f001 f80e 	bl	8001678 <SSD1306_Menu>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// HAL_I2S_Transmit(&hi2s1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);
		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 800065c:	f000 fae0 	bl	8000c20 <MIDI_GetNbNewBytes>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	4b44      	ldr	r3, [pc, #272]	; (8000778 <main+0x160>)
 8000666:	701a      	strb	r2, [r3, #0]

		if(nb_MIDI_bytes){
 8000668:	4b43      	ldr	r3, [pc, #268]	; (8000778 <main+0x160>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d005      	beq.n	800067c <main+0x64>
			processBuffer(UART4_rxBuffer,nb_MIDI_bytes);
 8000670:	4b41      	ldr	r3, [pc, #260]	; (8000778 <main+0x160>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4619      	mov	r1, r3
 8000676:	483e      	ldr	r0, [pc, #248]	; (8000770 <main+0x158>)
 8000678:	f000 fb00 	bl	8000c7c <processBuffer>
		}

		play_note = get_last_note(note_list);
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <main+0x164>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffaf 	bl	80005e4 <get_last_note>
 8000686:	6038      	str	r0, [r7, #0]

		if (play_note == NULL){ //no notes in the list
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d10b      	bne.n	80006a6 <main+0x8e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	483b      	ldr	r0, [pc, #236]	; (8000780 <main+0x168>)
 8000694:	f002 f99c 	bl	80029d0 <HAL_GPIO_WritePin>
			trig = 0;
 8000698:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <main+0x16c>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
			playNoteB = 0;
 800069e:	4b3a      	ldr	r3, [pc, #232]	; (8000788 <main+0x170>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	e00a      	b.n	80006bc <main+0xa4>
		}
		else {
			//set the pitch and trigger the notes
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	4835      	ldr	r0, [pc, #212]	; (8000780 <main+0x168>)
 80006ac:	f002 f990 	bl	80029d0 <HAL_GPIO_WritePin>
			trig = 1;
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <main+0x16c>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
			playNoteB = 1;
 80006b6:	4b34      	ldr	r3, [pc, #208]	; (8000788 <main+0x170>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	601a      	str	r2, [r3, #0]
		}

		//test code
		if ( trig == 1)
 80006bc:	4b31      	ldr	r3, [pc, #196]	; (8000784 <main+0x16c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d04d      	beq.n	8000760 <main+0x148>
		{
			if (key == 60 ){
 80006c4:	4b31      	ldr	r3, [pc, #196]	; (800078c <main+0x174>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b3c      	cmp	r3, #60	; 0x3c
 80006ca:	d108      	bne.n	80006de <main+0xc6>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_c, sizeof(tone_c) / sizeof(tone_c[0]), 1000);
 80006cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d0:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80006d4:	492e      	ldr	r1, [pc, #184]	; (8000790 <main+0x178>)
 80006d6:	482f      	ldr	r0, [pc, #188]	; (8000794 <main+0x17c>)
 80006d8:	f004 fd92 	bl	8005200 <HAL_SAI_Transmit>
 80006dc:	e03a      	b.n	8000754 <main+0x13c>
			}
			else if (key == 61 ){
 80006de:	4b2b      	ldr	r3, [pc, #172]	; (800078c <main+0x174>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b3d      	cmp	r3, #61	; 0x3d
 80006e4:	d108      	bne.n	80006f8 <main+0xe0>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_c_sharp, sizeof(tone_c_sharp) / sizeof(tone_c_sharp[0]), 1000);
 80006e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ea:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80006ee:	492a      	ldr	r1, [pc, #168]	; (8000798 <main+0x180>)
 80006f0:	4828      	ldr	r0, [pc, #160]	; (8000794 <main+0x17c>)
 80006f2:	f004 fd85 	bl	8005200 <HAL_SAI_Transmit>
 80006f6:	e02d      	b.n	8000754 <main+0x13c>
			}
			else if (key == 62 ){
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <main+0x174>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b3e      	cmp	r3, #62	; 0x3e
 80006fe:	d108      	bne.n	8000712 <main+0xfa>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_d, sizeof(tone_d) / sizeof(tone_d[0]), 1000);
 8000700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000704:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000708:	4924      	ldr	r1, [pc, #144]	; (800079c <main+0x184>)
 800070a:	4822      	ldr	r0, [pc, #136]	; (8000794 <main+0x17c>)
 800070c:	f004 fd78 	bl	8005200 <HAL_SAI_Transmit>
 8000710:	e020      	b.n	8000754 <main+0x13c>
			}
			else if (key == 63 ){
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <main+0x174>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b3f      	cmp	r3, #63	; 0x3f
 8000718:	d108      	bne.n	800072c <main+0x114>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_d_sharp, sizeof(tone_d_sharp) / sizeof(tone_d_sharp[0]), 1000);
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000722:	491f      	ldr	r1, [pc, #124]	; (80007a0 <main+0x188>)
 8000724:	481b      	ldr	r0, [pc, #108]	; (8000794 <main+0x17c>)
 8000726:	f004 fd6b 	bl	8005200 <HAL_SAI_Transmit>
 800072a:	e013      	b.n	8000754 <main+0x13c>
			}
			else if (key == 64 ){
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <main+0x174>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b40      	cmp	r3, #64	; 0x40
 8000732:	d108      	bne.n	8000746 <main+0x12e>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_e, sizeof(tone_e) / sizeof(tone_e[0]), 1000);
 8000734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000738:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800073c:	4919      	ldr	r1, [pc, #100]	; (80007a4 <main+0x18c>)
 800073e:	4815      	ldr	r0, [pc, #84]	; (8000794 <main+0x17c>)
 8000740:	f004 fd5e 	bl	8005200 <HAL_SAI_Transmit>
 8000744:	e006      	b.n	8000754 <main+0x13c>
			}
			//HAL_SAI_Transmit(&hsai_BlockA1, tone_c, sizeof(tone_c) / sizeof(tone_c[0]), 1000);
			else {
			HAL_SAI_Transmit(&hsai_BlockA1, triangle_wave, sizeof(triangle_wave) / sizeof(triangle_wave[0]), 1000);
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	4916      	ldr	r1, [pc, #88]	; (80007a8 <main+0x190>)
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <main+0x17c>)
 8000750:	f004 fd56 	bl	8005200 <HAL_SAI_Transmit>
			}

			if (screenOn == 0)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d180      	bne.n	800065c <main+0x44>
			{
				//SSD1306_Note0();
				screenOn = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	e77d      	b.n	800065c <main+0x44>
			}
		}
		else
		{
			screenOn = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 8000764:	e77a      	b.n	800065c <main+0x44>
 8000766:	bf00      	nop
 8000768:	200753a4 	.word	0x200753a4
 800076c:	20075e10 	.word	0x20075e10
 8000770:	200758a4 	.word	0x200758a4
 8000774:	20075e50 	.word	0x20075e50
 8000778:	20075f5e 	.word	0x20075f5e
 800077c:	200753a0 	.word	0x200753a0
 8000780:	40020400 	.word	0x40020400
 8000784:	20075d79 	.word	0x20075d79
 8000788:	20075de0 	.word	0x20075de0
 800078c:	20075e0c 	.word	0x20075e0c
 8000790:	20000010 	.word	0x20000010
 8000794:	20075ed8 	.word	0x20075ed8
 8000798:	20017710 	.word	0x20017710
 800079c:	2002ee10 	.word	0x2002ee10
 80007a0:	20046510 	.word	0x20046510
 80007a4:	2005dc10 	.word	0x2005dc10
 80007a8:	080083c8 	.word	0x080083c8

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b0b8      	sub	sp, #224	; 0xe0
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007b6:	2234      	movs	r2, #52	; 0x34
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 fe2e 	bl	800641c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	2290      	movs	r2, #144	; 0x90
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f005 fe1f 	bl	800641c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b49      	ldr	r3, [pc, #292]	; (8000904 <SystemClock_Config+0x158>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a48      	ldr	r2, [pc, #288]	; (8000904 <SystemClock_Config+0x158>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b46      	ldr	r3, [pc, #280]	; (8000904 <SystemClock_Config+0x158>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007f6:	4b44      	ldr	r3, [pc, #272]	; (8000908 <SystemClock_Config+0x15c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007fe:	4a42      	ldr	r2, [pc, #264]	; (8000908 <SystemClock_Config+0x15c>)
 8000800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	4b40      	ldr	r3, [pc, #256]	; (8000908 <SystemClock_Config+0x15c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000812:	2302      	movs	r3, #2
 8000814:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081e:	2310      	movs	r3, #16
 8000820:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000830:	2308      	movs	r3, #8
 8000832:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000836:	2360      	movs	r3, #96	; 0x60
 8000838:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000852:	4618      	mov	r0, r3
 8000854:	f003 f904 	bl	8003a60 <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800085e:	f000 fc5b 	bl	8001118 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000862:	f003 f8ad 	bl	80039c0 <HAL_PWREx_EnableOverDrive>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800086c:	f000 fc54 	bl	8001118 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	230f      	movs	r3, #15
 8000872:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2302      	movs	r3, #2
 8000878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800088a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000892:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000896:	2103      	movs	r1, #3
 8000898:	4618      	mov	r0, r3
 800089a:	f003 fb8f 	bl	8003fbc <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80008a4:	f000 fc38 	bl	8001118 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SAI1
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <SystemClock_Config+0x160>)
 80008aa:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 80008ac:	2360      	movs	r3, #96	; 0x60
 80008ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80008bc:	23c0      	movs	r3, #192	; 0xc0
 80008be:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 80008c4:	2306      	movs	r3, #6
 80008c6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80008d4:	2300      	movs	r3, #0
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 80008d8:	2300      	movs	r3, #0
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80008dc:	2300      	movs	r3, #0
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fd3b 	bl	8004368 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x150>
  {
    Error_Handler();
 80008f8:	f000 fc0e 	bl	8001118 <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	37e0      	adds	r7, #224	; 0xe0
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40007000 	.word	0x40007000
 800090c:	00088201 	.word	0x00088201

08000910 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_I2C2_Init+0x74>)
 8000916:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <MX_I2C2_Init+0x78>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_I2C2_Init+0x74>)
 800091c:	4a1b      	ldr	r2, [pc, #108]	; (800098c <MX_I2C2_Init+0x7c>)
 800091e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_I2C2_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_I2C2_Init+0x74>)
 8000928:	2201      	movs	r2, #1
 800092a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_I2C2_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_I2C2_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_I2C2_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_I2C2_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_I2C2_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800094a:	480e      	ldr	r0, [pc, #56]	; (8000984 <MX_I2C2_Init+0x74>)
 800094c:	f002 f85a 	bl	8002a04 <HAL_I2C_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000956:	f000 fbdf 	bl	8001118 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <MX_I2C2_Init+0x74>)
 800095e:	f002 fc51 	bl	8003204 <HAL_I2CEx_ConfigAnalogFilter>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000968:	f000 fbd6 	bl	8001118 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_I2C2_Init+0x74>)
 8000970:	f002 fc93 	bl	800329a <HAL_I2CEx_ConfigDigitalFilter>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800097a:	f000 fbcd 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20075d2c 	.word	0x20075d2c
 8000988:	40005800 	.word	0x40005800
 800098c:	0090194b 	.word	0x0090194b

08000990 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_I2S1_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <MX_I2S1_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_I2S1_Init+0x4c>)
 800099c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a0:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_I2S1_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_I2S1_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_I2S1_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_I2S1_Init+0x4c>)
 80009b6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80009ba:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <MX_I2S1_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_I2S1_Init+0x4c>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_I2S1_Init+0x4c>)
 80009ca:	f002 fcb3 	bl	8003334 <HAL_I2S_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 80009d4:	f000 fba0 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20075e10 	.word	0x20075e10
 80009e0:	40013000 	.word	0x40013000

080009e4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_SAI1_Init+0x64>)
 80009ea:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <MX_SAI1_Init+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_SAI1_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_SAI1_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_SAI1_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_SAI1_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_SAI1_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_SAI1_Init+0x64>)
 8000a0e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000a12:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_SAI1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_SAI1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_SAI1_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_SAI1_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	2203      	movs	r2, #3
 8000a30:	2100      	movs	r1, #0
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_SAI1_Init+0x64>)
 8000a34:	f004 fa32 	bl	8004e9c <HAL_SAI_InitProtocol>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000a3e:	f000 fb6b 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20075ed8 	.word	0x20075ed8
 8000a4c:	40015804 	.word	0x40015804

08000a50 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_UART4_Init+0x58>)
 8000a56:	4a15      	ldr	r2, [pc, #84]	; (8000aac <MX_UART4_Init+0x5c>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_UART4_Init+0x58>)
 8000a5c:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000a60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_UART4_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_UART4_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_UART4_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_UART4_Init+0x58>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_UART4_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_UART4_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_UART4_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_UART4_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_UART4_Init+0x58>)
 8000a94:	f004 fe36 	bl	8005704 <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a9e:	f000 fb3b 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20075e50 	.word	0x20075e50
 8000aac:	40004c00 	.word	0x40004c00

08000ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_DMA_Init+0x60>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <MX_DMA_Init+0x60>)
 8000abc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_DMA_Init+0x60>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_DMA_Init+0x60>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <MX_DMA_Init+0x60>)
 8000ad4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <MX_DMA_Init+0x60>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	200d      	movs	r0, #13
 8000aec:	f001 fa15 	bl	8001f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000af0:	200d      	movs	r0, #13
 8000af2:	f001 fa2e 	bl	8001f52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2039      	movs	r0, #57	; 0x39
 8000afc:	f001 fa0d 	bl	8001f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b00:	2039      	movs	r0, #57	; 0x39
 8000b02:	f001 fa26 	bl	8001f52 <HAL_NVIC_EnableIRQ>

}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b2a:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a28      	ldr	r2, [pc, #160]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b30:	f043 0310 	orr.w	r3, r3, #16
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a22      	ldr	r2, [pc, #136]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b48:	f043 0320 	orr.w	r3, r3, #32
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <MX_GPIO_Init+0xc0>)
 8000ba8:	f001 ff12 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_GPIO_Init+0xc0>)
 8000bc4:	f001 fd58 	bl	8002678 <HAL_GPIO_Init>

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <HAL_I2S_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	HAL_I2S_Receive(&hi2s1, sendBuff, 8, 100);
 8000be0:	1d38      	adds	r0, r7, #4
 8000be2:	2364      	movs	r3, #100	; 0x64
 8000be4:	2208      	movs	r2, #8
 8000be6:	4906      	ldr	r1, [pc, #24]	; (8000c00 <HAL_I2S_TxCpltCallback+0x28>)
 8000be8:	f002 fc8a 	bl	8003500 <HAL_I2S_Receive>
	//HAL_I2S_(hi2s1, sendBuff, 16, 100);
	HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, 8);
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2208      	movs	r2, #8
 8000bf0:	4903      	ldr	r1, [pc, #12]	; (8000c00 <HAL_I2S_TxCpltCallback+0x28>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 fd4e 	bl	8003694 <HAL_I2S_Transmit_DMA>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200753a4 	.word	0x200753a4

08000c04 <DMA_GetCurrDataCounter>:
//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);

//}

uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	b29b      	uxth	r3, r3
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <MIDI_GetNbNewBytes>:


uint8_t MIDI_GetNbNewBytes()
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	static uint16_t dma_cpt_prev = MIDI_BUFFER_LENGTH;
	uint16_t dma_cpt, n = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	80fb      	strh	r3, [r7, #6]
	// Get current DMA counter
	dma_cpt = DMA_GetCurrDataCounter(DMA1_Stream2);
 8000c2a:	4812      	ldr	r0, [pc, #72]	; (8000c74 <MIDI_GetNbNewBytes+0x54>)
 8000c2c:	f7ff ffea 	bl	8000c04 <DMA_GetCurrDataCounter>
 8000c30:	4603      	mov	r3, r0
 8000c32:	80bb      	strh	r3, [r7, #4]

	// If DMA counter has changed, compute the number of received MIDI bytes
	if (dma_cpt != dma_cpt_prev)
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MIDI_GetNbNewBytes+0x58>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	88ba      	ldrh	r2, [r7, #4]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d014      	beq.n	8000c68 <MIDI_GetNbNewBytes+0x48>
	{
		if (dma_cpt < dma_cpt_prev)
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MIDI_GetNbNewBytes+0x58>)
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	88ba      	ldrh	r2, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d205      	bcs.n	8000c54 <MIDI_GetNbNewBytes+0x34>
		{
			n = dma_cpt_prev - dma_cpt;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MIDI_GetNbNewBytes+0x58>)
 8000c4a:	881a      	ldrh	r2, [r3, #0]
 8000c4c:	88bb      	ldrh	r3, [r7, #4]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	80fb      	strh	r3, [r7, #6]
 8000c52:	e006      	b.n	8000c62 <MIDI_GetNbNewBytes+0x42>
		}
		else
		{
			n = dma_cpt_prev - (dma_cpt - MIDI_BUFFER_LENGTH);
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MIDI_GetNbNewBytes+0x58>)
 8000c56:	881a      	ldrh	r2, [r3, #0]
 8000c58:	88bb      	ldrh	r3, [r7, #4]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	3306      	adds	r3, #6
 8000c60:	80fb      	strh	r3, [r7, #6]
		}
		// Store the new DMA counter
		dma_cpt_prev = dma_cpt;
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <MIDI_GetNbNewBytes+0x58>)
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	8013      	strh	r3, [r2, #0]
	}
	return (n);
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	b2db      	uxtb	r3, r3
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40026040 	.word	0x40026040
 8000c78:	20075310 	.word	0x20075310

08000c7c <processBuffer>:

//Author: Synthol Project, Adjusted to fit projec
void processBuffer(uint8_t* MIDI_buffer, uint8_t nb_MIDI_bytes)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70fb      	strb	r3, [r7, #3]
	__IO uint32_t received_char;

	static uint8_t i = 0;
	static uint8_t state = 0;

	while (nb_MIDI_bytes != 0)
 8000c88:	bf00      	nop
 8000c8a:	e1fd      	b.n	8001088 <processBuffer+0x40c>
	{
		//reading a byte from the buffer
		received_char = UART4_rxBuffer[i];
 8000c8c:	4ba8      	ldr	r3, [pc, #672]	; (8000f30 <processBuffer+0x2b4>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4ba8      	ldr	r3, [pc, #672]	; (8000f34 <processBuffer+0x2b8>)
 8000c94:	5c9b      	ldrb	r3, [r3, r2]
 8000c96:	60fb      	str	r3, [r7, #12]
		switch (state)
 8000c98:	4ba7      	ldr	r3, [pc, #668]	; (8000f38 <processBuffer+0x2bc>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b29      	cmp	r3, #41	; 0x29
 8000c9e:	f200 81f3 	bhi.w	8001088 <processBuffer+0x40c>
 8000ca2:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <processBuffer+0x2c>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000d51 	.word	0x08000d51
 8000cac:	08001089 	.word	0x08001089
 8000cb0:	08001089 	.word	0x08001089
 8000cb4:	08001089 	.word	0x08001089
 8000cb8:	08001089 	.word	0x08001089
 8000cbc:	08001089 	.word	0x08001089
 8000cc0:	08001089 	.word	0x08001089
 8000cc4:	08001089 	.word	0x08001089
 8000cc8:	08001089 	.word	0x08001089
 8000ccc:	08001089 	.word	0x08001089
 8000cd0:	08000e2d 	.word	0x08000e2d
 8000cd4:	08000e75 	.word	0x08000e75
 8000cd8:	08001089 	.word	0x08001089
 8000cdc:	08001089 	.word	0x08001089
 8000ce0:	08001089 	.word	0x08001089
 8000ce4:	08001089 	.word	0x08001089
 8000ce8:	08001089 	.word	0x08001089
 8000cec:	08001089 	.word	0x08001089
 8000cf0:	08001089 	.word	0x08001089
 8000cf4:	08001089 	.word	0x08001089
 8000cf8:	08000ee7 	.word	0x08000ee7
 8000cfc:	08000f55 	.word	0x08000f55
 8000d00:	08001089 	.word	0x08001089
 8000d04:	08001089 	.word	0x08001089
 8000d08:	08001089 	.word	0x08001089
 8000d0c:	08001089 	.word	0x08001089
 8000d10:	08001089 	.word	0x08001089
 8000d14:	08001089 	.word	0x08001089
 8000d18:	08001089 	.word	0x08001089
 8000d1c:	08001089 	.word	0x08001089
 8000d20:	08000fa5 	.word	0x08000fa5
 8000d24:	08000fe5 	.word	0x08000fe5
 8000d28:	08001089 	.word	0x08001089
 8000d2c:	08001089 	.word	0x08001089
 8000d30:	08001089 	.word	0x08001089
 8000d34:	08001089 	.word	0x08001089
 8000d38:	08001089 	.word	0x08001089
 8000d3c:	08001089 	.word	0x08001089
 8000d40:	08001089 	.word	0x08001089
 8000d44:	08001089 	.word	0x08001089
 8000d48:	08001017 	.word	0x08001017
 8000d4c:	08001057 	.word	0x08001057
		{
		// State 0 = Starting point for a new MIDI message
		case 0:
		{
			switch (received_char & 0xF0)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d56:	2be0      	cmp	r3, #224	; 0xe0
 8000d58:	d04b      	beq.n	8000df2 <processBuffer+0x176>
 8000d5a:	2be0      	cmp	r3, #224	; 0xe0
 8000d5c:	d85e      	bhi.n	8000e1c <processBuffer+0x1a0>
 8000d5e:	2bb0      	cmp	r3, #176	; 0xb0
 8000d60:	d032      	beq.n	8000dc8 <processBuffer+0x14c>
 8000d62:	2bb0      	cmp	r3, #176	; 0xb0
 8000d64:	d85a      	bhi.n	8000e1c <processBuffer+0x1a0>
 8000d66:	2b80      	cmp	r3, #128	; 0x80
 8000d68:	d019      	beq.n	8000d9e <processBuffer+0x122>
 8000d6a:	2b90      	cmp	r3, #144	; 0x90
 8000d6c:	d156      	bne.n	8000e1c <processBuffer+0x1a0>
			{
			case 0x90: // Note ON message
			{
				state = 10; // Next state is 10
 8000d6e:	4b72      	ldr	r3, [pc, #456]	; (8000f38 <processBuffer+0x2bc>)
 8000d70:	220a      	movs	r2, #10
 8000d72:	701a      	strb	r2, [r3, #0]
				printf ("note ON event\n");
 8000d74:	4871      	ldr	r0, [pc, #452]	; (8000f3c <processBuffer+0x2c0>)
 8000d76:	f005 fc71 	bl	800665c <puts>
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d7a:	4b6d      	ldr	r3, [pc, #436]	; (8000f30 <processBuffer+0x2b4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b05      	cmp	r3, #5
 8000d80:	d103      	bne.n	8000d8a <processBuffer+0x10e>
					i = 0;				// Move to next MIDI byte
 8000d82:	4b6b      	ldr	r3, [pc, #428]	; (8000f30 <processBuffer+0x2b4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e005      	b.n	8000d96 <processBuffer+0x11a>
				}
				else {
					i++;
 8000d8a:	4b69      	ldr	r3, [pc, #420]	; (8000f30 <processBuffer+0x2b4>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b67      	ldr	r3, [pc, #412]	; (8000f30 <processBuffer+0x2b4>)
 8000d94:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	70fb      	strb	r3, [r7, #3]
				break;
 8000d9c:	e045      	b.n	8000e2a <processBuffer+0x1ae>
			}
			case 0x80: // Note OFF message
			{
				state = 20; // Next state is 20
 8000d9e:	4b66      	ldr	r3, [pc, #408]	; (8000f38 <processBuffer+0x2bc>)
 8000da0:	2214      	movs	r2, #20
 8000da2:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000da4:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <processBuffer+0x2b4>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b05      	cmp	r3, #5
 8000daa:	d103      	bne.n	8000db4 <processBuffer+0x138>
					i = 0;				// Move to next MIDI byte
 8000dac:	4b60      	ldr	r3, [pc, #384]	; (8000f30 <processBuffer+0x2b4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
 8000db2:	e005      	b.n	8000dc0 <processBuffer+0x144>
				}
				else {
					i++;
 8000db4:	4b5e      	ldr	r3, [pc, #376]	; (8000f30 <processBuffer+0x2b4>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b5c      	ldr	r3, [pc, #368]	; (8000f30 <processBuffer+0x2b4>)
 8000dbe:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	70fb      	strb	r3, [r7, #3]
				break;
 8000dc6:	e030      	b.n	8000e2a <processBuffer+0x1ae>
			}
			case 0xB0: // CC message
			{
				state = 30; // Next state is 30
 8000dc8:	4b5b      	ldr	r3, [pc, #364]	; (8000f38 <processBuffer+0x2bc>)
 8000dca:	221e      	movs	r2, #30
 8000dcc:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000dce:	4b58      	ldr	r3, [pc, #352]	; (8000f30 <processBuffer+0x2b4>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b05      	cmp	r3, #5
 8000dd4:	d103      	bne.n	8000dde <processBuffer+0x162>
					i = 0;				// Move to next MIDI byte
 8000dd6:	4b56      	ldr	r3, [pc, #344]	; (8000f30 <processBuffer+0x2b4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e005      	b.n	8000dea <processBuffer+0x16e>
				}
				else {
					i++;
 8000dde:	4b54      	ldr	r3, [pc, #336]	; (8000f30 <processBuffer+0x2b4>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b52      	ldr	r3, [pc, #328]	; (8000f30 <processBuffer+0x2b4>)
 8000de8:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	70fb      	strb	r3, [r7, #3]
				break;
 8000df0:	e01b      	b.n	8000e2a <processBuffer+0x1ae>
			}

			case 0xE0: // Pitch Bend message
			{
				state = 40; // Next state is 40
 8000df2:	4b51      	ldr	r3, [pc, #324]	; (8000f38 <processBuffer+0x2bc>)
 8000df4:	2228      	movs	r2, #40	; 0x28
 8000df6:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000df8:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <processBuffer+0x2b4>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b05      	cmp	r3, #5
 8000dfe:	d103      	bne.n	8000e08 <processBuffer+0x18c>
					i = 0;				// Move to next MIDI byte
 8000e00:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <processBuffer+0x2b4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	e005      	b.n	8000e14 <processBuffer+0x198>
				}
				else {
					i++;
 8000e08:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <processBuffer+0x2b4>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b47      	ldr	r3, [pc, #284]	; (8000f30 <processBuffer+0x2b4>)
 8000e12:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	70fb      	strb	r3, [r7, #3]
				break;
 8000e1a:	e006      	b.n	8000e2a <processBuffer+0x1ae>
			}
			default: // Other type of message, move to next byte but stays in state 0
			{
				//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
				i++;
 8000e1c:	4b44      	ldr	r3, [pc, #272]	; (8000f30 <processBuffer+0x2b4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	3301      	adds	r3, #1
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <processBuffer+0x2b4>)
 8000e26:	701a      	strb	r2, [r3, #0]
				break;
 8000e28:	bf00      	nop
			}
			}
			break;
 8000e2a:	e12d      	b.n	8001088 <processBuffer+0x40c>
		}
		// State 10 & 11 : Note ON command
		case 10:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e30:	d903      	bls.n	8000e3a <processBuffer+0x1be>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000e32:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <processBuffer+0x2bc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	e126      	b.n	8001088 <processBuffer+0x40c>
			}
			else
			{ // Save MIDI note
				ctrl = key = received_char;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <processBuffer+0x2c4>)
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <processBuffer+0x2c4>)
 8000e44:	781a      	ldrb	r2, [r3, #0]
 8000e46:	4b3f      	ldr	r3, [pc, #252]	; (8000f44 <processBuffer+0x2c8>)
 8000e48:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e4a:	4b39      	ldr	r3, [pc, #228]	; (8000f30 <processBuffer+0x2b4>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b05      	cmp	r3, #5
 8000e50:	d103      	bne.n	8000e5a <processBuffer+0x1de>
					i = 0;				// Move to next MIDI byte
 8000e52:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <processBuffer+0x2b4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	e005      	b.n	8000e66 <processBuffer+0x1ea>
				}
				else {
					i++;
 8000e5a:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <processBuffer+0x2b4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b33      	ldr	r3, [pc, #204]	; (8000f30 <processBuffer+0x2b4>)
 8000e64:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000e66:	78fb      	ldrb	r3, [r7, #3]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	70fb      	strb	r3, [r7, #3]
				state = 11; // Next state is 11
 8000e6c:	4b32      	ldr	r3, [pc, #200]	; (8000f38 <processBuffer+0x2bc>)
 8000e6e:	220b      	movs	r2, #11
 8000e70:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000e72:	e109      	b.n	8001088 <processBuffer+0x40c>
		}
		case 11:
		{
			data = velocity = received_char; //will only ever get velocity in this section i think
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <processBuffer+0x2cc>)
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <processBuffer+0x2cc>)
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <processBuffer+0x2d0>)
 8000e82:	701a      	strb	r2, [r3, #0]

			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e84:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <processBuffer+0x2b4>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b05      	cmp	r3, #5
 8000e8a:	d103      	bne.n	8000e94 <processBuffer+0x218>
				i = 0;				// Move to next MIDI byte
 8000e8c:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <processBuffer+0x2b4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	e005      	b.n	8000ea0 <processBuffer+0x224>
			}
			else {
				i++;
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <processBuffer+0x2b4>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <processBuffer+0x2b4>)
 8000e9e:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	70fb      	strb	r3, [r7, #3]

			state = 10; // Next state is 10
 8000ea6:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <processBuffer+0x2bc>)
 8000ea8:	220a      	movs	r2, #10
 8000eaa:	701a      	strb	r2, [r3, #0]

			if (velocity > 0)
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <processBuffer+0x2cc>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00c      	beq.n	8000ece <processBuffer+0x252>
			{

				note_list = add_note_last(note_list, key, velocity);
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <processBuffer+0x2d4>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <processBuffer+0x2c4>)
 8000eba:	7811      	ldrb	r1, [r2, #0]
 8000ebc:	4a22      	ldr	r2, [pc, #136]	; (8000f48 <processBuffer+0x2cc>)
 8000ebe:	7812      	ldrb	r2, [r2, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fb35 	bl	8000530 <add_note_last>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <processBuffer+0x2d4>)
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e0dc      	b.n	8001088 <processBuffer+0x40c>
				//play_note(midimsg, velocity);
			}
			else
			{
				//find the key and deletes it
				note_list = delete_note(note_list, key);
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <processBuffer+0x2d4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <processBuffer+0x2c4>)
 8000ed4:	7812      	ldrb	r2, [r2, #0]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fb56 	bl	800058a <delete_note>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <processBuffer+0x2d4>)
 8000ee2:	6013      	str	r3, [r2, #0]
			}
			break;
 8000ee4:	e0d0      	b.n	8001088 <processBuffer+0x40c>
		}
		// State 20 & 21 : Note OFF command
		case 20:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eea:	d903      	bls.n	8000ef4 <processBuffer+0x278>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <processBuffer+0x2bc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	e0c9      	b.n	8001088 <processBuffer+0x40c>
			}

			else
			{
				ctrl = key = received_char; // Save MIDI note
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <processBuffer+0x2c4>)
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <processBuffer+0x2c4>)
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <processBuffer+0x2c8>)
 8000f02:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <processBuffer+0x2b4>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b05      	cmp	r3, #5
 8000f0a:	d103      	bne.n	8000f14 <processBuffer+0x298>
					i = 0;				// Move to next MIDI byte
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <processBuffer+0x2b4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	e005      	b.n	8000f20 <processBuffer+0x2a4>
				}
				else {
					i++;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <processBuffer+0x2b4>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <processBuffer+0x2b4>)
 8000f1e:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	70fb      	strb	r3, [r7, #3]

				state = 21; // Next state is 21
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <processBuffer+0x2bc>)
 8000f28:	2215      	movs	r2, #21
 8000f2a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f2c:	e0ac      	b.n	8001088 <processBuffer+0x40c>
 8000f2e:	bf00      	nop
 8000f30:	200758aa 	.word	0x200758aa
 8000f34:	200758a4 	.word	0x200758a4
 8000f38:	200758ab 	.word	0x200758ab
 8000f3c:	08006dd0 	.word	0x08006dd0
 8000f40:	20075e0c 	.word	0x20075e0c
 8000f44:	20075d78 	.word	0x20075d78
 8000f48:	20075e09 	.word	0x20075e09
 8000f4c:	20075e0b 	.word	0x20075e0b
 8000f50:	200753a0 	.word	0x200753a0
		}
		case 21:
		{
			velocity = data = received_char; // Save MIDI velocity
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b50      	ldr	r3, [pc, #320]	; (800109c <processBuffer+0x420>)
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	4b4f      	ldr	r3, [pc, #316]	; (800109c <processBuffer+0x420>)
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	4b4f      	ldr	r3, [pc, #316]	; (80010a0 <processBuffer+0x424>)
 8000f62:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f64:	4b4f      	ldr	r3, [pc, #316]	; (80010a4 <processBuffer+0x428>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d103      	bne.n	8000f74 <processBuffer+0x2f8>
				i = 0;				// Move to next MIDI byte
 8000f6c:	4b4d      	ldr	r3, [pc, #308]	; (80010a4 <processBuffer+0x428>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	e005      	b.n	8000f80 <processBuffer+0x304>
			}
			else {
				i++;
 8000f74:	4b4b      	ldr	r3, [pc, #300]	; (80010a4 <processBuffer+0x428>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <processBuffer+0x428>)
 8000f7e:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	70fb      	strb	r3, [r7, #3]

			state = 20; // Next state is 20
 8000f86:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <processBuffer+0x42c>)
 8000f88:	2214      	movs	r2, #20
 8000f8a:	701a      	strb	r2, [r3, #0]

			note_list = delete_note(note_list, key);
 8000f8c:	4b47      	ldr	r3, [pc, #284]	; (80010ac <processBuffer+0x430>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a47      	ldr	r2, [pc, #284]	; (80010b0 <processBuffer+0x434>)
 8000f92:	7812      	ldrb	r2, [r2, #0]
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff faf7 	bl	800058a <delete_note>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a43      	ldr	r2, [pc, #268]	; (80010ac <processBuffer+0x430>)
 8000fa0:	6013      	str	r3, [r2, #0]
			break;
 8000fa2:	e071      	b.n	8001088 <processBuffer+0x40c>
		}
		// State 30 & 31 : CC command
		case 30:
		{
			if (received_char > 0x7F) // If the following byte is not a CC number
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa8:	d903      	bls.n	8000fb2 <processBuffer+0x336>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <processBuffer+0x42c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	e06a      	b.n	8001088 <processBuffer+0x40c>
			}
			else
			{
				param = received_char; // Save MIDI CC number
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <processBuffer+0x438>)
 8000fb8:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000fba:	4b3a      	ldr	r3, [pc, #232]	; (80010a4 <processBuffer+0x428>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d103      	bne.n	8000fca <processBuffer+0x34e>
					i = 0;				// Move to next MIDI byte
 8000fc2:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <processBuffer+0x428>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
 8000fc8:	e005      	b.n	8000fd6 <processBuffer+0x35a>
				}
				else {
					i++;
 8000fca:	4b36      	ldr	r3, [pc, #216]	; (80010a4 <processBuffer+0x428>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b34      	ldr	r3, [pc, #208]	; (80010a4 <processBuffer+0x428>)
 8000fd4:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	70fb      	strb	r3, [r7, #3]
				state = 31; // Next state is 31
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <processBuffer+0x42c>)
 8000fde:	221f      	movs	r2, #31
 8000fe0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000fe2:	e051      	b.n	8001088 <processBuffer+0x40c>
		}
		case 31:
		{
			param = received_char; // Save MIDI velocity
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <processBuffer+0x438>)
 8000fea:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000fec:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <processBuffer+0x428>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d103      	bne.n	8000ffc <processBuffer+0x380>
				i = 0;				// Move to next MIDI byte
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <processBuffer+0x428>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	e005      	b.n	8001008 <processBuffer+0x38c>
			}
			else {
				i++;
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <processBuffer+0x428>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <processBuffer+0x428>)
 8001006:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	3b01      	subs	r3, #1
 800100c:	70fb      	strb	r3, [r7, #3]
			state = 30; // Next state is 30
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <processBuffer+0x42c>)
 8001010:	221e      	movs	r2, #30
 8001012:	701a      	strb	r2, [r3, #0]
			break;
 8001014:	e038      	b.n	8001088 <processBuffer+0x40c>
		}
		// State 40 & 41 : Pitch Bend message
		case 40:
		{
			if (received_char > 0x7F) // If following byte is note a PB value
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2b7f      	cmp	r3, #127	; 0x7f
 800101a:	d903      	bls.n	8001024 <processBuffer+0x3a8>
			{
				state = 0; // Return to state 0
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <processBuffer+0x42c>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	e031      	b.n	8001088 <processBuffer+0x40c>
			}
			else
			{
				param = received_char; // Save MIDI CC number
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <processBuffer+0x438>)
 800102a:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <processBuffer+0x428>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b05      	cmp	r3, #5
 8001032:	d103      	bne.n	800103c <processBuffer+0x3c0>
					i = 0;				// Move to next MIDI byte
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <processBuffer+0x428>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e005      	b.n	8001048 <processBuffer+0x3cc>
				}
				else {
					i++;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <processBuffer+0x428>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <processBuffer+0x428>)
 8001046:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	3b01      	subs	r3, #1
 800104c:	70fb      	strb	r3, [r7, #3]
				state = 41; // Next state is 41
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <processBuffer+0x42c>)
 8001050:	2229      	movs	r2, #41	; 0x29
 8001052:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001054:	e018      	b.n	8001088 <processBuffer+0x40c>
		}
		case 41:
		{
			param = received_char; // Save MIDI velocity
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <processBuffer+0x438>)
 800105c:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <processBuffer+0x428>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b05      	cmp	r3, #5
 8001064:	d103      	bne.n	800106e <processBuffer+0x3f2>
				i = 0;				// Move to next MIDI byte
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <processBuffer+0x428>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	e005      	b.n	800107a <processBuffer+0x3fe>
			}
			else {
				i++;
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <processBuffer+0x428>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <processBuffer+0x428>)
 8001078:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	3b01      	subs	r3, #1
 800107e:	70fb      	strb	r3, [r7, #3]
			state = 40; // Next state is 00
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <processBuffer+0x42c>)
 8001082:	2228      	movs	r2, #40	; 0x28
 8001084:	701a      	strb	r2, [r3, #0]
			break;
 8001086:	bf00      	nop
	while (nb_MIDI_bytes != 0)
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f47f adfe 	bne.w	8000c8c <processBuffer+0x10>
		}
	}
	}
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20075e0b 	.word	0x20075e0b
 80010a0:	20075e09 	.word	0x20075e09
 80010a4:	200758aa 	.word	0x200758aa
 80010a8:	200758ab 	.word	0x200758ab
 80010ac:	200753a0 	.word	0x200753a0
 80010b0:	20075e0c 	.word	0x20075e0c
 80010b4:	20075d25 	.word	0x20075d25

080010b8 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
 80010c0:	2364      	movs	r3, #100	; 0x64
 80010c2:	2206      	movs	r2, #6
 80010c4:	4906      	ldr	r1, [pc, #24]	; (80010e0 <HAL_UART_RxHalfCpltCallback+0x28>)
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <HAL_UART_RxHalfCpltCallback+0x2c>)
 80010c8:	f004 fb6a 	bl	80057a0 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 80010cc:	2206      	movs	r2, #6
 80010ce:	4904      	ldr	r1, [pc, #16]	; (80010e0 <HAL_UART_RxHalfCpltCallback+0x28>)
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <HAL_UART_RxHalfCpltCallback+0x2c>)
 80010d2:	f004 fbf8 	bl	80058c6 <HAL_UART_Receive_DMA>

	//new version dose not call here
		//processBuffer();
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200758a4 	.word	0x200758a4
 80010e4:	20075e50 	.word	0x20075e50

080010e8 <HAL_UART_RxCpltCallback>:

//buffer is full here, do something when full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
 80010f0:	2364      	movs	r3, #100	; 0x64
 80010f2:	2206      	movs	r2, #6
 80010f4:	4906      	ldr	r1, [pc, #24]	; (8001110 <HAL_UART_RxCpltCallback+0x28>)
 80010f6:	4807      	ldr	r0, [pc, #28]	; (8001114 <HAL_UART_RxCpltCallback+0x2c>)
 80010f8:	f004 fb52 	bl	80057a0 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 80010fc:	2206      	movs	r2, #6
 80010fe:	4904      	ldr	r1, [pc, #16]	; (8001110 <HAL_UART_RxCpltCallback+0x28>)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <HAL_UART_RxCpltCallback+0x2c>)
 8001102:	f004 fbe0 	bl	80058c6 <HAL_UART_Receive_DMA>

	//once MIDI buffer is full we send to the process buffer function
	//new version dose not call here
	//processBuffer();
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200758a4 	.word	0x200758a4
 8001114:	20075e50 	.word	0x20075e50

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001120:	e7fe      	b.n	8001120 <Error_Handler+0x8>
	...

08001124 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800112a:	f000 fa29 	bl	8001580 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800112e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001132:	2201      	movs	r2, #1
 8001134:	2178      	movs	r1, #120	; 0x78
 8001136:	485b      	ldr	r0, [pc, #364]	; (80012a4 <SSD1306_Init+0x180>)
 8001138:	f001 fde8 	bl	8002d0c <HAL_I2C_IsDeviceReady>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001142:	2300      	movs	r3, #0
 8001144:	e0a9      	b.n	800129a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001146:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800114a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800114c:	e002      	b.n	8001154 <SSD1306_Init+0x30>
		p--;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3b01      	subs	r3, #1
 8001152:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f9      	bne.n	800114e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800115a:	22ae      	movs	r2, #174	; 0xae
 800115c:	2100      	movs	r1, #0
 800115e:	2078      	movs	r0, #120	; 0x78
 8001160:	f000 fa6c 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001164:	2220      	movs	r2, #32
 8001166:	2100      	movs	r1, #0
 8001168:	2078      	movs	r0, #120	; 0x78
 800116a:	f000 fa67 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800116e:	2210      	movs	r2, #16
 8001170:	2100      	movs	r1, #0
 8001172:	2078      	movs	r0, #120	; 0x78
 8001174:	f000 fa62 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001178:	22b0      	movs	r2, #176	; 0xb0
 800117a:	2100      	movs	r1, #0
 800117c:	2078      	movs	r0, #120	; 0x78
 800117e:	f000 fa5d 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001182:	22c8      	movs	r2, #200	; 0xc8
 8001184:	2100      	movs	r1, #0
 8001186:	2078      	movs	r0, #120	; 0x78
 8001188:	f000 fa58 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2078      	movs	r0, #120	; 0x78
 8001192:	f000 fa53 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001196:	2210      	movs	r2, #16
 8001198:	2100      	movs	r1, #0
 800119a:	2078      	movs	r0, #120	; 0x78
 800119c:	f000 fa4e 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80011a0:	2240      	movs	r2, #64	; 0x40
 80011a2:	2100      	movs	r1, #0
 80011a4:	2078      	movs	r0, #120	; 0x78
 80011a6:	f000 fa49 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80011aa:	2281      	movs	r2, #129	; 0x81
 80011ac:	2100      	movs	r1, #0
 80011ae:	2078      	movs	r0, #120	; 0x78
 80011b0:	f000 fa44 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80011b4:	22ff      	movs	r2, #255	; 0xff
 80011b6:	2100      	movs	r1, #0
 80011b8:	2078      	movs	r0, #120	; 0x78
 80011ba:	f000 fa3f 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80011be:	22a1      	movs	r2, #161	; 0xa1
 80011c0:	2100      	movs	r1, #0
 80011c2:	2078      	movs	r0, #120	; 0x78
 80011c4:	f000 fa3a 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80011c8:	22a6      	movs	r2, #166	; 0xa6
 80011ca:	2100      	movs	r1, #0
 80011cc:	2078      	movs	r0, #120	; 0x78
 80011ce:	f000 fa35 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80011d2:	22a8      	movs	r2, #168	; 0xa8
 80011d4:	2100      	movs	r1, #0
 80011d6:	2078      	movs	r0, #120	; 0x78
 80011d8:	f000 fa30 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80011dc:	223f      	movs	r2, #63	; 0x3f
 80011de:	2100      	movs	r1, #0
 80011e0:	2078      	movs	r0, #120	; 0x78
 80011e2:	f000 fa2b 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80011e6:	22a4      	movs	r2, #164	; 0xa4
 80011e8:	2100      	movs	r1, #0
 80011ea:	2078      	movs	r0, #120	; 0x78
 80011ec:	f000 fa26 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80011f0:	22d3      	movs	r2, #211	; 0xd3
 80011f2:	2100      	movs	r1, #0
 80011f4:	2078      	movs	r0, #120	; 0x78
 80011f6:	f000 fa21 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2078      	movs	r0, #120	; 0x78
 8001200:	f000 fa1c 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001204:	22d5      	movs	r2, #213	; 0xd5
 8001206:	2100      	movs	r1, #0
 8001208:	2078      	movs	r0, #120	; 0x78
 800120a:	f000 fa17 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800120e:	22f0      	movs	r2, #240	; 0xf0
 8001210:	2100      	movs	r1, #0
 8001212:	2078      	movs	r0, #120	; 0x78
 8001214:	f000 fa12 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001218:	22d9      	movs	r2, #217	; 0xd9
 800121a:	2100      	movs	r1, #0
 800121c:	2078      	movs	r0, #120	; 0x78
 800121e:	f000 fa0d 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001222:	2222      	movs	r2, #34	; 0x22
 8001224:	2100      	movs	r1, #0
 8001226:	2078      	movs	r0, #120	; 0x78
 8001228:	f000 fa08 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800122c:	22da      	movs	r2, #218	; 0xda
 800122e:	2100      	movs	r1, #0
 8001230:	2078      	movs	r0, #120	; 0x78
 8001232:	f000 fa03 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001236:	2212      	movs	r2, #18
 8001238:	2100      	movs	r1, #0
 800123a:	2078      	movs	r0, #120	; 0x78
 800123c:	f000 f9fe 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001240:	22db      	movs	r2, #219	; 0xdb
 8001242:	2100      	movs	r1, #0
 8001244:	2078      	movs	r0, #120	; 0x78
 8001246:	f000 f9f9 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800124a:	2220      	movs	r2, #32
 800124c:	2100      	movs	r1, #0
 800124e:	2078      	movs	r0, #120	; 0x78
 8001250:	f000 f9f4 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001254:	228d      	movs	r2, #141	; 0x8d
 8001256:	2100      	movs	r1, #0
 8001258:	2078      	movs	r0, #120	; 0x78
 800125a:	f000 f9ef 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800125e:	2214      	movs	r2, #20
 8001260:	2100      	movs	r1, #0
 8001262:	2078      	movs	r0, #120	; 0x78
 8001264:	f000 f9ea 	bl	800163c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001268:	22af      	movs	r2, #175	; 0xaf
 800126a:	2100      	movs	r1, #0
 800126c:	2078      	movs	r0, #120	; 0x78
 800126e:	f000 f9e5 	bl	800163c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001272:	222e      	movs	r2, #46	; 0x2e
 8001274:	2100      	movs	r1, #0
 8001276:	2078      	movs	r0, #120	; 0x78
 8001278:	f000 f9e0 	bl	800163c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800127c:	2000      	movs	r0, #0
 800127e:	f000 f843 	bl	8001308 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001282:	f000 f813 	bl	80012ac <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <SSD1306_Init+0x184>)
 8001288:	2200      	movs	r2, #0
 800128a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <SSD1306_Init+0x184>)
 800128e:	2200      	movs	r2, #0
 8001290:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SSD1306_Init+0x184>)
 8001294:	2201      	movs	r2, #1
 8001296:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001298:	2301      	movs	r3, #1
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20075d2c 	.word	0x20075d2c
 80012a8:	20075cac 	.word	0x20075cac

080012ac <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	e01d      	b.n	80012f4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	3b50      	subs	r3, #80	; 0x50
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	2100      	movs	r1, #0
 80012c2:	2078      	movs	r0, #120	; 0x78
 80012c4:	f000 f9ba 	bl	800163c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	2078      	movs	r0, #120	; 0x78
 80012ce:	f000 f9b5 	bl	800163c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80012d2:	2210      	movs	r2, #16
 80012d4:	2100      	movs	r1, #0
 80012d6:	2078      	movs	r0, #120	; 0x78
 80012d8:	f000 f9b0 	bl	800163c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	01db      	lsls	r3, r3, #7
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <SSD1306_UpdateScreen+0x58>)
 80012e2:	441a      	add	r2, r3
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	2140      	movs	r1, #64	; 0x40
 80012e8:	2078      	movs	r0, #120	; 0x78
 80012ea:	f000 f95f 	bl	80015ac <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	3301      	adds	r3, #1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	d9de      	bls.n	80012b8 <SSD1306_UpdateScreen+0xc>
	}
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200758ac 	.word	0x200758ac

08001308 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <SSD1306_Fill+0x14>
 8001318:	2300      	movs	r3, #0
 800131a:	e000      	b.n	800131e <SSD1306_Fill+0x16>
 800131c:	23ff      	movs	r3, #255	; 0xff
 800131e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001322:	4619      	mov	r1, r3
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <SSD1306_Fill+0x2c>)
 8001326:	f005 f879 	bl	800641c <memset>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200758ac 	.word	0x200758ac

08001338 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
 8001342:	460b      	mov	r3, r1
 8001344:	80bb      	strh	r3, [r7, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	70fb      	strb	r3, [r7, #3]
	if (
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	2b7f      	cmp	r3, #127	; 0x7f
 800134e:	d848      	bhi.n	80013e2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	2b3f      	cmp	r3, #63	; 0x3f
 8001354:	d845      	bhi.n	80013e2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <SSD1306_DrawPixel+0xb8>)
 8001358:	791b      	ldrb	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800135e:	78fb      	ldrb	r3, [r7, #3]
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d11a      	bne.n	80013a8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001372:	88fa      	ldrh	r2, [r7, #6]
 8001374:	88bb      	ldrh	r3, [r7, #4]
 8001376:	08db      	lsrs	r3, r3, #3
 8001378:	b298      	uxth	r0, r3
 800137a:	4603      	mov	r3, r0
 800137c:	01db      	lsls	r3, r3, #7
 800137e:	4413      	add	r3, r2
 8001380:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <SSD1306_DrawPixel+0xbc>)
 8001382:	5cd3      	ldrb	r3, [r2, r3]
 8001384:	b25a      	sxtb	r2, r3
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	2101      	movs	r1, #1
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	b25b      	sxtb	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b259      	sxtb	r1, r3
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	4603      	mov	r3, r0
 800139c:	01db      	lsls	r3, r3, #7
 800139e:	4413      	add	r3, r2
 80013a0:	b2c9      	uxtb	r1, r1
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <SSD1306_DrawPixel+0xbc>)
 80013a4:	54d1      	strb	r1, [r2, r3]
 80013a6:	e01d      	b.n	80013e4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013a8:	88fa      	ldrh	r2, [r7, #6]
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	08db      	lsrs	r3, r3, #3
 80013ae:	b298      	uxth	r0, r3
 80013b0:	4603      	mov	r3, r0
 80013b2:	01db      	lsls	r3, r3, #7
 80013b4:	4413      	add	r3, r2
 80013b6:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <SSD1306_DrawPixel+0xbc>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	88bb      	ldrh	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	2101      	movs	r1, #1
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	4013      	ands	r3, r2
 80013d0:	b259      	sxtb	r1, r3
 80013d2:	88fa      	ldrh	r2, [r7, #6]
 80013d4:	4603      	mov	r3, r0
 80013d6:	01db      	lsls	r3, r3, #7
 80013d8:	4413      	add	r3, r2
 80013da:	b2c9      	uxtb	r1, r1
 80013dc:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <SSD1306_DrawPixel+0xbc>)
 80013de:	54d1      	strb	r1, [r2, r3]
 80013e0:	e000      	b.n	80013e4 <SSD1306_DrawPixel+0xac>
		return;
 80013e2:	bf00      	nop
	}
}
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20075cac 	.word	0x20075cac
 80013f4:	200758ac 	.word	0x200758ac

080013f8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	460a      	mov	r2, r1
 8001402:	80fb      	strh	r3, [r7, #6]
 8001404:	4613      	mov	r3, r2
 8001406:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001408:	4a05      	ldr	r2, [pc, #20]	; (8001420 <SSD1306_GotoXY+0x28>)
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <SSD1306_GotoXY+0x28>)
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	8053      	strh	r3, [r2, #2]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	20075cac 	.word	0x20075cac

08001424 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
 8001430:	4613      	mov	r3, r2
 8001432:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001434:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <SSD1306_Putc+0xfc>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
	if (
 8001440:	2b7f      	cmp	r3, #127	; 0x7f
 8001442:	dc07      	bgt.n	8001454 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001444:	4b36      	ldr	r3, [pc, #216]	; (8001520 <SSD1306_Putc+0xfc>)
 8001446:	885b      	ldrh	r3, [r3, #2]
 8001448:	461a      	mov	r2, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	785b      	ldrb	r3, [r3, #1]
 800144e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001450:	2b3f      	cmp	r3, #63	; 0x3f
 8001452:	dd01      	ble.n	8001458 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001454:	2300      	movs	r3, #0
 8001456:	e05e      	b.n	8001516 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	e04b      	b.n	80014f6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	3b20      	subs	r3, #32
 8001466:	6839      	ldr	r1, [r7, #0]
 8001468:	7849      	ldrb	r1, [r1, #1]
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	4619      	mov	r1, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	440b      	add	r3, r1
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	e030      	b.n	80014e4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d010      	beq.n	80014b4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <SSD1306_Putc+0xfc>)
 8001494:	881a      	ldrh	r2, [r3, #0]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	b29b      	uxth	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	b298      	uxth	r0, r3
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <SSD1306_Putc+0xfc>)
 80014a0:	885a      	ldrh	r2, [r3, #2]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	4413      	add	r3, r2
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	79ba      	ldrb	r2, [r7, #6]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff ff43 	bl	8001338 <SSD1306_DrawPixel>
 80014b2:	e014      	b.n	80014de <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <SSD1306_Putc+0xfc>)
 80014b6:	881a      	ldrh	r2, [r3, #0]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4413      	add	r3, r2
 80014be:	b298      	uxth	r0, r3
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <SSD1306_Putc+0xfc>)
 80014c2:	885a      	ldrh	r2, [r3, #2]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	b299      	uxth	r1, r3
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	bf0c      	ite	eq
 80014d2:	2301      	moveq	r3, #1
 80014d4:	2300      	movne	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	f7ff ff2d 	bl	8001338 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	3301      	adds	r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d3c8      	bcc.n	8001482 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	785b      	ldrb	r3, [r3, #1]
 80014fa:	461a      	mov	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	4293      	cmp	r3, r2
 8001500:	d3ad      	bcc.n	800145e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <SSD1306_Putc+0xfc>)
 8001504:	881a      	ldrh	r2, [r3, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4413      	add	r3, r2
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <SSD1306_Putc+0xfc>)
 8001512:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001514:	79fb      	ldrb	r3, [r7, #7]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20075cac 	.word	0x20075cac

08001524 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	4613      	mov	r3, r2
 8001530:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001532:	e012      	b.n	800155a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	79fa      	ldrb	r2, [r7, #7]
 800153a:	68b9      	ldr	r1, [r7, #8]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff71 	bl	8001424 <SSD1306_Putc>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d002      	beq.n	8001554 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	e008      	b.n	8001566 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3301      	adds	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1e8      	bne.n	8001534 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	781b      	ldrb	r3, [r3, #0]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001572:	2000      	movs	r0, #0
 8001574:	f7ff fec8 	bl	8001308 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001578:	f7ff fe98 	bl	80012ac <SSD1306_UpdateScreen>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <ssd1306_I2C_Init+0x28>)
 8001588:	607b      	str	r3, [r7, #4]
	while(p>0)
 800158a:	e002      	b.n	8001592 <ssd1306_I2C_Init+0x12>
		p--;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f9      	bne.n	800158c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	0003d090 	.word	0x0003d090

080015ac <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b0c7      	sub	sp, #284	; 0x11c
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	4604      	mov	r4, r0
 80015b4:	4608      	mov	r0, r1
 80015b6:	4639      	mov	r1, r7
 80015b8:	600a      	str	r2, [r1, #0]
 80015ba:	4619      	mov	r1, r3
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	4622      	mov	r2, r4
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	1dbb      	adds	r3, r7, #6
 80015c4:	4602      	mov	r2, r0
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	460a      	mov	r2, r1
 80015cc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	1dba      	adds	r2, r7, #6
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80015de:	e010      	b.n	8001602 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80015e0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015e4:	463a      	mov	r2, r7
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	441a      	add	r2, r3
 80015ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015ee:	3301      	adds	r3, #1
 80015f0:	7811      	ldrb	r1, [r2, #0]
 80015f2:	f107 020c 	add.w	r2, r7, #12
 80015f6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80015f8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015fc:	3301      	adds	r3, #1
 80015fe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001602:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001606:	b29b      	uxth	r3, r3
 8001608:	1d3a      	adds	r2, r7, #4
 800160a:	8812      	ldrh	r2, [r2, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8e7      	bhi.n	80015e0 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8001610:	1dfb      	adds	r3, r7, #7
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b299      	uxth	r1, r3
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	b29b      	uxth	r3, r3
 800161e:	f107 020c 	add.w	r2, r7, #12
 8001622:	200a      	movs	r0, #10
 8001624:	9000      	str	r0, [sp, #0]
 8001626:	4804      	ldr	r0, [pc, #16]	; (8001638 <ssd1306_I2C_WriteMulti+0x8c>)
 8001628:	f001 fa7c 	bl	8002b24 <HAL_I2C_Master_Transmit>
}
 800162c:	bf00      	nop
 800162e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}
 8001636:	bf00      	nop
 8001638:	20075d2c 	.word	0x20075d2c

0800163c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af02      	add	r7, sp, #8
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
 8001646:	460b      	mov	r3, r1
 8001648:	71bb      	strb	r3, [r7, #6]
 800164a:	4613      	mov	r3, r2
 800164c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800164e:	79bb      	ldrb	r3, [r7, #6]
 8001650:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001652:	797b      	ldrb	r3, [r7, #5]
 8001654:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	b299      	uxth	r1, r3
 800165a:	f107 020c 	add.w	r2, r7, #12
 800165e:	230a      	movs	r3, #10
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2302      	movs	r3, #2
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <ssd1306_I2C_Write+0x38>)
 8001666:	f001 fa5d 	bl	8002b24 <HAL_I2C_Master_Transmit>
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20075d2c 	.word	0x20075d2c

08001678 <SSD1306_Menu>:

/////////////////////////////////////////////////////////////////////////////////////////
//////////////////////[BASE MENU SCREEN]////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
void SSD1306_Menu()
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	SSD1306_Init (); 								// initialize the OLED screen
 800167c:	f7ff fd52 	bl	8001124 <SSD1306_Init>
	SSD1306_Clear();								// clear screen of any previous input information
 8001680:	f7ff ff75 	bl	800156e <SSD1306_Clear>
	SSD1306_GotoXY (0, 0); 							// go to 0, 0
 8001684:	2100      	movs	r1, #0
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff feb6 	bl	80013f8 <SSD1306_GotoXY>
	SSD1306_Puts ("Music Synth", &Font_11x18, 1); 	// print Music Synth
 800168c:	2201      	movs	r2, #1
 800168e:	4916      	ldr	r1, [pc, #88]	; (80016e8 <SSD1306_Menu+0x70>)
 8001690:	4816      	ldr	r0, [pc, #88]	; (80016ec <SSD1306_Menu+0x74>)
 8001692:	f7ff ff47 	bl	8001524 <SSD1306_Puts>
	SSD1306_GotoXY (0, 20); 						// go to 0, 20
 8001696:	2114      	movs	r1, #20
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff fead 	bl	80013f8 <SSD1306_GotoXY>
	SSD1306_Puts ("By:", &Font_7x10, 1); 			// print by
 800169e:	2201      	movs	r2, #1
 80016a0:	4913      	ldr	r1, [pc, #76]	; (80016f0 <SSD1306_Menu+0x78>)
 80016a2:	4814      	ldr	r0, [pc, #80]	; (80016f4 <SSD1306_Menu+0x7c>)
 80016a4:	f7ff ff3e 	bl	8001524 <SSD1306_Puts>
	SSD1306_GotoXY (0, 30);							// go to 0, 30
 80016a8:	211e      	movs	r1, #30
 80016aa:	2000      	movs	r0, #0
 80016ac:	f7ff fea4 	bl	80013f8 <SSD1306_GotoXY>
	SSD1306_Puts ("Joshua Mendoza", &Font_7x10, 1);	// print group member 1
 80016b0:	2201      	movs	r2, #1
 80016b2:	490f      	ldr	r1, [pc, #60]	; (80016f0 <SSD1306_Menu+0x78>)
 80016b4:	4810      	ldr	r0, [pc, #64]	; (80016f8 <SSD1306_Menu+0x80>)
 80016b6:	f7ff ff35 	bl	8001524 <SSD1306_Puts>
	SSD1306_GotoXY (0, 40);							// go to 0, 40
 80016ba:	2128      	movs	r1, #40	; 0x28
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff fe9b 	bl	80013f8 <SSD1306_GotoXY>
	SSD1306_Puts ("Megan Abundo", &Font_7x10, 1);	// print group member 2
 80016c2:	2201      	movs	r2, #1
 80016c4:	490a      	ldr	r1, [pc, #40]	; (80016f0 <SSD1306_Menu+0x78>)
 80016c6:	480d      	ldr	r0, [pc, #52]	; (80016fc <SSD1306_Menu+0x84>)
 80016c8:	f7ff ff2c 	bl	8001524 <SSD1306_Puts>
	SSD1306_GotoXY (0, 50);							// go to 0,50
 80016cc:	2132      	movs	r1, #50	; 0x32
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff fe92 	bl	80013f8 <SSD1306_GotoXY>
	SSD1306_Puts ("Paris Villarrial", &Font_7x10, 1);// print group member 3
 80016d4:	2201      	movs	r2, #1
 80016d6:	4906      	ldr	r1, [pc, #24]	; (80016f0 <SSD1306_Menu+0x78>)
 80016d8:	4809      	ldr	r0, [pc, #36]	; (8001700 <SSD1306_Menu+0x88>)
 80016da:	f7ff ff23 	bl	8001524 <SSD1306_Puts>
	SSD1306_UpdateScreen(); 						// update screen with new input information
 80016de:	f7ff fde5 	bl	80012ac <SSD1306_UpdateScreen>

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008
 80016ec:	08006de0 	.word	0x08006de0
 80016f0:	20000000 	.word	0x20000000
 80016f4:	08006dec 	.word	0x08006dec
 80016f8:	08006df0 	.word	0x08006df0
 80016fc:	08006e00 	.word	0x08006e00
 8001700:	08006e10 	.word	0x08006e10

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_MspInit+0x44>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <HAL_MspInit+0x44>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <HAL_MspInit+0x44>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_MspInit+0x44>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_MspInit+0x44>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_MspInit+0x44>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_I2C_MspInit+0x7c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d127      	bne.n	80017be <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_I2C_MspInit+0x80>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a16      	ldr	r2, [pc, #88]	; (80017cc <HAL_I2C_MspInit+0x80>)
 8001774:	f043 0320 	orr.w	r3, r3, #32
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_I2C_MspInit+0x80>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001786:	2303      	movs	r3, #3
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178a:	2312      	movs	r3, #18
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001796:	2304      	movs	r3, #4
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	480b      	ldr	r0, [pc, #44]	; (80017d0 <HAL_I2C_MspInit+0x84>)
 80017a2:	f000 ff69 	bl	8002678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_I2C_MspInit+0x80>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_I2C_MspInit+0x80>)
 80017ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_I2C_MspInit+0x80>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40005800 	.word	0x40005800
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40021400 	.word	0x40021400

080017d4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_I2S_MspInit+0x7c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d127      	bne.n	8001846 <HAL_I2S_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <HAL_I2S_MspInit+0x80>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a16      	ldr	r2, [pc, #88]	; (8001854 <HAL_I2S_MspInit+0x80>)
 80017fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <HAL_I2S_MspInit+0x80>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_I2S_MspInit+0x80>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a10      	ldr	r2, [pc, #64]	; (8001854 <HAL_I2S_MspInit+0x80>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_I2S_MspInit+0x80>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001826:	23b0      	movs	r3, #176	; 0xb0
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001836:	2305      	movs	r3, #5
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <HAL_I2S_MspInit+0x84>)
 8001842:	f000 ff19 	bl	8002678 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40013000 	.word	0x40013000
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000

0800185c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a3d      	ldr	r2, [pc, #244]	; (8001970 <HAL_UART_MspInit+0x114>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d173      	bne.n	8001966 <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800187e:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <HAL_UART_MspInit+0x118>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a3c      	ldr	r2, [pc, #240]	; (8001974 <HAL_UART_MspInit+0x118>)
 8001884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b3a      	ldr	r3, [pc, #232]	; (8001974 <HAL_UART_MspInit+0x118>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b37      	ldr	r3, [pc, #220]	; (8001974 <HAL_UART_MspInit+0x118>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a36      	ldr	r2, [pc, #216]	; (8001974 <HAL_UART_MspInit+0x118>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b34      	ldr	r3, [pc, #208]	; (8001974 <HAL_UART_MspInit+0x118>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	4b31      	ldr	r3, [pc, #196]	; (8001974 <HAL_UART_MspInit+0x118>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a30      	ldr	r2, [pc, #192]	; (8001974 <HAL_UART_MspInit+0x118>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <HAL_UART_MspInit+0x118>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018c6:	2301      	movs	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018d6:	2308      	movs	r3, #8
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4825      	ldr	r0, [pc, #148]	; (8001978 <HAL_UART_MspInit+0x11c>)
 80018e2:	f000 fec9 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018f8:	2308      	movs	r3, #8
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	481e      	ldr	r0, [pc, #120]	; (800197c <HAL_UART_MspInit+0x120>)
 8001904:	f000 feb8 	bl	8002678 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_UART_MspInit+0x124>)
 800190a:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <HAL_UART_MspInit+0x128>)
 800190c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <HAL_UART_MspInit+0x124>)
 8001910:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001914:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <HAL_UART_MspInit+0x124>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_UART_MspInit+0x124>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_UART_MspInit+0x124>)
 8001924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001928:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_UART_MspInit+0x124>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_UART_MspInit+0x124>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_UART_MspInit+0x124>)
 8001938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800193c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_UART_MspInit+0x124>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_UART_MspInit+0x124>)
 8001946:	2200      	movs	r2, #0
 8001948:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <HAL_UART_MspInit+0x124>)
 800194c:	f000 fb1c 	bl	8001f88 <HAL_DMA_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8001956:	f7ff fbdf 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_UART_MspInit+0x124>)
 800195e:	671a      	str	r2, [r3, #112]	; 0x70
 8001960:	4a07      	ldr	r2, [pc, #28]	; (8001980 <HAL_UART_MspInit+0x124>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	; 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40004c00 	.word	0x40004c00
 8001974:	40023800 	.word	0x40023800
 8001978:	40020000 	.word	0x40020000
 800197c:	40020800 	.word	0x40020800
 8001980:	20075cc4 	.word	0x20075cc4
 8001984:	40026040 	.word	0x40026040

08001988 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a30      	ldr	r2, [pc, #192]	; (8001a58 <HAL_SAI_MspInit+0xd0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d159      	bne.n	8001a4e <HAL_SAI_MspInit+0xc6>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800199a:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <HAL_SAI_MspInit+0xd4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10b      	bne.n	80019ba <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80019a2:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <HAL_SAI_MspInit+0xd8>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a2e      	ldr	r2, [pc, #184]	; (8001a60 <HAL_SAI_MspInit+0xd8>)
 80019a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <HAL_SAI_MspInit+0xd8>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_SAI_MspInit+0xd4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_SAI_MspInit+0xd4>)
 80019c2:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80019c4:	2370      	movs	r3, #112	; 0x70
 80019c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80019d4:	2306      	movs	r3, #6
 80019d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	4619      	mov	r1, r3
 80019de:	4821      	ldr	r0, [pc, #132]	; (8001a64 <HAL_SAI_MspInit+0xdc>)
 80019e0:	f000 fe4a 	bl	8002678 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 80019e4:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 80019e6:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <HAL_SAI_MspInit+0xe4>)
 80019e8:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f0:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 80019f2:	2240      	movs	r2, #64	; 0x40
 80019f4:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 80019fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a02:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 8001a06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a0a:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a0c:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 8001a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a12:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001a26:	4810      	ldr	r0, [pc, #64]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 8001a28:	f000 faae 	bl	8001f88 <HAL_DMA_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_SAI_MspInit+0xae>
    {
      Error_Handler();
 8001a32:	f7ff fb71 	bl	8001118 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 8001a3a:	671a      	str	r2, [r3, #112]	; 0x70
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 8001a46:	66da      	str	r2, [r3, #108]	; 0x6c
 8001a48:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_SAI_MspInit+0xe0>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8001a4e:	bf00      	nop
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40015804 	.word	0x40015804
 8001a5c:	20075cb4 	.word	0x20075cb4
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40021000 	.word	0x40021000
 8001a68:	20075d7c 	.word	0x20075d7c
 8001a6c:	40026428 	.word	0x40026428

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <NMI_Handler+0x4>

08001a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <MemManage_Handler+0x4>

08001a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abc:	f000 f932 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA1_Stream2_IRQHandler+0x10>)
 8001aca:	f000 fb6b 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20075cc4 	.word	0x20075cc4

08001ad8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <DMA2_Stream1_IRQHandler+0x10>)
 8001ade:	f000 fb61 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20075d7c 	.word	0x20075d7c

08001aec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e00a      	b.n	8001b14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001afe:	f3af 8000 	nop.w
 8001b02:	4601      	mov	r1, r0
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	60ba      	str	r2, [r7, #8]
 8001b0a:	b2ca      	uxtb	r2, r1
 8001b0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbf0      	blt.n	8001afe <_read+0x12>
	}

return len;
 8001b1c:	687b      	ldr	r3, [r7, #4]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e009      	b.n	8001b4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	60ba      	str	r2, [r7, #8]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	dbf1      	blt.n	8001b38 <_write+0x12>
	}
	return len;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_close>:

int _close(int file)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
	return -1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b86:	605a      	str	r2, [r3, #4]
	return 0;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <_isatty>:

int _isatty(int file)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f004 fbd6 	bl	80063a8 <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20080000 	.word	0x20080000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	20075cb8 	.word	0x20075cb8
 8001c30:	20075f78 	.word	0x20075f78

08001c34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <SystemInit+0x20>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <SystemInit+0x20>)
 8001c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c5e:	490e      	ldr	r1, [pc, #56]	; (8001c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c64:	e002      	b.n	8001c6c <LoopCopyDataInit>

08001c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6a:	3304      	adds	r3, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c70:	d3f9      	bcc.n	8001c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c72:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c74:	4c0b      	ldr	r4, [pc, #44]	; (8001ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c78:	e001      	b.n	8001c7e <LoopFillZerobss>

08001c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c7c:	3204      	adds	r2, #4

08001c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c82:	f7ff ffd7 	bl	8001c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c86:	f004 fb95 	bl	80063b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8a:	f7fe fcc5 	bl	8000618 <main>
  bx  lr    
 8001c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c90:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c98:	20075384 	.word	0x20075384
  ldr r2, =_sidata
 8001c9c:	0800855c 	.word	0x0800855c
  ldr r2, =_sbss
 8001ca0:	20075384 	.word	0x20075384
  ldr r4, =_ebss
 8001ca4:	20075f74 	.word	0x20075f74

08001ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC_IRQHandler>

08001caa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cae:	2003      	movs	r0, #3
 8001cb0:	f000 f928 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb4:	200f      	movs	r0, #15
 8001cb6:	f000 f805 	bl	8001cc4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001cba:	f7ff fd23 	bl	8001704 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_InitTick+0x54>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x58>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f943 	bl	8001f6e <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00e      	b.n	8001d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d80a      	bhi.n	8001d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f000 f90b 	bl	8001f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d04:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <HAL_InitTick+0x5c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20075314 	.word	0x20075314
 8001d1c:	2007531c 	.word	0x2007531c
 8001d20:	20075318 	.word	0x20075318

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x20>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_IncTick+0x24>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	2007531c 	.word	0x2007531c
 8001d48:	20075f60 	.word	0x20075f60

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_GetTick+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20075f60 	.word	0x20075f60

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <__NVIC_SetPriorityGrouping+0x40>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <__NVIC_SetPriorityGrouping+0x40>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00
 8001da8:	05fa0000 	.word	0x05fa0000

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <__NVIC_EnableIRQ+0x38>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f7ff ff8e 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff29 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff3e 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff8e 	bl	8001e58 <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5d 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff31 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffa2 	bl	8001ec0 <SysTick_Config>
 8001f7c:	4603      	mov	r3, r0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff feda 	bl	8001d4c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e099      	b.n	80020d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0201 	bic.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc4:	e00f      	b.n	8001fe6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fc6:	f7ff fec1 	bl	8001d4c <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d908      	bls.n	8001fe6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2203      	movs	r2, #3
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e078      	b.n	80020d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1e8      	bne.n	8001fc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <HAL_DMA_Init+0x158>)
 8002000:	4013      	ands	r3, r2
 8002002:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002012:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4313      	orrs	r3, r2
 8002036:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	2b04      	cmp	r3, #4
 800203e:	d107      	bne.n	8002050 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	4313      	orrs	r3, r2
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4313      	orrs	r3, r2
 800204e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f023 0307 	bic.w	r3, r3, #7
 8002066:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	2b04      	cmp	r3, #4
 8002078:	d117      	bne.n	80020aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4313      	orrs	r3, r2
 8002082:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00e      	beq.n	80020aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fa77 	bl	8002580 <DMA_CheckFifoParam>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2240      	movs	r2, #64	; 0x40
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020a6:	2301      	movs	r3, #1
 80020a8:	e016      	b.n	80020d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fa2e 	bl	8002514 <DMA_CalcBaseAndBitshift>
 80020b8:	4603      	mov	r3, r0
 80020ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	223f      	movs	r2, #63	; 0x3f
 80020c2:	409a      	lsls	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	e010803f 	.word	0xe010803f

080020e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_DMA_Start_IT+0x26>
 8002106:	2302      	movs	r3, #2
 8002108:	e048      	b.n	800219c <HAL_DMA_Start_IT+0xb8>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d137      	bne.n	800218e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2202      	movs	r2, #2
 8002122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f9c0 	bl	80024b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	223f      	movs	r2, #63	; 0x3f
 800213e:	409a      	lsls	r2, r3
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0216 	orr.w	r2, r2, #22
 8002152:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002162:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0208 	orr.w	r2, r2, #8
 800217a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e005      	b.n	800219a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002196:	2302      	movs	r3, #2
 8002198:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800219a:	7dfb      	ldrb	r3, [r7, #23]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80021b0:	4b92      	ldr	r3, [pc, #584]	; (80023fc <HAL_DMA_IRQHandler+0x258>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a92      	ldr	r2, [pc, #584]	; (8002400 <HAL_DMA_IRQHandler+0x25c>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	0a9b      	lsrs	r3, r3, #10
 80021bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	2208      	movs	r2, #8
 80021d0:	409a      	lsls	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01a      	beq.n	8002210 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0204 	bic.w	r2, r2, #4
 80021f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	2208      	movs	r2, #8
 80021fe:	409a      	lsls	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	2201      	movs	r2, #1
 8002216:	409a      	lsls	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d012      	beq.n	8002246 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	2201      	movs	r2, #1
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f043 0202 	orr.w	r2, r3, #2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	2204      	movs	r2, #4
 800224c:	409a      	lsls	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d012      	beq.n	800227c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	2204      	movs	r2, #4
 800226a:	409a      	lsls	r2, r3
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	f043 0204 	orr.w	r2, r3, #4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	2210      	movs	r2, #16
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d043      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d03c      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	2210      	movs	r2, #16
 80022a0:	409a      	lsls	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d018      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d024      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
 80022d2:	e01f      	b.n	8002314 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01b      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	4798      	blx	r3
 80022e4:	e016      	b.n	8002314 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0208 	bic.w	r2, r2, #8
 8002302:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	2220      	movs	r2, #32
 800231a:	409a      	lsls	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 808e 	beq.w	8002442 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8086 	beq.w	8002442 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	2220      	movs	r2, #32
 800233c:	409a      	lsls	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b05      	cmp	r3, #5
 800234c:	d136      	bne.n	80023bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0216 	bic.w	r2, r2, #22
 800235c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800236c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <HAL_DMA_IRQHandler+0x1da>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0208 	bic.w	r2, r2, #8
 800238c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	223f      	movs	r2, #63	; 0x3f
 8002394:	409a      	lsls	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d07d      	beq.n	80024ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
        }
        return;
 80023ba:	e078      	b.n	80024ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d01c      	beq.n	8002404 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d108      	bne.n	80023ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d030      	beq.n	8002442 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
 80023e8:	e02b      	b.n	8002442 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d027      	beq.n	8002442 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	4798      	blx	r3
 80023fa:	e022      	b.n	8002442 <HAL_DMA_IRQHandler+0x29e>
 80023fc:	20075314 	.word	0x20075314
 8002400:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0210 	bic.w	r2, r2, #16
 8002420:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	2b00      	cmp	r3, #0
 8002448:	d032      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d022      	beq.n	800249c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2205      	movs	r2, #5
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3301      	adds	r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	429a      	cmp	r2, r3
 8002478:	d307      	bcc.n	800248a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f2      	bne.n	800246e <HAL_DMA_IRQHandler+0x2ca>
 8002488:	e000      	b.n	800248c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800248a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
 80024ac:	e000      	b.n	80024b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80024ae:	bf00      	nop
    }
  }
}
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop

080024b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b40      	cmp	r3, #64	; 0x40
 80024e4:	d108      	bne.n	80024f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024f6:	e007      	b.n	8002508 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	60da      	str	r2, [r3, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	3b10      	subs	r3, #16
 8002524:	4a13      	ldr	r2, [pc, #76]	; (8002574 <DMA_CalcBaseAndBitshift+0x60>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800252e:	4a12      	ldr	r2, [pc, #72]	; (8002578 <DMA_CalcBaseAndBitshift+0x64>)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d908      	bls.n	8002554 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <DMA_CalcBaseAndBitshift+0x68>)
 800254a:	4013      	ands	r3, r2
 800254c:	1d1a      	adds	r2, r3, #4
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	659a      	str	r2, [r3, #88]	; 0x58
 8002552:	e006      	b.n	8002562 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <DMA_CalcBaseAndBitshift+0x68>)
 800255c:	4013      	ands	r3, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	aaaaaaab 	.word	0xaaaaaaab
 8002578:	080084e0 	.word	0x080084e0
 800257c:	fffffc00 	.word	0xfffffc00

08002580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d11f      	bne.n	80025da <DMA_CheckFifoParam+0x5a>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d856      	bhi.n	800264e <DMA_CheckFifoParam+0xce>
 80025a0:	a201      	add	r2, pc, #4	; (adr r2, 80025a8 <DMA_CheckFifoParam+0x28>)
 80025a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a6:	bf00      	nop
 80025a8:	080025b9 	.word	0x080025b9
 80025ac:	080025cb 	.word	0x080025cb
 80025b0:	080025b9 	.word	0x080025b9
 80025b4:	0800264f 	.word	0x0800264f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d046      	beq.n	8002652 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c8:	e043      	b.n	8002652 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025d2:	d140      	bne.n	8002656 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d8:	e03d      	b.n	8002656 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e2:	d121      	bne.n	8002628 <DMA_CheckFifoParam+0xa8>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d837      	bhi.n	800265a <DMA_CheckFifoParam+0xda>
 80025ea:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <DMA_CheckFifoParam+0x70>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002601 	.word	0x08002601
 80025f4:	08002607 	.word	0x08002607
 80025f8:	08002601 	.word	0x08002601
 80025fc:	08002619 	.word	0x08002619
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      break;
 8002604:	e030      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d025      	beq.n	800265e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002616:	e022      	b.n	800265e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002620:	d11f      	bne.n	8002662 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002626:	e01c      	b.n	8002662 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d903      	bls.n	8002636 <DMA_CheckFifoParam+0xb6>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d003      	beq.n	800263c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002634:	e018      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
      break;
 800263a:	e015      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00e      	beq.n	8002666 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      break;
 800264c:	e00b      	b.n	8002666 <DMA_CheckFifoParam+0xe6>
      break;
 800264e:	bf00      	nop
 8002650:	e00a      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 8002652:	bf00      	nop
 8002654:	e008      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 8002656:	bf00      	nop
 8002658:	e006      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 800265a:	bf00      	nop
 800265c:	e004      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 800265e:	bf00      	nop
 8002660:	e002      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;   
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 8002666:	bf00      	nop
    }
  } 
  
  return status; 
 8002668:	7bfb      	ldrb	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop

08002678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002678:	b480      	push	{r7}
 800267a:	b089      	sub	sp, #36	; 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	e175      	b.n	8002984 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002698:	2201      	movs	r2, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	f040 8164 	bne.w	800297e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d00b      	beq.n	80026d6 <HAL_GPIO_Init+0x5e>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d007      	beq.n	80026d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ca:	2b11      	cmp	r3, #17
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b12      	cmp	r3, #18
 80026d4:	d130      	bne.n	8002738 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800270c:	2201      	movs	r2, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 0201 	and.w	r2, r3, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x100>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b12      	cmp	r3, #18
 8002776:	d123      	bne.n	80027c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	08da      	lsrs	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3208      	adds	r2, #8
 8002780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	08da      	lsrs	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3208      	adds	r2, #8
 80027ba:	69b9      	ldr	r1, [r7, #24]
 80027bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0203 	and.w	r2, r3, #3
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80be 	beq.w	800297e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002802:	4b66      	ldr	r3, [pc, #408]	; (800299c <HAL_GPIO_Init+0x324>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	4a65      	ldr	r2, [pc, #404]	; (800299c <HAL_GPIO_Init+0x324>)
 8002808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800280c:	6453      	str	r3, [r2, #68]	; 0x44
 800280e:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_GPIO_Init+0x324>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800281a:	4a61      	ldr	r2, [pc, #388]	; (80029a0 <HAL_GPIO_Init+0x328>)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	220f      	movs	r2, #15
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a58      	ldr	r2, [pc, #352]	; (80029a4 <HAL_GPIO_Init+0x32c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d037      	beq.n	80028b6 <HAL_GPIO_Init+0x23e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a57      	ldr	r2, [pc, #348]	; (80029a8 <HAL_GPIO_Init+0x330>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d031      	beq.n	80028b2 <HAL_GPIO_Init+0x23a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a56      	ldr	r2, [pc, #344]	; (80029ac <HAL_GPIO_Init+0x334>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d02b      	beq.n	80028ae <HAL_GPIO_Init+0x236>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a55      	ldr	r2, [pc, #340]	; (80029b0 <HAL_GPIO_Init+0x338>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d025      	beq.n	80028aa <HAL_GPIO_Init+0x232>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a54      	ldr	r2, [pc, #336]	; (80029b4 <HAL_GPIO_Init+0x33c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01f      	beq.n	80028a6 <HAL_GPIO_Init+0x22e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a53      	ldr	r2, [pc, #332]	; (80029b8 <HAL_GPIO_Init+0x340>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d019      	beq.n	80028a2 <HAL_GPIO_Init+0x22a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_GPIO_Init+0x344>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_GPIO_Init+0x226>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a51      	ldr	r2, [pc, #324]	; (80029c0 <HAL_GPIO_Init+0x348>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00d      	beq.n	800289a <HAL_GPIO_Init+0x222>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a50      	ldr	r2, [pc, #320]	; (80029c4 <HAL_GPIO_Init+0x34c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d007      	beq.n	8002896 <HAL_GPIO_Init+0x21e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4f      	ldr	r2, [pc, #316]	; (80029c8 <HAL_GPIO_Init+0x350>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_GPIO_Init+0x21a>
 800288e:	2309      	movs	r3, #9
 8002890:	e012      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 8002892:	230a      	movs	r3, #10
 8002894:	e010      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 8002896:	2308      	movs	r3, #8
 8002898:	e00e      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 800289a:	2307      	movs	r3, #7
 800289c:	e00c      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 800289e:	2306      	movs	r3, #6
 80028a0:	e00a      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028a2:	2305      	movs	r3, #5
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028a6:	2304      	movs	r3, #4
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028b6:	2300      	movs	r3, #0
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028c8:	4935      	ldr	r1, [pc, #212]	; (80029a0 <HAL_GPIO_Init+0x328>)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d6:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <HAL_GPIO_Init+0x354>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028fa:	4a34      	ldr	r2, [pc, #208]	; (80029cc <HAL_GPIO_Init+0x354>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002900:	4b32      	ldr	r3, [pc, #200]	; (80029cc <HAL_GPIO_Init+0x354>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002924:	4a29      	ldr	r2, [pc, #164]	; (80029cc <HAL_GPIO_Init+0x354>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292a:	4b28      	ldr	r3, [pc, #160]	; (80029cc <HAL_GPIO_Init+0x354>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294e:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <HAL_GPIO_Init+0x354>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_GPIO_Init+0x354>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002978:	4a14      	ldr	r2, [pc, #80]	; (80029cc <HAL_GPIO_Init+0x354>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f67f ae86 	bls.w	8002698 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3724      	adds	r7, #36	; 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40021400 	.word	0x40021400
 80029bc:	40021800 	.word	0x40021800
 80029c0:	40021c00 	.word	0x40021c00
 80029c4:	40022000 	.word	0x40022000
 80029c8:	40022400 	.word	0x40022400
 80029cc:	40013c00 	.word	0x40013c00

080029d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
 80029dc:	4613      	mov	r3, r2
 80029de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e0:	787b      	ldrb	r3, [r7, #1]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029ec:	e003      	b.n	80029f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	041a      	lsls	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	619a      	str	r2, [r3, #24]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e07f      	b.n	8002b16 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe fe8e 	bl	800174c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	; 0x24
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	e006      	b.n	8002a8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d104      	bne.n	8002a9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_I2C_Init+0x11c>)
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002abc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	ea42 0103 	orr.w	r1, r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	021a      	lsls	r2, r3, #8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69d9      	ldr	r1, [r3, #28]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1a      	ldr	r2, [r3, #32]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	02008000 	.word	0x02008000

08002b24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	460b      	mov	r3, r1
 8002b32:	817b      	strh	r3, [r7, #10]
 8002b34:	4613      	mov	r3, r2
 8002b36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	f040 80da 	bne.w	8002cfa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_I2C_Master_Transmit+0x30>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e0d3      	b.n	8002cfc <HAL_I2C_Master_Transmit+0x1d8>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b5c:	f7ff f8f6 	bl	8001d4c <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2319      	movs	r3, #25
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f9f8 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0be      	b.n	8002cfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2221      	movs	r2, #33	; 0x21
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2210      	movs	r2, #16
 8002b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	893a      	ldrh	r2, [r7, #8]
 8002b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2bff      	cmp	r3, #255	; 0xff
 8002bae:	d90e      	bls.n	8002bce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	22ff      	movs	r2, #255	; 0xff
 8002bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	8979      	ldrh	r1, [r7, #10]
 8002bbe:	4b51      	ldr	r3, [pc, #324]	; (8002d04 <HAL_I2C_Master_Transmit+0x1e0>)
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 faee 	bl	80031a8 <I2C_TransferConfig>
 8002bcc:	e06c      	b.n	8002ca8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	8979      	ldrh	r1, [r7, #10]
 8002be0:	4b48      	ldr	r3, [pc, #288]	; (8002d04 <HAL_I2C_Master_Transmit+0x1e0>)
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 fadd 	bl	80031a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002bee:	e05b      	b.n	8002ca8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	6a39      	ldr	r1, [r7, #32]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f9f5 	bl	8002fe4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e07b      	b.n	8002cfc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d034      	beq.n	8002ca8 <HAL_I2C_Master_Transmit+0x184>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d130      	bne.n	8002ca8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f987 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e04d      	b.n	8002cfc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2bff      	cmp	r3, #255	; 0xff
 8002c68:	d90e      	bls.n	8002c88 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	22ff      	movs	r2, #255	; 0xff
 8002c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	8979      	ldrh	r1, [r7, #10]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fa91 	bl	80031a8 <I2C_TransferConfig>
 8002c86:	e00f      	b.n	8002ca8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	8979      	ldrh	r1, [r7, #10]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fa80 	bl	80031a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d19e      	bne.n	8002bf0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	6a39      	ldr	r1, [r7, #32]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f9d4 	bl	8003064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e01a      	b.n	8002cfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_I2C_Master_Transmit+0x1e4>)
 8002cda:	400b      	ands	r3, r1
 8002cdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e000      	b.n	8002cfc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
  }
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	80002000 	.word	0x80002000
 8002d08:	fe00e800 	.word	0xfe00e800

08002d0c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	f040 80ef 	bne.w	8002f0c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e0e5      	b.n	8002f0e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_I2C_IsDeviceReady+0x44>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e0de      	b.n	8002f0e <HAL_I2C_IsDeviceReady+0x202>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2224      	movs	r2, #36	; 0x24
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_I2C_IsDeviceReady+0x6e>
 8002d6e:	897b      	ldrh	r3, [r7, #10]
 8002d70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d74:	4b68      	ldr	r3, [pc, #416]	; (8002f18 <HAL_I2C_IsDeviceReady+0x20c>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	e004      	b.n	8002d84 <HAL_I2C_IsDeviceReady+0x78>
 8002d7a:	897b      	ldrh	r3, [r7, #10]
 8002d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d80:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002d8a:	f7fe ffdf 	bl	8001d4c <HAL_GetTick>
 8002d8e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002dbc:	e034      	b.n	8002e28 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d01a      	beq.n	8002dfc <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dc6:	f7fe ffc1 	bl	8001d4c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <HAL_I2C_IsDeviceReady+0xd0>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10f      	bne.n	8002dfc <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e088      	b.n	8002f0e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	bf0c      	ite	eq
 8002e0a:	2301      	moveq	r3, #1
 8002e0c:	2300      	movne	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002e28:	7ffb      	ldrb	r3, [r7, #31]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <HAL_I2C_IsDeviceReady+0x128>
 8002e2e:	7fbb      	ldrb	r3, [r7, #30]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0c4      	beq.n	8002dbe <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d01a      	beq.n	8002e78 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2120      	movs	r1, #32
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f889 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e058      	b.n	8002f0e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2220      	movs	r2, #32
 8002e62:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e04a      	b.n	8002f0e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2120      	movs	r1, #32
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f86e 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e03d      	b.n	8002f0e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2210      	movs	r2, #16
 8002e98:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d118      	bne.n	8002edc <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eb8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2120      	movs	r1, #32
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f84d 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e01c      	b.n	8002f0e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	f63f af3d 	bhi.w	8002d66 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3720      	adds	r7, #32
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	02002000 	.word	0x02002000

08002f1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d103      	bne.n	8002f3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d007      	beq.n	8002f58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	619a      	str	r2, [r3, #24]
  }
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f74:	e022      	b.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d01e      	beq.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7fe fee5 	bl	8001d4c <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d113      	bne.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e00f      	b.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d0cd      	beq.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ff0:	e02c      	b.n	800304c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f870 	bl	80030dc <I2C_IsAcknowledgeFailed>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e02a      	b.n	800305c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d01e      	beq.n	800304c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300e:	f7fe fe9d 	bl	8001d4c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	429a      	cmp	r2, r3
 800301c:	d302      	bcc.n	8003024 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d113      	bne.n	800304c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e007      	b.n	800305c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b02      	cmp	r3, #2
 8003058:	d1cb      	bne.n	8002ff2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003070:	e028      	b.n	80030c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f830 	bl	80030dc <I2C_IsAcknowledgeFailed>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e026      	b.n	80030d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003086:	f7fe fe61 	bl	8001d4c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d113      	bne.n	80030c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	f043 0220 	orr.w	r2, r3, #32
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e007      	b.n	80030d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d1cf      	bne.n	8003072 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b10      	cmp	r3, #16
 80030f4:	d151      	bne.n	800319a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f6:	e022      	b.n	800313e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d01e      	beq.n	800313e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003100:	f7fe fe24 	bl	8001d4c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	429a      	cmp	r2, r3
 800310e:	d302      	bcc.n	8003116 <I2C_IsAcknowledgeFailed+0x3a>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d113      	bne.n	800313e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e02e      	b.n	800319c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b20      	cmp	r3, #32
 800314a:	d1d5      	bne.n	80030f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2210      	movs	r2, #16
 8003152:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2220      	movs	r2, #32
 800315a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff fedd 	bl	8002f1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <I2C_IsAcknowledgeFailed+0xc8>)
 800316e:	400b      	ands	r3, r1
 8003170:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f043 0204 	orr.w	r2, r3, #4
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	fe00e800 	.word	0xfe00e800

080031a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	460b      	mov	r3, r1
 80031b4:	817b      	strh	r3, [r7, #10]
 80031b6:	4613      	mov	r3, r2
 80031b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	0d5b      	lsrs	r3, r3, #21
 80031c4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <I2C_TransferConfig+0x58>)
 80031ca:	430b      	orrs	r3, r1
 80031cc:	43db      	mvns	r3, r3
 80031ce:	ea02 0103 	and.w	r1, r2, r3
 80031d2:	897b      	ldrh	r3, [r7, #10]
 80031d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031d8:	7a7b      	ldrb	r3, [r7, #9]
 80031da:	041b      	lsls	r3, r3, #16
 80031dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	431a      	orrs	r2, r3
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	431a      	orrs	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	03ff63ff 	.word	0x03ff63ff

08003204 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b20      	cmp	r3, #32
 8003218:	d138      	bne.n	800328c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003224:	2302      	movs	r3, #2
 8003226:	e032      	b.n	800328e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2224      	movs	r2, #36	; 0x24
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003256:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	e000      	b.n	800328e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800328c:	2302      	movs	r3, #2
  }
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800329a:	b480      	push	{r7}
 800329c:	b085      	sub	sp, #20
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d139      	bne.n	8003324 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e033      	b.n	8003326 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2224      	movs	r2, #36	; 0x24
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e0d2      	b.n	80034ec <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fe fa3a 	bl	80017d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69d9      	ldr	r1, [r3, #28]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4b60      	ldr	r3, [pc, #384]	; (80034f4 <HAL_I2S_Init+0x1c0>)
 8003374:	400b      	ands	r3, r1
 8003376:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2202      	movs	r2, #2
 800337e:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d067      	beq.n	8003458 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003390:	2310      	movs	r3, #16
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	e001      	b.n	800339a <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003396:	2320      	movs	r3, #32
 8003398:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d802      	bhi.n	80033a8 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d102      	bne.n	80033b6 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 80033b0:	4b51      	ldr	r3, [pc, #324]	; (80034f8 <HAL_I2S_Init+0x1c4>)
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e003      	b.n	80033be <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa28 	bl	800380c <I2S_GetClockFreq>
 80033bc:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c6:	d125      	bne.n	8003414 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d010      	beq.n	80033f2 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	461a      	mov	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ec:	3305      	adds	r3, #5
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	e01f      	b.n	8003432 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	461a      	mov	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	3305      	adds	r3, #5
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	e00e      	b.n	8003432 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	fbb2 f2f3 	udiv	r2, r2, r3
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	461a      	mov	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	fbb2 f3f3 	udiv	r3, r2, r3
 800342e:	3305      	adds	r3, #5
 8003430:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4a31      	ldr	r2, [pc, #196]	; (80034fc <HAL_I2S_Init+0x1c8>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	08db      	lsrs	r3, r3, #3
 800343c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	085b      	lsrs	r3, r3, #1
 800344e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	e003      	b.n	8003460 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003458:	2302      	movs	r3, #2
 800345a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d902      	bls.n	800346c <HAL_I2S_Init+0x138>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	2bff      	cmp	r3, #255	; 0xff
 800346a:	d907      	bls.n	800347c <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	f043 0210 	orr.w	r2, r3, #16
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e037      	b.n	80034ec <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	ea42 0103 	orr.w	r1, r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	430a      	orrs	r2, r1
 800348e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	4b17      	ldr	r3, [pc, #92]	; (80034f4 <HAL_I2S_Init+0x1c0>)
 8003498:	4013      	ands	r3, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6851      	ldr	r1, [r2, #4]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6892      	ldr	r2, [r2, #8]
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68d2      	ldr	r2, [r2, #12]
 80034a8:	4311      	orrs	r1, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6992      	ldr	r2, [r2, #24]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ba:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b30      	cmp	r3, #48	; 0x30
 80034c2:	d003      	beq.n	80034cc <HAL_I2S_Init+0x198>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2bb0      	cmp	r3, #176	; 0xb0
 80034ca:	d107      	bne.n	80034dc <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	fffff040 	.word	0xfffff040
 80034f8:	00bb8000 	.word	0x00bb8000
 80034fc:	cccccccd 	.word	0xcccccccd

08003500 <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <HAL_I2S_Receive+0x1c>
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0b4      	b.n	800368a <HAL_I2S_Receive+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_I2S_Receive+0x30>
 800352c:	2302      	movs	r3, #2
 800352e:	e0ac      	b.n	800368a <HAL_I2S_Receive+0x18a>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d005      	beq.n	8003550 <HAL_I2S_Receive+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
 800354e:	e09c      	b.n	800368a <HAL_I2S_Receive+0x18a>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2204      	movs	r2, #4
 8003554:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pRxBuffPtr = pData;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	629a      	str	r2, [r3, #40]	; 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	2b03      	cmp	r3, #3
 8003574:	d002      	beq.n	800357c <HAL_I2S_Receive+0x7c>
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	2b05      	cmp	r3, #5
 800357a:	d10a      	bne.n	8003592 <HAL_I2S_Receive+0x92>
  {
    hi2s->RxXferSize = (Size << 1U);
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003590:	e005      	b.n	800359e <HAL_I2S_Receive+0x9e>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	85da      	strh	r2, [r3, #46]	; 0x2e
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ac:	d007      	beq.n	80035be <HAL_I2S_Receive+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035bc:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035cc:	d14f      	bne.n	800366e <HAL_I2S_Receive+0x16e>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 80035e4:	e043      	b.n	800366e <HAL_I2S_Receive+0x16e>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2201      	movs	r2, #1
 80035ea:	2101      	movs	r1, #1
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f9ae 	bl	800394e <I2S_WaitFlagStateUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00f      	beq.n	8003618 <HAL_I2S_Receive+0x118>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      __HAL_UNLOCK(hi2s);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e038      	b.n	800368a <HAL_I2S_Receive+0x18a>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	b292      	uxth	r2, r2
 8003624:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	1c9a      	adds	r2, r3, #2
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
    hi2s->RxXferCount--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d110      	bne.n	800366e <HAL_I2S_Receive+0x16e>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	f043 0202 	orr.w	r2, r3, #2
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	63da      	str	r2, [r3, #60]	; 0x3c
  while (hi2s->RxXferCount > 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1b6      	bne.n	80035e6 <HAL_I2S_Receive+0xe6>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  __HAL_UNLOCK(hi2s);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	4613      	mov	r3, r2
 80036a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_I2S_Transmit_DMA+0x1a>
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e08e      	b.n	80037d0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_I2S_Transmit_DMA+0x2e>
 80036be:	2302      	movs	r3, #2
 80036c0:	e086      	b.n	80037d0 <HAL_I2S_Transmit_DMA+0x13c>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d005      	beq.n	80036e2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 80036de:	2302      	movs	r3, #2
 80036e0:	e076      	b.n	80037d0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2203      	movs	r2, #3
 80036e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pTxBuffPtr = pData;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	621a      	str	r2, [r3, #32]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d002      	beq.n	800370e <HAL_I2S_Transmit_DMA+0x7a>
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b05      	cmp	r3, #5
 800370c:	d10a      	bne.n	8003724 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = (Size << 1U);
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	84da      	strh	r2, [r3, #38]	; 0x26
 8003722:	e005      	b.n	8003730 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	88fa      	ldrh	r2, [r7, #6]
 800372e:	84da      	strh	r2, [r3, #38]	; 0x26
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	4a28      	ldr	r2, [pc, #160]	; (80037d8 <HAL_I2S_Transmit_DMA+0x144>)
 8003736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	4a27      	ldr	r2, [pc, #156]	; (80037dc <HAL_I2S_Transmit_DMA+0x148>)
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <HAL_I2S_Transmit_DMA+0x14c>)
 8003746:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b18      	ldr	r0, [r3, #48]	; 0x30
                                 (uint32_t)hi2s->pTxBuffPtr,
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a1b      	ldr	r3, [r3, #32]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003750:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003758:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800375e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003760:	f7fe fcc0 	bl	80020e4 <HAL_DMA_Start_IT>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00f      	beq.n	800378a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	f043 0208 	orr.w	r2, r3, #8
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e022      	b.n	80037d0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d107      	bne.n	80037a8 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037a6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d107      	bne.n	80037c6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0202 	orr.w	r2, r2, #2
 80037c4:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	080038e7 	.word	0x080038e7
 80037dc:	080038a5 	.word	0x080038a5
 80037e0:	08003903 	.word	0x08003903

080037e4 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d02d      	beq.n	8003878 <I2S_GetClockFreq+0x6c>
 800381c:	2b02      	cmp	r3, #2
 800381e:	d12e      	bne.n	800387e <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003820:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <I2S_GetClockFreq+0x88>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d108      	bne.n	800383e <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800382c:	4b19      	ldr	r3, [pc, #100]	; (8003894 <I2S_GetClockFreq+0x88>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003834:	4a18      	ldr	r2, [pc, #96]	; (8003898 <I2S_GetClockFreq+0x8c>)
 8003836:	fbb2 f3f3 	udiv	r3, r2, r3
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e007      	b.n	800384e <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <I2S_GetClockFreq+0x88>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003846:	4a15      	ldr	r2, [pc, #84]	; (800389c <I2S_GetClockFreq+0x90>)
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <I2S_GetClockFreq+0x88>)
 8003850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003854:	0f1b      	lsrs	r3, r3, #28
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 800385c:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <I2S_GetClockFreq+0x88>)
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003862:	099b      	lsrs	r3, r3, #6
 8003864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	fb02 f203 	mul.w	r2, r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	613b      	str	r3, [r7, #16]

      break;
 8003876:	e005      	b.n	8003884 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <I2S_GetClockFreq+0x94>)
 800387a:	613b      	str	r3, [r7, #16]
      break;
 800387c:	e002      	b.n	8003884 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
      break;
 8003882:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8003884:	693b      	ldr	r3, [r7, #16]
}
 8003886:	4618      	mov	r0, r3
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	00f42400 	.word	0x00f42400
 800389c:	017d7840 	.word	0x017d7840
 80038a0:	00bb8000 	.word	0x00bb8000

080038a4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10e      	bne.n	80038d8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0202 	bic.w	r2, r2, #2
 80038c8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	84da      	strh	r2, [r3, #38]	; 0x26
    hi2s->State = HAL_I2S_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7fd f97d 	bl	8000bd8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f7ff ff75 	bl	80037e4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0203 	bic.w	r2, r2, #3
 800391e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	84da      	strh	r2, [r3, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	85da      	strh	r2, [r3, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	f043 0208 	orr.w	r2, r3, #8
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff ff59 	bl	80037f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800395e:	f7fe f9f5 	bl	8001d4c <HAL_GetTick>
 8003962:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003964:	e018      	b.n	8003998 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d014      	beq.n	8003998 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800396e:	f7fe f9ed 	bl	8001d4c <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d902      	bls.n	8003984 <I2S_WaitFlagStateUntilTimeout+0x36>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e00f      	b.n	80039b8 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4013      	ands	r3, r2
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d1d7      	bne.n	8003966 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039ca:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	4a22      	ldr	r2, [pc, #136]	; (8003a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80039d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d4:	6413      	str	r3, [r2, #64]	; 0x40
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039e2:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039ee:	f7fe f9ad 	bl	8001d4c <HAL_GetTick>
 80039f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039f4:	e009      	b.n	8003a0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039f6:	f7fe f9a9 	bl	8001d4c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a04:	d901      	bls.n	8003a0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e022      	b.n	8003a50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a0a:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a16:	d1ee      	bne.n	80039f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a18:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a0f      	ldr	r2, [pc, #60]	; (8003a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a24:	f7fe f992 	bl	8001d4c <HAL_GetTick>
 8003a28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a2a:	e009      	b.n	8003a40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a2c:	f7fe f98e 	bl	8001d4c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a3a:	d901      	bls.n	8003a40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e007      	b.n	8003a50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a4c:	d1ee      	bne.n	8003a2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40007000 	.word	0x40007000

08003a60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e29b      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8087 	beq.w	8003b92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a84:	4b96      	ldr	r3, [pc, #600]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d00c      	beq.n	8003aaa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a90:	4b93      	ldr	r3, [pc, #588]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d112      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x62>
 8003a9c:	4b90      	ldr	r3, [pc, #576]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aaa:	4b8d      	ldr	r3, [pc, #564]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d06c      	beq.n	8003b90 <HAL_RCC_OscConfig+0x130>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d168      	bne.n	8003b90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e275      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x7a>
 8003acc:	4b84      	ldr	r3, [pc, #528]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a83      	ldr	r2, [pc, #524]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	e02e      	b.n	8003b38 <HAL_RCC_OscConfig+0xd8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x9c>
 8003ae2:	4b7f      	ldr	r3, [pc, #508]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a7e      	ldr	r2, [pc, #504]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b7c      	ldr	r3, [pc, #496]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a7b      	ldr	r2, [pc, #492]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e01d      	b.n	8003b38 <HAL_RCC_OscConfig+0xd8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0xc0>
 8003b06:	4b76      	ldr	r3, [pc, #472]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a75      	ldr	r2, [pc, #468]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b73      	ldr	r3, [pc, #460]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a72      	ldr	r2, [pc, #456]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0xd8>
 8003b20:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a6e      	ldr	r2, [pc, #440]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b6c      	ldr	r3, [pc, #432]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a6b      	ldr	r2, [pc, #428]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fe f904 	bl	8001d4c <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b48:	f7fe f900 	bl	8001d4c <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	; 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e229      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b61      	ldr	r3, [pc, #388]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0xe8>
 8003b66:	e014      	b.n	8003b92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fe f8f0 	bl	8001d4c <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe f8ec 	bl	8001d4c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e215      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	4b57      	ldr	r3, [pc, #348]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x110>
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d069      	beq.n	8003c72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b9e:	4b50      	ldr	r3, [pc, #320]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003baa:	4b4d      	ldr	r3, [pc, #308]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d11c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x190>
 8003bb6:	4b4a      	ldr	r3, [pc, #296]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d116      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc2:	4b47      	ldr	r3, [pc, #284]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_RCC_OscConfig+0x17a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d001      	beq.n	8003bda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e1e9      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b41      	ldr	r3, [pc, #260]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	493d      	ldr	r1, [pc, #244]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	e040      	b.n	8003c72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d023      	beq.n	8003c40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf8:	4b39      	ldr	r3, [pc, #228]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a38      	ldr	r2, [pc, #224]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fe f8a2 	bl	8001d4c <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0c:	f7fe f89e 	bl	8001d4c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e1c7      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1e:	4b30      	ldr	r3, [pc, #192]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2a:	4b2d      	ldr	r3, [pc, #180]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4929      	ldr	r1, [pc, #164]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
 8003c3e:	e018      	b.n	8003c72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c40:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fe f87e 	bl	8001d4c <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c54:	f7fe f87a 	bl	8001d4c <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1a3      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c66:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d038      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d019      	beq.n	8003cba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c86:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8a:	4a15      	ldr	r2, [pc, #84]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c92:	f7fe f85b 	bl	8001d4c <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9a:	f7fe f857 	bl	8001d4c <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e180      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x23a>
 8003cb8:	e01a      	b.n	8003cf0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cba:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cbe:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc6:	f7fe f841 	bl	8001d4c <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cce:	f7fe f83d 	bl	8001d4c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d903      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e166      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
 8003ce0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce4:	4b92      	ldr	r3, [pc, #584]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ee      	bne.n	8003cce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80a4 	beq.w	8003e46 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfe:	4b8c      	ldr	r3, [pc, #560]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10d      	bne.n	8003d26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0a:	4b89      	ldr	r3, [pc, #548]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	4a88      	ldr	r2, [pc, #544]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d14:	6413      	str	r3, [r2, #64]	; 0x40
 8003d16:	4b86      	ldr	r3, [pc, #536]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d26:	4b83      	ldr	r3, [pc, #524]	; (8003f34 <HAL_RCC_OscConfig+0x4d4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d118      	bne.n	8003d64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d32:	4b80      	ldr	r3, [pc, #512]	; (8003f34 <HAL_RCC_OscConfig+0x4d4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7f      	ldr	r2, [pc, #508]	; (8003f34 <HAL_RCC_OscConfig+0x4d4>)
 8003d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3e:	f7fe f805 	bl	8001d4c <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d46:	f7fe f801 	bl	8001d4c <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b64      	cmp	r3, #100	; 0x64
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e12a      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d58:	4b76      	ldr	r3, [pc, #472]	; (8003f34 <HAL_RCC_OscConfig+0x4d4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_OscConfig+0x31a>
 8003d6c:	4b70      	ldr	r3, [pc, #448]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	4a6f      	ldr	r2, [pc, #444]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6713      	str	r3, [r2, #112]	; 0x70
 8003d78:	e02d      	b.n	8003dd6 <HAL_RCC_OscConfig+0x376>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x33c>
 8003d82:	4b6b      	ldr	r3, [pc, #428]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	4a6a      	ldr	r2, [pc, #424]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8e:	4b68      	ldr	r3, [pc, #416]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	4a67      	ldr	r2, [pc, #412]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d94:	f023 0304 	bic.w	r3, r3, #4
 8003d98:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9a:	e01c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x376>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	d10c      	bne.n	8003dbe <HAL_RCC_OscConfig+0x35e>
 8003da4:	4b62      	ldr	r3, [pc, #392]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4a61      	ldr	r2, [pc, #388]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	f043 0304 	orr.w	r3, r3, #4
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
 8003db0:	4b5f      	ldr	r3, [pc, #380]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4a5e      	ldr	r2, [pc, #376]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbc:	e00b      	b.n	8003dd6 <HAL_RCC_OscConfig+0x376>
 8003dbe:	4b5c      	ldr	r3, [pc, #368]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a5b      	ldr	r2, [pc, #364]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dca:	4b59      	ldr	r3, [pc, #356]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	4a58      	ldr	r2, [pc, #352]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003dd0:	f023 0304 	bic.w	r3, r3, #4
 8003dd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d015      	beq.n	8003e0a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fd ffb5 	bl	8001d4c <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	e00a      	b.n	8003dfc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de6:	f7fd ffb1 	bl	8001d4c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e0d8      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfc:	4b4c      	ldr	r3, [pc, #304]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ee      	beq.n	8003de6 <HAL_RCC_OscConfig+0x386>
 8003e08:	e014      	b.n	8003e34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0a:	f7fd ff9f 	bl	8001d4c <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e10:	e00a      	b.n	8003e28 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fd ff9b 	bl	8001d4c <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e0c2      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e28:	4b41      	ldr	r3, [pc, #260]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ee      	bne.n	8003e12 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d105      	bne.n	8003e46 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3a:	4b3d      	ldr	r3, [pc, #244]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	4a3c      	ldr	r2, [pc, #240]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 80ae 	beq.w	8003fac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e50:	4b37      	ldr	r3, [pc, #220]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d06d      	beq.n	8003f38 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d14b      	bne.n	8003efc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e64:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a31      	ldr	r2, [pc, #196]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fd ff6c 	bl	8001d4c <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e78:	f7fd ff68 	bl	8001d4c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e091      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8a:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	019b      	lsls	r3, r3, #6
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	041b      	lsls	r3, r3, #16
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	061b      	lsls	r3, r3, #24
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	071b      	lsls	r3, r3, #28
 8003ec2:	491b      	ldr	r1, [pc, #108]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fd ff3a 	bl	8001d4c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fd ff36 	bl	8001d4c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e05f      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x47c>
 8003efa:	e057      	b.n	8003fac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a0b      	ldr	r2, [pc, #44]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd ff20 	bl	8001d4c <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fd ff1c 	bl	8001d4c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e045      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f22:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4b0>
 8003f2e:	e03d      	b.n	8003fac <HAL_RCC_OscConfig+0x54c>
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f38:	4b1f      	ldr	r3, [pc, #124]	; (8003fb8 <HAL_RCC_OscConfig+0x558>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d030      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d129      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d122      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d119      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	3b01      	subs	r3, #1
 8003f82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d10f      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800

08003fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0d0      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b6a      	ldr	r3, [pc, #424]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d910      	bls.n	8004004 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b67      	ldr	r3, [pc, #412]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 020f 	bic.w	r2, r3, #15
 8003fea:	4965      	ldr	r1, [pc, #404]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b63      	ldr	r3, [pc, #396]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0b8      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d020      	beq.n	8004052 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800401c:	4b59      	ldr	r3, [pc, #356]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4a58      	ldr	r2, [pc, #352]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004026:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004034:	4b53      	ldr	r3, [pc, #332]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4a52      	ldr	r2, [pc, #328]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800403a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800403e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004040:	4b50      	ldr	r3, [pc, #320]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	494d      	ldr	r1, [pc, #308]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d040      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d107      	bne.n	8004076 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	4b47      	ldr	r3, [pc, #284]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d115      	bne.n	800409e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e07f      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d107      	bne.n	800408e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407e:	4b41      	ldr	r3, [pc, #260]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e073      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408e:	4b3d      	ldr	r3, [pc, #244]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06b      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800409e:	4b39      	ldr	r3, [pc, #228]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f023 0203 	bic.w	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4936      	ldr	r1, [pc, #216]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b0:	f7fd fe4c 	bl	8001d4c <HAL_GetTick>
 80040b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b8:	f7fd fe48 	bl	8001d4c <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e053      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 020c 	and.w	r2, r3, #12
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1eb      	bne.n	80040b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040e0:	4b27      	ldr	r3, [pc, #156]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d210      	bcs.n	8004110 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b24      	ldr	r3, [pc, #144]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 020f 	bic.w	r2, r3, #15
 80040f6:	4922      	ldr	r1, [pc, #136]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e032      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4916      	ldr	r1, [pc, #88]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800412a:	4313      	orrs	r3, r2
 800412c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	490e      	ldr	r1, [pc, #56]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800414e:	f000 f821 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8004152:	4602      	mov	r2, r0
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	490a      	ldr	r1, [pc, #40]	; (8004188 <HAL_RCC_ClockConfig+0x1cc>)
 8004160:	5ccb      	ldrb	r3, [r1, r3]
 8004162:	fa22 f303 	lsr.w	r3, r2, r3
 8004166:	4a09      	ldr	r2, [pc, #36]	; (800418c <HAL_RCC_ClockConfig+0x1d0>)
 8004168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <HAL_RCC_ClockConfig+0x1d4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fd fda8 	bl	8001cc4 <HAL_InitTick>

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023c00 	.word	0x40023c00
 8004184:	40023800 	.word	0x40023800
 8004188:	080084c8 	.word	0x080084c8
 800418c:	20075314 	.word	0x20075314
 8004190:	20075318 	.word	0x20075318

08004194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004194:	b5b0      	push	{r4, r5, r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800419a:	2100      	movs	r1, #0
 800419c:	6079      	str	r1, [r7, #4]
 800419e:	2100      	movs	r1, #0
 80041a0:	60f9      	str	r1, [r7, #12]
 80041a2:	2100      	movs	r1, #0
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80041a6:	2100      	movs	r1, #0
 80041a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041aa:	4952      	ldr	r1, [pc, #328]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80041ac:	6889      	ldr	r1, [r1, #8]
 80041ae:	f001 010c 	and.w	r1, r1, #12
 80041b2:	2908      	cmp	r1, #8
 80041b4:	d00d      	beq.n	80041d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80041b6:	2908      	cmp	r1, #8
 80041b8:	f200 8094 	bhi.w	80042e4 <HAL_RCC_GetSysClockFreq+0x150>
 80041bc:	2900      	cmp	r1, #0
 80041be:	d002      	beq.n	80041c6 <HAL_RCC_GetSysClockFreq+0x32>
 80041c0:	2904      	cmp	r1, #4
 80041c2:	d003      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0x38>
 80041c4:	e08e      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041c6:	4b4c      	ldr	r3, [pc, #304]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80041c8:	60bb      	str	r3, [r7, #8]
      break;
 80041ca:	e08e      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041cc:	4b4b      	ldr	r3, [pc, #300]	; (80042fc <HAL_RCC_GetSysClockFreq+0x168>)
 80041ce:	60bb      	str	r3, [r7, #8]
      break;
 80041d0:	e08b      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041d2:	4948      	ldr	r1, [pc, #288]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80041d4:	6849      	ldr	r1, [r1, #4]
 80041d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80041da:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041dc:	4945      	ldr	r1, [pc, #276]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80041de:	6849      	ldr	r1, [r1, #4]
 80041e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80041e4:	2900      	cmp	r1, #0
 80041e6:	d024      	beq.n	8004232 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e8:	4942      	ldr	r1, [pc, #264]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80041ea:	6849      	ldr	r1, [r1, #4]
 80041ec:	0989      	lsrs	r1, r1, #6
 80041ee:	4608      	mov	r0, r1
 80041f0:	f04f 0100 	mov.w	r1, #0
 80041f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80041f8:	f04f 0500 	mov.w	r5, #0
 80041fc:	ea00 0204 	and.w	r2, r0, r4
 8004200:	ea01 0305 	and.w	r3, r1, r5
 8004204:	493d      	ldr	r1, [pc, #244]	; (80042fc <HAL_RCC_GetSysClockFreq+0x168>)
 8004206:	fb01 f003 	mul.w	r0, r1, r3
 800420a:	2100      	movs	r1, #0
 800420c:	fb01 f102 	mul.w	r1, r1, r2
 8004210:	1844      	adds	r4, r0, r1
 8004212:	493a      	ldr	r1, [pc, #232]	; (80042fc <HAL_RCC_GetSysClockFreq+0x168>)
 8004214:	fba2 0101 	umull	r0, r1, r2, r1
 8004218:	1863      	adds	r3, r4, r1
 800421a:	4619      	mov	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	461a      	mov	r2, r3
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	f7fc f808 	bl	8000238 <__aeabi_uldivmod>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4613      	mov	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e04a      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004232:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	461a      	mov	r2, r3
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	ea02 0400 	and.w	r4, r2, r0
 800424a:	ea03 0501 	and.w	r5, r3, r1
 800424e:	4620      	mov	r0, r4
 8004250:	4629      	mov	r1, r5
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	014b      	lsls	r3, r1, #5
 800425c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004260:	0142      	lsls	r2, r0, #5
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	1b00      	subs	r0, r0, r4
 8004268:	eb61 0105 	sbc.w	r1, r1, r5
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	018b      	lsls	r3, r1, #6
 8004276:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800427a:	0182      	lsls	r2, r0, #6
 800427c:	1a12      	subs	r2, r2, r0
 800427e:	eb63 0301 	sbc.w	r3, r3, r1
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f04f 0100 	mov.w	r1, #0
 800428a:	00d9      	lsls	r1, r3, #3
 800428c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004290:	00d0      	lsls	r0, r2, #3
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	1912      	adds	r2, r2, r4
 8004298:	eb45 0303 	adc.w	r3, r5, r3
 800429c:	f04f 0000 	mov.w	r0, #0
 80042a0:	f04f 0100 	mov.w	r1, #0
 80042a4:	0299      	lsls	r1, r3, #10
 80042a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042aa:	0290      	lsls	r0, r2, #10
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	f7fb ffbc 	bl	8000238 <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4613      	mov	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	0c1b      	lsrs	r3, r3, #16
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	3301      	adds	r3, #1
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	60bb      	str	r3, [r7, #8]
      break;
 80042e2:	e002      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80042e6:	60bb      	str	r3, [r7, #8]
      break;
 80042e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ea:	68bb      	ldr	r3, [r7, #8]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bdb0      	pop	{r4, r5, r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	00f42400 	.word	0x00f42400
 80042fc:	017d7840 	.word	0x017d7840

08004300 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004304:	4b03      	ldr	r3, [pc, #12]	; (8004314 <HAL_RCC_GetHCLKFreq+0x14>)
 8004306:	681b      	ldr	r3, [r3, #0]
}
 8004308:	4618      	mov	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20075314 	.word	0x20075314

08004318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800431c:	f7ff fff0 	bl	8004300 <HAL_RCC_GetHCLKFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	0a9b      	lsrs	r3, r3, #10
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	4903      	ldr	r1, [pc, #12]	; (800433c <HAL_RCC_GetPCLK1Freq+0x24>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004334:	4618      	mov	r0, r3
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40023800 	.word	0x40023800
 800433c:	080084d8 	.word	0x080084d8

08004340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004344:	f7ff ffdc 	bl	8004300 <HAL_RCC_GetHCLKFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	0b5b      	lsrs	r3, r3, #13
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4903      	ldr	r1, [pc, #12]	; (8004364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40023800 	.word	0x40023800
 8004364:	080084d8 	.word	0x080084d8

08004368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d012      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004390:	4b69      	ldr	r3, [pc, #420]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a68      	ldr	r2, [pc, #416]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004396:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800439a:	6093      	str	r3, [r2, #8]
 800439c:	4b66      	ldr	r3, [pc, #408]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a4:	4964      	ldr	r1, [pc, #400]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d017      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043c2:	4b5d      	ldr	r3, [pc, #372]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d0:	4959      	ldr	r1, [pc, #356]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043e0:	d101      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043e2:	2301      	movs	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d017      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043fe:	4b4e      	ldr	r3, [pc, #312]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004404:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	494a      	ldr	r1, [pc, #296]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800441c:	d101      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800442a:	2301      	movs	r3, #1
 800442c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800443a:	2301      	movs	r3, #1
 800443c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 808b 	beq.w	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800444c:	4b3a      	ldr	r3, [pc, #232]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	4a39      	ldr	r2, [pc, #228]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004456:	6413      	str	r3, [r2, #64]	; 0x40
 8004458:	4b37      	ldr	r3, [pc, #220]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004464:	4b35      	ldr	r3, [pc, #212]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a34      	ldr	r2, [pc, #208]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800446a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004470:	f7fd fc6c 	bl	8001d4c <HAL_GetTick>
 8004474:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004476:	e008      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004478:	f7fd fc68 	bl	8001d4c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b64      	cmp	r3, #100	; 0x64
 8004484:	d901      	bls.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e38f      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800448a:	4b2c      	ldr	r3, [pc, #176]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f0      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004496:	4b28      	ldr	r3, [pc, #160]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d035      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d02e      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044b4:	4b20      	ldr	r3, [pc, #128]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044be:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a1d      	ldr	r2, [pc, #116]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044ca:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	4a1a      	ldr	r2, [pc, #104]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044d6:	4a18      	ldr	r2, [pc, #96]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044dc:	4b16      	ldr	r3, [pc, #88]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d114      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fd fc30 	bl	8001d4c <HAL_GetTick>
 80044ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ee:	e00a      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f0:	f7fd fc2c 	bl	8001d4c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e351      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004506:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0ee      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800451e:	d111      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800452e:	400b      	ands	r3, r1
 8004530:	4901      	ldr	r1, [pc, #4]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
 8004536:	e00b      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004538:	40023800 	.word	0x40023800
 800453c:	40007000 	.word	0x40007000
 8004540:	0ffffcff 	.word	0x0ffffcff
 8004544:	4bb3      	ldr	r3, [pc, #716]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	4ab2      	ldr	r2, [pc, #712]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800454a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800454e:	6093      	str	r3, [r2, #8]
 8004550:	4bb0      	ldr	r3, [pc, #704]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004552:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800455c:	49ad      	ldr	r1, [pc, #692]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800455e:	4313      	orrs	r3, r2
 8004560:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	d010      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800456e:	4ba9      	ldr	r3, [pc, #676]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004574:	4aa7      	ldr	r2, [pc, #668]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800457a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800457e:	4ba5      	ldr	r3, [pc, #660]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004580:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	49a2      	ldr	r1, [pc, #648]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800459c:	4b9d      	ldr	r3, [pc, #628]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045aa:	499a      	ldr	r1, [pc, #616]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045be:	4b95      	ldr	r3, [pc, #596]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045cc:	4991      	ldr	r1, [pc, #580]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045e0:	4b8c      	ldr	r3, [pc, #560]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ee:	4989      	ldr	r1, [pc, #548]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004602:	4b84      	ldr	r3, [pc, #528]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004608:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	4980      	ldr	r1, [pc, #512]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004624:	4b7b      	ldr	r3, [pc, #492]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462a:	f023 0203 	bic.w	r2, r3, #3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	4978      	ldr	r1, [pc, #480]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004646:	4b73      	ldr	r3, [pc, #460]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464c:	f023 020c 	bic.w	r2, r3, #12
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004654:	496f      	ldr	r1, [pc, #444]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004668:	4b6a      	ldr	r3, [pc, #424]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	4967      	ldr	r1, [pc, #412]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800468a:	4b62      	ldr	r3, [pc, #392]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004698:	495e      	ldr	r1, [pc, #376]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046ac:	4b59      	ldr	r3, [pc, #356]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	4956      	ldr	r1, [pc, #344]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046ce:	4b51      	ldr	r3, [pc, #324]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046dc:	494d      	ldr	r1, [pc, #308]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046f0:	4b48      	ldr	r3, [pc, #288]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fe:	4945      	ldr	r1, [pc, #276]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004712:	4b40      	ldr	r3, [pc, #256]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004718:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004720:	493c      	ldr	r1, [pc, #240]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004734:	4b37      	ldr	r3, [pc, #220]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004742:	4934      	ldr	r1, [pc, #208]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d011      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004756:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004764:	492b      	ldr	r1, [pc, #172]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004774:	d101      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004776:	2301      	movs	r3, #1
 8004778:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004786:	2301      	movs	r3, #1
 8004788:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004796:	4b1f      	ldr	r3, [pc, #124]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a4:	491b      	ldr	r1, [pc, #108]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00b      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047b8:	4b16      	ldr	r3, [pc, #88]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c8:	4912      	ldr	r1, [pc, #72]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00b      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80047dc:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ec:	4909      	ldr	r1, [pc, #36]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00f      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004806:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	e002      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800
 8004818:	4986      	ldr	r1, [pc, #536]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00b      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800482c:	4b81      	ldr	r3, [pc, #516]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004832:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800483c:	497d      	ldr	r1, [pc, #500]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d006      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 80d6 	beq.w	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004858:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a75      	ldr	r2, [pc, #468]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800485e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004862:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004864:	f7fd fa72 	bl	8001d4c <HAL_GetTick>
 8004868:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800486a:	e008      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800486c:	f7fd fa6e 	bl	8001d4c <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b64      	cmp	r3, #100	; 0x64
 8004878:	d901      	bls.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e195      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800487e:	4b6d      	ldr	r3, [pc, #436]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d021      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489a:	2b00      	cmp	r3, #0
 800489c:	d11d      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800489e:	4b65      	ldr	r3, [pc, #404]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048ac:	4b61      	ldr	r3, [pc, #388]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b2:	0e1b      	lsrs	r3, r3, #24
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	019a      	lsls	r2, r3, #6
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	041b      	lsls	r3, r3, #16
 80048c4:	431a      	orrs	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	061b      	lsls	r3, r3, #24
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	071b      	lsls	r3, r3, #28
 80048d2:	4958      	ldr	r1, [pc, #352]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d004      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ee:	d00a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d02e      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004904:	d129      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004906:	4b4b      	ldr	r3, [pc, #300]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004914:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491a:	0f1b      	lsrs	r3, r3, #28
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	019a      	lsls	r2, r3, #6
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	041b      	lsls	r3, r3, #16
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	061b      	lsls	r3, r3, #24
 8004934:	431a      	orrs	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	071b      	lsls	r3, r3, #28
 800493a:	493e      	ldr	r1, [pc, #248]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004942:	4b3c      	ldr	r3, [pc, #240]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004948:	f023 021f 	bic.w	r2, r3, #31
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	3b01      	subs	r3, #1
 8004952:	4938      	ldr	r1, [pc, #224]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01d      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004966:	4b33      	ldr	r3, [pc, #204]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496c:	0e1b      	lsrs	r3, r3, #24
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004974:	4b2f      	ldr	r3, [pc, #188]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497a:	0f1b      	lsrs	r3, r3, #28
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	019a      	lsls	r2, r3, #6
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	041b      	lsls	r3, r3, #16
 800498e:	431a      	orrs	r2, r3
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	061b      	lsls	r3, r3, #24
 8004994:	431a      	orrs	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	071b      	lsls	r3, r3, #28
 800499a:	4926      	ldr	r1, [pc, #152]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d011      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	019a      	lsls	r2, r3, #6
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	041b      	lsls	r3, r3, #16
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	061b      	lsls	r3, r3, #24
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	071b      	lsls	r3, r3, #28
 80049ca:	491a      	ldr	r1, [pc, #104]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049d2:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a17      	ldr	r2, [pc, #92]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049de:	f7fd f9b5 	bl	8001d4c <HAL_GetTick>
 80049e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049e4:	e008      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049e6:	f7fd f9b1 	bl	8001d4c <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b64      	cmp	r3, #100	; 0x64
 80049f2:	d901      	bls.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e0d8      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049f8:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f0      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	f040 80ce 	bne.w	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a18:	f7fd f998 	bl	8001d4c <HAL_GetTick>
 8004a1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a20:	f7fd f994 	bl	8001d4c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b64      	cmp	r3, #100	; 0x64
 8004a2c:	d904      	bls.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e0bb      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a38:	4b5e      	ldr	r3, [pc, #376]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a44:	d0ec      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d02e      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d12a      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a6e:	4b51      	ldr	r3, [pc, #324]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	0c1b      	lsrs	r3, r3, #16
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a7c:	4b4d      	ldr	r3, [pc, #308]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	0f1b      	lsrs	r3, r3, #28
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	019a      	lsls	r2, r3, #6
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	061b      	lsls	r3, r3, #24
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	071b      	lsls	r3, r3, #28
 8004aa2:	4944      	ldr	r1, [pc, #272]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004aaa:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	493d      	ldr	r1, [pc, #244]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d022      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad8:	d11d      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ada:	4b36      	ldr	r3, [pc, #216]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	0e1b      	lsrs	r3, r3, #24
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ae8:	4b32      	ldr	r3, [pc, #200]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	0f1b      	lsrs	r3, r3, #28
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	019a      	lsls	r2, r3, #6
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	041b      	lsls	r3, r3, #16
 8004b02:	431a      	orrs	r2, r3
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	061b      	lsls	r3, r3, #24
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	071b      	lsls	r3, r3, #28
 8004b0e:	4929      	ldr	r1, [pc, #164]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d028      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	0e1b      	lsrs	r3, r3, #24
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b30:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	019a      	lsls	r2, r3, #6
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	061b      	lsls	r3, r3, #24
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	071b      	lsls	r3, r3, #28
 8004b56:	4917      	ldr	r1, [pc, #92]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b5e:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4911      	ldr	r1, [pc, #68]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a0e      	ldr	r2, [pc, #56]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b80:	f7fd f8e4 	bl	8001d4c <HAL_GetTick>
 8004b84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b88:	f7fd f8e0 	bl	8001d4c <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e007      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba6:	d1ef      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40023800 	.word	0x40023800

08004bb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bd6:	f040 80a3 	bne.w	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004bda:	4bac      	ldr	r3, [pc, #688]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004be8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bf0:	f000 808a 	beq.w	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bfa:	f200 8093 	bhi.w	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c04:	d07d      	beq.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c0c:	f200 808a 	bhi.w	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d004      	beq.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c1c:	d039      	beq.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004c1e:	e081      	b.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004c20:	4b9a      	ldr	r3, [pc, #616]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d108      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c2c:	4b97      	ldr	r3, [pc, #604]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c34:	4a96      	ldr	r2, [pc, #600]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	e007      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004c3e:	4b93      	ldr	r3, [pc, #588]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c46:	4a93      	ldr	r2, [pc, #588]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004c4e:	4b8f      	ldr	r3, [pc, #572]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	0e1b      	lsrs	r3, r3, #24
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004c5c:	4b8b      	ldr	r3, [pc, #556]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c62:	099b      	lsrs	r3, r3, #6
 8004c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	fb02 f203 	mul.w	r2, r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004c76:	4b85      	ldr	r3, [pc, #532]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	3301      	adds	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8e:	617b      	str	r3, [r7, #20]
        break;
 8004c90:	e049      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004c92:	4b7e      	ldr	r3, [pc, #504]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d108      	bne.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c9e:	4b7b      	ldr	r3, [pc, #492]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ca6:	4a7a      	ldr	r2, [pc, #488]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	e007      	b.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004cb0:	4b76      	ldr	r3, [pc, #472]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cb8:	4a76      	ldr	r2, [pc, #472]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004cc0:	4b72      	ldr	r3, [pc, #456]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc6:	0e1b      	lsrs	r3, r3, #24
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004cce:	4b6f      	ldr	r3, [pc, #444]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd4:	099b      	lsrs	r3, r3, #6
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	fb02 f203 	mul.w	r2, r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce6:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004ce8:	4b68      	ldr	r3, [pc, #416]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	617b      	str	r3, [r7, #20]
        break;
 8004d00:	e011      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004d02:	4b65      	ldr	r3, [pc, #404]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d04:	617b      	str	r3, [r7, #20]
        break;
 8004d06:	e00e      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004d08:	4b60      	ldr	r3, [pc, #384]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d102      	bne.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8004d14:	4b5e      	ldr	r3, [pc, #376]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004d16:	617b      	str	r3, [r7, #20]
        break;
 8004d18:	e005      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8004d1a:	4b5e      	ldr	r3, [pc, #376]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004d1c:	617b      	str	r3, [r7, #20]
        break;
 8004d1e:	e002      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8004d20:	bf00      	nop
 8004d22:	e000      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8004d24:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2c:	f040 80a3 	bne.w	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004d30:	4b56      	ldr	r3, [pc, #344]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d36:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004d3e:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d46:	f000 808a 	beq.w	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d50:	f200 8093 	bhi.w	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d5a:	d07d      	beq.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d62:	f200 808a 	bhi.w	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d72:	d039      	beq.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004d74:	e081      	b.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004d76:	4b45      	ldr	r3, [pc, #276]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d108      	bne.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d82:	4b42      	ldr	r3, [pc, #264]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d8a:	4a41      	ldr	r2, [pc, #260]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	e007      	b.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004d94:	4b3d      	ldr	r3, [pc, #244]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d9c:	4a3d      	ldr	r2, [pc, #244]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004da4:	4b39      	ldr	r3, [pc, #228]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	0e1b      	lsrs	r3, r3, #24
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004db2:	4b36      	ldr	r3, [pc, #216]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	099b      	lsrs	r3, r3, #6
 8004dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	fb02 f203 	mul.w	r2, r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dca:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004dcc:	4b2f      	ldr	r3, [pc, #188]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd2:	0a1b      	lsrs	r3, r3, #8
 8004dd4:	f003 031f 	and.w	r3, r3, #31
 8004dd8:	3301      	adds	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	617b      	str	r3, [r7, #20]
        break;
 8004de6:	e049      	b.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004de8:	4b28      	ldr	r3, [pc, #160]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d108      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dfc:	4a24      	ldr	r2, [pc, #144]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	e007      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004e06:	4b21      	ldr	r3, [pc, #132]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e0e:	4a21      	ldr	r2, [pc, #132]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004e16:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e1c:	0e1b      	lsrs	r3, r3, #24
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e2a:	099b      	lsrs	r3, r3, #6
 8004e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	fb02 f203 	mul.w	r2, r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004e3e:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e44:	f003 031f 	and.w	r3, r3, #31
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]
        break;
 8004e56:	e011      	b.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004e5a:	617b      	str	r3, [r7, #20]
        break;
 8004e5c:	e00e      	b.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004e6c:	617b      	str	r3, [r7, #20]
        break;
 8004e6e:	e005      	b.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 8004e70:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004e72:	617b      	str	r3, [r7, #20]
        break;
 8004e74:	e002      	b.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 8004e7a:	bf00      	nop

  return frequency;
 8004e7c:	697b      	ldr	r3, [r7, #20]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	00f42400 	.word	0x00f42400
 8004e94:	017d7840 	.word	0x017d7840
 8004e98:	00bb8000 	.word	0x00bb8000

08004e9c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d904      	bls.n	8004ebe <HAL_SAI_InitProtocol+0x22>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	3b03      	subs	r3, #3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d812      	bhi.n	8004ee2 <HAL_SAI_InitProtocol+0x46>
 8004ebc:	e008      	b.n	8004ed0 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	68b9      	ldr	r1, [r7, #8]
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 fa69 	bl	800539c <SAI_InitI2S>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ece:	e00b      	b.n	8004ee8 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 fb0e 	bl	80054f8 <SAI_InitPCM>
 8004edc:	4603      	mov	r3, r0
 8004ede:	75fb      	strb	r3, [r7, #23]
      break;
 8004ee0:	e002      	b.n	8004ee8 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ee6:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d104      	bne.n	8004ef8 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f808 	bl	8004f04 <HAL_SAI_Init>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e156      	b.n	80051d0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fc fd26 	bl	8001988 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fba5 	bl	8005694 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d00c      	beq.n	8004f6c <HAL_SAI_Init+0x68>
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d80d      	bhi.n	8004f72 <HAL_SAI_Init+0x6e>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_SAI_Init+0x5c>
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d003      	beq.n	8004f66 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004f5e:	e008      	b.n	8004f72 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61fb      	str	r3, [r7, #28]
      break;
 8004f64:	e006      	b.n	8004f74 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004f66:	2310      	movs	r3, #16
 8004f68:	61fb      	str	r3, [r7, #28]
      break;
 8004f6a:	e003      	b.n	8004f74 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004f6c:	2320      	movs	r3, #32
 8004f6e:	61fb      	str	r3, [r7, #28]
      break;
 8004f70:	e000      	b.n	8004f74 <HAL_SAI_Init+0x70>
      break;
 8004f72:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d81e      	bhi.n	8004fba <HAL_SAI_Init+0xb6>
 8004f7c:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <HAL_SAI_Init+0x80>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004f9b 	.word	0x08004f9b
 8004f8c:	08004fa3 	.word	0x08004fa3
 8004f90:	08004fab 	.word	0x08004fab
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
    }
    break;
 8004f98:	e010      	b.n	8004fbc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f9e:	617b      	str	r3, [r7, #20]
    }
    break;
 8004fa0:	e00c      	b.n	8004fbc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fa6:	617b      	str	r3, [r7, #20]
    }
    break;
 8004fa8:	e008      	b.n	8004fbc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fae:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004fb8:	e000      	b.n	8004fbc <HAL_SAI_Init+0xb8>
    default:
      break;
 8004fba:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a85      	ldr	r2, [pc, #532]	; (80051d8 <HAL_SAI_Init+0x2d4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_SAI_Init+0xcc>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a84      	ldr	r2, [pc, #528]	; (80051dc <HAL_SAI_Init+0x2d8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d103      	bne.n	8004fd8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004fd0:	4a83      	ldr	r2, [pc, #524]	; (80051e0 <HAL_SAI_Init+0x2dc>)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e002      	b.n	8004fde <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004fd8:	4a82      	ldr	r2, [pc, #520]	; (80051e4 <HAL_SAI_Init+0x2e0>)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d04c      	beq.n	8005080 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a7a      	ldr	r2, [pc, #488]	; (80051d8 <HAL_SAI_Init+0x2d4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_SAI_Init+0xfa>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a78      	ldr	r2, [pc, #480]	; (80051dc <HAL_SAI_Init+0x2d8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d104      	bne.n	8005008 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004ffe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005002:	f7ff fdd9 	bl	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005006:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a76      	ldr	r2, [pc, #472]	; (80051e8 <HAL_SAI_Init+0x2e4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_SAI_Init+0x118>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a75      	ldr	r2, [pc, #468]	; (80051ec <HAL_SAI_Init+0x2e8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d104      	bne.n	8005026 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800501c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005020:	f7ff fdca 	bl	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005024:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	461a      	mov	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	025b      	lsls	r3, r3, #9
 8005038:	fbb2 f3f3 	udiv	r3, r2, r3
 800503c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a6b      	ldr	r2, [pc, #428]	; (80051f0 <HAL_SAI_Init+0x2ec>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	08da      	lsrs	r2, r3, #3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800504c:	68f9      	ldr	r1, [r7, #12]
 800504e:	4b68      	ldr	r3, [pc, #416]	; (80051f0 <HAL_SAI_Init+0x2ec>)
 8005050:	fba3 2301 	umull	r2, r3, r3, r1
 8005054:	08da      	lsrs	r2, r3, #3
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	1aca      	subs	r2, r1, r3
 8005060:	2a08      	cmp	r2, #8
 8005062:	d904      	bls.n	800506e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	2b04      	cmp	r3, #4
 8005074:	d104      	bne.n	8005080 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	085a      	lsrs	r2, r3, #1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_SAI_Init+0x18c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d109      	bne.n	80050a4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_SAI_Init+0x198>
 8005098:	2300      	movs	r3, #0
 800509a:	e001      	b.n	80050a0 <HAL_SAI_Init+0x19c>
 800509c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	e008      	b.n	80050b6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d102      	bne.n	80050b2 <HAL_SAI_Init+0x1ae>
 80050ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050b0:	e000      	b.n	80050b4 <HAL_SAI_Init+0x1b0>
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6819      	ldr	r1, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4b4c      	ldr	r3, [pc, #304]	; (80051f4 <HAL_SAI_Init+0x2f0>)
 80050c2:	400b      	ands	r3, r1
 80050c4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6819      	ldr	r1, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80050da:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	431a      	orrs	r2, r3
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 80050ee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80050fa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	051b      	lsls	r3, r3, #20
 8005102:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6859      	ldr	r1, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b38      	ldr	r3, [pc, #224]	; (80051f8 <HAL_SAI_Init+0x2f4>)
 8005118:	400b      	ands	r3, r1
 800511a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6859      	ldr	r1, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6899      	ldr	r1, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	4b2d      	ldr	r3, [pc, #180]	; (80051fc <HAL_SAI_Init+0x2f8>)
 8005146:	400b      	ands	r3, r1
 8005148:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6899      	ldr	r1, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800515a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005160:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005166:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516c:	3b01      	subs	r3, #1
 800516e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005170:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68d9      	ldr	r1, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005188:	400b      	ands	r3, r1
 800518a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68d9      	ldr	r1, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a8:	3b01      	subs	r3, #1
 80051aa:	021b      	lsls	r3, r3, #8
 80051ac:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40015804 	.word	0x40015804
 80051dc:	40015824 	.word	0x40015824
 80051e0:	40015800 	.word	0x40015800
 80051e4:	40015c00 	.word	0x40015c00
 80051e8:	40015c04 	.word	0x40015c04
 80051ec:	40015c24 	.word	0x40015c24
 80051f0:	cccccccd 	.word	0xcccccccd
 80051f4:	ff05c010 	.word	0xff05c010
 80051f8:	ffff1ff0 	.word	0xffff1ff0
 80051fc:	fff88000 	.word	0xfff88000

08005200 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8005210:	f7fc fd9c 	bl	8001d4c <HAL_GetTick>
 8005214:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_SAI_Transmit+0x22>
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e0b6      	b.n	8005394 <HAL_SAI_Transmit+0x194>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	f040 80af 	bne.w	8005392 <HAL_SAI_Transmit+0x192>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_SAI_Transmit+0x42>
 800523e:	2302      	movs	r3, #2
 8005240:	e0a8      	b.n	8005394 <HAL_SAI_Transmit+0x194>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->XferSize = Size;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	88fa      	ldrh	r2, [r7, #6]
 800524e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	88fa      	ldrh	r2, [r7, #6]
 8005256:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2212      	movs	r2, #18
 8005264:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d17a      	bne.n	8005374 <HAL_SAI_Transmit+0x174>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f9ba 	bl	80055f8 <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005292:	601a      	str	r2, [r3, #0]
    }

    while (hsai->XferCount > 0)
 8005294:	e06e      	b.n	8005374 <HAL_SAI_Transmit+0x174>
    {
      /* Write data if the FIFO is not full */
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80052a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052a4:	d035      	beq.n	8005312 <HAL_SAI_Transmit+0x112>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	2b40      	cmp	r3, #64	; 0x40
 80052ac:	d10d      	bne.n	80052ca <HAL_SAI_Transmit+0xca>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <HAL_SAI_Transmit+0xca>
        {
          hsai->Instance->DR = (*hsai->pBuffPtr++);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ba:	1c59      	adds	r1, r3, #1
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	6651      	str	r1, [r2, #100]	; 0x64
 80052c0:	781a      	ldrb	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	61da      	str	r2, [r3, #28]
 80052c8:	e01a      	b.n	8005300 <HAL_SAI_Transmit+0x100>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ce:	2b80      	cmp	r3, #128	; 0x80
 80052d0:	d80b      	bhi.n	80052ea <HAL_SAI_Transmit+0xea>
        {
          hsai->Instance->DR = *((uint16_t *)hsai->pBuffPtr);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d6:	881a      	ldrh	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 2;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e2:	1c9a      	adds	r2, r3, #2
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	665a      	str	r2, [r3, #100]	; 0x64
 80052e8:	e00a      	b.n	8005300 <HAL_SAI_Transmit+0x100>
        }
        else
        {
          hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6812      	ldr	r2, [r2, #0]
 80052f4:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 4;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052fa:	1d1a      	adds	r2, r3, #4
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	665a      	str	r2, [r3, #100]	; 0x64
        }
        hsai->XferCount--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005310:	e030      	b.n	8005374 <HAL_SAI_Transmit+0x174>
      }
      else
      {
        /* Check for the Timeout */
        if ((Timeout != HAL_MAX_DELAY) && ((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout)))
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d02c      	beq.n	8005374 <HAL_SAI_Transmit+0x174>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <HAL_SAI_Transmit+0x130>
 8005320:	f7fc fd14 	bl	8001d4c <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d221      	bcs.n	8005374 <HAL_SAI_Transmit+0x174>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005336:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f04f 32ff 	mov.w	r2, #4294967295
 8005348:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f9a2 	bl	8005694 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0208 	orr.w	r2, r2, #8
 800535e:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e00f      	b.n	8005394 <HAL_SAI_Transmit+0x194>
    while (hsai->XferCount > 0)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800537a:	2b00      	cmp	r3, #0
 800537c:	d18b      	bne.n	8005296 <HAL_SAI_Transmit+0x96>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	e000      	b.n	8005394 <HAL_SAI_Transmit+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005392:	2302      	movs	r3, #2
  }
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <SAI_InitI2S+0x2a>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d103      	bne.n	80053ce <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80053cc:	e002      	b.n	80053d4 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053da:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053e2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e076      	b.n	80054ec <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d107      	bne.n	8005414 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005410:	651a      	str	r2, [r3, #80]	; 0x50
 8005412:	e006      	b.n	8005422 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800541a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	651a      	str	r2, [r3, #80]	; 0x50
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d84f      	bhi.n	80054c8 <SAI_InitI2S+0x12c>
 8005428:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <SAI_InitI2S+0x94>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005441 	.word	0x08005441
 8005434:	08005463 	.word	0x08005463
 8005438:	08005485 	.word	0x08005485
 800543c:	080054a7 	.word	0x080054a7

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2280      	movs	r2, #128	; 0x80
 8005444:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	085b      	lsrs	r3, r3, #1
 8005454:	011a      	lsls	r2, r3, #4
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2240      	movs	r2, #64	; 0x40
 800545e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005460:	e034      	b.n	80054cc <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2280      	movs	r2, #128	; 0x80
 8005466:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	019a      	lsls	r2, r3, #6
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	085b      	lsrs	r3, r3, #1
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2280      	movs	r2, #128	; 0x80
 8005480:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005482:	e023      	b.n	80054cc <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	22c0      	movs	r2, #192	; 0xc0
 8005488:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	019a      	lsls	r2, r3, #6
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	085b      	lsrs	r3, r3, #1
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2280      	movs	r2, #128	; 0x80
 80054a2:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80054a4:	e012      	b.n	80054cc <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	22e0      	movs	r2, #224	; 0xe0
 80054aa:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	085b      	lsrs	r3, r3, #1
 80054b0:	019a      	lsls	r2, r3, #6
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	085b      	lsrs	r3, r3, #1
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2280      	movs	r2, #128	; 0x80
 80054c4:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80054c6:	e001      	b.n	80054cc <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e00f      	b.n	80054ec <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d10b      	bne.n	80054ea <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d102      	bne.n	80054de <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2210      	movs	r2, #16
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d102      	bne.n	80054ea <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2208      	movs	r2, #8
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <SAI_InitPCM+0x2a>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d103      	bne.n	800552a <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	63da      	str	r2, [r3, #60]	; 0x3c
 8005528:	e002      	b.n	8005530 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800553c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005544:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005558:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b04      	cmp	r3, #4
 800555e:	d103      	bne.n	8005568 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	645a      	str	r2, [r3, #68]	; 0x44
 8005566:	e002      	b.n	800556e <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	220d      	movs	r2, #13
 800556c:	645a      	str	r2, [r3, #68]	; 0x44
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b03      	cmp	r3, #3
 8005572:	d837      	bhi.n	80055e4 <SAI_InitPCM+0xec>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <SAI_InitPCM+0x84>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	0800558d 	.word	0x0800558d
 8005580:	080055a3 	.word	0x080055a3
 8005584:	080055b9 	.word	0x080055b9
 8005588:	080055cf 	.word	0x080055cf
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2280      	movs	r2, #128	; 0x80
 8005590:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	011a      	lsls	r2, r3, #4
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2240      	movs	r2, #64	; 0x40
 800559e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80055a0:	e022      	b.n	80055e8 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2280      	movs	r2, #128	; 0x80
 80055a6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2280      	movs	r2, #128	; 0x80
 80055b4:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80055b6:	e017      	b.n	80055e8 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	22c0      	movs	r2, #192	; 0xc0
 80055bc:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2280      	movs	r2, #128	; 0x80
 80055ca:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80055cc:	e00c      	b.n	80055e8 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	22e0      	movs	r2, #224	; 0xe0
 80055d2:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2280      	movs	r2, #128	; 0x80
 80055e0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80055e2:	e001      	b.n	80055e8 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop

080055f8 <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* fill the fifo with data before to enabled the SAI */
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 8005600:	e034      	b.n	800566c <SAI_FillFifo+0x74>
  {
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	2b40      	cmp	r3, #64	; 0x40
 8005608:	d10d      	bne.n	8005626 <SAI_FillFifo+0x2e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <SAI_FillFifo+0x2e>
    {
      hsai->Instance->DR = (*hsai->pBuffPtr++);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005616:	1c59      	adds	r1, r3, #1
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6651      	str	r1, [r2, #100]	; 0x64
 800561c:	781a      	ldrb	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	61da      	str	r2, [r3, #28]
 8005624:	e01a      	b.n	800565c <SAI_FillFifo+0x64>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d80b      	bhi.n	8005646 <SAI_FillFifo+0x4e>
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6812      	ldr	r2, [r2, #0]
 8005638:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800563e:	1c9a      	adds	r2, r3, #2
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	665a      	str	r2, [r3, #100]	; 0x64
 8005644:	e00a      	b.n	800565c <SAI_FillFifo+0x64>
    }
    else
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 4;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005656:	1d1a      	adds	r2, r3, #4
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    hsai->XferCount--;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005676:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800567a:	d004      	beq.n	8005686 <SAI_FillFifo+0x8e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1bd      	bne.n	8005602 <SAI_FillFifo+0xa>
  }
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800569c:	4b17      	ldr	r3, [pc, #92]	; (80056fc <SAI_Disable+0x68>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a17      	ldr	r2, [pc, #92]	; (8005700 <SAI_Disable+0x6c>)
 80056a2:	fba2 2303 	umull	r2, r3, r2, r3
 80056a6:	0b1b      	lsrs	r3, r3, #12
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80056be:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1e5a      	subs	r2, r3, #1
 80056c4:	60fa      	str	r2, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	72fb      	strb	r3, [r7, #11]
      break;
 80056de:	e006      	b.n	80056ee <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e8      	bne.n	80056c0 <SAI_Disable+0x2c>

  return status;
 80056ee:	7afb      	ldrb	r3, [r7, #11]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	20075314 	.word	0x20075314
 8005700:	95cbec1b 	.word	0x95cbec1b

08005704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e040      	b.n	8005798 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fc f898 	bl	800185c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2224      	movs	r2, #36	; 0x24
 8005730:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f912 	bl	800596c <UART_SetConfig>
 8005748:	4603      	mov	r3, r0
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e022      	b.n	8005798 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fb68 	bl	8005e30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800576e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800577e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fbef 	bl	8005f74 <UART_CheckIdleState>
 8005796:	4603      	mov	r3, r0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	; 0x28
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	4613      	mov	r3, r2
 80057ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	f040 8081 	bne.w	80058bc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_UART_Transmit+0x26>
 80057c0:	88fb      	ldrh	r3, [r7, #6]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e079      	b.n	80058be <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_UART_Transmit+0x38>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e072      	b.n	80058be <HAL_UART_Transmit+0x11e>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2221      	movs	r2, #33	; 0x21
 80057ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057ee:	f7fc faad 	bl	8001d4c <HAL_GetTick>
 80057f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	88fa      	ldrh	r2, [r7, #6]
 80057f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580c:	d108      	bne.n	8005820 <HAL_UART_Transmit+0x80>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d104      	bne.n	8005820 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	e003      	b.n	8005828 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005830:	e02c      	b.n	800588c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2200      	movs	r2, #0
 800583a:	2180      	movs	r1, #128	; 0x80
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fbe2 	bl	8006006 <UART_WaitOnFlagUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e038      	b.n	80058be <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10b      	bne.n	800586a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005860:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	3302      	adds	r3, #2
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	e007      	b.n	800587a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	781a      	ldrb	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	3301      	adds	r3, #1
 8005878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1cc      	bne.n	8005832 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2200      	movs	r2, #0
 80058a0:	2140      	movs	r1, #64	; 0x40
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 fbaf 	bl	8006006 <UART_WaitOnFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e005      	b.n	80058be <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	e000      	b.n	80058be <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80058bc:	2302      	movs	r3, #2
  }
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	4613      	mov	r3, r2
 80058d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d12c      	bne.n	8005936 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_UART_Receive_DMA+0x22>
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e025      	b.n	8005938 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_UART_Receive_DMA+0x34>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e01e      	b.n	8005938 <HAL_UART_Receive_DMA+0x72>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005924:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	461a      	mov	r2, r3
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 fbe7 	bl	8006100 <UART_Start_Receive_DMA>
 8005932:	4603      	mov	r3, r0
 8005934:	e000      	b.n	8005938 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005936:	2302      	movs	r3, #2
  }
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4ba7      	ldr	r3, [pc, #668]	; (8005c34 <UART_SetConfig+0x2c8>)
 8005998:	4013      	ands	r3, r2
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6812      	ldr	r2, [r2, #0]
 800599e:	6979      	ldr	r1, [r7, #20]
 80059a0:	430b      	orrs	r3, r1
 80059a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	430a      	orrs	r2, r1
 80059dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a95      	ldr	r2, [pc, #596]	; (8005c38 <UART_SetConfig+0x2cc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d120      	bne.n	8005a2a <UART_SetConfig+0xbe>
 80059e8:	4b94      	ldr	r3, [pc, #592]	; (8005c3c <UART_SetConfig+0x2d0>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d816      	bhi.n	8005a24 <UART_SetConfig+0xb8>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <UART_SetConfig+0x90>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a19 	.word	0x08005a19
 8005a04:	08005a13 	.word	0x08005a13
 8005a08:	08005a1f 	.word	0x08005a1f
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e14f      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a12:	2302      	movs	r3, #2
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e14c      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e149      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a1e:	2308      	movs	r3, #8
 8005a20:	77fb      	strb	r3, [r7, #31]
 8005a22:	e146      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a24:	2310      	movs	r3, #16
 8005a26:	77fb      	strb	r3, [r7, #31]
 8005a28:	e143      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a84      	ldr	r2, [pc, #528]	; (8005c40 <UART_SetConfig+0x2d4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d132      	bne.n	8005a9a <UART_SetConfig+0x12e>
 8005a34:	4b81      	ldr	r3, [pc, #516]	; (8005c3c <UART_SetConfig+0x2d0>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3a:	f003 030c 	and.w	r3, r3, #12
 8005a3e:	2b0c      	cmp	r3, #12
 8005a40:	d828      	bhi.n	8005a94 <UART_SetConfig+0x128>
 8005a42:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <UART_SetConfig+0xdc>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005a7d 	.word	0x08005a7d
 8005a4c:	08005a95 	.word	0x08005a95
 8005a50:	08005a95 	.word	0x08005a95
 8005a54:	08005a95 	.word	0x08005a95
 8005a58:	08005a89 	.word	0x08005a89
 8005a5c:	08005a95 	.word	0x08005a95
 8005a60:	08005a95 	.word	0x08005a95
 8005a64:	08005a95 	.word	0x08005a95
 8005a68:	08005a83 	.word	0x08005a83
 8005a6c:	08005a95 	.word	0x08005a95
 8005a70:	08005a95 	.word	0x08005a95
 8005a74:	08005a95 	.word	0x08005a95
 8005a78:	08005a8f 	.word	0x08005a8f
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	77fb      	strb	r3, [r7, #31]
 8005a80:	e117      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a82:	2302      	movs	r3, #2
 8005a84:	77fb      	strb	r3, [r7, #31]
 8005a86:	e114      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	77fb      	strb	r3, [r7, #31]
 8005a8c:	e111      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a8e:	2308      	movs	r3, #8
 8005a90:	77fb      	strb	r3, [r7, #31]
 8005a92:	e10e      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a94:	2310      	movs	r3, #16
 8005a96:	77fb      	strb	r3, [r7, #31]
 8005a98:	e10b      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a69      	ldr	r2, [pc, #420]	; (8005c44 <UART_SetConfig+0x2d8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d120      	bne.n	8005ae6 <UART_SetConfig+0x17a>
 8005aa4:	4b65      	ldr	r3, [pc, #404]	; (8005c3c <UART_SetConfig+0x2d0>)
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aaa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aae:	2b30      	cmp	r3, #48	; 0x30
 8005ab0:	d013      	beq.n	8005ada <UART_SetConfig+0x16e>
 8005ab2:	2b30      	cmp	r3, #48	; 0x30
 8005ab4:	d814      	bhi.n	8005ae0 <UART_SetConfig+0x174>
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d009      	beq.n	8005ace <UART_SetConfig+0x162>
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d810      	bhi.n	8005ae0 <UART_SetConfig+0x174>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <UART_SetConfig+0x15c>
 8005ac2:	2b10      	cmp	r3, #16
 8005ac4:	d006      	beq.n	8005ad4 <UART_SetConfig+0x168>
 8005ac6:	e00b      	b.n	8005ae0 <UART_SetConfig+0x174>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e0f1      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	77fb      	strb	r3, [r7, #31]
 8005ad2:	e0ee      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	77fb      	strb	r3, [r7, #31]
 8005ad8:	e0eb      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ada:	2308      	movs	r3, #8
 8005adc:	77fb      	strb	r3, [r7, #31]
 8005ade:	e0e8      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	77fb      	strb	r3, [r7, #31]
 8005ae4:	e0e5      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a57      	ldr	r2, [pc, #348]	; (8005c48 <UART_SetConfig+0x2dc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d120      	bne.n	8005b32 <UART_SetConfig+0x1c6>
 8005af0:	4b52      	ldr	r3, [pc, #328]	; (8005c3c <UART_SetConfig+0x2d0>)
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005afa:	2bc0      	cmp	r3, #192	; 0xc0
 8005afc:	d013      	beq.n	8005b26 <UART_SetConfig+0x1ba>
 8005afe:	2bc0      	cmp	r3, #192	; 0xc0
 8005b00:	d814      	bhi.n	8005b2c <UART_SetConfig+0x1c0>
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d009      	beq.n	8005b1a <UART_SetConfig+0x1ae>
 8005b06:	2b80      	cmp	r3, #128	; 0x80
 8005b08:	d810      	bhi.n	8005b2c <UART_SetConfig+0x1c0>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <UART_SetConfig+0x1a8>
 8005b0e:	2b40      	cmp	r3, #64	; 0x40
 8005b10:	d006      	beq.n	8005b20 <UART_SetConfig+0x1b4>
 8005b12:	e00b      	b.n	8005b2c <UART_SetConfig+0x1c0>
 8005b14:	2300      	movs	r3, #0
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e0cb      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	77fb      	strb	r3, [r7, #31]
 8005b1e:	e0c8      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b20:	2304      	movs	r3, #4
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e0c5      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b26:	2308      	movs	r3, #8
 8005b28:	77fb      	strb	r3, [r7, #31]
 8005b2a:	e0c2      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	77fb      	strb	r3, [r7, #31]
 8005b30:	e0bf      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a45      	ldr	r2, [pc, #276]	; (8005c4c <UART_SetConfig+0x2e0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d125      	bne.n	8005b88 <UART_SetConfig+0x21c>
 8005b3c:	4b3f      	ldr	r3, [pc, #252]	; (8005c3c <UART_SetConfig+0x2d0>)
 8005b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b4a:	d017      	beq.n	8005b7c <UART_SetConfig+0x210>
 8005b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b50:	d817      	bhi.n	8005b82 <UART_SetConfig+0x216>
 8005b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b56:	d00b      	beq.n	8005b70 <UART_SetConfig+0x204>
 8005b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b5c:	d811      	bhi.n	8005b82 <UART_SetConfig+0x216>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <UART_SetConfig+0x1fe>
 8005b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b66:	d006      	beq.n	8005b76 <UART_SetConfig+0x20a>
 8005b68:	e00b      	b.n	8005b82 <UART_SetConfig+0x216>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	77fb      	strb	r3, [r7, #31]
 8005b6e:	e0a0      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b70:	2302      	movs	r3, #2
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e09d      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b76:	2304      	movs	r3, #4
 8005b78:	77fb      	strb	r3, [r7, #31]
 8005b7a:	e09a      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	77fb      	strb	r3, [r7, #31]
 8005b80:	e097      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b82:	2310      	movs	r3, #16
 8005b84:	77fb      	strb	r3, [r7, #31]
 8005b86:	e094      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a30      	ldr	r2, [pc, #192]	; (8005c50 <UART_SetConfig+0x2e4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d125      	bne.n	8005bde <UART_SetConfig+0x272>
 8005b92:	4b2a      	ldr	r3, [pc, #168]	; (8005c3c <UART_SetConfig+0x2d0>)
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba0:	d017      	beq.n	8005bd2 <UART_SetConfig+0x266>
 8005ba2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba6:	d817      	bhi.n	8005bd8 <UART_SetConfig+0x26c>
 8005ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bac:	d00b      	beq.n	8005bc6 <UART_SetConfig+0x25a>
 8005bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb2:	d811      	bhi.n	8005bd8 <UART_SetConfig+0x26c>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <UART_SetConfig+0x254>
 8005bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bbc:	d006      	beq.n	8005bcc <UART_SetConfig+0x260>
 8005bbe:	e00b      	b.n	8005bd8 <UART_SetConfig+0x26c>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e075      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	77fb      	strb	r3, [r7, #31]
 8005bca:	e072      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	77fb      	strb	r3, [r7, #31]
 8005bd0:	e06f      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	77fb      	strb	r3, [r7, #31]
 8005bd6:	e06c      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005bd8:	2310      	movs	r3, #16
 8005bda:	77fb      	strb	r3, [r7, #31]
 8005bdc:	e069      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1c      	ldr	r2, [pc, #112]	; (8005c54 <UART_SetConfig+0x2e8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d137      	bne.n	8005c58 <UART_SetConfig+0x2ec>
 8005be8:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <UART_SetConfig+0x2d0>)
 8005bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bf6:	d017      	beq.n	8005c28 <UART_SetConfig+0x2bc>
 8005bf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bfc:	d817      	bhi.n	8005c2e <UART_SetConfig+0x2c2>
 8005bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c02:	d00b      	beq.n	8005c1c <UART_SetConfig+0x2b0>
 8005c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c08:	d811      	bhi.n	8005c2e <UART_SetConfig+0x2c2>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <UART_SetConfig+0x2aa>
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c12:	d006      	beq.n	8005c22 <UART_SetConfig+0x2b6>
 8005c14:	e00b      	b.n	8005c2e <UART_SetConfig+0x2c2>
 8005c16:	2300      	movs	r3, #0
 8005c18:	77fb      	strb	r3, [r7, #31]
 8005c1a:	e04a      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e047      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c22:	2304      	movs	r3, #4
 8005c24:	77fb      	strb	r3, [r7, #31]
 8005c26:	e044      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c28:	2308      	movs	r3, #8
 8005c2a:	77fb      	strb	r3, [r7, #31]
 8005c2c:	e041      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c2e:	2310      	movs	r3, #16
 8005c30:	77fb      	strb	r3, [r7, #31]
 8005c32:	e03e      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c34:	efff69f3 	.word	0xefff69f3
 8005c38:	40011000 	.word	0x40011000
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	40004400 	.word	0x40004400
 8005c44:	40004800 	.word	0x40004800
 8005c48:	40004c00 	.word	0x40004c00
 8005c4c:	40005000 	.word	0x40005000
 8005c50:	40011400 	.word	0x40011400
 8005c54:	40007800 	.word	0x40007800
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a71      	ldr	r2, [pc, #452]	; (8005e24 <UART_SetConfig+0x4b8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d125      	bne.n	8005cae <UART_SetConfig+0x342>
 8005c62:	4b71      	ldr	r3, [pc, #452]	; (8005e28 <UART_SetConfig+0x4bc>)
 8005c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c70:	d017      	beq.n	8005ca2 <UART_SetConfig+0x336>
 8005c72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c76:	d817      	bhi.n	8005ca8 <UART_SetConfig+0x33c>
 8005c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c7c:	d00b      	beq.n	8005c96 <UART_SetConfig+0x32a>
 8005c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c82:	d811      	bhi.n	8005ca8 <UART_SetConfig+0x33c>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <UART_SetConfig+0x324>
 8005c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c8c:	d006      	beq.n	8005c9c <UART_SetConfig+0x330>
 8005c8e:	e00b      	b.n	8005ca8 <UART_SetConfig+0x33c>
 8005c90:	2300      	movs	r3, #0
 8005c92:	77fb      	strb	r3, [r7, #31]
 8005c94:	e00d      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c96:	2302      	movs	r3, #2
 8005c98:	77fb      	strb	r3, [r7, #31]
 8005c9a:	e00a      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e007      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	77fb      	strb	r3, [r7, #31]
 8005ca6:	e004      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ca8:	2310      	movs	r3, #16
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e001      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005cae:	2310      	movs	r3, #16
 8005cb0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cba:	d15b      	bne.n	8005d74 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005cbc:	7ffb      	ldrb	r3, [r7, #31]
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d827      	bhi.n	8005d12 <UART_SetConfig+0x3a6>
 8005cc2:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <UART_SetConfig+0x35c>)
 8005cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc8:	08005ced 	.word	0x08005ced
 8005ccc:	08005cf5 	.word	0x08005cf5
 8005cd0:	08005cfd 	.word	0x08005cfd
 8005cd4:	08005d13 	.word	0x08005d13
 8005cd8:	08005d03 	.word	0x08005d03
 8005cdc:	08005d13 	.word	0x08005d13
 8005ce0:	08005d13 	.word	0x08005d13
 8005ce4:	08005d13 	.word	0x08005d13
 8005ce8:	08005d0b 	.word	0x08005d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cec:	f7fe fb14 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 8005cf0:	61b8      	str	r0, [r7, #24]
        break;
 8005cf2:	e013      	b.n	8005d1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf4:	f7fe fb24 	bl	8004340 <HAL_RCC_GetPCLK2Freq>
 8005cf8:	61b8      	str	r0, [r7, #24]
        break;
 8005cfa:	e00f      	b.n	8005d1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cfc:	4b4b      	ldr	r3, [pc, #300]	; (8005e2c <UART_SetConfig+0x4c0>)
 8005cfe:	61bb      	str	r3, [r7, #24]
        break;
 8005d00:	e00c      	b.n	8005d1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d02:	f7fe fa47 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8005d06:	61b8      	str	r0, [r7, #24]
        break;
 8005d08:	e008      	b.n	8005d1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0e:	61bb      	str	r3, [r7, #24]
        break;
 8005d10:	e004      	b.n	8005d1c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	77bb      	strb	r3, [r7, #30]
        break;
 8005d1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d074      	beq.n	8005e0c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	005a      	lsls	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	441a      	add	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b0f      	cmp	r3, #15
 8005d3e:	d916      	bls.n	8005d6e <UART_SetConfig+0x402>
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d46:	d212      	bcs.n	8005d6e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f023 030f 	bic.w	r3, r3, #15
 8005d50:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	89fb      	ldrh	r3, [r7, #14]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	89fa      	ldrh	r2, [r7, #14]
 8005d6a:	60da      	str	r2, [r3, #12]
 8005d6c:	e04e      	b.n	8005e0c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	77bb      	strb	r3, [r7, #30]
 8005d72:	e04b      	b.n	8005e0c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d74:	7ffb      	ldrb	r3, [r7, #31]
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d827      	bhi.n	8005dca <UART_SetConfig+0x45e>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <UART_SetConfig+0x414>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005da5 	.word	0x08005da5
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005db5 	.word	0x08005db5
 8005d8c:	08005dcb 	.word	0x08005dcb
 8005d90:	08005dbb 	.word	0x08005dbb
 8005d94:	08005dcb 	.word	0x08005dcb
 8005d98:	08005dcb 	.word	0x08005dcb
 8005d9c:	08005dcb 	.word	0x08005dcb
 8005da0:	08005dc3 	.word	0x08005dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da4:	f7fe fab8 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 8005da8:	61b8      	str	r0, [r7, #24]
        break;
 8005daa:	e013      	b.n	8005dd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dac:	f7fe fac8 	bl	8004340 <HAL_RCC_GetPCLK2Freq>
 8005db0:	61b8      	str	r0, [r7, #24]
        break;
 8005db2:	e00f      	b.n	8005dd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005db4:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <UART_SetConfig+0x4c0>)
 8005db6:	61bb      	str	r3, [r7, #24]
        break;
 8005db8:	e00c      	b.n	8005dd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dba:	f7fe f9eb 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8005dbe:	61b8      	str	r0, [r7, #24]
        break;
 8005dc0:	e008      	b.n	8005dd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dc6:	61bb      	str	r3, [r7, #24]
        break;
 8005dc8:	e004      	b.n	8005dd4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	77bb      	strb	r3, [r7, #30]
        break;
 8005dd2:	bf00      	nop
    }

    if (pclk != 0U)
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d018      	beq.n	8005e0c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	085a      	lsrs	r2, r3, #1
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	441a      	add	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b0f      	cmp	r3, #15
 8005df4:	d908      	bls.n	8005e08 <UART_SetConfig+0x49c>
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfc:	d204      	bcs.n	8005e08 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	60da      	str	r2, [r3, #12]
 8005e06:	e001      	b.n	8005e0c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e18:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40007c00 	.word	0x40007c00
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	00f42400 	.word	0x00f42400

08005e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01a      	beq.n	8005f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f2e:	d10a      	bne.n	8005f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]
  }
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f84:	f7fb fee2 	bl	8001d4c <HAL_GetTick>
 8005f88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d10e      	bne.n	8005fb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f82d 	bl	8006006 <UART_WaitOnFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e023      	b.n	8005ffe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d10e      	bne.n	8005fe2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f817 	bl	8006006 <UART_WaitOnFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e00d      	b.n	8005ffe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	4613      	mov	r3, r2
 8006014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006016:	e05e      	b.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601e:	d05a      	beq.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006020:	f7fb fe94 	bl	8001d4c <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	429a      	cmp	r2, r3
 800602e:	d302      	bcc.n	8006036 <UART_WaitOnFlagUntilTimeout+0x30>
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d11b      	bne.n	800606e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006044:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e043      	b.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d02c      	beq.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800608a:	d124      	bne.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006094:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e00f      	b.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4013      	ands	r3, r2
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	bf0c      	ite	eq
 80060e6:	2301      	moveq	r3, #1
 80060e8:	2300      	movne	r3, #0
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d091      	beq.n	8006018 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	4613      	mov	r3, r2
 800610c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	88fa      	ldrh	r2, [r7, #6]
 8006118:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2222      	movs	r2, #34	; 0x22
 8006128:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	2b00      	cmp	r3, #0
 8006130:	d02b      	beq.n	800618a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006136:	4a25      	ldr	r2, [pc, #148]	; (80061cc <UART_Start_Receive_DMA+0xcc>)
 8006138:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613e:	4a24      	ldr	r2, [pc, #144]	; (80061d0 <UART_Start_Receive_DMA+0xd0>)
 8006140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	4a23      	ldr	r2, [pc, #140]	; (80061d4 <UART_Start_Receive_DMA+0xd4>)
 8006148:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614e:	2200      	movs	r2, #0
 8006150:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3324      	adds	r3, #36	; 0x24
 800615c:	4619      	mov	r1, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	461a      	mov	r2, r3
 8006164:	88fb      	ldrh	r3, [r7, #6]
 8006166:	f7fb ffbd 	bl	80020e4 <HAL_DMA_Start_IT>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00c      	beq.n	800618a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2210      	movs	r2, #16
 8006174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e01c      	b.n	80061c4 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061a0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0201 	orr.w	r2, r2, #1
 80061b0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061c0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	08006261 	.word	0x08006261
 80061d0:	080062f5 	.word	0x080062f5
 80061d4:	0800632d 	.word	0x0800632d

080061d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80061ee:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	679a      	str	r2, [r3, #120]	; 0x78
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006218:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0201 	bic.w	r2, r2, #1
 8006228:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800622e:	2b01      	cmp	r3, #1
 8006230:	d107      	bne.n	8006242 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0210 	bic.w	r2, r2, #16
 8006240:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006276:	d02a      	beq.n	80062ce <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800628e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ae:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2220      	movs	r2, #32
 80062b4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d107      	bne.n	80062ce <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0210 	bic.w	r2, r2, #16
 80062cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d107      	bne.n	80062e6 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062dc:	4619      	mov	r1, r3
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f7ff fb38 	bl	8005954 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062e4:	e002      	b.n	80062ec <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7fa fefe 	bl	80010e8 <HAL_UART_RxCpltCallback>
}
 80062ec:	bf00      	nop
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006306:	2b01      	cmp	r3, #1
 8006308:	d109      	bne.n	800631e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006310:	085b      	lsrs	r3, r3, #1
 8006312:	b29b      	uxth	r3, r3
 8006314:	4619      	mov	r1, r3
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f7ff fb1c 	bl	8005954 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800631c:	e002      	b.n	8006324 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f7fa feca 	bl	80010b8 <HAL_UART_RxHalfCpltCallback>
}
 8006324:	bf00      	nop
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800633e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006344:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006350:	2b80      	cmp	r3, #128	; 0x80
 8006352:	d109      	bne.n	8006368 <UART_DMAError+0x3c>
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b21      	cmp	r3, #33	; 0x21
 8006358:	d106      	bne.n	8006368 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2200      	movs	r2, #0
 800635e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006362:	6978      	ldr	r0, [r7, #20]
 8006364:	f7ff ff38 	bl	80061d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006372:	2b40      	cmp	r3, #64	; 0x40
 8006374:	d109      	bne.n	800638a <UART_DMAError+0x5e>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b22      	cmp	r3, #34	; 0x22
 800637a:	d106      	bne.n	800638a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2200      	movs	r2, #0
 8006380:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006384:	6978      	ldr	r0, [r7, #20]
 8006386:	f7ff ff3c 	bl	8006202 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006390:	f043 0210 	orr.w	r2, r3, #16
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800639a:	6978      	ldr	r0, [r7, #20]
 800639c:	f7ff fad0 	bl	8005940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063a0:	bf00      	nop
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <__errno>:
 80063a8:	4b01      	ldr	r3, [pc, #4]	; (80063b0 <__errno+0x8>)
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	20075320 	.word	0x20075320

080063b4 <__libc_init_array>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	4d0d      	ldr	r5, [pc, #52]	; (80063ec <__libc_init_array+0x38>)
 80063b8:	4c0d      	ldr	r4, [pc, #52]	; (80063f0 <__libc_init_array+0x3c>)
 80063ba:	1b64      	subs	r4, r4, r5
 80063bc:	10a4      	asrs	r4, r4, #2
 80063be:	2600      	movs	r6, #0
 80063c0:	42a6      	cmp	r6, r4
 80063c2:	d109      	bne.n	80063d8 <__libc_init_array+0x24>
 80063c4:	4d0b      	ldr	r5, [pc, #44]	; (80063f4 <__libc_init_array+0x40>)
 80063c6:	4c0c      	ldr	r4, [pc, #48]	; (80063f8 <__libc_init_array+0x44>)
 80063c8:	f000 fcf6 	bl	8006db8 <_init>
 80063cc:	1b64      	subs	r4, r4, r5
 80063ce:	10a4      	asrs	r4, r4, #2
 80063d0:	2600      	movs	r6, #0
 80063d2:	42a6      	cmp	r6, r4
 80063d4:	d105      	bne.n	80063e2 <__libc_init_array+0x2e>
 80063d6:	bd70      	pop	{r4, r5, r6, pc}
 80063d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063dc:	4798      	blx	r3
 80063de:	3601      	adds	r6, #1
 80063e0:	e7ee      	b.n	80063c0 <__libc_init_array+0xc>
 80063e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e6:	4798      	blx	r3
 80063e8:	3601      	adds	r6, #1
 80063ea:	e7f2      	b.n	80063d2 <__libc_init_array+0x1e>
 80063ec:	08008554 	.word	0x08008554
 80063f0:	08008554 	.word	0x08008554
 80063f4:	08008554 	.word	0x08008554
 80063f8:	08008558 	.word	0x08008558

080063fc <malloc>:
 80063fc:	4b02      	ldr	r3, [pc, #8]	; (8006408 <malloc+0xc>)
 80063fe:	4601      	mov	r1, r0
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	f000 b863 	b.w	80064cc <_malloc_r>
 8006406:	bf00      	nop
 8006408:	20075320 	.word	0x20075320

0800640c <free>:
 800640c:	4b02      	ldr	r3, [pc, #8]	; (8006418 <free+0xc>)
 800640e:	4601      	mov	r1, r0
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	f000 b80b 	b.w	800642c <_free_r>
 8006416:	bf00      	nop
 8006418:	20075320 	.word	0x20075320

0800641c <memset>:
 800641c:	4402      	add	r2, r0
 800641e:	4603      	mov	r3, r0
 8006420:	4293      	cmp	r3, r2
 8006422:	d100      	bne.n	8006426 <memset+0xa>
 8006424:	4770      	bx	lr
 8006426:	f803 1b01 	strb.w	r1, [r3], #1
 800642a:	e7f9      	b.n	8006420 <memset+0x4>

0800642c <_free_r>:
 800642c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800642e:	2900      	cmp	r1, #0
 8006430:	d048      	beq.n	80064c4 <_free_r+0x98>
 8006432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006436:	9001      	str	r0, [sp, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f1a1 0404 	sub.w	r4, r1, #4
 800643e:	bfb8      	it	lt
 8006440:	18e4      	addlt	r4, r4, r3
 8006442:	f000 fc01 	bl	8006c48 <__malloc_lock>
 8006446:	4a20      	ldr	r2, [pc, #128]	; (80064c8 <_free_r+0x9c>)
 8006448:	9801      	ldr	r0, [sp, #4]
 800644a:	6813      	ldr	r3, [r2, #0]
 800644c:	4615      	mov	r5, r2
 800644e:	b933      	cbnz	r3, 800645e <_free_r+0x32>
 8006450:	6063      	str	r3, [r4, #4]
 8006452:	6014      	str	r4, [r2, #0]
 8006454:	b003      	add	sp, #12
 8006456:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800645a:	f000 bbfb 	b.w	8006c54 <__malloc_unlock>
 800645e:	42a3      	cmp	r3, r4
 8006460:	d90b      	bls.n	800647a <_free_r+0x4e>
 8006462:	6821      	ldr	r1, [r4, #0]
 8006464:	1862      	adds	r2, r4, r1
 8006466:	4293      	cmp	r3, r2
 8006468:	bf04      	itt	eq
 800646a:	681a      	ldreq	r2, [r3, #0]
 800646c:	685b      	ldreq	r3, [r3, #4]
 800646e:	6063      	str	r3, [r4, #4]
 8006470:	bf04      	itt	eq
 8006472:	1852      	addeq	r2, r2, r1
 8006474:	6022      	streq	r2, [r4, #0]
 8006476:	602c      	str	r4, [r5, #0]
 8006478:	e7ec      	b.n	8006454 <_free_r+0x28>
 800647a:	461a      	mov	r2, r3
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	b10b      	cbz	r3, 8006484 <_free_r+0x58>
 8006480:	42a3      	cmp	r3, r4
 8006482:	d9fa      	bls.n	800647a <_free_r+0x4e>
 8006484:	6811      	ldr	r1, [r2, #0]
 8006486:	1855      	adds	r5, r2, r1
 8006488:	42a5      	cmp	r5, r4
 800648a:	d10b      	bne.n	80064a4 <_free_r+0x78>
 800648c:	6824      	ldr	r4, [r4, #0]
 800648e:	4421      	add	r1, r4
 8006490:	1854      	adds	r4, r2, r1
 8006492:	42a3      	cmp	r3, r4
 8006494:	6011      	str	r1, [r2, #0]
 8006496:	d1dd      	bne.n	8006454 <_free_r+0x28>
 8006498:	681c      	ldr	r4, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	6053      	str	r3, [r2, #4]
 800649e:	4421      	add	r1, r4
 80064a0:	6011      	str	r1, [r2, #0]
 80064a2:	e7d7      	b.n	8006454 <_free_r+0x28>
 80064a4:	d902      	bls.n	80064ac <_free_r+0x80>
 80064a6:	230c      	movs	r3, #12
 80064a8:	6003      	str	r3, [r0, #0]
 80064aa:	e7d3      	b.n	8006454 <_free_r+0x28>
 80064ac:	6825      	ldr	r5, [r4, #0]
 80064ae:	1961      	adds	r1, r4, r5
 80064b0:	428b      	cmp	r3, r1
 80064b2:	bf04      	itt	eq
 80064b4:	6819      	ldreq	r1, [r3, #0]
 80064b6:	685b      	ldreq	r3, [r3, #4]
 80064b8:	6063      	str	r3, [r4, #4]
 80064ba:	bf04      	itt	eq
 80064bc:	1949      	addeq	r1, r1, r5
 80064be:	6021      	streq	r1, [r4, #0]
 80064c0:	6054      	str	r4, [r2, #4]
 80064c2:	e7c7      	b.n	8006454 <_free_r+0x28>
 80064c4:	b003      	add	sp, #12
 80064c6:	bd30      	pop	{r4, r5, pc}
 80064c8:	20075cbc 	.word	0x20075cbc

080064cc <_malloc_r>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	1ccd      	adds	r5, r1, #3
 80064d0:	f025 0503 	bic.w	r5, r5, #3
 80064d4:	3508      	adds	r5, #8
 80064d6:	2d0c      	cmp	r5, #12
 80064d8:	bf38      	it	cc
 80064da:	250c      	movcc	r5, #12
 80064dc:	2d00      	cmp	r5, #0
 80064de:	4606      	mov	r6, r0
 80064e0:	db01      	blt.n	80064e6 <_malloc_r+0x1a>
 80064e2:	42a9      	cmp	r1, r5
 80064e4:	d903      	bls.n	80064ee <_malloc_r+0x22>
 80064e6:	230c      	movs	r3, #12
 80064e8:	6033      	str	r3, [r6, #0]
 80064ea:	2000      	movs	r0, #0
 80064ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064ee:	f000 fbab 	bl	8006c48 <__malloc_lock>
 80064f2:	4921      	ldr	r1, [pc, #132]	; (8006578 <_malloc_r+0xac>)
 80064f4:	680a      	ldr	r2, [r1, #0]
 80064f6:	4614      	mov	r4, r2
 80064f8:	b99c      	cbnz	r4, 8006522 <_malloc_r+0x56>
 80064fa:	4f20      	ldr	r7, [pc, #128]	; (800657c <_malloc_r+0xb0>)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	b923      	cbnz	r3, 800650a <_malloc_r+0x3e>
 8006500:	4621      	mov	r1, r4
 8006502:	4630      	mov	r0, r6
 8006504:	f000 f8b2 	bl	800666c <_sbrk_r>
 8006508:	6038      	str	r0, [r7, #0]
 800650a:	4629      	mov	r1, r5
 800650c:	4630      	mov	r0, r6
 800650e:	f000 f8ad 	bl	800666c <_sbrk_r>
 8006512:	1c43      	adds	r3, r0, #1
 8006514:	d123      	bne.n	800655e <_malloc_r+0x92>
 8006516:	230c      	movs	r3, #12
 8006518:	6033      	str	r3, [r6, #0]
 800651a:	4630      	mov	r0, r6
 800651c:	f000 fb9a 	bl	8006c54 <__malloc_unlock>
 8006520:	e7e3      	b.n	80064ea <_malloc_r+0x1e>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	1b5b      	subs	r3, r3, r5
 8006526:	d417      	bmi.n	8006558 <_malloc_r+0x8c>
 8006528:	2b0b      	cmp	r3, #11
 800652a:	d903      	bls.n	8006534 <_malloc_r+0x68>
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	441c      	add	r4, r3
 8006530:	6025      	str	r5, [r4, #0]
 8006532:	e004      	b.n	800653e <_malloc_r+0x72>
 8006534:	6863      	ldr	r3, [r4, #4]
 8006536:	42a2      	cmp	r2, r4
 8006538:	bf0c      	ite	eq
 800653a:	600b      	streq	r3, [r1, #0]
 800653c:	6053      	strne	r3, [r2, #4]
 800653e:	4630      	mov	r0, r6
 8006540:	f000 fb88 	bl	8006c54 <__malloc_unlock>
 8006544:	f104 000b 	add.w	r0, r4, #11
 8006548:	1d23      	adds	r3, r4, #4
 800654a:	f020 0007 	bic.w	r0, r0, #7
 800654e:	1ac2      	subs	r2, r0, r3
 8006550:	d0cc      	beq.n	80064ec <_malloc_r+0x20>
 8006552:	1a1b      	subs	r3, r3, r0
 8006554:	50a3      	str	r3, [r4, r2]
 8006556:	e7c9      	b.n	80064ec <_malloc_r+0x20>
 8006558:	4622      	mov	r2, r4
 800655a:	6864      	ldr	r4, [r4, #4]
 800655c:	e7cc      	b.n	80064f8 <_malloc_r+0x2c>
 800655e:	1cc4      	adds	r4, r0, #3
 8006560:	f024 0403 	bic.w	r4, r4, #3
 8006564:	42a0      	cmp	r0, r4
 8006566:	d0e3      	beq.n	8006530 <_malloc_r+0x64>
 8006568:	1a21      	subs	r1, r4, r0
 800656a:	4630      	mov	r0, r6
 800656c:	f000 f87e 	bl	800666c <_sbrk_r>
 8006570:	3001      	adds	r0, #1
 8006572:	d1dd      	bne.n	8006530 <_malloc_r+0x64>
 8006574:	e7cf      	b.n	8006516 <_malloc_r+0x4a>
 8006576:	bf00      	nop
 8006578:	20075cbc 	.word	0x20075cbc
 800657c:	20075cc0 	.word	0x20075cc0

08006580 <_puts_r>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	460e      	mov	r6, r1
 8006584:	4605      	mov	r5, r0
 8006586:	b118      	cbz	r0, 8006590 <_puts_r+0x10>
 8006588:	6983      	ldr	r3, [r0, #24]
 800658a:	b90b      	cbnz	r3, 8006590 <_puts_r+0x10>
 800658c:	f000 fa58 	bl	8006a40 <__sinit>
 8006590:	69ab      	ldr	r3, [r5, #24]
 8006592:	68ac      	ldr	r4, [r5, #8]
 8006594:	b913      	cbnz	r3, 800659c <_puts_r+0x1c>
 8006596:	4628      	mov	r0, r5
 8006598:	f000 fa52 	bl	8006a40 <__sinit>
 800659c:	4b2c      	ldr	r3, [pc, #176]	; (8006650 <_puts_r+0xd0>)
 800659e:	429c      	cmp	r4, r3
 80065a0:	d120      	bne.n	80065e4 <_puts_r+0x64>
 80065a2:	686c      	ldr	r4, [r5, #4]
 80065a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065a6:	07db      	lsls	r3, r3, #31
 80065a8:	d405      	bmi.n	80065b6 <_puts_r+0x36>
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	0598      	lsls	r0, r3, #22
 80065ae:	d402      	bmi.n	80065b6 <_puts_r+0x36>
 80065b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065b2:	f000 fae3 	bl	8006b7c <__retarget_lock_acquire_recursive>
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	0719      	lsls	r1, r3, #28
 80065ba:	d51d      	bpl.n	80065f8 <_puts_r+0x78>
 80065bc:	6923      	ldr	r3, [r4, #16]
 80065be:	b1db      	cbz	r3, 80065f8 <_puts_r+0x78>
 80065c0:	3e01      	subs	r6, #1
 80065c2:	68a3      	ldr	r3, [r4, #8]
 80065c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065c8:	3b01      	subs	r3, #1
 80065ca:	60a3      	str	r3, [r4, #8]
 80065cc:	bb39      	cbnz	r1, 800661e <_puts_r+0x9e>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	da38      	bge.n	8006644 <_puts_r+0xc4>
 80065d2:	4622      	mov	r2, r4
 80065d4:	210a      	movs	r1, #10
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 f858 	bl	800668c <__swbuf_r>
 80065dc:	3001      	adds	r0, #1
 80065de:	d011      	beq.n	8006604 <_puts_r+0x84>
 80065e0:	250a      	movs	r5, #10
 80065e2:	e011      	b.n	8006608 <_puts_r+0x88>
 80065e4:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <_puts_r+0xd4>)
 80065e6:	429c      	cmp	r4, r3
 80065e8:	d101      	bne.n	80065ee <_puts_r+0x6e>
 80065ea:	68ac      	ldr	r4, [r5, #8]
 80065ec:	e7da      	b.n	80065a4 <_puts_r+0x24>
 80065ee:	4b1a      	ldr	r3, [pc, #104]	; (8006658 <_puts_r+0xd8>)
 80065f0:	429c      	cmp	r4, r3
 80065f2:	bf08      	it	eq
 80065f4:	68ec      	ldreq	r4, [r5, #12]
 80065f6:	e7d5      	b.n	80065a4 <_puts_r+0x24>
 80065f8:	4621      	mov	r1, r4
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 f898 	bl	8006730 <__swsetup_r>
 8006600:	2800      	cmp	r0, #0
 8006602:	d0dd      	beq.n	80065c0 <_puts_r+0x40>
 8006604:	f04f 35ff 	mov.w	r5, #4294967295
 8006608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800660a:	07da      	lsls	r2, r3, #31
 800660c:	d405      	bmi.n	800661a <_puts_r+0x9a>
 800660e:	89a3      	ldrh	r3, [r4, #12]
 8006610:	059b      	lsls	r3, r3, #22
 8006612:	d402      	bmi.n	800661a <_puts_r+0x9a>
 8006614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006616:	f000 fab2 	bl	8006b7e <__retarget_lock_release_recursive>
 800661a:	4628      	mov	r0, r5
 800661c:	bd70      	pop	{r4, r5, r6, pc}
 800661e:	2b00      	cmp	r3, #0
 8006620:	da04      	bge.n	800662c <_puts_r+0xac>
 8006622:	69a2      	ldr	r2, [r4, #24]
 8006624:	429a      	cmp	r2, r3
 8006626:	dc06      	bgt.n	8006636 <_puts_r+0xb6>
 8006628:	290a      	cmp	r1, #10
 800662a:	d004      	beq.n	8006636 <_puts_r+0xb6>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	6022      	str	r2, [r4, #0]
 8006632:	7019      	strb	r1, [r3, #0]
 8006634:	e7c5      	b.n	80065c2 <_puts_r+0x42>
 8006636:	4622      	mov	r2, r4
 8006638:	4628      	mov	r0, r5
 800663a:	f000 f827 	bl	800668c <__swbuf_r>
 800663e:	3001      	adds	r0, #1
 8006640:	d1bf      	bne.n	80065c2 <_puts_r+0x42>
 8006642:	e7df      	b.n	8006604 <_puts_r+0x84>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	250a      	movs	r5, #10
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	6022      	str	r2, [r4, #0]
 800664c:	701d      	strb	r5, [r3, #0]
 800664e:	e7db      	b.n	8006608 <_puts_r+0x88>
 8006650:	0800850c 	.word	0x0800850c
 8006654:	0800852c 	.word	0x0800852c
 8006658:	080084ec 	.word	0x080084ec

0800665c <puts>:
 800665c:	4b02      	ldr	r3, [pc, #8]	; (8006668 <puts+0xc>)
 800665e:	4601      	mov	r1, r0
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	f7ff bf8d 	b.w	8006580 <_puts_r>
 8006666:	bf00      	nop
 8006668:	20075320 	.word	0x20075320

0800666c <_sbrk_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4d06      	ldr	r5, [pc, #24]	; (8006688 <_sbrk_r+0x1c>)
 8006670:	2300      	movs	r3, #0
 8006672:	4604      	mov	r4, r0
 8006674:	4608      	mov	r0, r1
 8006676:	602b      	str	r3, [r5, #0]
 8006678:	f7fb faa6 	bl	8001bc8 <_sbrk>
 800667c:	1c43      	adds	r3, r0, #1
 800667e:	d102      	bne.n	8006686 <_sbrk_r+0x1a>
 8006680:	682b      	ldr	r3, [r5, #0]
 8006682:	b103      	cbz	r3, 8006686 <_sbrk_r+0x1a>
 8006684:	6023      	str	r3, [r4, #0]
 8006686:	bd38      	pop	{r3, r4, r5, pc}
 8006688:	20075f70 	.word	0x20075f70

0800668c <__swbuf_r>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	460e      	mov	r6, r1
 8006690:	4614      	mov	r4, r2
 8006692:	4605      	mov	r5, r0
 8006694:	b118      	cbz	r0, 800669e <__swbuf_r+0x12>
 8006696:	6983      	ldr	r3, [r0, #24]
 8006698:	b90b      	cbnz	r3, 800669e <__swbuf_r+0x12>
 800669a:	f000 f9d1 	bl	8006a40 <__sinit>
 800669e:	4b21      	ldr	r3, [pc, #132]	; (8006724 <__swbuf_r+0x98>)
 80066a0:	429c      	cmp	r4, r3
 80066a2:	d12b      	bne.n	80066fc <__swbuf_r+0x70>
 80066a4:	686c      	ldr	r4, [r5, #4]
 80066a6:	69a3      	ldr	r3, [r4, #24]
 80066a8:	60a3      	str	r3, [r4, #8]
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	071a      	lsls	r2, r3, #28
 80066ae:	d52f      	bpl.n	8006710 <__swbuf_r+0x84>
 80066b0:	6923      	ldr	r3, [r4, #16]
 80066b2:	b36b      	cbz	r3, 8006710 <__swbuf_r+0x84>
 80066b4:	6923      	ldr	r3, [r4, #16]
 80066b6:	6820      	ldr	r0, [r4, #0]
 80066b8:	1ac0      	subs	r0, r0, r3
 80066ba:	6963      	ldr	r3, [r4, #20]
 80066bc:	b2f6      	uxtb	r6, r6
 80066be:	4283      	cmp	r3, r0
 80066c0:	4637      	mov	r7, r6
 80066c2:	dc04      	bgt.n	80066ce <__swbuf_r+0x42>
 80066c4:	4621      	mov	r1, r4
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 f926 	bl	8006918 <_fflush_r>
 80066cc:	bb30      	cbnz	r0, 800671c <__swbuf_r+0x90>
 80066ce:	68a3      	ldr	r3, [r4, #8]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	60a3      	str	r3, [r4, #8]
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	6022      	str	r2, [r4, #0]
 80066da:	701e      	strb	r6, [r3, #0]
 80066dc:	6963      	ldr	r3, [r4, #20]
 80066de:	3001      	adds	r0, #1
 80066e0:	4283      	cmp	r3, r0
 80066e2:	d004      	beq.n	80066ee <__swbuf_r+0x62>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	07db      	lsls	r3, r3, #31
 80066e8:	d506      	bpl.n	80066f8 <__swbuf_r+0x6c>
 80066ea:	2e0a      	cmp	r6, #10
 80066ec:	d104      	bne.n	80066f8 <__swbuf_r+0x6c>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4628      	mov	r0, r5
 80066f2:	f000 f911 	bl	8006918 <_fflush_r>
 80066f6:	b988      	cbnz	r0, 800671c <__swbuf_r+0x90>
 80066f8:	4638      	mov	r0, r7
 80066fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066fc:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <__swbuf_r+0x9c>)
 80066fe:	429c      	cmp	r4, r3
 8006700:	d101      	bne.n	8006706 <__swbuf_r+0x7a>
 8006702:	68ac      	ldr	r4, [r5, #8]
 8006704:	e7cf      	b.n	80066a6 <__swbuf_r+0x1a>
 8006706:	4b09      	ldr	r3, [pc, #36]	; (800672c <__swbuf_r+0xa0>)
 8006708:	429c      	cmp	r4, r3
 800670a:	bf08      	it	eq
 800670c:	68ec      	ldreq	r4, [r5, #12]
 800670e:	e7ca      	b.n	80066a6 <__swbuf_r+0x1a>
 8006710:	4621      	mov	r1, r4
 8006712:	4628      	mov	r0, r5
 8006714:	f000 f80c 	bl	8006730 <__swsetup_r>
 8006718:	2800      	cmp	r0, #0
 800671a:	d0cb      	beq.n	80066b4 <__swbuf_r+0x28>
 800671c:	f04f 37ff 	mov.w	r7, #4294967295
 8006720:	e7ea      	b.n	80066f8 <__swbuf_r+0x6c>
 8006722:	bf00      	nop
 8006724:	0800850c 	.word	0x0800850c
 8006728:	0800852c 	.word	0x0800852c
 800672c:	080084ec 	.word	0x080084ec

08006730 <__swsetup_r>:
 8006730:	4b32      	ldr	r3, [pc, #200]	; (80067fc <__swsetup_r+0xcc>)
 8006732:	b570      	push	{r4, r5, r6, lr}
 8006734:	681d      	ldr	r5, [r3, #0]
 8006736:	4606      	mov	r6, r0
 8006738:	460c      	mov	r4, r1
 800673a:	b125      	cbz	r5, 8006746 <__swsetup_r+0x16>
 800673c:	69ab      	ldr	r3, [r5, #24]
 800673e:	b913      	cbnz	r3, 8006746 <__swsetup_r+0x16>
 8006740:	4628      	mov	r0, r5
 8006742:	f000 f97d 	bl	8006a40 <__sinit>
 8006746:	4b2e      	ldr	r3, [pc, #184]	; (8006800 <__swsetup_r+0xd0>)
 8006748:	429c      	cmp	r4, r3
 800674a:	d10f      	bne.n	800676c <__swsetup_r+0x3c>
 800674c:	686c      	ldr	r4, [r5, #4]
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006754:	0719      	lsls	r1, r3, #28
 8006756:	d42c      	bmi.n	80067b2 <__swsetup_r+0x82>
 8006758:	06dd      	lsls	r5, r3, #27
 800675a:	d411      	bmi.n	8006780 <__swsetup_r+0x50>
 800675c:	2309      	movs	r3, #9
 800675e:	6033      	str	r3, [r6, #0]
 8006760:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006764:	81a3      	strh	r3, [r4, #12]
 8006766:	f04f 30ff 	mov.w	r0, #4294967295
 800676a:	e03e      	b.n	80067ea <__swsetup_r+0xba>
 800676c:	4b25      	ldr	r3, [pc, #148]	; (8006804 <__swsetup_r+0xd4>)
 800676e:	429c      	cmp	r4, r3
 8006770:	d101      	bne.n	8006776 <__swsetup_r+0x46>
 8006772:	68ac      	ldr	r4, [r5, #8]
 8006774:	e7eb      	b.n	800674e <__swsetup_r+0x1e>
 8006776:	4b24      	ldr	r3, [pc, #144]	; (8006808 <__swsetup_r+0xd8>)
 8006778:	429c      	cmp	r4, r3
 800677a:	bf08      	it	eq
 800677c:	68ec      	ldreq	r4, [r5, #12]
 800677e:	e7e6      	b.n	800674e <__swsetup_r+0x1e>
 8006780:	0758      	lsls	r0, r3, #29
 8006782:	d512      	bpl.n	80067aa <__swsetup_r+0x7a>
 8006784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006786:	b141      	cbz	r1, 800679a <__swsetup_r+0x6a>
 8006788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800678c:	4299      	cmp	r1, r3
 800678e:	d002      	beq.n	8006796 <__swsetup_r+0x66>
 8006790:	4630      	mov	r0, r6
 8006792:	f7ff fe4b 	bl	800642c <_free_r>
 8006796:	2300      	movs	r3, #0
 8006798:	6363      	str	r3, [r4, #52]	; 0x34
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067a0:	81a3      	strh	r3, [r4, #12]
 80067a2:	2300      	movs	r3, #0
 80067a4:	6063      	str	r3, [r4, #4]
 80067a6:	6923      	ldr	r3, [r4, #16]
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	f043 0308 	orr.w	r3, r3, #8
 80067b0:	81a3      	strh	r3, [r4, #12]
 80067b2:	6923      	ldr	r3, [r4, #16]
 80067b4:	b94b      	cbnz	r3, 80067ca <__swsetup_r+0x9a>
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c0:	d003      	beq.n	80067ca <__swsetup_r+0x9a>
 80067c2:	4621      	mov	r1, r4
 80067c4:	4630      	mov	r0, r6
 80067c6:	f000 f9ff 	bl	8006bc8 <__smakebuf_r>
 80067ca:	89a0      	ldrh	r0, [r4, #12]
 80067cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067d0:	f010 0301 	ands.w	r3, r0, #1
 80067d4:	d00a      	beq.n	80067ec <__swsetup_r+0xbc>
 80067d6:	2300      	movs	r3, #0
 80067d8:	60a3      	str	r3, [r4, #8]
 80067da:	6963      	ldr	r3, [r4, #20]
 80067dc:	425b      	negs	r3, r3
 80067de:	61a3      	str	r3, [r4, #24]
 80067e0:	6923      	ldr	r3, [r4, #16]
 80067e2:	b943      	cbnz	r3, 80067f6 <__swsetup_r+0xc6>
 80067e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067e8:	d1ba      	bne.n	8006760 <__swsetup_r+0x30>
 80067ea:	bd70      	pop	{r4, r5, r6, pc}
 80067ec:	0781      	lsls	r1, r0, #30
 80067ee:	bf58      	it	pl
 80067f0:	6963      	ldrpl	r3, [r4, #20]
 80067f2:	60a3      	str	r3, [r4, #8]
 80067f4:	e7f4      	b.n	80067e0 <__swsetup_r+0xb0>
 80067f6:	2000      	movs	r0, #0
 80067f8:	e7f7      	b.n	80067ea <__swsetup_r+0xba>
 80067fa:	bf00      	nop
 80067fc:	20075320 	.word	0x20075320
 8006800:	0800850c 	.word	0x0800850c
 8006804:	0800852c 	.word	0x0800852c
 8006808:	080084ec 	.word	0x080084ec

0800680c <__sflush_r>:
 800680c:	898a      	ldrh	r2, [r1, #12]
 800680e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006812:	4605      	mov	r5, r0
 8006814:	0710      	lsls	r0, r2, #28
 8006816:	460c      	mov	r4, r1
 8006818:	d458      	bmi.n	80068cc <__sflush_r+0xc0>
 800681a:	684b      	ldr	r3, [r1, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	dc05      	bgt.n	800682c <__sflush_r+0x20>
 8006820:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	dc02      	bgt.n	800682c <__sflush_r+0x20>
 8006826:	2000      	movs	r0, #0
 8006828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800682c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800682e:	2e00      	cmp	r6, #0
 8006830:	d0f9      	beq.n	8006826 <__sflush_r+0x1a>
 8006832:	2300      	movs	r3, #0
 8006834:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006838:	682f      	ldr	r7, [r5, #0]
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	d032      	beq.n	80068a4 <__sflush_r+0x98>
 800683e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	075a      	lsls	r2, r3, #29
 8006844:	d505      	bpl.n	8006852 <__sflush_r+0x46>
 8006846:	6863      	ldr	r3, [r4, #4]
 8006848:	1ac0      	subs	r0, r0, r3
 800684a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800684c:	b10b      	cbz	r3, 8006852 <__sflush_r+0x46>
 800684e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006850:	1ac0      	subs	r0, r0, r3
 8006852:	2300      	movs	r3, #0
 8006854:	4602      	mov	r2, r0
 8006856:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006858:	6a21      	ldr	r1, [r4, #32]
 800685a:	4628      	mov	r0, r5
 800685c:	47b0      	blx	r6
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	89a3      	ldrh	r3, [r4, #12]
 8006862:	d106      	bne.n	8006872 <__sflush_r+0x66>
 8006864:	6829      	ldr	r1, [r5, #0]
 8006866:	291d      	cmp	r1, #29
 8006868:	d82c      	bhi.n	80068c4 <__sflush_r+0xb8>
 800686a:	4a2a      	ldr	r2, [pc, #168]	; (8006914 <__sflush_r+0x108>)
 800686c:	40ca      	lsrs	r2, r1
 800686e:	07d6      	lsls	r6, r2, #31
 8006870:	d528      	bpl.n	80068c4 <__sflush_r+0xb8>
 8006872:	2200      	movs	r2, #0
 8006874:	6062      	str	r2, [r4, #4]
 8006876:	04d9      	lsls	r1, r3, #19
 8006878:	6922      	ldr	r2, [r4, #16]
 800687a:	6022      	str	r2, [r4, #0]
 800687c:	d504      	bpl.n	8006888 <__sflush_r+0x7c>
 800687e:	1c42      	adds	r2, r0, #1
 8006880:	d101      	bne.n	8006886 <__sflush_r+0x7a>
 8006882:	682b      	ldr	r3, [r5, #0]
 8006884:	b903      	cbnz	r3, 8006888 <__sflush_r+0x7c>
 8006886:	6560      	str	r0, [r4, #84]	; 0x54
 8006888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800688a:	602f      	str	r7, [r5, #0]
 800688c:	2900      	cmp	r1, #0
 800688e:	d0ca      	beq.n	8006826 <__sflush_r+0x1a>
 8006890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006894:	4299      	cmp	r1, r3
 8006896:	d002      	beq.n	800689e <__sflush_r+0x92>
 8006898:	4628      	mov	r0, r5
 800689a:	f7ff fdc7 	bl	800642c <_free_r>
 800689e:	2000      	movs	r0, #0
 80068a0:	6360      	str	r0, [r4, #52]	; 0x34
 80068a2:	e7c1      	b.n	8006828 <__sflush_r+0x1c>
 80068a4:	6a21      	ldr	r1, [r4, #32]
 80068a6:	2301      	movs	r3, #1
 80068a8:	4628      	mov	r0, r5
 80068aa:	47b0      	blx	r6
 80068ac:	1c41      	adds	r1, r0, #1
 80068ae:	d1c7      	bne.n	8006840 <__sflush_r+0x34>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0c4      	beq.n	8006840 <__sflush_r+0x34>
 80068b6:	2b1d      	cmp	r3, #29
 80068b8:	d001      	beq.n	80068be <__sflush_r+0xb2>
 80068ba:	2b16      	cmp	r3, #22
 80068bc:	d101      	bne.n	80068c2 <__sflush_r+0xb6>
 80068be:	602f      	str	r7, [r5, #0]
 80068c0:	e7b1      	b.n	8006826 <__sflush_r+0x1a>
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c8:	81a3      	strh	r3, [r4, #12]
 80068ca:	e7ad      	b.n	8006828 <__sflush_r+0x1c>
 80068cc:	690f      	ldr	r7, [r1, #16]
 80068ce:	2f00      	cmp	r7, #0
 80068d0:	d0a9      	beq.n	8006826 <__sflush_r+0x1a>
 80068d2:	0793      	lsls	r3, r2, #30
 80068d4:	680e      	ldr	r6, [r1, #0]
 80068d6:	bf08      	it	eq
 80068d8:	694b      	ldreq	r3, [r1, #20]
 80068da:	600f      	str	r7, [r1, #0]
 80068dc:	bf18      	it	ne
 80068de:	2300      	movne	r3, #0
 80068e0:	eba6 0807 	sub.w	r8, r6, r7
 80068e4:	608b      	str	r3, [r1, #8]
 80068e6:	f1b8 0f00 	cmp.w	r8, #0
 80068ea:	dd9c      	ble.n	8006826 <__sflush_r+0x1a>
 80068ec:	6a21      	ldr	r1, [r4, #32]
 80068ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068f0:	4643      	mov	r3, r8
 80068f2:	463a      	mov	r2, r7
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b0      	blx	r6
 80068f8:	2800      	cmp	r0, #0
 80068fa:	dc06      	bgt.n	800690a <__sflush_r+0xfe>
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006902:	81a3      	strh	r3, [r4, #12]
 8006904:	f04f 30ff 	mov.w	r0, #4294967295
 8006908:	e78e      	b.n	8006828 <__sflush_r+0x1c>
 800690a:	4407      	add	r7, r0
 800690c:	eba8 0800 	sub.w	r8, r8, r0
 8006910:	e7e9      	b.n	80068e6 <__sflush_r+0xda>
 8006912:	bf00      	nop
 8006914:	20400001 	.word	0x20400001

08006918 <_fflush_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	690b      	ldr	r3, [r1, #16]
 800691c:	4605      	mov	r5, r0
 800691e:	460c      	mov	r4, r1
 8006920:	b913      	cbnz	r3, 8006928 <_fflush_r+0x10>
 8006922:	2500      	movs	r5, #0
 8006924:	4628      	mov	r0, r5
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	b118      	cbz	r0, 8006932 <_fflush_r+0x1a>
 800692a:	6983      	ldr	r3, [r0, #24]
 800692c:	b90b      	cbnz	r3, 8006932 <_fflush_r+0x1a>
 800692e:	f000 f887 	bl	8006a40 <__sinit>
 8006932:	4b14      	ldr	r3, [pc, #80]	; (8006984 <_fflush_r+0x6c>)
 8006934:	429c      	cmp	r4, r3
 8006936:	d11b      	bne.n	8006970 <_fflush_r+0x58>
 8006938:	686c      	ldr	r4, [r5, #4]
 800693a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0ef      	beq.n	8006922 <_fflush_r+0xa>
 8006942:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006944:	07d0      	lsls	r0, r2, #31
 8006946:	d404      	bmi.n	8006952 <_fflush_r+0x3a>
 8006948:	0599      	lsls	r1, r3, #22
 800694a:	d402      	bmi.n	8006952 <_fflush_r+0x3a>
 800694c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800694e:	f000 f915 	bl	8006b7c <__retarget_lock_acquire_recursive>
 8006952:	4628      	mov	r0, r5
 8006954:	4621      	mov	r1, r4
 8006956:	f7ff ff59 	bl	800680c <__sflush_r>
 800695a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800695c:	07da      	lsls	r2, r3, #31
 800695e:	4605      	mov	r5, r0
 8006960:	d4e0      	bmi.n	8006924 <_fflush_r+0xc>
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	059b      	lsls	r3, r3, #22
 8006966:	d4dd      	bmi.n	8006924 <_fflush_r+0xc>
 8006968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800696a:	f000 f908 	bl	8006b7e <__retarget_lock_release_recursive>
 800696e:	e7d9      	b.n	8006924 <_fflush_r+0xc>
 8006970:	4b05      	ldr	r3, [pc, #20]	; (8006988 <_fflush_r+0x70>)
 8006972:	429c      	cmp	r4, r3
 8006974:	d101      	bne.n	800697a <_fflush_r+0x62>
 8006976:	68ac      	ldr	r4, [r5, #8]
 8006978:	e7df      	b.n	800693a <_fflush_r+0x22>
 800697a:	4b04      	ldr	r3, [pc, #16]	; (800698c <_fflush_r+0x74>)
 800697c:	429c      	cmp	r4, r3
 800697e:	bf08      	it	eq
 8006980:	68ec      	ldreq	r4, [r5, #12]
 8006982:	e7da      	b.n	800693a <_fflush_r+0x22>
 8006984:	0800850c 	.word	0x0800850c
 8006988:	0800852c 	.word	0x0800852c
 800698c:	080084ec 	.word	0x080084ec

08006990 <std>:
 8006990:	2300      	movs	r3, #0
 8006992:	b510      	push	{r4, lr}
 8006994:	4604      	mov	r4, r0
 8006996:	e9c0 3300 	strd	r3, r3, [r0]
 800699a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800699e:	6083      	str	r3, [r0, #8]
 80069a0:	8181      	strh	r1, [r0, #12]
 80069a2:	6643      	str	r3, [r0, #100]	; 0x64
 80069a4:	81c2      	strh	r2, [r0, #14]
 80069a6:	6183      	str	r3, [r0, #24]
 80069a8:	4619      	mov	r1, r3
 80069aa:	2208      	movs	r2, #8
 80069ac:	305c      	adds	r0, #92	; 0x5c
 80069ae:	f7ff fd35 	bl	800641c <memset>
 80069b2:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <std+0x38>)
 80069b4:	6263      	str	r3, [r4, #36]	; 0x24
 80069b6:	4b05      	ldr	r3, [pc, #20]	; (80069cc <std+0x3c>)
 80069b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80069ba:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <std+0x40>)
 80069bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069be:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <std+0x44>)
 80069c0:	6224      	str	r4, [r4, #32]
 80069c2:	6323      	str	r3, [r4, #48]	; 0x30
 80069c4:	bd10      	pop	{r4, pc}
 80069c6:	bf00      	nop
 80069c8:	08006c61 	.word	0x08006c61
 80069cc:	08006c83 	.word	0x08006c83
 80069d0:	08006cbb 	.word	0x08006cbb
 80069d4:	08006cdf 	.word	0x08006cdf

080069d8 <_cleanup_r>:
 80069d8:	4901      	ldr	r1, [pc, #4]	; (80069e0 <_cleanup_r+0x8>)
 80069da:	f000 b8af 	b.w	8006b3c <_fwalk_reent>
 80069de:	bf00      	nop
 80069e0:	08006919 	.word	0x08006919

080069e4 <__sfmoreglue>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	1e4a      	subs	r2, r1, #1
 80069e8:	2568      	movs	r5, #104	; 0x68
 80069ea:	4355      	muls	r5, r2
 80069ec:	460e      	mov	r6, r1
 80069ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069f2:	f7ff fd6b 	bl	80064cc <_malloc_r>
 80069f6:	4604      	mov	r4, r0
 80069f8:	b140      	cbz	r0, 8006a0c <__sfmoreglue+0x28>
 80069fa:	2100      	movs	r1, #0
 80069fc:	e9c0 1600 	strd	r1, r6, [r0]
 8006a00:	300c      	adds	r0, #12
 8006a02:	60a0      	str	r0, [r4, #8]
 8006a04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a08:	f7ff fd08 	bl	800641c <memset>
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}

08006a10 <__sfp_lock_acquire>:
 8006a10:	4801      	ldr	r0, [pc, #4]	; (8006a18 <__sfp_lock_acquire+0x8>)
 8006a12:	f000 b8b3 	b.w	8006b7c <__retarget_lock_acquire_recursive>
 8006a16:	bf00      	nop
 8006a18:	20075f6c 	.word	0x20075f6c

08006a1c <__sfp_lock_release>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	; (8006a24 <__sfp_lock_release+0x8>)
 8006a1e:	f000 b8ae 	b.w	8006b7e <__retarget_lock_release_recursive>
 8006a22:	bf00      	nop
 8006a24:	20075f6c 	.word	0x20075f6c

08006a28 <__sinit_lock_acquire>:
 8006a28:	4801      	ldr	r0, [pc, #4]	; (8006a30 <__sinit_lock_acquire+0x8>)
 8006a2a:	f000 b8a7 	b.w	8006b7c <__retarget_lock_acquire_recursive>
 8006a2e:	bf00      	nop
 8006a30:	20075f67 	.word	0x20075f67

08006a34 <__sinit_lock_release>:
 8006a34:	4801      	ldr	r0, [pc, #4]	; (8006a3c <__sinit_lock_release+0x8>)
 8006a36:	f000 b8a2 	b.w	8006b7e <__retarget_lock_release_recursive>
 8006a3a:	bf00      	nop
 8006a3c:	20075f67 	.word	0x20075f67

08006a40 <__sinit>:
 8006a40:	b510      	push	{r4, lr}
 8006a42:	4604      	mov	r4, r0
 8006a44:	f7ff fff0 	bl	8006a28 <__sinit_lock_acquire>
 8006a48:	69a3      	ldr	r3, [r4, #24]
 8006a4a:	b11b      	cbz	r3, 8006a54 <__sinit+0x14>
 8006a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a50:	f7ff bff0 	b.w	8006a34 <__sinit_lock_release>
 8006a54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a58:	6523      	str	r3, [r4, #80]	; 0x50
 8006a5a:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <__sinit+0x68>)
 8006a5c:	4a13      	ldr	r2, [pc, #76]	; (8006aac <__sinit+0x6c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a62:	42a3      	cmp	r3, r4
 8006a64:	bf04      	itt	eq
 8006a66:	2301      	moveq	r3, #1
 8006a68:	61a3      	streq	r3, [r4, #24]
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 f820 	bl	8006ab0 <__sfp>
 8006a70:	6060      	str	r0, [r4, #4]
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 f81c 	bl	8006ab0 <__sfp>
 8006a78:	60a0      	str	r0, [r4, #8]
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f000 f818 	bl	8006ab0 <__sfp>
 8006a80:	2200      	movs	r2, #0
 8006a82:	60e0      	str	r0, [r4, #12]
 8006a84:	2104      	movs	r1, #4
 8006a86:	6860      	ldr	r0, [r4, #4]
 8006a88:	f7ff ff82 	bl	8006990 <std>
 8006a8c:	68a0      	ldr	r0, [r4, #8]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	2109      	movs	r1, #9
 8006a92:	f7ff ff7d 	bl	8006990 <std>
 8006a96:	68e0      	ldr	r0, [r4, #12]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	2112      	movs	r1, #18
 8006a9c:	f7ff ff78 	bl	8006990 <std>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	61a3      	str	r3, [r4, #24]
 8006aa4:	e7d2      	b.n	8006a4c <__sinit+0xc>
 8006aa6:	bf00      	nop
 8006aa8:	080084e8 	.word	0x080084e8
 8006aac:	080069d9 	.word	0x080069d9

08006ab0 <__sfp>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	4607      	mov	r7, r0
 8006ab4:	f7ff ffac 	bl	8006a10 <__sfp_lock_acquire>
 8006ab8:	4b1e      	ldr	r3, [pc, #120]	; (8006b34 <__sfp+0x84>)
 8006aba:	681e      	ldr	r6, [r3, #0]
 8006abc:	69b3      	ldr	r3, [r6, #24]
 8006abe:	b913      	cbnz	r3, 8006ac6 <__sfp+0x16>
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f7ff ffbd 	bl	8006a40 <__sinit>
 8006ac6:	3648      	adds	r6, #72	; 0x48
 8006ac8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	d503      	bpl.n	8006ad8 <__sfp+0x28>
 8006ad0:	6833      	ldr	r3, [r6, #0]
 8006ad2:	b30b      	cbz	r3, 8006b18 <__sfp+0x68>
 8006ad4:	6836      	ldr	r6, [r6, #0]
 8006ad6:	e7f7      	b.n	8006ac8 <__sfp+0x18>
 8006ad8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006adc:	b9d5      	cbnz	r5, 8006b14 <__sfp+0x64>
 8006ade:	4b16      	ldr	r3, [pc, #88]	; (8006b38 <__sfp+0x88>)
 8006ae0:	60e3      	str	r3, [r4, #12]
 8006ae2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ae6:	6665      	str	r5, [r4, #100]	; 0x64
 8006ae8:	f000 f847 	bl	8006b7a <__retarget_lock_init_recursive>
 8006aec:	f7ff ff96 	bl	8006a1c <__sfp_lock_release>
 8006af0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006af4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006af8:	6025      	str	r5, [r4, #0]
 8006afa:	61a5      	str	r5, [r4, #24]
 8006afc:	2208      	movs	r2, #8
 8006afe:	4629      	mov	r1, r5
 8006b00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b04:	f7ff fc8a 	bl	800641c <memset>
 8006b08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b10:	4620      	mov	r0, r4
 8006b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b14:	3468      	adds	r4, #104	; 0x68
 8006b16:	e7d9      	b.n	8006acc <__sfp+0x1c>
 8006b18:	2104      	movs	r1, #4
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	f7ff ff62 	bl	80069e4 <__sfmoreglue>
 8006b20:	4604      	mov	r4, r0
 8006b22:	6030      	str	r0, [r6, #0]
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d1d5      	bne.n	8006ad4 <__sfp+0x24>
 8006b28:	f7ff ff78 	bl	8006a1c <__sfp_lock_release>
 8006b2c:	230c      	movs	r3, #12
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	e7ee      	b.n	8006b10 <__sfp+0x60>
 8006b32:	bf00      	nop
 8006b34:	080084e8 	.word	0x080084e8
 8006b38:	ffff0001 	.word	0xffff0001

08006b3c <_fwalk_reent>:
 8006b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b40:	4606      	mov	r6, r0
 8006b42:	4688      	mov	r8, r1
 8006b44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b48:	2700      	movs	r7, #0
 8006b4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b4e:	f1b9 0901 	subs.w	r9, r9, #1
 8006b52:	d505      	bpl.n	8006b60 <_fwalk_reent+0x24>
 8006b54:	6824      	ldr	r4, [r4, #0]
 8006b56:	2c00      	cmp	r4, #0
 8006b58:	d1f7      	bne.n	8006b4a <_fwalk_reent+0xe>
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b60:	89ab      	ldrh	r3, [r5, #12]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d907      	bls.n	8006b76 <_fwalk_reent+0x3a>
 8006b66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	d003      	beq.n	8006b76 <_fwalk_reent+0x3a>
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4630      	mov	r0, r6
 8006b72:	47c0      	blx	r8
 8006b74:	4307      	orrs	r7, r0
 8006b76:	3568      	adds	r5, #104	; 0x68
 8006b78:	e7e9      	b.n	8006b4e <_fwalk_reent+0x12>

08006b7a <__retarget_lock_init_recursive>:
 8006b7a:	4770      	bx	lr

08006b7c <__retarget_lock_acquire_recursive>:
 8006b7c:	4770      	bx	lr

08006b7e <__retarget_lock_release_recursive>:
 8006b7e:	4770      	bx	lr

08006b80 <__swhatbuf_r>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	460e      	mov	r6, r1
 8006b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b88:	2900      	cmp	r1, #0
 8006b8a:	b096      	sub	sp, #88	; 0x58
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	461d      	mov	r5, r3
 8006b90:	da07      	bge.n	8006ba2 <__swhatbuf_r+0x22>
 8006b92:	2300      	movs	r3, #0
 8006b94:	602b      	str	r3, [r5, #0]
 8006b96:	89b3      	ldrh	r3, [r6, #12]
 8006b98:	061a      	lsls	r2, r3, #24
 8006b9a:	d410      	bmi.n	8006bbe <__swhatbuf_r+0x3e>
 8006b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba0:	e00e      	b.n	8006bc0 <__swhatbuf_r+0x40>
 8006ba2:	466a      	mov	r2, sp
 8006ba4:	f000 f8c2 	bl	8006d2c <_fstat_r>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	dbf2      	blt.n	8006b92 <__swhatbuf_r+0x12>
 8006bac:	9a01      	ldr	r2, [sp, #4]
 8006bae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bb6:	425a      	negs	r2, r3
 8006bb8:	415a      	adcs	r2, r3
 8006bba:	602a      	str	r2, [r5, #0]
 8006bbc:	e7ee      	b.n	8006b9c <__swhatbuf_r+0x1c>
 8006bbe:	2340      	movs	r3, #64	; 0x40
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	6023      	str	r3, [r4, #0]
 8006bc4:	b016      	add	sp, #88	; 0x58
 8006bc6:	bd70      	pop	{r4, r5, r6, pc}

08006bc8 <__smakebuf_r>:
 8006bc8:	898b      	ldrh	r3, [r1, #12]
 8006bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bcc:	079d      	lsls	r5, r3, #30
 8006bce:	4606      	mov	r6, r0
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	d507      	bpl.n	8006be4 <__smakebuf_r+0x1c>
 8006bd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	6123      	str	r3, [r4, #16]
 8006bdc:	2301      	movs	r3, #1
 8006bde:	6163      	str	r3, [r4, #20]
 8006be0:	b002      	add	sp, #8
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
 8006be4:	ab01      	add	r3, sp, #4
 8006be6:	466a      	mov	r2, sp
 8006be8:	f7ff ffca 	bl	8006b80 <__swhatbuf_r>
 8006bec:	9900      	ldr	r1, [sp, #0]
 8006bee:	4605      	mov	r5, r0
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f7ff fc6b 	bl	80064cc <_malloc_r>
 8006bf6:	b948      	cbnz	r0, 8006c0c <__smakebuf_r+0x44>
 8006bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bfc:	059a      	lsls	r2, r3, #22
 8006bfe:	d4ef      	bmi.n	8006be0 <__smakebuf_r+0x18>
 8006c00:	f023 0303 	bic.w	r3, r3, #3
 8006c04:	f043 0302 	orr.w	r3, r3, #2
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	e7e3      	b.n	8006bd4 <__smakebuf_r+0xc>
 8006c0c:	4b0d      	ldr	r3, [pc, #52]	; (8006c44 <__smakebuf_r+0x7c>)
 8006c0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	6020      	str	r0, [r4, #0]
 8006c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c18:	81a3      	strh	r3, [r4, #12]
 8006c1a:	9b00      	ldr	r3, [sp, #0]
 8006c1c:	6163      	str	r3, [r4, #20]
 8006c1e:	9b01      	ldr	r3, [sp, #4]
 8006c20:	6120      	str	r0, [r4, #16]
 8006c22:	b15b      	cbz	r3, 8006c3c <__smakebuf_r+0x74>
 8006c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f000 f891 	bl	8006d50 <_isatty_r>
 8006c2e:	b128      	cbz	r0, 8006c3c <__smakebuf_r+0x74>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f023 0303 	bic.w	r3, r3, #3
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	89a0      	ldrh	r0, [r4, #12]
 8006c3e:	4305      	orrs	r5, r0
 8006c40:	81a5      	strh	r5, [r4, #12]
 8006c42:	e7cd      	b.n	8006be0 <__smakebuf_r+0x18>
 8006c44:	080069d9 	.word	0x080069d9

08006c48 <__malloc_lock>:
 8006c48:	4801      	ldr	r0, [pc, #4]	; (8006c50 <__malloc_lock+0x8>)
 8006c4a:	f7ff bf97 	b.w	8006b7c <__retarget_lock_acquire_recursive>
 8006c4e:	bf00      	nop
 8006c50:	20075f68 	.word	0x20075f68

08006c54 <__malloc_unlock>:
 8006c54:	4801      	ldr	r0, [pc, #4]	; (8006c5c <__malloc_unlock+0x8>)
 8006c56:	f7ff bf92 	b.w	8006b7e <__retarget_lock_release_recursive>
 8006c5a:	bf00      	nop
 8006c5c:	20075f68 	.word	0x20075f68

08006c60 <__sread>:
 8006c60:	b510      	push	{r4, lr}
 8006c62:	460c      	mov	r4, r1
 8006c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c68:	f000 f894 	bl	8006d94 <_read_r>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	bfab      	itete	ge
 8006c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c72:	89a3      	ldrhlt	r3, [r4, #12]
 8006c74:	181b      	addge	r3, r3, r0
 8006c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c7a:	bfac      	ite	ge
 8006c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c7e:	81a3      	strhlt	r3, [r4, #12]
 8006c80:	bd10      	pop	{r4, pc}

08006c82 <__swrite>:
 8006c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c86:	461f      	mov	r7, r3
 8006c88:	898b      	ldrh	r3, [r1, #12]
 8006c8a:	05db      	lsls	r3, r3, #23
 8006c8c:	4605      	mov	r5, r0
 8006c8e:	460c      	mov	r4, r1
 8006c90:	4616      	mov	r6, r2
 8006c92:	d505      	bpl.n	8006ca0 <__swrite+0x1e>
 8006c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c98:	2302      	movs	r3, #2
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f000 f868 	bl	8006d70 <_lseek_r>
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006caa:	81a3      	strh	r3, [r4, #12]
 8006cac:	4632      	mov	r2, r6
 8006cae:	463b      	mov	r3, r7
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb6:	f000 b817 	b.w	8006ce8 <_write_r>

08006cba <__sseek>:
 8006cba:	b510      	push	{r4, lr}
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc2:	f000 f855 	bl	8006d70 <_lseek_r>
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	bf15      	itete	ne
 8006ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cd6:	81a3      	strheq	r3, [r4, #12]
 8006cd8:	bf18      	it	ne
 8006cda:	81a3      	strhne	r3, [r4, #12]
 8006cdc:	bd10      	pop	{r4, pc}

08006cde <__sclose>:
 8006cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce2:	f000 b813 	b.w	8006d0c <_close_r>
	...

08006ce8 <_write_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	4d07      	ldr	r5, [pc, #28]	; (8006d08 <_write_r+0x20>)
 8006cec:	4604      	mov	r4, r0
 8006cee:	4608      	mov	r0, r1
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	602a      	str	r2, [r5, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f7fa ff15 	bl	8001b26 <_write>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d102      	bne.n	8006d06 <_write_r+0x1e>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	b103      	cbz	r3, 8006d06 <_write_r+0x1e>
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	20075f70 	.word	0x20075f70

08006d0c <_close_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4d06      	ldr	r5, [pc, #24]	; (8006d28 <_close_r+0x1c>)
 8006d10:	2300      	movs	r3, #0
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	602b      	str	r3, [r5, #0]
 8006d18:	f7fa ff21 	bl	8001b5e <_close>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d102      	bne.n	8006d26 <_close_r+0x1a>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b103      	cbz	r3, 8006d26 <_close_r+0x1a>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	20075f70 	.word	0x20075f70

08006d2c <_fstat_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	4d07      	ldr	r5, [pc, #28]	; (8006d4c <_fstat_r+0x20>)
 8006d30:	2300      	movs	r3, #0
 8006d32:	4604      	mov	r4, r0
 8006d34:	4608      	mov	r0, r1
 8006d36:	4611      	mov	r1, r2
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	f7fa ff1c 	bl	8001b76 <_fstat>
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	d102      	bne.n	8006d48 <_fstat_r+0x1c>
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	b103      	cbz	r3, 8006d48 <_fstat_r+0x1c>
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	bd38      	pop	{r3, r4, r5, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20075f70 	.word	0x20075f70

08006d50 <_isatty_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	4d06      	ldr	r5, [pc, #24]	; (8006d6c <_isatty_r+0x1c>)
 8006d54:	2300      	movs	r3, #0
 8006d56:	4604      	mov	r4, r0
 8006d58:	4608      	mov	r0, r1
 8006d5a:	602b      	str	r3, [r5, #0]
 8006d5c:	f7fa ff1b 	bl	8001b96 <_isatty>
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	d102      	bne.n	8006d6a <_isatty_r+0x1a>
 8006d64:	682b      	ldr	r3, [r5, #0]
 8006d66:	b103      	cbz	r3, 8006d6a <_isatty_r+0x1a>
 8006d68:	6023      	str	r3, [r4, #0]
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}
 8006d6c:	20075f70 	.word	0x20075f70

08006d70 <_lseek_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4d07      	ldr	r5, [pc, #28]	; (8006d90 <_lseek_r+0x20>)
 8006d74:	4604      	mov	r4, r0
 8006d76:	4608      	mov	r0, r1
 8006d78:	4611      	mov	r1, r2
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	602a      	str	r2, [r5, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f7fa ff14 	bl	8001bac <_lseek>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d102      	bne.n	8006d8e <_lseek_r+0x1e>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	b103      	cbz	r3, 8006d8e <_lseek_r+0x1e>
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	20075f70 	.word	0x20075f70

08006d94 <_read_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	4d07      	ldr	r5, [pc, #28]	; (8006db4 <_read_r+0x20>)
 8006d98:	4604      	mov	r4, r0
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	2200      	movs	r2, #0
 8006da0:	602a      	str	r2, [r5, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	f7fa fea2 	bl	8001aec <_read>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_read_r+0x1e>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_read_r+0x1e>
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	20075f70 	.word	0x20075f70

08006db8 <_init>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr

08006dc4 <_fini>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	bf00      	nop
 8006dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dca:	bc08      	pop	{r3}
 8006dcc:	469e      	mov	lr, r3
 8006dce:	4770      	bx	lr
