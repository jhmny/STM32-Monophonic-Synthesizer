
STM32_dax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ab8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005210  08005cb0  08005cb0  00015cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aec0  0800aec0  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aec0  0800aec0  0001aec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aec8  0800aec8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aec8  0800aec8  0001aec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aecc  0800aecc  0001aecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800aed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000435c  2000009c  0800af6c  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043f8  0800af6c  000243f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bea  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002756  00000000  00000000  00031cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00034410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00035228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000312b  00000000  00000000  00035f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001132e  00000000  00000000  0003908b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f76b5  00000000  00000000  0004a3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141a6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d78  00000000  00000000  00141ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000009c 	.word	0x2000009c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005c98 	.word	0x08005c98

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000a0 	.word	0x200000a0
 8000234:	08005c98 	.word	0x08005c98

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <add_note_last>:

// Add a note at the end of the list
// ---------------------------------

llist add_note_last(llist list, uint8_t midi_note, uint8_t velocity)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
 800053c:	4613      	mov	r3, r2
 800053e:	70bb      	strb	r3, [r7, #2]
    // Add a new element in memory

    note* new_note = malloc(sizeof(note));
 8000540:	2008      	movs	r0, #8
 8000542:	f005 fac9 	bl	8005ad8 <malloc>
 8000546:	4603      	mov	r3, r0
 8000548:	60bb      	str	r3, [r7, #8]

    // Set the new element values

    new_note->midi_note = midi_note;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	701a      	strb	r2, [r3, #0]
    new_note->velocity = velocity;
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	78ba      	ldrb	r2, [r7, #2]
 8000554:	705a      	strb	r2, [r3, #1]

    // There is no next element

    new_note->nxt = NULL;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]

    // If list is empty, then simply return the newly created element

    if(list == NULL)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <add_note_last+0x36>
    {
        return new_note;
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	e00d      	b.n	8000582 <add_note_last+0x52>

    // Else, walk through the list to find the actual last element

    else
    {
    	note* temp=list;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 800056a:	e002      	b.n	8000572 <add_note_last+0x42>
        {
            temp = temp->nxt;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1f8      	bne.n	800056c <add_note_last+0x3c>
        }
        temp->nxt = new_note;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	605a      	str	r2, [r3, #4]
        return list;
 8000580:	687b      	ldr	r3, [r7, #4]
    }
}
 8000582:	4618      	mov	r0, r3
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <delete_note>:

// Delete a note based on the midi_note
// ------------------------------------

llist delete_note(llist list, uint8_t midi_note)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	70fb      	strb	r3, [r7, #3]
    // If list is empty, then just returns

    if(list == NULL)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d101      	bne.n	80005a0 <delete_note+0x16>
        return NULL;
 800059c:	2300      	movs	r3, #0
 800059e:	e01d      	b.n	80005dc <delete_note+0x52>

    // If the current element is the one to delete

    if(list->midi_note == midi_note)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	78fa      	ldrb	r2, [r7, #3]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d10d      	bne.n	80005c6 <delete_note+0x3c>
    {
        note* tmp = list->nxt;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	60fb      	str	r3, [r7, #12]
        free(list);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f005 fa99 	bl	8005ae8 <free>
        tmp = delete_note(tmp, midi_note);
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	4619      	mov	r1, r3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f7ff ffe5 	bl	800058a <delete_note>
 80005c0:	60f8      	str	r0, [r7, #12]
        return tmp;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	e00a      	b.n	80005dc <delete_note+0x52>

    // Else, the current element is not the one to delete

    else
    {
        list->nxt = delete_note(list->nxt, midi_note);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ffdb 	bl	800058a <delete_note>
 80005d4:	4602      	mov	r2, r0
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	605a      	str	r2, [r3, #4]
        return list;
 80005da:	687b      	ldr	r3, [r7, #4]
    }
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <get_last_note>:

// Get pointer to last note in the list
// ------------------------------------

note* get_last_note(llist list)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

    if(list == NULL)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <get_last_note+0x12>
    {
        return NULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e00a      	b.n	800060c <get_last_note+0x28>
    }

    else
        {
        	note* temp=list;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 80005fa:	e002      	b.n	8000602 <get_last_note+0x1e>
            {
                temp = temp->nxt;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f8      	bne.n	80005fc <get_last_note+0x18>
            }
            return temp;
 800060a:	68fb      	ldr	r3, [r7, #12]
        }
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
	int screenOn;
	note* play_note;
	//for dma counting
	//uint8_t	nb_MIDI_bytes;

	int i = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
	for (i=0; i<AUDIO_BUFFER_LENGTH; i=i+2)
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	e00d      	b.n	8000644 <main+0x2c>
		{
			sendBuff[i] = (uint16_t)((int16_t) 0.0f);			// Left Channel value
 8000628:	4a3a      	ldr	r2, [pc, #232]	; (8000714 <main+0xfc>)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2100      	movs	r1, #0
 800062e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			sendBuff[i+1] = (uint16_t)((int16_t) 0.0f);		// Right Channel Value
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	3301      	adds	r3, #1
 8000636:	4a37      	ldr	r2, [pc, #220]	; (8000714 <main+0xfc>)
 8000638:	2100      	movs	r1, #0
 800063a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=0; i<AUDIO_BUFFER_LENGTH; i=i+2)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	3302      	adds	r3, #2
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800064a:	dbed      	blt.n	8000628 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f001 fc6d 	bl	8001f2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f874 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 fa26 	bl	8000aa4 <MX_GPIO_Init>
  MX_I2S1_Init();
 8000658:	f000 f962 	bl	8000920 <MX_I2S1_Init>
  MX_DMA_Init();
 800065c:	f000 f9f0 	bl	8000a40 <MX_DMA_Init>
  MX_UART4_Init();
 8000660:	f000 f9be 	bl	80009e0 <MX_UART4_Init>
  MX_I2C2_Init();
 8000664:	f000 f91c 	bl	80008a0 <MX_I2C2_Init>
  MX_SAI1_Init();
 8000668:	f000 f984 	bl	8000974 <MX_SAI1_Init>


	SSD1306_UpdateScreen();
	HAL_Delay (2000);
 */
  HAL_SAI_Transmit_DMA(&hsai_BlockA1,(uint16_t *) sendBuff, AUDIO_BUFFER_LENGTH);
 800066c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000670:	4928      	ldr	r1, [pc, #160]	; (8000714 <main+0xfc>)
 8000672:	4829      	ldr	r0, [pc, #164]	; (8000718 <main+0x100>)
 8000674:	f004 f980 	bl	8004978 <HAL_SAI_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 8000678:	2240      	movs	r2, #64	; 0x40
 800067a:	4928      	ldr	r1, [pc, #160]	; (800071c <main+0x104>)
 800067c:	4828      	ldr	r0, [pc, #160]	; (8000720 <main+0x108>)
 800067e:	f004 fc90 	bl	8004fa2 <HAL_UART_Receive_DMA>
	while (1)
	{

		// HAL_I2S_Transmit(&hi2s1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);

		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 8000682:	f000 fa95 	bl	8000bb0 <MIDI_GetNbNewBytes>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b26      	ldr	r3, [pc, #152]	; (8000724 <main+0x10c>)
 800068c:	701a      	strb	r2, [r3, #0]


		if(nb_MIDI_bytes){
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <main+0x10c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00f      	beq.n	80006b6 <main+0x9e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	4823      	ldr	r0, [pc, #140]	; (8000728 <main+0x110>)
 800069c:	f002 fad8 	bl	8002c50 <HAL_GPIO_WritePin>
			processBuffer(UART4_rxBuffer,nb_MIDI_bytes);
 80006a0:	4b20      	ldr	r3, [pc, #128]	; (8000724 <main+0x10c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	481d      	ldr	r0, [pc, #116]	; (800071c <main+0x104>)
 80006a8:	f000 fab0 	bl	8000c0c <processBuffer>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	481d      	ldr	r0, [pc, #116]	; (8000728 <main+0x110>)
 80006b2:	f002 facd 	bl	8002c50 <HAL_GPIO_WritePin>
		}

		play_note = get_last_note(note_list);
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <main+0x114>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff92 	bl	80005e4 <get_last_note>
 80006c0:	6078      	str	r0, [r7, #4]

		if (play_note == NULL){ //no notes in the list
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d107      	bne.n	80006d8 <main+0xc0>
			pitch = 0;
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <main+0x118>)
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
			trig = 0;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <main+0x11c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	e010      	b.n	80006fa <main+0xe2>
		}
		else {
			//set the pitch and trigger the notes
			pitch = pitch_table[(play_note->midi_note)-18];
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	3b12      	subs	r3, #18
 80006de:	4a16      	ldr	r2, [pc, #88]	; (8000738 <main+0x120>)
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <main+0x118>)
 80006e8:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <main+0x110>)
 80006f0:	f002 faae 	bl	8002c50 <HAL_GPIO_WritePin>
			trig = 1;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <main+0x11c>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
		}
		//test code
		if ( trig == 1)
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <main+0x11c>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d005      	beq.n	800070e <main+0xf6>
		{
			//HAL_SAI_Transmit(&hsai_BlockA1, tone_c, sizeof(tone_c) / sizeof(tone_c[0]), 1000);
			if (screenOn == 0)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1bc      	bne.n	8000682 <main+0x6a>
			{
				//SSD1306_Note0();
				screenOn = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e7b9      	b.n	8000682 <main+0x6a>
			}
		}
		else
		{
			screenOn = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 8000712:	e7b6      	b.n	8000682 <main+0x6a>
 8000714:	200000f0 	.word	0x200000f0
 8000718:	2000435c 	.word	0x2000435c
 800071c:	200040f0 	.word	0x200040f0
 8000720:	200042d4 	.word	0x200042d4
 8000724:	200043e2 	.word	0x200043e2
 8000728:	40020400 	.word	0x40020400
 800072c:	200000ec 	.word	0x200000ec
 8000730:	200000c0 	.word	0x200000c0
 8000734:	200041fd 	.word	0x200041fd
 8000738:	0800acb0 	.word	0x0800acb0

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0b8      	sub	sp, #224	; 0xe0
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000746:	2234      	movs	r2, #52	; 0x34
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f005 f9d4 	bl	8005af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2290      	movs	r2, #144	; 0x90
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f005 f9c5 	bl	8005af8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b49      	ldr	r3, [pc, #292]	; (8000894 <SystemClock_Config+0x158>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	4a48      	ldr	r2, [pc, #288]	; (8000894 <SystemClock_Config+0x158>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	6413      	str	r3, [r2, #64]	; 0x40
 800077a:	4b46      	ldr	r3, [pc, #280]	; (8000894 <SystemClock_Config+0x158>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000786:	4b44      	ldr	r3, [pc, #272]	; (8000898 <SystemClock_Config+0x15c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800078e:	4a42      	ldr	r2, [pc, #264]	; (8000898 <SystemClock_Config+0x15c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6013      	str	r3, [r2, #0]
 8000796:	4b40      	ldr	r3, [pc, #256]	; (8000898 <SystemClock_Config+0x15c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a2:	2302      	movs	r3, #2
 80007a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ae:	2310      	movs	r3, #16
 80007b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c0:	2308      	movs	r3, #8
 80007c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007c6:	2360      	movs	r3, #96	; 0x60
 80007c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fcf8 	bl	80031d8 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007ee:	f001 f931 	bl	8001a54 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007f2:	f002 fca1 	bl	8003138 <HAL_PWREx_EnableOverDrive>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007fc:	f001 f92a 	bl	8001a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2302      	movs	r3, #2
 8000808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000822:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000826:	2103      	movs	r1, #3
 8000828:	4618      	mov	r0, r3
 800082a:	f002 ff83 	bl	8003734 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000834:	f001 f90e 	bl	8001a54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SAI1
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <SystemClock_Config+0x160>)
 800083a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 800083c:	2360      	movs	r3, #96	; 0x60
 800083e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000844:	2302      	movs	r3, #2
 8000846:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800084c:	23c0      	movs	r3, #192	; 0xc0
 800084e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8000854:	2306      	movs	r3, #6
 8000856:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800085c:	2301      	movs	r3, #1
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000860:	2301      	movs	r3, #1
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000864:	2300      	movs	r3, #0
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000868:	2300      	movs	r3, #0
 800086a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800086c:	2300      	movs	r3, #0
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000870:	2300      	movs	r3, #0
 8000872:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000874:	2300      	movs	r3, #0
 8000876:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	4618      	mov	r0, r3
 800087e:	f003 f92f 	bl	8003ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x150>
  {
    Error_Handler();
 8000888:	f001 f8e4 	bl	8001a54 <Error_Handler>
  }
}
 800088c:	bf00      	nop
 800088e:	37e0      	adds	r7, #224	; 0xe0
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000
 800089c:	00088201 	.word	0x00088201

080008a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_I2C2_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <MX_I2C2_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_I2C2_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	; (800091c <MX_I2C2_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_I2C2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_I2C2_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_I2C2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_I2C2_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_I2C2_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_I2C2_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_I2C2_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	; (8000914 <MX_I2C2_Init+0x74>)
 80008dc:	f002 f9d2 	bl	8002c84 <HAL_I2C_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f001 f8b5 	bl	8001a54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <MX_I2C2_Init+0x74>)
 80008ee:	f002 fa59 	bl	8002da4 <HAL_I2CEx_ConfigAnalogFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f8:	f001 f8ac 	bl	8001a54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_I2C2_Init+0x74>)
 8000900:	f002 fa9b 	bl	8002e3a <HAL_I2CEx_ConfigDigitalFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800090a:	f001 f8a3 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200041b0 	.word	0x200041b0
 8000918:	40005800 	.word	0x40005800
 800091c:	0090194b 	.word	0x0090194b

08000920 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_I2S1_Init+0x4c>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_I2S1_Init+0x50>)
 8000928:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_I2S1_Init+0x4c>)
 800092c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000930:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_I2S1_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_I2S1_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_I2S1_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_I2S1_Init+0x4c>)
 8000946:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800094a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_I2S1_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_I2S1_Init+0x4c>)
 8000954:	2202      	movs	r2, #2
 8000956:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_I2S1_Init+0x4c>)
 800095a:	f002 fabb 	bl	8002ed4 <HAL_I2S_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 8000964:	f001 f876 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20004294 	.word	0x20004294
 8000970:	40013000 	.word	0x40013000

08000974 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_SAI1_Init+0x64>)
 800097a:	4a18      	ldr	r2, [pc, #96]	; (80009dc <MX_SAI1_Init+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_SAI1_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_SAI1_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_SAI1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_SAI1_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_SAI1_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_SAI1_Init+0x64>)
 800099e:	f64a 4244 	movw	r2, #44100	; 0xac44
 80009a2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_SAI1_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_SAI1_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_SAI1_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_SAI1_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80009bc:	2302      	movs	r3, #2
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_SAI1_Init+0x64>)
 80009c4:	f003 fe26 	bl	8004614 <HAL_SAI_InitProtocol>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80009ce:	f001 f841 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000435c 	.word	0x2000435c
 80009dc:	40015804 	.word	0x40015804

080009e0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_UART4_Init+0x58>)
 80009e6:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <MX_UART4_Init+0x5c>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_UART4_Init+0x58>)
 80009ec:	f647 2212 	movw	r2, #31250	; 0x7a12
 80009f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_UART4_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_UART4_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_UART4_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_UART4_Init+0x58>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_UART4_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_UART4_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_UART4_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_UART4_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_UART4_Init+0x58>)
 8000a24:	f004 fa6f 	bl	8004f06 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a2e:	f001 f811 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200042d4 	.word	0x200042d4
 8000a3c:	40004c00 	.word	0x40004c00

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_DMA_Init+0x60>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <MX_DMA_Init+0x60>)
 8000a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_DMA_Init+0x60>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_DMA_Init+0x60>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <MX_DMA_Init+0x60>)
 8000a64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <MX_DMA_Init+0x60>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	200d      	movs	r0, #13
 8000a7c:	f001 fb8d 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a80:	200d      	movs	r0, #13
 8000a82:	f001 fba6 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2039      	movs	r0, #57	; 0x39
 8000a8c:	f001 fb85 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a90:	2039      	movs	r0, #57	; 0x39
 8000a92:	f001 fb9e 	bl	80021d2 <HAL_NVIC_EnableIRQ>

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a28      	ldr	r2, [pc, #160]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000ac0:	f043 0310 	orr.w	r3, r3, #16
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a22      	ldr	r2, [pc, #136]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <MX_GPIO_Init+0xc0>)
 8000b38:	f002 f88a 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_GPIO_Init+0xc0>)
 8000b54:	f001 fed0 	bl	80028f8 <HAL_GPIO_Init>

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	; 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020400 	.word	0x40020400

08000b68 <HAL_SAI_TxHalfCpltCallback>:
	HAL_I2S_Receive(&hi2s1, sendBuff, 8, 100);
	//HAL_I2S_(hi2s1, sendBuff, 16, 100);
	HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, 8);
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	make_sound(0);
 8000b70:	2000      	movs	r0, #0
 8000b72:	f000 ff37 	bl	80019e4 <make_sound>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	make_sound(AUDIO_BUFFER_LENGTH_DIV2);
 8000b86:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b8a:	f000 ff2b 	bl	80019e4 <make_sound>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <DMA_GetCurrDataCounter>:
//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);

//}

uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	b29b      	uxth	r3, r3
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <MIDI_GetNbNewBytes>:


uint8_t MIDI_GetNbNewBytes()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
	static uint16_t dma_cpt_prev = MIDI_BUFFER_LENGTH;
	uint16_t dma_cpt, n = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	80fb      	strh	r3, [r7, #6]
	// Get current DMA counter
	dma_cpt = DMA_GetCurrDataCounter(DMA1_Stream2);
 8000bba:	4812      	ldr	r0, [pc, #72]	; (8000c04 <MIDI_GetNbNewBytes+0x54>)
 8000bbc:	f7ff ffeb 	bl	8000b96 <DMA_GetCurrDataCounter>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	80bb      	strh	r3, [r7, #4]

	// If DMA counter has changed, compute the number of received MIDI bytes
	if (dma_cpt != dma_cpt_prev)
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MIDI_GetNbNewBytes+0x58>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	88ba      	ldrh	r2, [r7, #4]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d014      	beq.n	8000bf8 <MIDI_GetNbNewBytes+0x48>
	{
		if (dma_cpt < dma_cpt_prev)
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MIDI_GetNbNewBytes+0x58>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	88ba      	ldrh	r2, [r7, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d205      	bcs.n	8000be4 <MIDI_GetNbNewBytes+0x34>
		{
			n = dma_cpt_prev - dma_cpt;
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MIDI_GetNbNewBytes+0x58>)
 8000bda:	881a      	ldrh	r2, [r3, #0]
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	80fb      	strh	r3, [r7, #6]
 8000be2:	e006      	b.n	8000bf2 <MIDI_GetNbNewBytes+0x42>
		}
		else
		{
			n = dma_cpt_prev - (dma_cpt - MIDI_BUFFER_LENGTH);
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MIDI_GetNbNewBytes+0x58>)
 8000be6:	881a      	ldrh	r2, [r3, #0]
 8000be8:	88bb      	ldrh	r3, [r7, #4]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	3340      	adds	r3, #64	; 0x40
 8000bf0:	80fb      	strh	r3, [r7, #6]
		}
		// Store the new DMA counter
		dma_cpt_prev = dma_cpt;
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <MIDI_GetNbNewBytes+0x58>)
 8000bf4:	88bb      	ldrh	r3, [r7, #4]
 8000bf6:	8013      	strh	r3, [r2, #0]
	}
	return (n);
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	b2db      	uxtb	r3, r3
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40026040 	.word	0x40026040
 8000c08:	20000028 	.word	0x20000028

08000c0c <processBuffer>:

//Author: Synthol Project, Adjusted to fit projec
void processBuffer(uint8_t* MIDI_buffer, uint8_t nb_MIDI_bytes)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
	__IO uint32_t received_char;

	static uint8_t i = 0;
	static uint8_t state = 0;

	while (nb_MIDI_bytes != 0)
 8000c18:	bf00      	nop
 8000c1a:	e1ff      	b.n	800101c <processBuffer+0x410>
	{
		//reading a byte from the buffer
		received_char = UART4_rxBuffer[i];
 8000c1c:	4ba8      	ldr	r3, [pc, #672]	; (8000ec0 <processBuffer+0x2b4>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4ba8      	ldr	r3, [pc, #672]	; (8000ec4 <processBuffer+0x2b8>)
 8000c24:	5c9b      	ldrb	r3, [r3, r2]
 8000c26:	60fb      	str	r3, [r7, #12]
		switch (state)
 8000c28:	4ba7      	ldr	r3, [pc, #668]	; (8000ec8 <processBuffer+0x2bc>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b29      	cmp	r3, #41	; 0x29
 8000c2e:	f200 81f5 	bhi.w	800101c <processBuffer+0x410>
 8000c32:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <processBuffer+0x2c>)
 8000c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c38:	08000ce1 	.word	0x08000ce1
 8000c3c:	0800101d 	.word	0x0800101d
 8000c40:	0800101d 	.word	0x0800101d
 8000c44:	0800101d 	.word	0x0800101d
 8000c48:	0800101d 	.word	0x0800101d
 8000c4c:	0800101d 	.word	0x0800101d
 8000c50:	0800101d 	.word	0x0800101d
 8000c54:	0800101d 	.word	0x0800101d
 8000c58:	0800101d 	.word	0x0800101d
 8000c5c:	0800101d 	.word	0x0800101d
 8000c60:	08000db7 	.word	0x08000db7
 8000c64:	08000dff 	.word	0x08000dff
 8000c68:	0800101d 	.word	0x0800101d
 8000c6c:	0800101d 	.word	0x0800101d
 8000c70:	0800101d 	.word	0x0800101d
 8000c74:	0800101d 	.word	0x0800101d
 8000c78:	0800101d 	.word	0x0800101d
 8000c7c:	0800101d 	.word	0x0800101d
 8000c80:	0800101d 	.word	0x0800101d
 8000c84:	0800101d 	.word	0x0800101d
 8000c88:	08000e77 	.word	0x08000e77
 8000c8c:	08000ee5 	.word	0x08000ee5
 8000c90:	0800101d 	.word	0x0800101d
 8000c94:	0800101d 	.word	0x0800101d
 8000c98:	0800101d 	.word	0x0800101d
 8000c9c:	0800101d 	.word	0x0800101d
 8000ca0:	0800101d 	.word	0x0800101d
 8000ca4:	0800101d 	.word	0x0800101d
 8000ca8:	0800101d 	.word	0x0800101d
 8000cac:	0800101d 	.word	0x0800101d
 8000cb0:	08000f35 	.word	0x08000f35
 8000cb4:	08000f75 	.word	0x08000f75
 8000cb8:	0800101d 	.word	0x0800101d
 8000cbc:	0800101d 	.word	0x0800101d
 8000cc0:	0800101d 	.word	0x0800101d
 8000cc4:	0800101d 	.word	0x0800101d
 8000cc8:	0800101d 	.word	0x0800101d
 8000ccc:	0800101d 	.word	0x0800101d
 8000cd0:	0800101d 	.word	0x0800101d
 8000cd4:	0800101d 	.word	0x0800101d
 8000cd8:	08000fab 	.word	0x08000fab
 8000cdc:	08000feb 	.word	0x08000feb
		{
		// State 0 = Starting point for a new MIDI message
		case 0:
		{
			switch (received_char & 0xF0)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ce6:	2be0      	cmp	r3, #224	; 0xe0
 8000ce8:	d048      	beq.n	8000d7c <processBuffer+0x170>
 8000cea:	2be0      	cmp	r3, #224	; 0xe0
 8000cec:	d85b      	bhi.n	8000da6 <processBuffer+0x19a>
 8000cee:	2bb0      	cmp	r3, #176	; 0xb0
 8000cf0:	d02f      	beq.n	8000d52 <processBuffer+0x146>
 8000cf2:	2bb0      	cmp	r3, #176	; 0xb0
 8000cf4:	d857      	bhi.n	8000da6 <processBuffer+0x19a>
 8000cf6:	2b80      	cmp	r3, #128	; 0x80
 8000cf8:	d016      	beq.n	8000d28 <processBuffer+0x11c>
 8000cfa:	2b90      	cmp	r3, #144	; 0x90
 8000cfc:	d153      	bne.n	8000da6 <processBuffer+0x19a>
			{
			case 0x90: // Note ON message
			{
				state = 10; // Next state is 10
 8000cfe:	4b72      	ldr	r3, [pc, #456]	; (8000ec8 <processBuffer+0x2bc>)
 8000d00:	220a      	movs	r2, #10
 8000d02:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d04:	4b6e      	ldr	r3, [pc, #440]	; (8000ec0 <processBuffer+0x2b4>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b3f      	cmp	r3, #63	; 0x3f
 8000d0a:	d103      	bne.n	8000d14 <processBuffer+0x108>
					i = 0;				// Move to next MIDI byte
 8000d0c:	4b6c      	ldr	r3, [pc, #432]	; (8000ec0 <processBuffer+0x2b4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	e005      	b.n	8000d20 <processBuffer+0x114>
				}
				else {
					i++;
 8000d14:	4b6a      	ldr	r3, [pc, #424]	; (8000ec0 <processBuffer+0x2b4>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b68      	ldr	r3, [pc, #416]	; (8000ec0 <processBuffer+0x2b4>)
 8000d1e:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	70fb      	strb	r3, [r7, #3]
				break;
 8000d26:	e045      	b.n	8000db4 <processBuffer+0x1a8>
			}
			case 0x80: // Note OFF message
			{
				state = 20; // Next state is 20
 8000d28:	4b67      	ldr	r3, [pc, #412]	; (8000ec8 <processBuffer+0x2bc>)
 8000d2a:	2214      	movs	r2, #20
 8000d2c:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d2e:	4b64      	ldr	r3, [pc, #400]	; (8000ec0 <processBuffer+0x2b4>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b3f      	cmp	r3, #63	; 0x3f
 8000d34:	d103      	bne.n	8000d3e <processBuffer+0x132>
					i = 0;				// Move to next MIDI byte
 8000d36:	4b62      	ldr	r3, [pc, #392]	; (8000ec0 <processBuffer+0x2b4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e005      	b.n	8000d4a <processBuffer+0x13e>
				}
				else {
					i++;
 8000d3e:	4b60      	ldr	r3, [pc, #384]	; (8000ec0 <processBuffer+0x2b4>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b5e      	ldr	r3, [pc, #376]	; (8000ec0 <processBuffer+0x2b4>)
 8000d48:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	70fb      	strb	r3, [r7, #3]
				break;
 8000d50:	e030      	b.n	8000db4 <processBuffer+0x1a8>
			}
			case 0xB0: // CC message
			{
				state = 30; // Next state is 30
 8000d52:	4b5d      	ldr	r3, [pc, #372]	; (8000ec8 <processBuffer+0x2bc>)
 8000d54:	221e      	movs	r2, #30
 8000d56:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d58:	4b59      	ldr	r3, [pc, #356]	; (8000ec0 <processBuffer+0x2b4>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d5e:	d103      	bne.n	8000d68 <processBuffer+0x15c>
					i = 0;				// Move to next MIDI byte
 8000d60:	4b57      	ldr	r3, [pc, #348]	; (8000ec0 <processBuffer+0x2b4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	e005      	b.n	8000d74 <processBuffer+0x168>
				}
				else {
					i++;
 8000d68:	4b55      	ldr	r3, [pc, #340]	; (8000ec0 <processBuffer+0x2b4>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b53      	ldr	r3, [pc, #332]	; (8000ec0 <processBuffer+0x2b4>)
 8000d72:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	70fb      	strb	r3, [r7, #3]
				break;
 8000d7a:	e01b      	b.n	8000db4 <processBuffer+0x1a8>
			}

			case 0xE0: // Pitch Bend message
			{
				state = 40; // Next state is 40
 8000d7c:	4b52      	ldr	r3, [pc, #328]	; (8000ec8 <processBuffer+0x2bc>)
 8000d7e:	2228      	movs	r2, #40	; 0x28
 8000d80:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d82:	4b4f      	ldr	r3, [pc, #316]	; (8000ec0 <processBuffer+0x2b4>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b3f      	cmp	r3, #63	; 0x3f
 8000d88:	d103      	bne.n	8000d92 <processBuffer+0x186>
					i = 0;				// Move to next MIDI byte
 8000d8a:	4b4d      	ldr	r3, [pc, #308]	; (8000ec0 <processBuffer+0x2b4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	e005      	b.n	8000d9e <processBuffer+0x192>
				}
				else {
					i++;
 8000d92:	4b4b      	ldr	r3, [pc, #300]	; (8000ec0 <processBuffer+0x2b4>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <processBuffer+0x2b4>)
 8000d9c:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d9e:	78fb      	ldrb	r3, [r7, #3]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	70fb      	strb	r3, [r7, #3]
				break;
 8000da4:	e006      	b.n	8000db4 <processBuffer+0x1a8>
			}
			default: // Other type of message, move to next byte but stays in state 0
			{
				//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
				i++;
 8000da6:	4b46      	ldr	r3, [pc, #280]	; (8000ec0 <processBuffer+0x2b4>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b44      	ldr	r3, [pc, #272]	; (8000ec0 <processBuffer+0x2b4>)
 8000db0:	701a      	strb	r2, [r3, #0]
				break;
 8000db2:	bf00      	nop
			}
			}
			break;
 8000db4:	e132      	b.n	800101c <processBuffer+0x410>
		}
		// State 10 & 11 : Note ON command
		case 10:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dba:	d903      	bls.n	8000dc4 <processBuffer+0x1b8>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000dbc:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <processBuffer+0x2bc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	e12b      	b.n	800101c <processBuffer+0x410>
			}
			else
			{ // Save MIDI note
				ctrl = key = received_char;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <processBuffer+0x2c0>)
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <processBuffer+0x2c0>)
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	4b3f      	ldr	r3, [pc, #252]	; (8000ed0 <processBuffer+0x2c4>)
 8000dd2:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000dd4:	4b3a      	ldr	r3, [pc, #232]	; (8000ec0 <processBuffer+0x2b4>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b3f      	cmp	r3, #63	; 0x3f
 8000dda:	d103      	bne.n	8000de4 <processBuffer+0x1d8>
					i = 0;				// Move to next MIDI byte
 8000ddc:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <processBuffer+0x2b4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e005      	b.n	8000df0 <processBuffer+0x1e4>
				}
				else {
					i++;
 8000de4:	4b36      	ldr	r3, [pc, #216]	; (8000ec0 <processBuffer+0x2b4>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b34      	ldr	r3, [pc, #208]	; (8000ec0 <processBuffer+0x2b4>)
 8000dee:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	70fb      	strb	r3, [r7, #3]
				state = 11; // Next state is 11
 8000df6:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <processBuffer+0x2bc>)
 8000df8:	220b      	movs	r2, #11
 8000dfa:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000dfc:	e10e      	b.n	800101c <processBuffer+0x410>
		}
		case 11:
		{
			data = velocity = received_char; //will only ever get velocity in this section i think
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b34      	ldr	r3, [pc, #208]	; (8000ed4 <processBuffer+0x2c8>)
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <processBuffer+0x2c8>)
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <processBuffer+0x2cc>)
 8000e0c:	701a      	strb	r2, [r3, #0]

			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <processBuffer+0x2b4>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b3f      	cmp	r3, #63	; 0x3f
 8000e14:	d103      	bne.n	8000e1e <processBuffer+0x212>
				i = 0;				// Move to next MIDI byte
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <processBuffer+0x2b4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
 8000e1c:	e005      	b.n	8000e2a <processBuffer+0x21e>
			}
			else {
				i++;
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <processBuffer+0x2b4>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <processBuffer+0x2b4>)
 8000e28:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	70fb      	strb	r3, [r7, #3]

			state = 10; // Next state is 10
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <processBuffer+0x2bc>)
 8000e32:	220a      	movs	r2, #10
 8000e34:	701a      	strb	r2, [r3, #0]

			if (velocity > 0)
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <processBuffer+0x2c8>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00f      	beq.n	8000e5e <processBuffer+0x252>
			{

				note_list = add_note_last(note_list, key, velocity);
 8000e3e:	4b27      	ldr	r3, [pc, #156]	; (8000edc <processBuffer+0x2d0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a22      	ldr	r2, [pc, #136]	; (8000ecc <processBuffer+0x2c0>)
 8000e44:	7811      	ldrb	r1, [r2, #0]
 8000e46:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <processBuffer+0x2c8>)
 8000e48:	7812      	ldrb	r2, [r2, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fb70 	bl	8000530 <add_note_last>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a22      	ldr	r2, [pc, #136]	; (8000edc <processBuffer+0x2d0>)
 8000e54:	6013      	str	r3, [r2, #0]

				newNote = 1;
 8000e56:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <processBuffer+0x2d4>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	e0de      	b.n	800101c <processBuffer+0x410>

			}
			else
			{
				//find the key and deletes it
				note_list = delete_note(note_list, key);
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <processBuffer+0x2d0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <processBuffer+0x2c0>)
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fb8e 	bl	800058a <delete_note>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <processBuffer+0x2d0>)
 8000e72:	6013      	str	r3, [r2, #0]
			}
			break;
 8000e74:	e0d2      	b.n	800101c <processBuffer+0x410>
		}
		// State 20 & 21 : Note OFF command
		case 20:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2b7f      	cmp	r3, #127	; 0x7f
 8000e7a:	d903      	bls.n	8000e84 <processBuffer+0x278>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <processBuffer+0x2bc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	e0cb      	b.n	800101c <processBuffer+0x410>
			}

			else
			{
				ctrl = key = received_char; // Save MIDI note
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <processBuffer+0x2c0>)
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <processBuffer+0x2c0>)
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <processBuffer+0x2c4>)
 8000e92:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <processBuffer+0x2b4>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b3f      	cmp	r3, #63	; 0x3f
 8000e9a:	d103      	bne.n	8000ea4 <processBuffer+0x298>
					i = 0;				// Move to next MIDI byte
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <processBuffer+0x2b4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	e005      	b.n	8000eb0 <processBuffer+0x2a4>
				}
				else {
					i++;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <processBuffer+0x2b4>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <processBuffer+0x2b4>)
 8000eae:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	70fb      	strb	r3, [r7, #3]

				state = 21; // Next state is 21
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <processBuffer+0x2bc>)
 8000eb8:	2215      	movs	r2, #21
 8000eba:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ebc:	e0ae      	b.n	800101c <processBuffer+0x410>
 8000ebe:	bf00      	nop
 8000ec0:	20004130 	.word	0x20004130
 8000ec4:	200040f0 	.word	0x200040f0
 8000ec8:	20004131 	.word	0x20004131
 8000ecc:	2000428d 	.word	0x2000428d
 8000ed0:	200041fc 	.word	0x200041fc
 8000ed4:	2000428a 	.word	0x2000428a
 8000ed8:	2000428c 	.word	0x2000428c
 8000edc:	200000ec 	.word	0x200000ec
 8000ee0:	20004201 	.word	0x20004201
		}
		case 21:
		{
			velocity = data = received_char; // Save MIDI velocity
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b51      	ldr	r3, [pc, #324]	; (8001030 <processBuffer+0x424>)
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	4b50      	ldr	r3, [pc, #320]	; (8001030 <processBuffer+0x424>)
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	4b50      	ldr	r3, [pc, #320]	; (8001034 <processBuffer+0x428>)
 8000ef2:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000ef4:	4b50      	ldr	r3, [pc, #320]	; (8001038 <processBuffer+0x42c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b3f      	cmp	r3, #63	; 0x3f
 8000efa:	d103      	bne.n	8000f04 <processBuffer+0x2f8>
				i = 0;				// Move to next MIDI byte
 8000efc:	4b4e      	ldr	r3, [pc, #312]	; (8001038 <processBuffer+0x42c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	e005      	b.n	8000f10 <processBuffer+0x304>
			}
			else {
				i++;
 8000f04:	4b4c      	ldr	r3, [pc, #304]	; (8001038 <processBuffer+0x42c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <processBuffer+0x42c>)
 8000f0e:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	70fb      	strb	r3, [r7, #3]

			state = 20; // Next state is 20
 8000f16:	4b49      	ldr	r3, [pc, #292]	; (800103c <processBuffer+0x430>)
 8000f18:	2214      	movs	r2, #20
 8000f1a:	701a      	strb	r2, [r3, #0]

			note_list = delete_note(note_list, key);
 8000f1c:	4b48      	ldr	r3, [pc, #288]	; (8001040 <processBuffer+0x434>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a48      	ldr	r2, [pc, #288]	; (8001044 <processBuffer+0x438>)
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fb2f 	bl	800058a <delete_note>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a44      	ldr	r2, [pc, #272]	; (8001040 <processBuffer+0x434>)
 8000f30:	6013      	str	r3, [r2, #0]
			break;
 8000f32:	e073      	b.n	800101c <processBuffer+0x410>
		}
		// State 30 & 31 : CC command
		case 30:
		{
			if (received_char > 0x7F) // If the following byte is not a CC number
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b7f      	cmp	r3, #127	; 0x7f
 8000f38:	d903      	bls.n	8000f42 <processBuffer+0x336>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000f3a:	4b40      	ldr	r3, [pc, #256]	; (800103c <processBuffer+0x430>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	e06c      	b.n	800101c <processBuffer+0x410>
			}
			else
			{
				paramNum = received_char; // Save MIDI CC number
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b40      	ldr	r3, [pc, #256]	; (8001048 <processBuffer+0x43c>)
 8000f48:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	; (8001038 <processBuffer+0x42c>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f50:	d103      	bne.n	8000f5a <processBuffer+0x34e>
					i = 0;				// Move to next MIDI byte
 8000f52:	4b39      	ldr	r3, [pc, #228]	; (8001038 <processBuffer+0x42c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	e005      	b.n	8000f66 <processBuffer+0x35a>
				}
				else {
					i++;
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <processBuffer+0x42c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b35      	ldr	r3, [pc, #212]	; (8001038 <processBuffer+0x42c>)
 8000f64:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	70fb      	strb	r3, [r7, #3]
				state = 31; // Next state is 31
 8000f6c:	4b33      	ldr	r3, [pc, #204]	; (800103c <processBuffer+0x430>)
 8000f6e:	221f      	movs	r2, #31
 8000f70:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f72:	e053      	b.n	800101c <processBuffer+0x410>
		}
		case 31:
		{
			paramVal = received_char; // Save MIDI velocity
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b34      	ldr	r3, [pc, #208]	; (800104c <processBuffer+0x440>)
 8000f7a:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <processBuffer+0x42c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b3f      	cmp	r3, #63	; 0x3f
 8000f82:	d103      	bne.n	8000f8c <processBuffer+0x380>
				i = 0;				// Move to next MIDI byte
 8000f84:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <processBuffer+0x42c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	e005      	b.n	8000f98 <processBuffer+0x38c>
			}
			else {
				i++;
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <processBuffer+0x42c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <processBuffer+0x42c>)
 8000f96:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	70fb      	strb	r3, [r7, #3]
			state = 30;
 8000f9e:	4b27      	ldr	r3, [pc, #156]	; (800103c <processBuffer+0x430>)
 8000fa0:	221e      	movs	r2, #30
 8000fa2:	701a      	strb	r2, [r3, #0]

			setParams();
 8000fa4:	f000 f856 	bl	8001054 <setParams>

			break;
 8000fa8:	e038      	b.n	800101c <processBuffer+0x410>
		}
		// State 40 & 41 : Pitch Bend message
		case 40:
		{
			if (received_char > 0x7F) // If following byte is note a PB value
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b7f      	cmp	r3, #127	; 0x7f
 8000fae:	d903      	bls.n	8000fb8 <processBuffer+0x3ac>
			{
				state = 0; // Return to state 0
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <processBuffer+0x430>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e031      	b.n	800101c <processBuffer+0x410>
			}
			else
			{
				param = received_char; // Save MIDI CC number
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <processBuffer+0x444>)
 8000fbe:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <processBuffer+0x42c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b3f      	cmp	r3, #63	; 0x3f
 8000fc6:	d103      	bne.n	8000fd0 <processBuffer+0x3c4>
					i = 0;				// Move to next MIDI byte
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <processBuffer+0x42c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e005      	b.n	8000fdc <processBuffer+0x3d0>
				}
				else {
					i++;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <processBuffer+0x42c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <processBuffer+0x42c>)
 8000fda:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	70fb      	strb	r3, [r7, #3]
				state = 41; // Next state is 41
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <processBuffer+0x430>)
 8000fe4:	2229      	movs	r2, #41	; 0x29
 8000fe6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000fe8:	e018      	b.n	800101c <processBuffer+0x410>
		}
		case 41:
		{
			param = received_char; // Save MIDI velocity
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <processBuffer+0x444>)
 8000ff0:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <processBuffer+0x42c>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ff8:	d103      	bne.n	8001002 <processBuffer+0x3f6>
				i = 0;				// Move to next MIDI byte
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <processBuffer+0x42c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e005      	b.n	800100e <processBuffer+0x402>
			}
			else {
				i++;
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <processBuffer+0x42c>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <processBuffer+0x42c>)
 800100c:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	3b01      	subs	r3, #1
 8001012:	70fb      	strb	r3, [r7, #3]
			state = 40; // Next state is 00
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <processBuffer+0x430>)
 8001016:	2228      	movs	r2, #40	; 0x28
 8001018:	701a      	strb	r2, [r3, #0]
			break;
 800101a:	bf00      	nop
	while (nb_MIDI_bytes != 0)
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f47f adfc 	bne.w	8000c1c <processBuffer+0x10>
		}
	}
	}
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000428c 	.word	0x2000428c
 8001034:	2000428a 	.word	0x2000428a
 8001038:	20004130 	.word	0x20004130
 800103c:	20004131 	.word	0x20004131
 8001040:	200000ec 	.word	0x200000ec
 8001044:	2000428d 	.word	0x2000428d
 8001048:	20004266 	.word	0x20004266
 800104c:	200041fe 	.word	0x200041fe
 8001050:	200041aa 	.word	0x200041aa

08001054 <setParams>:

//TODO:logic for ADSR as well as DSP
void setParams(){
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	switch (paramNum){
 8001058:	4bc5      	ldr	r3, [pc, #788]	; (8001370 <setParams+0x31c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	3b10      	subs	r3, #16
 800105e:	2b43      	cmp	r3, #67	; 0x43
 8001060:	f200 81be 	bhi.w	80013e0 <setParams+0x38c>
 8001064:	a201      	add	r2, pc, #4	; (adr r2, 800106c <setParams+0x18>)
 8001066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106a:	bf00      	nop
 800106c:	080012ff 	.word	0x080012ff
 8001070:	0800128d 	.word	0x0800128d
 8001074:	080013e1 	.word	0x080013e1
 8001078:	080013e1 	.word	0x080013e1
 800107c:	080013e1 	.word	0x080013e1
 8001080:	080013e1 	.word	0x080013e1
 8001084:	080013e1 	.word	0x080013e1
 8001088:	080013e1 	.word	0x080013e1
 800108c:	080013e1 	.word	0x080013e1
 8001090:	080013e1 	.word	0x080013e1
 8001094:	080013e1 	.word	0x080013e1
 8001098:	080013e1 	.word	0x080013e1
 800109c:	080013e1 	.word	0x080013e1
 80010a0:	080013e1 	.word	0x080013e1
 80010a4:	080013e1 	.word	0x080013e1
 80010a8:	080013e1 	.word	0x080013e1
 80010ac:	080013e1 	.word	0x080013e1
 80010b0:	080013e1 	.word	0x080013e1
 80010b4:	080013e1 	.word	0x080013e1
 80010b8:	080013e1 	.word	0x080013e1
 80010bc:	080013e1 	.word	0x080013e1
 80010c0:	080013e1 	.word	0x080013e1
 80010c4:	080013e1 	.word	0x080013e1
 80010c8:	080013e1 	.word	0x080013e1
 80010cc:	080013e1 	.word	0x080013e1
 80010d0:	080013e1 	.word	0x080013e1
 80010d4:	080013e1 	.word	0x080013e1
 80010d8:	080013e1 	.word	0x080013e1
 80010dc:	080013e1 	.word	0x080013e1
 80010e0:	080013e1 	.word	0x080013e1
 80010e4:	080013e1 	.word	0x080013e1
 80010e8:	080013e1 	.word	0x080013e1
 80010ec:	080013e1 	.word	0x080013e1
 80010f0:	080013e1 	.word	0x080013e1
 80010f4:	080013e1 	.word	0x080013e1
 80010f8:	080013e1 	.word	0x080013e1
 80010fc:	080013e1 	.word	0x080013e1
 8001100:	080013e1 	.word	0x080013e1
 8001104:	080013e1 	.word	0x080013e1
 8001108:	080013e1 	.word	0x080013e1
 800110c:	080013e1 	.word	0x080013e1
 8001110:	080013e1 	.word	0x080013e1
 8001114:	080013e1 	.word	0x080013e1
 8001118:	080013e1 	.word	0x080013e1
 800111c:	080013e1 	.word	0x080013e1
 8001120:	080013e1 	.word	0x080013e1
 8001124:	080013e1 	.word	0x080013e1
 8001128:	080013e1 	.word	0x080013e1
 800112c:	080013e1 	.word	0x080013e1
 8001130:	080013e1 	.word	0x080013e1
 8001134:	080013e1 	.word	0x080013e1
 8001138:	080013e1 	.word	0x080013e1
 800113c:	080013e1 	.word	0x080013e1
 8001140:	080013e1 	.word	0x080013e1
 8001144:	080013e1 	.word	0x080013e1
 8001148:	080013c5 	.word	0x080013c5
 800114c:	080011e1 	.word	0x080011e1
 8001150:	0800117d 	.word	0x0800117d
 8001154:	080013a9 	.word	0x080013a9
 8001158:	080011a1 	.word	0x080011a1
 800115c:	080013e1 	.word	0x080013e1
 8001160:	080013e1 	.word	0x080013e1
 8001164:	080013e1 	.word	0x080013e1
 8001168:	080011c5 	.word	0x080011c5
 800116c:	08001205 	.word	0x08001205
 8001170:	08001229 	.word	0x08001229
 8001174:	0800124d 	.word	0x0800124d
 8001178:	08001269 	.word	0x08001269
	case 73:								// ADRS Attack Time
		{
			adsr1Attack = 0.001f + (float_t) paramVal / 127;
 800117c:	4b7d      	ldr	r3, [pc, #500]	; (8001374 <setParams+0x320>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001188:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001378 <setParams+0x324>
 800118c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001190:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800137c <setParams+0x328>
 8001194:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001198:	4b79      	ldr	r3, [pc, #484]	; (8001380 <setParams+0x32c>)
 800119a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800119e:	e11f      	b.n	80013e0 <setParams+0x38c>
		}

	case 75:								// ADRS Decay Time
		{
			adsr1Decay = 0.001f + (float_t) paramVal / 127;
 80011a0:	4b74      	ldr	r3, [pc, #464]	; (8001374 <setParams+0x320>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ac:	eddf 6a72 	vldr	s13, [pc, #456]	; 8001378 <setParams+0x324>
 80011b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b4:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800137c <setParams+0x328>
 80011b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011bc:	4b71      	ldr	r3, [pc, #452]	; (8001384 <setParams+0x330>)
 80011be:	edc3 7a00 	vstr	s15, [r3]
			break;
 80011c2:	e10d      	b.n	80013e0 <setParams+0x38c>
		}

	case 79:								// ADRS Sustain Level
		{
			adsr1Sus = (float_t) paramVal / 127;
 80011c4:	4b6b      	ldr	r3, [pc, #428]	; (8001374 <setParams+0x320>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011d0:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001378 <setParams+0x324>
 80011d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d8:	4b6b      	ldr	r3, [pc, #428]	; (8001388 <setParams+0x334>)
 80011da:	edc3 7a00 	vstr	s15, [r3]
			break;
 80011de:	e0ff      	b.n	80013e0 <setParams+0x38c>
		}

	case 72:								// ADRS Release Time
		{
			adsr1Rel = 0.001f + (float_t) paramVal / 127;
 80011e0:	4b64      	ldr	r3, [pc, #400]	; (8001374 <setParams+0x320>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ec:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001378 <setParams+0x324>
 80011f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800137c <setParams+0x328>
 80011f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011fc:	4b63      	ldr	r3, [pc, #396]	; (800138c <setParams+0x338>)
 80011fe:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001202:	e0ed      	b.n	80013e0 <setParams+0x38c>
		}

	//second ASDR
	case 80:								// ADRS Attack Time
		{
			adsr2Attack = 0.001f + (float_t) paramVal / 127;
 8001204:	4b5b      	ldr	r3, [pc, #364]	; (8001374 <setParams+0x320>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001210:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001378 <setParams+0x324>
 8001214:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001218:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800137c <setParams+0x328>
 800121c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001220:	4b5b      	ldr	r3, [pc, #364]	; (8001390 <setParams+0x33c>)
 8001222:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001226:	e0db      	b.n	80013e0 <setParams+0x38c>
		}

	case 81:								// ADRS Decay Time
		{
			adsr2Decay = 0.001f + (float_t) paramVal / 127;
 8001228:	4b52      	ldr	r3, [pc, #328]	; (8001374 <setParams+0x320>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001234:	eddf 6a50 	vldr	s13, [pc, #320]	; 8001378 <setParams+0x324>
 8001238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800137c <setParams+0x328>
 8001240:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001244:	4b53      	ldr	r3, [pc, #332]	; (8001394 <setParams+0x340>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
			break;
 800124a:	e0c9      	b.n	80013e0 <setParams+0x38c>
		}

	case 82:								// ADRS Sustain Level
		{
			adsr2Sus = (float_t) paramVal / 127;
 800124c:	4b49      	ldr	r3, [pc, #292]	; (8001374 <setParams+0x320>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001258:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001378 <setParams+0x324>
 800125c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001260:	4b4d      	ldr	r3, [pc, #308]	; (8001398 <setParams+0x344>)
 8001262:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001266:	e0bb      	b.n	80013e0 <setParams+0x38c>
		}

	case 83:								// ADRS Release Time
		{
			adsr2Rel = 0.001f + (float_t) paramVal / 127;
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <setParams+0x320>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001274:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001378 <setParams+0x324>
 8001278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800137c <setParams+0x328>
 8001280:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001284:	4b45      	ldr	r3, [pc, #276]	; (800139c <setParams+0x348>)
 8001286:	edc3 7a00 	vstr	s15, [r3]
			break;
 800128a:	e0a9      	b.n	80013e0 <setParams+0x38c>


	//Waveform Select OSC2
	case 17:
			{
				if (paramVal >= 0 && paramVal < 32)	{
 800128c:	4b39      	ldr	r3, [pc, #228]	; (8001374 <setParams+0x320>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b1f      	cmp	r3, #31
 8001292:	d803      	bhi.n	800129c <setParams+0x248>
					osc2Waveform = 0;
 8001294:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <setParams+0x34c>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
				}
				else {
					osc2Waveform = 0;
				}

				break;
 800129a:	e0a1      	b.n	80013e0 <setParams+0x38c>
				else if (paramVal >= 32 && paramVal < 64)	{
 800129c:	4b35      	ldr	r3, [pc, #212]	; (8001374 <setParams+0x320>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b1f      	cmp	r3, #31
 80012a2:	d907      	bls.n	80012b4 <setParams+0x260>
 80012a4:	4b33      	ldr	r3, [pc, #204]	; (8001374 <setParams+0x320>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b3f      	cmp	r3, #63	; 0x3f
 80012aa:	d803      	bhi.n	80012b4 <setParams+0x260>
					osc2Waveform = 1;
 80012ac:	4b3c      	ldr	r3, [pc, #240]	; (80013a0 <setParams+0x34c>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	e023      	b.n	80012fc <setParams+0x2a8>
				else if (paramVal >= 64 && paramVal < 96)	{
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <setParams+0x320>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b3f      	cmp	r3, #63	; 0x3f
 80012ba:	d907      	bls.n	80012cc <setParams+0x278>
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <setParams+0x320>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b5f      	cmp	r3, #95	; 0x5f
 80012c2:	d803      	bhi.n	80012cc <setParams+0x278>
					osc2Waveform = 2;
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <setParams+0x34c>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e017      	b.n	80012fc <setParams+0x2a8>
				else if (paramVal >= 96 && paramVal < 125){
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <setParams+0x320>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b5f      	cmp	r3, #95	; 0x5f
 80012d2:	d907      	bls.n	80012e4 <setParams+0x290>
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <setParams+0x320>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b7c      	cmp	r3, #124	; 0x7c
 80012da:	d803      	bhi.n	80012e4 <setParams+0x290>
					osc2Waveform = 3;
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <setParams+0x34c>)
 80012de:	2203      	movs	r2, #3
 80012e0:	701a      	strb	r2, [r3, #0]
 80012e2:	e00b      	b.n	80012fc <setParams+0x2a8>
				else if (paramVal >= 125 ){
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <setParams+0x320>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b7c      	cmp	r3, #124	; 0x7c
 80012ea:	d903      	bls.n	80012f4 <setParams+0x2a0>
					osc2Waveform = 4;
 80012ec:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <setParams+0x34c>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	701a      	strb	r2, [r3, #0]
				break;
 80012f2:	e075      	b.n	80013e0 <setParams+0x38c>
					osc2Waveform = 0;
 80012f4:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <setParams+0x34c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
				break;
 80012fa:	e071      	b.n	80013e0 <setParams+0x38c>
 80012fc:	e070      	b.n	80013e0 <setParams+0x38c>
			}
	//Waveform Select OSC1
	case 16:
			{
				if (paramVal >= 0 && paramVal < 32)	{
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <setParams+0x320>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b1f      	cmp	r3, #31
 8001304:	d803      	bhi.n	800130e <setParams+0x2ba>
					osc1Waveform = 0;
 8001306:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <setParams+0x350>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
				}
				else {
					osc1Waveform = 0;
				}

				break;
 800130c:	e068      	b.n	80013e0 <setParams+0x38c>
				else if (paramVal >= 32 && paramVal < 64)	{
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <setParams+0x320>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b1f      	cmp	r3, #31
 8001314:	d907      	bls.n	8001326 <setParams+0x2d2>
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <setParams+0x320>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b3f      	cmp	r3, #63	; 0x3f
 800131c:	d803      	bhi.n	8001326 <setParams+0x2d2>
					osc1Waveform = 1;
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <setParams+0x350>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	e023      	b.n	800136e <setParams+0x31a>
				else if (paramVal >= 64 && paramVal < 96)	{
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <setParams+0x320>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b3f      	cmp	r3, #63	; 0x3f
 800132c:	d907      	bls.n	800133e <setParams+0x2ea>
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <setParams+0x320>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b5f      	cmp	r3, #95	; 0x5f
 8001334:	d803      	bhi.n	800133e <setParams+0x2ea>
					osc1Waveform = 2;
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <setParams+0x350>)
 8001338:	2202      	movs	r2, #2
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	e017      	b.n	800136e <setParams+0x31a>
				else if (paramVal >= 96 && paramVal < 125){
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <setParams+0x320>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b5f      	cmp	r3, #95	; 0x5f
 8001344:	d907      	bls.n	8001356 <setParams+0x302>
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <setParams+0x320>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b7c      	cmp	r3, #124	; 0x7c
 800134c:	d803      	bhi.n	8001356 <setParams+0x302>
					osc1Waveform = 3;
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <setParams+0x350>)
 8001350:	2203      	movs	r2, #3
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e00b      	b.n	800136e <setParams+0x31a>
				else if (paramVal >= 125 ){
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <setParams+0x320>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b7c      	cmp	r3, #124	; 0x7c
 800135c:	d903      	bls.n	8001366 <setParams+0x312>
					osc1Waveform = 4;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <setParams+0x350>)
 8001360:	2204      	movs	r2, #4
 8001362:	701a      	strb	r2, [r3, #0]
				break;
 8001364:	e03c      	b.n	80013e0 <setParams+0x38c>
					osc1Waveform = 0;
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <setParams+0x350>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
				break;
 800136c:	e038      	b.n	80013e0 <setParams+0x38c>
 800136e:	e037      	b.n	80013e0 <setParams+0x38c>
 8001370:	20004266 	.word	0x20004266
 8001374:	200041fe 	.word	0x200041fe
 8001378:	42fe0000 	.word	0x42fe0000
 800137c:	3a83126f 	.word	0x3a83126f
 8001380:	20000000 	.word	0x20000000
 8001384:	20000004 	.word	0x20000004
 8001388:	20000008 	.word	0x20000008
 800138c:	2000000c 	.word	0x2000000c
 8001390:	20000010 	.word	0x20000010
 8001394:	20000014 	.word	0x20000014
 8001398:	20000018 	.word	0x20000018
 800139c:	2000001c 	.word	0x2000001c
 80013a0:	20004288 	.word	0x20004288
 80013a4:	200041a9 	.word	0x200041a9
			}
	case 74 :								// OSC1 mix level
	{
		osc1mix = (float_t) paramVal / 127;
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <setParams+0x398>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013b4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80013f0 <setParams+0x39c>
 80013b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <setParams+0x3a0>)
 80013be:	edc3 7a00 	vstr	s15, [r3]
		break;
 80013c2:	e00d      	b.n	80013e0 <setParams+0x38c>
	}

	case 71 :								// OSC2 mix level
	{
		osc2mix = (float_t) paramVal / 127;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <setParams+0x398>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013d0:	eddf 6a07 	vldr	s13, [pc, #28]	; 80013f0 <setParams+0x39c>
 80013d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <setParams+0x3a4>)
 80013da:	edc3 7a00 	vstr	s15, [r3]
		break;
 80013de:	bf00      	nop
	}
	}
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	200041fe 	.word	0x200041fe
 80013f0:	42fe0000 	.word	0x42fe0000
 80013f4:	20000020 	.word	0x20000020
 80013f8:	20000024 	.word	0x20000024

080013fc <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	//HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
	//new version dose not call here
		//processBuffer();
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	//HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
	//once MIDI buffer is full we send to the process buffer function
	//new version dose not call here
	//processBuffer();
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <calcSynth>:

float calcSynth(){
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
	uint16_t a,b;
	float da, db;


	if (newNote){
 800142a:	4bba      	ldr	r3, [pc, #744]	; (8001714 <calcSynth+0x2f0>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d02e      	beq.n	8001490 <calcSynth+0x6c>
		newNote = 0;
 8001432:	4bb8      	ldr	r3, [pc, #736]	; (8001714 <calcSynth+0x2f0>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
		adsr1State = 1; //first attck
 8001438:	4bb7      	ldr	r3, [pc, #732]	; (8001718 <calcSynth+0x2f4>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
		adsr2State = 1; //first attck
 800143e:	4bb7      	ldr	r3, [pc, #732]	; (800171c <calcSynth+0x2f8>)
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]

		attack1Inc = (1 - adsr1Output)/(adsr1Attack * SAMPLE_RATE);
 8001444:	4bb6      	ldr	r3, [pc, #728]	; (8001720 <calcSynth+0x2fc>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800144e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001452:	4bb4      	ldr	r3, [pc, #720]	; (8001724 <calcSynth+0x300>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001728 <calcSynth+0x304>
 800145c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001464:	4bb1      	ldr	r3, [pc, #708]	; (800172c <calcSynth+0x308>)
 8001466:	edc3 7a00 	vstr	s15, [r3]
		attack2Inc = (1 - adsr2Output)/(adsr2Attack * SAMPLE_RATE);
 800146a:	4bb1      	ldr	r3, [pc, #708]	; (8001730 <calcSynth+0x30c>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001474:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001478:	4bae      	ldr	r3, [pc, #696]	; (8001734 <calcSynth+0x310>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001728 <calcSynth+0x304>
 8001482:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148a:	4bab      	ldr	r3, [pc, #684]	; (8001738 <calcSynth+0x314>)
 800148c:	edc3 7a00 	vstr	s15, [r3]
	}

	if (trig == 0) //note is complete, set the release time
 8001490:	4baa      	ldr	r3, [pc, #680]	; (800173c <calcSynth+0x318>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	f083 0301 	eor.w	r3, r3, #1
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d02b      	beq.n	80014f6 <calcSynth+0xd2>
		{
			if (adsr1State != 4)
 800149e:	4b9e      	ldr	r3, [pc, #632]	; (8001718 <calcSynth+0x2f4>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d011      	beq.n	80014ca <calcSynth+0xa6>
			{
				adsr1State = 4;
 80014a6:	4b9c      	ldr	r3, [pc, #624]	; (8001718 <calcSynth+0x2f4>)
 80014a8:	2204      	movs	r2, #4
 80014aa:	701a      	strb	r2, [r3, #0]
				release1Inc = adsr1Output /(adsr1Rel * SAMPLE_RATE);
 80014ac:	4b9c      	ldr	r3, [pc, #624]	; (8001720 <calcSynth+0x2fc>)
 80014ae:	edd3 6a00 	vldr	s13, [r3]
 80014b2:	4ba3      	ldr	r3, [pc, #652]	; (8001740 <calcSynth+0x31c>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8001728 <calcSynth+0x304>
 80014bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c4:	4b9f      	ldr	r3, [pc, #636]	; (8001744 <calcSynth+0x320>)
 80014c6:	edc3 7a00 	vstr	s15, [r3]
			}

			if (adsr2State != 4)
 80014ca:	4b94      	ldr	r3, [pc, #592]	; (800171c <calcSynth+0x2f8>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d011      	beq.n	80014f6 <calcSynth+0xd2>
			{
				adsr2State = 4;
 80014d2:	4b92      	ldr	r3, [pc, #584]	; (800171c <calcSynth+0x2f8>)
 80014d4:	2204      	movs	r2, #4
 80014d6:	701a      	strb	r2, [r3, #0]
				release2Inc = adsr2Output /(adsr2Rel * SAMPLE_RATE);
 80014d8:	4b95      	ldr	r3, [pc, #596]	; (8001730 <calcSynth+0x30c>)
 80014da:	edd3 6a00 	vldr	s13, [r3]
 80014de:	4b9a      	ldr	r3, [pc, #616]	; (8001748 <calcSynth+0x324>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001728 <calcSynth+0x304>
 80014e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f0:	4b96      	ldr	r3, [pc, #600]	; (800174c <calcSynth+0x328>)
 80014f2:	edc3 7a00 	vstr	s15, [r3]
			}

		}

		decay1Inc = (1-adsr1Sus) / (adsr1Decay * SAMPLE_RATE);
 80014f6:	4b96      	ldr	r3, [pc, #600]	; (8001750 <calcSynth+0x32c>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001500:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001504:	4b93      	ldr	r3, [pc, #588]	; (8001754 <calcSynth+0x330>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001728 <calcSynth+0x304>
 800150e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001516:	4b90      	ldr	r3, [pc, #576]	; (8001758 <calcSynth+0x334>)
 8001518:	edc3 7a00 	vstr	s15, [r3]
		decay2Inc = (1-adsr2Sus) / (adsr2Decay * SAMPLE_RATE);
 800151c:	4b8f      	ldr	r3, [pc, #572]	; (800175c <calcSynth+0x338>)
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001526:	ee77 6a67 	vsub.f32	s13, s14, s15
 800152a:	4b8d      	ldr	r3, [pc, #564]	; (8001760 <calcSynth+0x33c>)
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001728 <calcSynth+0x304>
 8001534:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800153c:	4b89      	ldr	r3, [pc, #548]	; (8001764 <calcSynth+0x340>)
 800153e:	edc3 7a00 	vstr	s15, [r3]

	float osc_wtb_incr = WAVETABLE_LENGTH * (pitch) / SAMPLE_RATE;
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <calcSynth+0x344>)
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800176c <calcSynth+0x348>
 800154c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001550:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001728 <calcSynth+0x304>
 8001554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001558:	edc7 7a04 	vstr	s15, [r7, #16]
	osc1WavePointer = osc1WavePointer + osc_wtb_incr;
 800155c:	4b84      	ldr	r3, [pc, #528]	; (8001770 <calcSynth+0x34c>)
 800155e:	ed93 7a00 	vldr	s14, [r3]
 8001562:	edd7 7a04 	vldr	s15, [r7, #16]
 8001566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156a:	4b81      	ldr	r3, [pc, #516]	; (8001770 <calcSynth+0x34c>)
 800156c:	edc3 7a00 	vstr	s15, [r3]

	if(osc1WavePointer > WAVETABLE_LENGTH){
 8001570:	4b7f      	ldr	r3, [pc, #508]	; (8001770 <calcSynth+0x34c>)
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800176c <calcSynth+0x348>
 800157a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	dd09      	ble.n	8001598 <calcSynth+0x174>
		osc1WavePointer = osc1WavePointer - WAVETABLE_LENGTH;
 8001584:	4b7a      	ldr	r3, [pc, #488]	; (8001770 <calcSynth+0x34c>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800176c <calcSynth+0x348>
 800158e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001592:	4b77      	ldr	r3, [pc, #476]	; (8001770 <calcSynth+0x34c>)
 8001594:	edc3 7a00 	vstr	s15, [r3]
	}

	a = (int)osc1WavePointer;
 8001598:	4b75      	ldr	r3, [pc, #468]	; (8001770 <calcSynth+0x34c>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a2:	ee17 3a90 	vmov	r3, s15
 80015a6:	81fb      	strh	r3, [r7, #14]
	da = osc1WavePointer -a;
 80015a8:	4b71      	ldr	r3, [pc, #452]	; (8001770 <calcSynth+0x34c>)
 80015aa:	ed93 7a00 	vldr	s14, [r3]
 80015ae:	89fb      	ldrh	r3, [r7, #14]
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015bc:	edc7 7a02 	vstr	s15, [r7, #8]
	b= a+1;
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	3301      	adds	r3, #1
 80015c4:	82fb      	strh	r3, [r7, #22]
	db = b - osc1WavePointer;
 80015c6:	8afb      	ldrh	r3, [r7, #22]
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d0:	4b67      	ldr	r3, [pc, #412]	; (8001770 <calcSynth+0x34c>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015da:	edc7 7a01 	vstr	s15, [r7, #4]

	if (b>= WAVETABLE_LENGTH){
 80015de:	8afb      	ldrh	r3, [r7, #22]
 80015e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e4:	d301      	bcc.n	80015ea <calcSynth+0x1c6>
		b = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	82fb      	strh	r3, [r7, #22]
	}


	switch (osc1Waveform)
 80015ea:	4b62      	ldr	r3, [pc, #392]	; (8001774 <calcSynth+0x350>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	f200 80ce 	bhi.w	8001790 <calcSynth+0x36c>
 80015f4:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <calcSynth+0x1d8>)
 80015f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fa:	bf00      	nop
 80015fc:	08001611 	.word	0x08001611
 8001600:	08001645 	.word	0x08001645
 8001604:	08001679 	.word	0x08001679
 8001608:	080016ad 	.word	0x080016ad
 800160c:	080016e1 	.word	0x080016e1
	{
		case 0 :
		{
			osc1 = db*square[a] + da*square[b];					// Linear interpolation (same as weighted average)
 8001610:	89fb      	ldrh	r3, [r7, #14]
 8001612:	4a59      	ldr	r2, [pc, #356]	; (8001778 <calcSynth+0x354>)
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	ed93 7a00 	vldr	s14, [r3]
 800161c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	4a54      	ldr	r2, [pc, #336]	; (8001778 <calcSynth+0x354>)
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	edd3 6a00 	vldr	s13, [r3]
 8001630:	edd7 7a02 	vldr	s15, [r7, #8]
 8001634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163c:	4b4f      	ldr	r3, [pc, #316]	; (800177c <calcSynth+0x358>)
 800163e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001642:	e0bf      	b.n	80017c4 <calcSynth+0x3a0>
		}

		case 1 :
		{
			osc1 = db*triangle[a] + da*triangle[b];
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	4a4e      	ldr	r2, [pc, #312]	; (8001780 <calcSynth+0x35c>)
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	ed93 7a00 	vldr	s14, [r3]
 8001650:	edd7 7a01 	vldr	s15, [r7, #4]
 8001654:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001658:	8afb      	ldrh	r3, [r7, #22]
 800165a:	4a49      	ldr	r2, [pc, #292]	; (8001780 <calcSynth+0x35c>)
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	edd3 6a00 	vldr	s13, [r3]
 8001664:	edd7 7a02 	vldr	s15, [r7, #8]
 8001668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	4b42      	ldr	r3, [pc, #264]	; (800177c <calcSynth+0x358>)
 8001672:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001676:	e0a5      	b.n	80017c4 <calcSynth+0x3a0>
		}

		case 2 :
		{
			osc1 = db*sawtooth[a] + da*sawtooth[b];
 8001678:	89fb      	ldrh	r3, [r7, #14]
 800167a:	4a42      	ldr	r2, [pc, #264]	; (8001784 <calcSynth+0x360>)
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	ed93 7a00 	vldr	s14, [r3]
 8001684:	edd7 7a01 	vldr	s15, [r7, #4]
 8001688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800168c:	8afb      	ldrh	r3, [r7, #22]
 800168e:	4a3d      	ldr	r2, [pc, #244]	; (8001784 <calcSynth+0x360>)
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	edd3 6a00 	vldr	s13, [r3]
 8001698:	edd7 7a02 	vldr	s15, [r7, #8]
 800169c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <calcSynth+0x358>)
 80016a6:	edc3 7a00 	vstr	s15, [r3]
			break;
 80016aa:	e08b      	b.n	80017c4 <calcSynth+0x3a0>
		}

		case 3 :
		{
			osc1 = db*distosine[a] + da*distosine[b];
 80016ac:	89fb      	ldrh	r3, [r7, #14]
 80016ae:	4a36      	ldr	r2, [pc, #216]	; (8001788 <calcSynth+0x364>)
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	ed93 7a00 	vldr	s14, [r3]
 80016b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c0:	8afb      	ldrh	r3, [r7, #22]
 80016c2:	4a31      	ldr	r2, [pc, #196]	; (8001788 <calcSynth+0x364>)
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	edd3 6a00 	vldr	s13, [r3]
 80016cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <calcSynth+0x358>)
 80016da:	edc3 7a00 	vstr	s15, [r3]
			break;
 80016de:	e071      	b.n	80017c4 <calcSynth+0x3a0>
		}
		case 4 :
		{
			osc1 = db*sinewave[a] + da*sinewave[b];
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	4a2a      	ldr	r2, [pc, #168]	; (800178c <calcSynth+0x368>)
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	ed93 7a00 	vldr	s14, [r3]
 80016ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f4:	8afb      	ldrh	r3, [r7, #22]
 80016f6:	4a25      	ldr	r2, [pc, #148]	; (800178c <calcSynth+0x368>)
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	edd3 6a00 	vldr	s13, [r3]
 8001700:	edd7 7a02 	vldr	s15, [r7, #8]
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <calcSynth+0x358>)
 800170e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001712:	e057      	b.n	80017c4 <calcSynth+0x3a0>
 8001714:	20004201 	.word	0x20004201
 8001718:	200000c8 	.word	0x200000c8
 800171c:	200000dc 	.word	0x200000dc
 8001720:	200000c4 	.word	0x200000c4
 8001724:	20000000 	.word	0x20000000
 8001728:	472c4400 	.word	0x472c4400
 800172c:	200000cc 	.word	0x200000cc
 8001730:	200000d8 	.word	0x200000d8
 8001734:	20000010 	.word	0x20000010
 8001738:	200000e0 	.word	0x200000e0
 800173c:	200041fd 	.word	0x200041fd
 8001740:	2000000c 	.word	0x2000000c
 8001744:	200000d4 	.word	0x200000d4
 8001748:	2000001c 	.word	0x2000001c
 800174c:	200000e8 	.word	0x200000e8
 8001750:	20000008 	.word	0x20000008
 8001754:	20000004 	.word	0x20000004
 8001758:	200000d0 	.word	0x200000d0
 800175c:	20000018 	.word	0x20000018
 8001760:	20000014 	.word	0x20000014
 8001764:	200000e4 	.word	0x200000e4
 8001768:	200000c0 	.word	0x200000c0
 800176c:	44800000 	.word	0x44800000
 8001770:	200000b8 	.word	0x200000b8
 8001774:	200041a9 	.word	0x200041a9
 8001778:	08005cb0 	.word	0x08005cb0
 800177c:	200041a4 	.word	0x200041a4
 8001780:	08006cb0 	.word	0x08006cb0
 8001784:	08007cb0 	.word	0x08007cb0
 8001788:	08008cb0 	.word	0x08008cb0
 800178c:	08009cb0 	.word	0x08009cb0
		}

		default :
		{
			osc1 = db*sinewave[a] + da*sinewave[b];
 8001790:	89fb      	ldrh	r3, [r7, #14]
 8001792:	4a85      	ldr	r2, [pc, #532]	; (80019a8 <calcSynth+0x584>)
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a4:	8afb      	ldrh	r3, [r7, #22]
 80017a6:	4a80      	ldr	r2, [pc, #512]	; (80019a8 <calcSynth+0x584>)
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	edd3 6a00 	vldr	s13, [r3]
 80017b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017bc:	4b7b      	ldr	r3, [pc, #492]	; (80019ac <calcSynth+0x588>)
 80017be:	edc3 7a00 	vstr	s15, [r3]
			break;
 80017c2:	bf00      	nop
		}
	}

	switch (osc2Waveform)
 80017c4:	4b7a      	ldr	r3, [pc, #488]	; (80019b0 <calcSynth+0x58c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	f200 808f 	bhi.w	80018ec <calcSynth+0x4c8>
 80017ce:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <calcSynth+0x3b0>)
 80017d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d4:	080017e9 	.word	0x080017e9
 80017d8:	0800181d 	.word	0x0800181d
 80017dc:	08001851 	.word	0x08001851
 80017e0:	08001885 	.word	0x08001885
 80017e4:	080018b9 	.word	0x080018b9
	{
		case 0 :
		{
			osc2 = db*square[a] + da*square[b];
 80017e8:	89fb      	ldrh	r3, [r7, #14]
 80017ea:	4a72      	ldr	r2, [pc, #456]	; (80019b4 <calcSynth+0x590>)
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	ed93 7a00 	vldr	s14, [r3]
 80017f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017fc:	8afb      	ldrh	r3, [r7, #22]
 80017fe:	4a6d      	ldr	r2, [pc, #436]	; (80019b4 <calcSynth+0x590>)
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	edd3 6a00 	vldr	s13, [r3]
 8001808:	edd7 7a02 	vldr	s15, [r7, #8]
 800180c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001814:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <calcSynth+0x594>)
 8001816:	edc3 7a00 	vstr	s15, [r3]
			break;
 800181a:	e081      	b.n	8001920 <calcSynth+0x4fc>
		}

		case 1 :
		{
			osc2 = db*triangle[a] + da*triangle[b];
 800181c:	89fb      	ldrh	r3, [r7, #14]
 800181e:	4a67      	ldr	r2, [pc, #412]	; (80019bc <calcSynth+0x598>)
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	edd7 7a01 	vldr	s15, [r7, #4]
 800182c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001830:	8afb      	ldrh	r3, [r7, #22]
 8001832:	4a62      	ldr	r2, [pc, #392]	; (80019bc <calcSynth+0x598>)
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	edd3 6a00 	vldr	s13, [r3]
 800183c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001848:	4b5b      	ldr	r3, [pc, #364]	; (80019b8 <calcSynth+0x594>)
 800184a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800184e:	e067      	b.n	8001920 <calcSynth+0x4fc>
		}

		case 2 :
		{
			osc2 = db*sawtooth[a] + da*sawtooth[b];
 8001850:	89fb      	ldrh	r3, [r7, #14]
 8001852:	4a5b      	ldr	r2, [pc, #364]	; (80019c0 <calcSynth+0x59c>)
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	ed93 7a00 	vldr	s14, [r3]
 800185c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001864:	8afb      	ldrh	r3, [r7, #22]
 8001866:	4a56      	ldr	r2, [pc, #344]	; (80019c0 <calcSynth+0x59c>)
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	edd3 6a00 	vldr	s13, [r3]
 8001870:	edd7 7a02 	vldr	s15, [r7, #8]
 8001874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187c:	4b4e      	ldr	r3, [pc, #312]	; (80019b8 <calcSynth+0x594>)
 800187e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001882:	e04d      	b.n	8001920 <calcSynth+0x4fc>
		}

		case 3 :
		{
			osc2 = db*distosine[a] + da*distosine[b];
 8001884:	89fb      	ldrh	r3, [r7, #14]
 8001886:	4a4f      	ldr	r2, [pc, #316]	; (80019c4 <calcSynth+0x5a0>)
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	ed93 7a00 	vldr	s14, [r3]
 8001890:	edd7 7a01 	vldr	s15, [r7, #4]
 8001894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001898:	8afb      	ldrh	r3, [r7, #22]
 800189a:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <calcSynth+0x5a0>)
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	edd3 6a00 	vldr	s13, [r3]
 80018a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <calcSynth+0x594>)
 80018b2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80018b6:	e033      	b.n	8001920 <calcSynth+0x4fc>
		}
		case 4 :
		{
			osc2 = db*sinewave[a] + da*sinewave[b];
 80018b8:	89fb      	ldrh	r3, [r7, #14]
 80018ba:	4a3b      	ldr	r2, [pc, #236]	; (80019a8 <calcSynth+0x584>)
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	ed93 7a00 	vldr	s14, [r3]
 80018c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018cc:	8afb      	ldrh	r3, [r7, #22]
 80018ce:	4a36      	ldr	r2, [pc, #216]	; (80019a8 <calcSynth+0x584>)
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	edd3 6a00 	vldr	s13, [r3]
 80018d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e4:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <calcSynth+0x594>)
 80018e6:	edc3 7a00 	vstr	s15, [r3]
			break;
 80018ea:	e019      	b.n	8001920 <calcSynth+0x4fc>
		}

		default :
		{
			osc2 = db*sinewave[a] + da*sinewave[b];
 80018ec:	89fb      	ldrh	r3, [r7, #14]
 80018ee:	4a2e      	ldr	r2, [pc, #184]	; (80019a8 <calcSynth+0x584>)
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	ed93 7a00 	vldr	s14, [r3]
 80018f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001900:	8afb      	ldrh	r3, [r7, #22]
 8001902:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <calcSynth+0x584>)
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	edd3 6a00 	vldr	s13, [r3]
 800190c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <calcSynth+0x594>)
 800191a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800191e:	bf00      	nop
		}
	}

	signal = (osc1mix * osc1) + (osc2mix * osc2);
 8001920:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <calcSynth+0x5a4>)
 8001922:	ed93 7a00 	vldr	s14, [r3]
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <calcSynth+0x588>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001930:	4b26      	ldr	r3, [pc, #152]	; (80019cc <calcSynth+0x5a8>)
 8001932:	edd3 6a00 	vldr	s13, [r3]
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <calcSynth+0x594>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <calcSynth+0x5ac>)
 8001946:	edc3 7a00 	vstr	s15, [r3]
	//signal = (osc1mix * osc1);

	signal =  signal * 32767.0f;
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <calcSynth+0x5ac>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80019d4 <calcSynth+0x5b0>
 8001954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <calcSynth+0x5ac>)
 800195a:	edc3 7a00 	vstr	s15, [r3]

	if (signal > 32767.0f){
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <calcSynth+0x5ac>)
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80019d4 <calcSynth+0x5b0>
 8001968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	dd02      	ble.n	8001978 <calcSynth+0x554>
		signal = 32767.0f;
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <calcSynth+0x5ac>)
 8001974:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <calcSynth+0x5b4>)
 8001976:	601a      	str	r2, [r3, #0]
	}
	if (signal < -32767.0f){
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <calcSynth+0x5ac>)
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80019dc <calcSynth+0x5b8>
 8001982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	d502      	bpl.n	8001992 <calcSynth+0x56e>
		signal = -32767.0f;
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <calcSynth+0x5ac>)
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <calcSynth+0x5bc>)
 8001990:	601a      	str	r2, [r3, #0]

	//signal = adsr1_output * 32767.0f * signal_pf;



	return signal;
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <calcSynth+0x5ac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	ee07 3a90 	vmov	s15, r3
}
 800199a:	eeb0 0a67 	vmov.f32	s0, s15
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	08009cb0 	.word	0x08009cb0
 80019ac:	200041a4 	.word	0x200041a4
 80019b0:	20004288 	.word	0x20004288
 80019b4:	08005cb0 	.word	0x08005cb0
 80019b8:	20004290 	.word	0x20004290
 80019bc:	08006cb0 	.word	0x08006cb0
 80019c0:	08007cb0 	.word	0x08007cb0
 80019c4:	08008cb0 	.word	0x08008cb0
 80019c8:	20000020 	.word	0x20000020
 80019cc:	20000024 	.word	0x20000024
 80019d0:	200000bc 	.word	0x200000bc
 80019d4:	46fffe00 	.word	0x46fffe00
 80019d8:	46fffe00 	.word	0x46fffe00
 80019dc:	c6fffe00 	.word	0xc6fffe00
 80019e0:	c6fffe00 	.word	0xc6fffe00

080019e4 <make_sound>:

void make_sound(uint16_t start_index) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < AUDIO_BUFFER_LENGTH_DIV2 ;  i=i+2) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	81fb      	strh	r3, [r7, #14]
 80019f2:	e023      	b.n	8001a3c <make_sound+0x58>
		float signal = calcSynth();
 80019f4:	f7ff fd16 	bl	8001424 <calcSynth>
 80019f8:	ed87 0a02 	vstr	s0, [r7, #8]
		sendBuff[start_index + i] = (int16_t)signal;
 80019fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a04:	ee17 3a90 	vmov	r3, s15
 8001a08:	b219      	sxth	r1, r3
 8001a0a:	88fa      	ldrh	r2, [r7, #6]
 8001a0c:	89fb      	ldrh	r3, [r7, #14]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b289      	uxth	r1, r1
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <make_sound+0x6c>)
 8001a14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sendBuff[start_index + i + 1] = (int16_t)signal;
 8001a18:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a20:	ee17 3a90 	vmov	r3, s15
 8001a24:	b219      	sxth	r1, r3
 8001a26:	88fa      	ldrh	r2, [r7, #6]
 8001a28:	89fb      	ldrh	r3, [r7, #14]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	b289      	uxth	r1, r1
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <make_sound+0x6c>)
 8001a32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < AUDIO_BUFFER_LENGTH_DIV2 ;  i=i+2) {
 8001a36:	89fb      	ldrh	r3, [r7, #14]
 8001a38:	3302      	adds	r3, #2
 8001a3a:	81fb      	strh	r3, [r7, #14]
 8001a3c:	89fb      	ldrh	r3, [r7, #14]
 8001a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a42:	d3d7      	bcc.n	80019f4 <make_sound+0x10>
	}
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200000f0 	.word	0x200000f0

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a5c:	e7fe      	b.n	8001a5c <Error_Handler+0x8>
	...

08001a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_MspInit+0x44>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <HAL_MspInit+0x44>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_MspInit+0x44>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_MspInit+0x44>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <HAL_MspInit+0x44>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_MspInit+0x44>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_I2C_MspInit+0x7c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d127      	bne.n	8001b1a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_I2C_MspInit+0x80>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a16      	ldr	r2, [pc, #88]	; (8001b28 <HAL_I2C_MspInit+0x80>)
 8001ad0:	f043 0320 	orr.w	r3, r3, #32
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_I2C_MspInit+0x80>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae6:	2312      	movs	r3, #18
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001af2:	2304      	movs	r3, #4
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	480b      	ldr	r0, [pc, #44]	; (8001b2c <HAL_I2C_MspInit+0x84>)
 8001afe:	f000 fefb 	bl	80028f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_I2C_MspInit+0x80>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <HAL_I2C_MspInit+0x80>)
 8001b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_I2C_MspInit+0x80>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	; 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40005800 	.word	0x40005800
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40021400 	.word	0x40021400

08001b30 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_I2S_MspInit+0x7c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d127      	bne.n	8001ba2 <HAL_I2S_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <HAL_I2S_MspInit+0x80>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <HAL_I2S_MspInit+0x80>)
 8001b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_I2S_MspInit+0x80>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_I2S_MspInit+0x80>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_I2S_MspInit+0x80>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_I2S_MspInit+0x80>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001b82:	23b0      	movs	r3, #176	; 0xb0
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b92:	2305      	movs	r3, #5
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <HAL_I2S_MspInit+0x84>)
 8001b9e:	f000 feab 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3728      	adds	r7, #40	; 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40013000 	.word	0x40013000
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000

08001bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a3d      	ldr	r2, [pc, #244]	; (8001ccc <HAL_UART_MspInit+0x114>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d173      	bne.n	8001cc2 <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_UART_MspInit+0x118>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a3c      	ldr	r2, [pc, #240]	; (8001cd0 <HAL_UART_MspInit+0x118>)
 8001be0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <HAL_UART_MspInit+0x118>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <HAL_UART_MspInit+0x118>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a36      	ldr	r2, [pc, #216]	; (8001cd0 <HAL_UART_MspInit+0x118>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_UART_MspInit+0x118>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <HAL_UART_MspInit+0x118>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a30      	ldr	r2, [pc, #192]	; (8001cd0 <HAL_UART_MspInit+0x118>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <HAL_UART_MspInit+0x118>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c22:	2301      	movs	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c32:	2308      	movs	r3, #8
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4825      	ldr	r0, [pc, #148]	; (8001cd4 <HAL_UART_MspInit+0x11c>)
 8001c3e:	f000 fe5b 	bl	80028f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c54:	2308      	movs	r3, #8
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	481e      	ldr	r0, [pc, #120]	; (8001cd8 <HAL_UART_MspInit+0x120>)
 8001c60:	f000 fe4a 	bl	80028f8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_UART_MspInit+0x124>)
 8001c66:	4a1e      	ldr	r2, [pc, #120]	; (8001ce0 <HAL_UART_MspInit+0x128>)
 8001c68:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <HAL_UART_MspInit+0x124>)
 8001c6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c70:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_UART_MspInit+0x124>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <HAL_UART_MspInit+0x124>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_UART_MspInit+0x124>)
 8001c80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c84:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_UART_MspInit+0x124>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_UART_MspInit+0x124>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_UART_MspInit+0x124>)
 8001c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c98:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_UART_MspInit+0x124>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_UART_MspInit+0x124>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001ca6:	480d      	ldr	r0, [pc, #52]	; (8001cdc <HAL_UART_MspInit+0x124>)
 8001ca8:	f000 faae 	bl	8002208 <HAL_DMA_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8001cb2:	f7ff fecf 	bl	8001a54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_UART_MspInit+0x124>)
 8001cba:	671a      	str	r2, [r3, #112]	; 0x70
 8001cbc:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <HAL_UART_MspInit+0x124>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001cc2:	bf00      	nop
 8001cc4:	3728      	adds	r7, #40	; 0x28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40004c00 	.word	0x40004c00
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	20004144 	.word	0x20004144
 8001ce0:	40026040 	.word	0x40026040

08001ce4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a30      	ldr	r2, [pc, #192]	; (8001db4 <HAL_SAI_MspInit+0xd0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d15a      	bne.n	8001dac <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001cf6:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <HAL_SAI_MspInit+0xd4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10b      	bne.n	8001d16 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <HAL_SAI_MspInit+0xd8>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a2e      	ldr	r2, [pc, #184]	; (8001dbc <HAL_SAI_MspInit+0xd8>)
 8001d04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <HAL_SAI_MspInit+0xd8>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <HAL_SAI_MspInit+0xd4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	4a26      	ldr	r2, [pc, #152]	; (8001db8 <HAL_SAI_MspInit+0xd4>)
 8001d1e:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001d20:	2370      	movs	r3, #112	; 0x70
 8001d22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001d30:	2306      	movs	r3, #6
 8001d32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4821      	ldr	r0, [pc, #132]	; (8001dc0 <HAL_SAI_MspInit+0xdc>)
 8001d3c:	f000 fddc 	bl	80028f8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001d40:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001d42:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <HAL_SAI_MspInit+0xe4>)
 8001d44:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001d4e:	2240      	movs	r2, #64	; 0x40
 8001d50:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001d5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d5e:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d66:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001d6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d6e:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d76:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001d84:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001d86:	f000 fa3f 	bl	8002208 <HAL_DMA_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_SAI_MspInit+0xb0>
    {
      Error_Handler();
 8001d90:	f7ff fe60 	bl	8001a54 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001d98:	671a      	str	r2, [r3, #112]	; 0x70
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001da4:	66da      	str	r2, [r3, #108]	; 0x6c
 8001da6:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <HAL_SAI_MspInit+0xe0>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8001dac:	bf00      	nop
 8001dae:	3720      	adds	r7, #32
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40015804 	.word	0x40015804
 8001db8:	20004134 	.word	0x20004134
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	20004204 	.word	0x20004204
 8001dc8:	40026428 	.word	0x40026428

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <HardFault_Handler+0x4>

08001dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <MemManage_Handler+0x4>

08001dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <BusFault_Handler+0x4>

08001de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <UsageFault_Handler+0x4>

08001dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e18:	f000 f8c4 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <DMA1_Stream2_IRQHandler+0x10>)
 8001e26:	f000 fafd 	bl	8002424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20004144 	.word	0x20004144

08001e34 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <DMA2_Stream1_IRQHandler+0x10>)
 8001e3a:	f000 faf3 	bl	8002424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20004204 	.word	0x20004204

08001e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <_sbrk+0x5c>)
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <_sbrk+0x60>)
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <_sbrk+0x64>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <_sbrk+0x68>)
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d207      	bcs.n	8001e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e78:	f003 fe04 	bl	8005a84 <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	220c      	movs	r2, #12
 8001e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	e009      	b.n	8001e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <_sbrk+0x64>)
 8001e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20080000 	.word	0x20080000
 8001ea8:	00000400 	.word	0x00000400
 8001eac:	20004138 	.word	0x20004138
 8001eb0:	200043f8 	.word	0x200043f8

08001eb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <SystemInit+0x20>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <SystemInit+0x20>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ede:	490e      	ldr	r1, [pc, #56]	; (8001f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ef4:	4c0b      	ldr	r4, [pc, #44]	; (8001f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f02:	f7ff ffd7 	bl	8001eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f06:	f003 fdc3 	bl	8005a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0a:	f7fe fb85 	bl	8000618 <main>
  bx  lr    
 8001f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f10:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f18:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001f1c:	0800aed0 	.word	0x0800aed0
  ldr r2, =_sbss
 8001f20:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001f24:	200043f8 	.word	0x200043f8

08001f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC_IRQHandler>

08001f2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2e:	2003      	movs	r0, #3
 8001f30:	f000 f928 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f34:	200f      	movs	r0, #15
 8001f36:	f000 f805 	bl	8001f44 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f3a:	f7ff fd91 	bl	8001a60 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x54>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_InitTick+0x58>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f943 	bl	80021ee <HAL_SYSTICK_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00e      	b.n	8001f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b0f      	cmp	r3, #15
 8001f76:	d80a      	bhi.n	8001f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f000 f90b 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f84:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <HAL_InitTick+0x5c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000002c 	.word	0x2000002c
 8001f9c:	20000034 	.word	0x20000034
 8001fa0:	20000030 	.word	0x20000030

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000034 	.word	0x20000034
 8001fc8:	200043e4 	.word	0x200043e4

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	200043e4 	.word	0x200043e4

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <__NVIC_SetPriorityGrouping+0x40>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	4313      	orrs	r3, r2
 8002010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002012:	4a04      	ldr	r2, [pc, #16]	; (8002024 <__NVIC_SetPriorityGrouping+0x40>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60d3      	str	r3, [r2, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00
 8002028:	05fa0000 	.word	0x05fa0000

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	; (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff29 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff3e 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff31 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffa2 	bl	8002140 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff feda 	bl	8001fcc <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e099      	b.n	8002358 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002244:	e00f      	b.n	8002266 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002246:	f7ff fec1 	bl	8001fcc <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b05      	cmp	r3, #5
 8002252:	d908      	bls.n	8002266 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2203      	movs	r2, #3
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e078      	b.n	8002358 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e8      	bne.n	8002246 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	4b38      	ldr	r3, [pc, #224]	; (8002360 <HAL_DMA_Init+0x158>)
 8002280:	4013      	ands	r3, r2
 8002282:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002292:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d107      	bne.n	80022d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	4313      	orrs	r3, r2
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f023 0307 	bic.w	r3, r3, #7
 80022e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d117      	bne.n	800232a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fa77 	bl	8002800 <DMA_CheckFifoParam>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002326:	2301      	movs	r3, #1
 8002328:	e016      	b.n	8002358 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fa2e 	bl	8002794 <DMA_CalcBaseAndBitshift>
 8002338:	4603      	mov	r3, r0
 800233a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	223f      	movs	r2, #63	; 0x3f
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	e010803f 	.word	0xe010803f

08002364 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_DMA_Start_IT+0x26>
 8002386:	2302      	movs	r3, #2
 8002388:	e048      	b.n	800241c <HAL_DMA_Start_IT+0xb8>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d137      	bne.n	800240e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2202      	movs	r2, #2
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f9c0 	bl	8002738 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	223f      	movs	r2, #63	; 0x3f
 80023be:	409a      	lsls	r2, r3
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0216 	orr.w	r2, r2, #22
 80023d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0208 	orr.w	r2, r2, #8
 80023fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e005      	b.n	800241a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002416:	2302      	movs	r3, #2
 8002418:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800241a:	7dfb      	ldrb	r3, [r7, #23]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_DMA_IRQHandler+0x258>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a92      	ldr	r2, [pc, #584]	; (8002680 <HAL_DMA_IRQHandler+0x25c>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0a9b      	lsrs	r3, r3, #10
 800243c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	2208      	movs	r2, #8
 8002450:	409a      	lsls	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4013      	ands	r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01a      	beq.n	8002490 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0204 	bic.w	r2, r2, #4
 8002476:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	2208      	movs	r2, #8
 800247e:	409a      	lsls	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	2201      	movs	r2, #1
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d012      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	2201      	movs	r2, #1
 80024b4:	409a      	lsls	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f043 0202 	orr.w	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	2204      	movs	r2, #4
 80024cc:	409a      	lsls	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d012      	beq.n	80024fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00b      	beq.n	80024fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	2204      	movs	r2, #4
 80024ea:	409a      	lsls	r2, r3
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f4:	f043 0204 	orr.w	r2, r3, #4
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	2210      	movs	r2, #16
 8002502:	409a      	lsls	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d043      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d03c      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	2210      	movs	r2, #16
 8002520:	409a      	lsls	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d018      	beq.n	8002566 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d024      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
 8002552:	e01f      	b.n	8002594 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01b      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4798      	blx	r3
 8002564:	e016      	b.n	8002594 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d107      	bne.n	8002584 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0208 	bic.w	r2, r2, #8
 8002582:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	2220      	movs	r2, #32
 800259a:	409a      	lsls	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 808e 	beq.w	80026c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8086 	beq.w	80026c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	2220      	movs	r2, #32
 80025bc:	409a      	lsls	r2, r3
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d136      	bne.n	800263c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0216 	bic.w	r2, r2, #22
 80025dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <HAL_DMA_IRQHandler+0x1da>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0208 	bic.w	r2, r2, #8
 800260c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	223f      	movs	r2, #63	; 0x3f
 8002614:	409a      	lsls	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262e:	2b00      	cmp	r3, #0
 8002630:	d07d      	beq.n	800272e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	4798      	blx	r3
        }
        return;
 800263a:	e078      	b.n	800272e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01c      	beq.n	8002684 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d108      	bne.n	800266a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	2b00      	cmp	r3, #0
 800265e:	d030      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
 8002668:	e02b      	b.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d027      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
 800267a:	e022      	b.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
 800267c:	2000002c 	.word	0x2000002c
 8002680:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0210 	bic.w	r2, r2, #16
 80026a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d032      	beq.n	8002730 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d022      	beq.n	800271c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2205      	movs	r2, #5
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	3301      	adds	r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d307      	bcc.n	800270a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f2      	bne.n	80026ee <HAL_DMA_IRQHandler+0x2ca>
 8002708:	e000      	b.n	800270c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800270a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
 800272c:	e000      	b.n	8002730 <HAL_DMA_IRQHandler+0x30c>
        return;
 800272e:	bf00      	nop
    }
  }
}
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop

08002738 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002754:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d108      	bne.n	8002778 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002776:	e007      	b.n	8002788 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	60da      	str	r2, [r3, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	3b10      	subs	r3, #16
 80027a4:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <DMA_CalcBaseAndBitshift+0x60>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027ae:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <DMA_CalcBaseAndBitshift+0x64>)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d908      	bls.n	80027d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <DMA_CalcBaseAndBitshift+0x68>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	1d1a      	adds	r2, r3, #4
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	659a      	str	r2, [r3, #88]	; 0x58
 80027d2:	e006      	b.n	80027e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <DMA_CalcBaseAndBitshift+0x68>)
 80027dc:	4013      	ands	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	aaaaaaab 	.word	0xaaaaaaab
 80027f8:	0800ae58 	.word	0x0800ae58
 80027fc:	fffffc00 	.word	0xfffffc00

08002800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11f      	bne.n	800285a <DMA_CheckFifoParam+0x5a>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d856      	bhi.n	80028ce <DMA_CheckFifoParam+0xce>
 8002820:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <DMA_CheckFifoParam+0x28>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	08002839 	.word	0x08002839
 800282c:	0800284b 	.word	0x0800284b
 8002830:	08002839 	.word	0x08002839
 8002834:	080028cf 	.word	0x080028cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d046      	beq.n	80028d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002848:	e043      	b.n	80028d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002852:	d140      	bne.n	80028d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002858:	e03d      	b.n	80028d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002862:	d121      	bne.n	80028a8 <DMA_CheckFifoParam+0xa8>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d837      	bhi.n	80028da <DMA_CheckFifoParam+0xda>
 800286a:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <DMA_CheckFifoParam+0x70>)
 800286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002870:	08002881 	.word	0x08002881
 8002874:	08002887 	.word	0x08002887
 8002878:	08002881 	.word	0x08002881
 800287c:	08002899 	.word	0x08002899
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      break;
 8002884:	e030      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d025      	beq.n	80028de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002896:	e022      	b.n	80028de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a0:	d11f      	bne.n	80028e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028a6:	e01c      	b.n	80028e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d903      	bls.n	80028b6 <DMA_CheckFifoParam+0xb6>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d003      	beq.n	80028bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028b4:	e018      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
      break;
 80028ba:	e015      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00e      	beq.n	80028e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      break;
 80028cc:	e00b      	b.n	80028e6 <DMA_CheckFifoParam+0xe6>
      break;
 80028ce:	bf00      	nop
 80028d0:	e00a      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028d2:	bf00      	nop
 80028d4:	e008      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028d6:	bf00      	nop
 80028d8:	e006      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
 80028dc:	e004      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e002      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
    }
  } 
  
  return status; 
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	e175      	b.n	8002c04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002918:	2201      	movs	r2, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	429a      	cmp	r2, r3
 8002932:	f040 8164 	bne.w	8002bfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d00b      	beq.n	8002956 <HAL_GPIO_Init+0x5e>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800294a:	2b11      	cmp	r3, #17
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b12      	cmp	r3, #18
 8002954:	d130      	bne.n	80029b8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2203      	movs	r2, #3
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800298c:	2201      	movs	r2, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 0201 	and.w	r2, r3, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x100>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b12      	cmp	r3, #18
 80029f6:	d123      	bne.n	8002a40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	08da      	lsrs	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3208      	adds	r2, #8
 8002a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	220f      	movs	r2, #15
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	08da      	lsrs	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3208      	adds	r2, #8
 8002a3a:	69b9      	ldr	r1, [r7, #24]
 8002a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0203 	and.w	r2, r3, #3
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80be 	beq.w	8002bfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a82:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4a65      	ldr	r2, [pc, #404]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a9a:	4a61      	ldr	r2, [pc, #388]	; (8002c20 <HAL_GPIO_Init+0x328>)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <HAL_GPIO_Init+0x32c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d037      	beq.n	8002b36 <HAL_GPIO_Init+0x23e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a57      	ldr	r2, [pc, #348]	; (8002c28 <HAL_GPIO_Init+0x330>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d031      	beq.n	8002b32 <HAL_GPIO_Init+0x23a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a56      	ldr	r2, [pc, #344]	; (8002c2c <HAL_GPIO_Init+0x334>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02b      	beq.n	8002b2e <HAL_GPIO_Init+0x236>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a55      	ldr	r2, [pc, #340]	; (8002c30 <HAL_GPIO_Init+0x338>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d025      	beq.n	8002b2a <HAL_GPIO_Init+0x232>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a54      	ldr	r2, [pc, #336]	; (8002c34 <HAL_GPIO_Init+0x33c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01f      	beq.n	8002b26 <HAL_GPIO_Init+0x22e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a53      	ldr	r2, [pc, #332]	; (8002c38 <HAL_GPIO_Init+0x340>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d019      	beq.n	8002b22 <HAL_GPIO_Init+0x22a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_GPIO_Init+0x344>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0x226>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a51      	ldr	r2, [pc, #324]	; (8002c40 <HAL_GPIO_Init+0x348>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00d      	beq.n	8002b1a <HAL_GPIO_Init+0x222>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a50      	ldr	r2, [pc, #320]	; (8002c44 <HAL_GPIO_Init+0x34c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_GPIO_Init+0x21e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4f      	ldr	r2, [pc, #316]	; (8002c48 <HAL_GPIO_Init+0x350>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_GPIO_Init+0x21a>
 8002b0e:	2309      	movs	r3, #9
 8002b10:	e012      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b12:	230a      	movs	r3, #10
 8002b14:	e010      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b16:	2308      	movs	r3, #8
 8002b18:	e00e      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b1a:	2307      	movs	r3, #7
 8002b1c:	e00c      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b1e:	2306      	movs	r3, #6
 8002b20:	e00a      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b22:	2305      	movs	r3, #5
 8002b24:	e008      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b26:	2304      	movs	r3, #4
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e004      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b36:	2300      	movs	r3, #0
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	f002 0203 	and.w	r2, r2, #3
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	4093      	lsls	r3, r2
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b48:	4935      	ldr	r1, [pc, #212]	; (8002c20 <HAL_GPIO_Init+0x328>)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b56:	4b3d      	ldr	r3, [pc, #244]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b7a:	4a34      	ldr	r2, [pc, #208]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b80:	4b32      	ldr	r3, [pc, #200]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ba4:	4a29      	ldr	r2, [pc, #164]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002baa:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bce:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bf8:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b0f      	cmp	r3, #15
 8002c08:	f67f ae86 	bls.w	8002918 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40013800 	.word	0x40013800
 8002c24:	40020000 	.word	0x40020000
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	40020c00 	.word	0x40020c00
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40021400 	.word	0x40021400
 8002c3c:	40021800 	.word	0x40021800
 8002c40:	40021c00 	.word	0x40021c00
 8002c44:	40022000 	.word	0x40022000
 8002c48:	40022400 	.word	0x40022400
 8002c4c:	40013c00 	.word	0x40013c00

08002c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c60:	787b      	ldrb	r3, [r7, #1]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c6c:	e003      	b.n	8002c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	041a      	lsls	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	619a      	str	r2, [r3, #24]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e07f      	b.n	8002d96 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe fefc 	bl	8001aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	; 0x24
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ce4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	e006      	b.n	8002d0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d104      	bne.n	8002d1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_I2C_Init+0x11c>)
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	ea42 0103 	orr.w	r1, r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	021a      	lsls	r2, r3, #8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69d9      	ldr	r1, [r3, #28]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1a      	ldr	r2, [r3, #32]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	02008000 	.word	0x02008000

08002da4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d138      	bne.n	8002e2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e032      	b.n	8002e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	; 0x24
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002df6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d139      	bne.n	8002ec4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e033      	b.n	8002ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2224      	movs	r2, #36	; 0x24
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0201 	bic.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0d2      	b.n	800308c <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe fe18 	bl	8001b30 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69d9      	ldr	r1, [r3, #28]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b60      	ldr	r3, [pc, #384]	; (8003094 <HAL_I2S_Init+0x1c0>)
 8002f14:	400b      	ands	r3, r1
 8002f16:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d067      	beq.n	8002ff8 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f30:	2310      	movs	r3, #16
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e001      	b.n	8002f3a <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f36:	2320      	movs	r3, #32
 8002f38:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d802      	bhi.n	8002f48 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d102      	bne.n	8002f56 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8002f50:	4b51      	ldr	r3, [pc, #324]	; (8003098 <HAL_I2S_Init+0x1c4>)
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	e003      	b.n	8002f5e <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f8a2 	bl	80030a0 <I2S_GetClockFreq>
 8002f5c:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f66:	d125      	bne.n	8002fb4 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	461a      	mov	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	3305      	adds	r3, #5
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	e01f      	b.n	8002fd2 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	3305      	adds	r3, #5
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	e00e      	b.n	8002fd2 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	3305      	adds	r3, #5
 8002fd0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4a31      	ldr	r2, [pc, #196]	; (800309c <HAL_I2S_Init+0x1c8>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	08db      	lsrs	r3, r3, #3
 8002fdc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	e003      	b.n	8003000 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d902      	bls.n	800300c <HAL_I2S_Init+0x138>
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	2bff      	cmp	r3, #255	; 0xff
 800300a:	d907      	bls.n	800301c <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003010:	f043 0210 	orr.w	r2, r3, #16
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e037      	b.n	800308c <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	ea42 0103 	orr.w	r1, r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	430a      	orrs	r2, r1
 800302e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <HAL_I2S_Init+0x1c0>)
 8003038:	4013      	ands	r3, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6851      	ldr	r1, [r2, #4]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6892      	ldr	r2, [r2, #8]
 8003042:	4311      	orrs	r1, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	68d2      	ldr	r2, [r2, #12]
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6992      	ldr	r2, [r2, #24]
 800304e:	430a      	orrs	r2, r1
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800305a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b30      	cmp	r3, #48	; 0x30
 8003062:	d003      	beq.n	800306c <HAL_I2S_Init+0x198>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2bb0      	cmp	r3, #176	; 0xb0
 800306a:	d107      	bne.n	800307c <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800307a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	fffff040 	.word	0xfffff040
 8003098:	00bb8000 	.word	0x00bb8000
 800309c:	cccccccd 	.word	0xcccccccd

080030a0 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d02d      	beq.n	800310c <I2S_GetClockFreq+0x6c>
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d12e      	bne.n	8003112 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80030b4:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <I2S_GetClockFreq+0x88>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d108      	bne.n	80030d2 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <I2S_GetClockFreq+0x88>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c8:	4a18      	ldr	r2, [pc, #96]	; (800312c <I2S_GetClockFreq+0x8c>)
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	e007      	b.n	80030e2 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <I2S_GetClockFreq+0x88>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030da:	4a15      	ldr	r2, [pc, #84]	; (8003130 <I2S_GetClockFreq+0x90>)
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <I2S_GetClockFreq+0x88>)
 80030e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e8:	0f1b      	lsrs	r3, r3, #28
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80030f0:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <I2S_GetClockFreq+0x88>)
 80030f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f6:	099b      	lsrs	r3, r3, #6
 80030f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	fb02 f203 	mul.w	r2, r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	613b      	str	r3, [r7, #16]

      break;
 800310a:	e005      	b.n	8003118 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <I2S_GetClockFreq+0x94>)
 800310e:	613b      	str	r3, [r7, #16]
      break;
 8003110:	e002      	b.n	8003118 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
      break;
 8003116:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8003118:	693b      	ldr	r3, [r7, #16]
}
 800311a:	4618      	mov	r0, r3
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800
 800312c:	00f42400 	.word	0x00f42400
 8003130:	017d7840 	.word	0x017d7840
 8003134:	00bb8000 	.word	0x00bb8000

08003138 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	; 0x40
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003166:	f7fe ff31 	bl	8001fcc <HAL_GetTick>
 800316a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800316c:	e009      	b.n	8003182 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800316e:	f7fe ff2d 	bl	8001fcc <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800317c:	d901      	bls.n	8003182 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e022      	b.n	80031c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318e:	d1ee      	bne.n	800316e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800319a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800319c:	f7fe ff16 	bl	8001fcc <HAL_GetTick>
 80031a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031a2:	e009      	b.n	80031b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031a4:	f7fe ff12 	bl	8001fcc <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031b2:	d901      	bls.n	80031b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e007      	b.n	80031c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031c4:	d1ee      	bne.n	80031a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40007000 	.word	0x40007000

080031d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e29b      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8087 	beq.w	800330a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031fc:	4b96      	ldr	r3, [pc, #600]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b04      	cmp	r3, #4
 8003206:	d00c      	beq.n	8003222 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003208:	4b93      	ldr	r3, [pc, #588]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b08      	cmp	r3, #8
 8003212:	d112      	bne.n	800323a <HAL_RCC_OscConfig+0x62>
 8003214:	4b90      	ldr	r3, [pc, #576]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003220:	d10b      	bne.n	800323a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003222:	4b8d      	ldr	r3, [pc, #564]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d06c      	beq.n	8003308 <HAL_RCC_OscConfig+0x130>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d168      	bne.n	8003308 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e275      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x7a>
 8003244:	4b84      	ldr	r3, [pc, #528]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a83      	ldr	r2, [pc, #524]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e02e      	b.n	80032b0 <HAL_RCC_OscConfig+0xd8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x9c>
 800325a:	4b7f      	ldr	r3, [pc, #508]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7e      	ldr	r2, [pc, #504]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b7c      	ldr	r3, [pc, #496]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7b      	ldr	r2, [pc, #492]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800326c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e01d      	b.n	80032b0 <HAL_RCC_OscConfig+0xd8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0xc0>
 800327e:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a75      	ldr	r2, [pc, #468]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b73      	ldr	r3, [pc, #460]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a72      	ldr	r2, [pc, #456]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0xd8>
 8003298:	4b6f      	ldr	r3, [pc, #444]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a6e      	ldr	r2, [pc, #440]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800329e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6b      	ldr	r2, [pc, #428]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe fe88 	bl	8001fcc <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fe fe84 	bl	8001fcc <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e229      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b61      	ldr	r3, [pc, #388]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0xe8>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe fe74 	bl	8001fcc <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe fe70 	bl	8001fcc <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e215      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	4b57      	ldr	r3, [pc, #348]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x110>
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d069      	beq.n	80033ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003316:	4b50      	ldr	r3, [pc, #320]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003322:	4b4d      	ldr	r3, [pc, #308]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b08      	cmp	r3, #8
 800332c:	d11c      	bne.n	8003368 <HAL_RCC_OscConfig+0x190>
 800332e:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d116      	bne.n	8003368 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333a:	4b47      	ldr	r3, [pc, #284]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_RCC_OscConfig+0x17a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d001      	beq.n	8003352 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e1e9      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	493d      	ldr	r1, [pc, #244]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	e040      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d023      	beq.n	80033b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003370:	4b39      	ldr	r3, [pc, #228]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a38      	ldr	r2, [pc, #224]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe fe26 	bl	8001fcc <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003384:	f7fe fe22 	bl	8001fcc <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1c7      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a2:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4929      	ldr	r1, [pc, #164]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
 80033b6:	e018      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a26      	ldr	r2, [pc, #152]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fe02 	bl	8001fcc <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033cc:	f7fe fdfe 	bl	8001fcc <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e1a3      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d038      	beq.n	8003468 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d019      	beq.n	8003432 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fe fddf 	bl	8001fcc <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003412:	f7fe fddb 	bl	8001fcc <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e180      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x23a>
 8003430:	e01a      	b.n	8003468 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003436:	4a08      	ldr	r2, [pc, #32]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fe fdc5 	bl	8001fcc <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003446:	f7fe fdc1 	bl	8001fcc <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d903      	bls.n	800345c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e166      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
 8003458:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345c:	4b92      	ldr	r3, [pc, #584]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800345e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ee      	bne.n	8003446 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a4 	beq.w	80035be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003476:	4b8c      	ldr	r3, [pc, #560]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	4b89      	ldr	r3, [pc, #548]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a88      	ldr	r2, [pc, #544]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	4b86      	ldr	r3, [pc, #536]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349e:	4b83      	ldr	r3, [pc, #524]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d118      	bne.n	80034dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034aa:	4b80      	ldr	r3, [pc, #512]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a7f      	ldr	r2, [pc, #508]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b6:	f7fe fd89 	bl	8001fcc <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034be:	f7fe fd85 	bl	8001fcc <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	; 0x64
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e12a      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d0:	4b76      	ldr	r3, [pc, #472]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x31a>
 80034e4:	4b70      	ldr	r3, [pc, #448]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a6f      	ldr	r2, [pc, #444]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	e02d      	b.n	800354e <HAL_RCC_OscConfig+0x376>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x33c>
 80034fa:	4b6b      	ldr	r3, [pc, #428]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a6a      	ldr	r2, [pc, #424]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a67      	ldr	r2, [pc, #412]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	e01c      	b.n	800354e <HAL_RCC_OscConfig+0x376>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d10c      	bne.n	8003536 <HAL_RCC_OscConfig+0x35e>
 800351c:	4b62      	ldr	r3, [pc, #392]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a61      	ldr	r2, [pc, #388]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
 8003528:	4b5f      	ldr	r3, [pc, #380]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a5e      	ldr	r2, [pc, #376]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	e00b      	b.n	800354e <HAL_RCC_OscConfig+0x376>
 8003536:	4b5c      	ldr	r3, [pc, #368]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	4a5b      	ldr	r2, [pc, #364]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6713      	str	r3, [r2, #112]	; 0x70
 8003542:	4b59      	ldr	r3, [pc, #356]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d015      	beq.n	8003582 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003556:	f7fe fd39 	bl	8001fcc <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe fd35 	bl	8001fcc <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	; 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e0d8      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ee      	beq.n	800355e <HAL_RCC_OscConfig+0x386>
 8003580:	e014      	b.n	80035ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003582:	f7fe fd23 	bl	8001fcc <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fe fd1f 	bl	8001fcc <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0c2      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a0:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ee      	bne.n	800358a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d105      	bne.n	80035be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a3c      	ldr	r2, [pc, #240]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80ae 	beq.w	8003724 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c8:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d06d      	beq.n	80036b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d14b      	bne.n	8003674 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a31      	ldr	r2, [pc, #196]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe fcf0 	bl	8001fcc <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fe fcec 	bl	8001fcc <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e091      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	019b      	lsls	r3, r3, #6
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	3b01      	subs	r3, #1
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	071b      	lsls	r3, r3, #28
 800363a:	491b      	ldr	r1, [pc, #108]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fe fcbe 	bl	8001fcc <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe fcba 	bl	8001fcc <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e05f      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x47c>
 8003672:	e057      	b.n	8003724 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800367a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe fca4 	bl	8001fcc <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fe fca0 	bl	8001fcc <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e045      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x4b0>
 80036a6:	e03d      	b.n	8003724 <HAL_RCC_OscConfig+0x54c>
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036b0:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <HAL_RCC_OscConfig+0x558>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d030      	beq.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d129      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d122      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d119      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	3b01      	subs	r3, #1
 80036fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d10f      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d107      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800

08003734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0d0      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b6a      	ldr	r3, [pc, #424]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d910      	bls.n	800377c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b67      	ldr	r3, [pc, #412]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 020f 	bic.w	r2, r3, #15
 8003762:	4965      	ldr	r1, [pc, #404]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b8      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4a58      	ldr	r2, [pc, #352]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 800379a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800379e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a52      	ldr	r2, [pc, #328]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b50      	ldr	r3, [pc, #320]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	494d      	ldr	r1, [pc, #308]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d040      	beq.n	8003858 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d115      	bne.n	8003816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b41      	ldr	r3, [pc, #260]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e073      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06b      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4936      	ldr	r1, [pc, #216]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003824:	4313      	orrs	r3, r2
 8003826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003828:	f7fe fbd0 	bl	8001fcc <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fe fbcc 	bl	8001fcc <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e053      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 020c 	and.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d1eb      	bne.n	8003830 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003858:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d210      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 020f 	bic.w	r2, r3, #15
 800386e:	4922      	ldr	r1, [pc, #136]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e032      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4916      	ldr	r1, [pc, #88]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	490e      	ldr	r1, [pc, #56]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038c6:	f000 f821 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80038ca:	4602      	mov	r2, r0
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	490a      	ldr	r1, [pc, #40]	; (8003900 <HAL_RCC_ClockConfig+0x1cc>)
 80038d8:	5ccb      	ldrb	r3, [r1, r3]
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <HAL_RCC_ClockConfig+0x1d0>)
 80038e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_RCC_ClockConfig+0x1d4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fb2c 	bl	8001f44 <HAL_InitTick>

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40023c00 	.word	0x40023c00
 80038fc:	40023800 	.word	0x40023800
 8003900:	0800ae40 	.word	0x0800ae40
 8003904:	2000002c 	.word	0x2000002c
 8003908:	20000030 	.word	0x20000030

0800390c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800390c:	b5b0      	push	{r4, r5, r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003912:	2100      	movs	r1, #0
 8003914:	6079      	str	r1, [r7, #4]
 8003916:	2100      	movs	r1, #0
 8003918:	60f9      	str	r1, [r7, #12]
 800391a:	2100      	movs	r1, #0
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800391e:	2100      	movs	r1, #0
 8003920:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003922:	4952      	ldr	r1, [pc, #328]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003924:	6889      	ldr	r1, [r1, #8]
 8003926:	f001 010c 	and.w	r1, r1, #12
 800392a:	2908      	cmp	r1, #8
 800392c:	d00d      	beq.n	800394a <HAL_RCC_GetSysClockFreq+0x3e>
 800392e:	2908      	cmp	r1, #8
 8003930:	f200 8094 	bhi.w	8003a5c <HAL_RCC_GetSysClockFreq+0x150>
 8003934:	2900      	cmp	r1, #0
 8003936:	d002      	beq.n	800393e <HAL_RCC_GetSysClockFreq+0x32>
 8003938:	2904      	cmp	r1, #4
 800393a:	d003      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0x38>
 800393c:	e08e      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800393e:	4b4c      	ldr	r3, [pc, #304]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x164>)
 8003940:	60bb      	str	r3, [r7, #8]
      break;
 8003942:	e08e      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003944:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x168>)
 8003946:	60bb      	str	r3, [r7, #8]
      break;
 8003948:	e08b      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800394a:	4948      	ldr	r1, [pc, #288]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x160>)
 800394c:	6849      	ldr	r1, [r1, #4]
 800394e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003952:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003954:	4945      	ldr	r1, [pc, #276]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003956:	6849      	ldr	r1, [r1, #4]
 8003958:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800395c:	2900      	cmp	r1, #0
 800395e:	d024      	beq.n	80039aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003960:	4942      	ldr	r1, [pc, #264]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003962:	6849      	ldr	r1, [r1, #4]
 8003964:	0989      	lsrs	r1, r1, #6
 8003966:	4608      	mov	r0, r1
 8003968:	f04f 0100 	mov.w	r1, #0
 800396c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003970:	f04f 0500 	mov.w	r5, #0
 8003974:	ea00 0204 	and.w	r2, r0, r4
 8003978:	ea01 0305 	and.w	r3, r1, r5
 800397c:	493d      	ldr	r1, [pc, #244]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x168>)
 800397e:	fb01 f003 	mul.w	r0, r1, r3
 8003982:	2100      	movs	r1, #0
 8003984:	fb01 f102 	mul.w	r1, r1, r2
 8003988:	1844      	adds	r4, r0, r1
 800398a:	493a      	ldr	r1, [pc, #232]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x168>)
 800398c:	fba2 0101 	umull	r0, r1, r2, r1
 8003990:	1863      	adds	r3, r4, r1
 8003992:	4619      	mov	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	461a      	mov	r2, r3
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	f7fc fc4c 	bl	8000238 <__aeabi_uldivmod>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4613      	mov	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	e04a      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039aa:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x160>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	099b      	lsrs	r3, r3, #6
 80039b0:	461a      	mov	r2, r3
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039ba:	f04f 0100 	mov.w	r1, #0
 80039be:	ea02 0400 	and.w	r4, r2, r0
 80039c2:	ea03 0501 	and.w	r5, r3, r1
 80039c6:	4620      	mov	r0, r4
 80039c8:	4629      	mov	r1, r5
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	014b      	lsls	r3, r1, #5
 80039d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039d8:	0142      	lsls	r2, r0, #5
 80039da:	4610      	mov	r0, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	1b00      	subs	r0, r0, r4
 80039e0:	eb61 0105 	sbc.w	r1, r1, r5
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	018b      	lsls	r3, r1, #6
 80039ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039f2:	0182      	lsls	r2, r0, #6
 80039f4:	1a12      	subs	r2, r2, r0
 80039f6:	eb63 0301 	sbc.w	r3, r3, r1
 80039fa:	f04f 0000 	mov.w	r0, #0
 80039fe:	f04f 0100 	mov.w	r1, #0
 8003a02:	00d9      	lsls	r1, r3, #3
 8003a04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a08:	00d0      	lsls	r0, r2, #3
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	1912      	adds	r2, r2, r4
 8003a10:	eb45 0303 	adc.w	r3, r5, r3
 8003a14:	f04f 0000 	mov.w	r0, #0
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	0299      	lsls	r1, r3, #10
 8003a1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a22:	0290      	lsls	r0, r2, #10
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	f7fc fc00 	bl	8000238 <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	60bb      	str	r3, [r7, #8]
      break;
 8003a5a:	e002      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a5e:	60bb      	str	r3, [r7, #8]
      break;
 8003a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a62:	68bb      	ldr	r3, [r7, #8]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	00f42400 	.word	0x00f42400
 8003a74:	017d7840 	.word	0x017d7840

08003a78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	2000002c 	.word	0x2000002c

08003a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a94:	f7ff fff0 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0a9b      	lsrs	r3, r3, #10
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4903      	ldr	r1, [pc, #12]	; (8003ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	0800ae50 	.word	0x0800ae50

08003ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003abc:	f7ff ffdc 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0b5b      	lsrs	r3, r3, #13
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4903      	ldr	r1, [pc, #12]	; (8003adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	0800ae50 	.word	0x0800ae50

08003ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d012      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b08:	4b69      	ldr	r3, [pc, #420]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4a68      	ldr	r2, [pc, #416]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b12:	6093      	str	r3, [r2, #8]
 8003b14:	4b66      	ldr	r3, [pc, #408]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	4964      	ldr	r1, [pc, #400]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d017      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b3a:	4b5d      	ldr	r3, [pc, #372]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b48:	4959      	ldr	r1, [pc, #356]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b58:	d101      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b66:	2301      	movs	r3, #1
 8003b68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d017      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b76:	4b4e      	ldr	r3, [pc, #312]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	494a      	ldr	r1, [pc, #296]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b94:	d101      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b96:	2301      	movs	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 808b 	beq.w	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bc4:	4b3a      	ldr	r3, [pc, #232]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	4a39      	ldr	r2, [pc, #228]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bce:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd0:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bdc:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a34      	ldr	r2, [pc, #208]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be8:	f7fe f9f0 	bl	8001fcc <HAL_GetTick>
 8003bec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf0:	f7fe f9ec 	bl	8001fcc <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e38f      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c02:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c0e:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d035      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d02e      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c2c:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c36:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	4a1a      	ldr	r2, [pc, #104]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c4e:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c54:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d114      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fe f9b4 	bl	8001fcc <HAL_GetTick>
 8003c64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c68:	f7fe f9b0 	bl	8001fcc <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e351      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ee      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c96:	d111      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ca6:	400b      	ands	r3, r1
 8003ca8:	4901      	ldr	r1, [pc, #4]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
 8003cae:	e00b      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40007000 	.word	0x40007000
 8003cb8:	0ffffcff 	.word	0x0ffffcff
 8003cbc:	4bb3      	ldr	r3, [pc, #716]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4ab2      	ldr	r2, [pc, #712]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cc6:	6093      	str	r3, [r2, #8]
 8003cc8:	4bb0      	ldr	r3, [pc, #704]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	49ad      	ldr	r1, [pc, #692]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d010      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ce6:	4ba9      	ldr	r3, [pc, #676]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cec:	4aa7      	ldr	r2, [pc, #668]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cf6:	4ba5      	ldr	r3, [pc, #660]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	49a2      	ldr	r1, [pc, #648]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d14:	4b9d      	ldr	r3, [pc, #628]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d22:	499a      	ldr	r1, [pc, #616]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d36:	4b95      	ldr	r3, [pc, #596]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d44:	4991      	ldr	r1, [pc, #580]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d58:	4b8c      	ldr	r3, [pc, #560]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d66:	4989      	ldr	r1, [pc, #548]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d7a:	4b84      	ldr	r3, [pc, #528]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	4980      	ldr	r1, [pc, #512]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d9c:	4b7b      	ldr	r3, [pc, #492]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da2:	f023 0203 	bic.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	4978      	ldr	r1, [pc, #480]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dbe:	4b73      	ldr	r3, [pc, #460]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc4:	f023 020c 	bic.w	r2, r3, #12
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dcc:	496f      	ldr	r1, [pc, #444]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003de0:	4b6a      	ldr	r3, [pc, #424]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dee:	4967      	ldr	r1, [pc, #412]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e02:	4b62      	ldr	r3, [pc, #392]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e10:	495e      	ldr	r1, [pc, #376]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e24:	4b59      	ldr	r3, [pc, #356]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	4956      	ldr	r1, [pc, #344]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e46:	4b51      	ldr	r3, [pc, #324]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	494d      	ldr	r1, [pc, #308]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e68:	4b48      	ldr	r3, [pc, #288]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	4945      	ldr	r1, [pc, #276]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e8a:	4b40      	ldr	r3, [pc, #256]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e98:	493c      	ldr	r1, [pc, #240]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003eac:	4b37      	ldr	r3, [pc, #220]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eba:	4934      	ldr	r1, [pc, #208]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d011      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ece:	4b2f      	ldr	r3, [pc, #188]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003edc:	492b      	ldr	r1, [pc, #172]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003efe:	2301      	movs	r3, #1
 8003f00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1c:	491b      	ldr	r1, [pc, #108]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00b      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f30:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f40:	4912      	ldr	r1, [pc, #72]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00b      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f54:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f64:	4909      	ldr	r1, [pc, #36]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00f      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	e002      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f8a:	bf00      	nop
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	4986      	ldr	r1, [pc, #536]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003fa4:	4b81      	ldr	r3, [pc, #516]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003faa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb4:	497d      	ldr	r1, [pc, #500]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d006      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80d6 	beq.w	800417c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fd0:	4b76      	ldr	r3, [pc, #472]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a75      	ldr	r2, [pc, #468]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fdc:	f7fd fff6 	bl	8001fcc <HAL_GetTick>
 8003fe0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fe4:	f7fd fff2 	bl	8001fcc <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e195      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff6:	4b6d      	ldr	r3, [pc, #436]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d021      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	2b00      	cmp	r3, #0
 8004014:	d11d      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004016:	4b65      	ldr	r3, [pc, #404]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004024:	4b61      	ldr	r3, [pc, #388]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402a:	0e1b      	lsrs	r3, r3, #24
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	019a      	lsls	r2, r3, #6
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	431a      	orrs	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	071b      	lsls	r3, r3, #28
 800404a:	4958      	ldr	r1, [pc, #352]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d004      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004070:	2b00      	cmp	r3, #0
 8004072:	d02e      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800407c:	d129      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800407e:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800408c:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800408e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004092:	0f1b      	lsrs	r3, r3, #28
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	019a      	lsls	r2, r3, #6
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	041b      	lsls	r3, r3, #16
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	431a      	orrs	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	071b      	lsls	r3, r3, #28
 80040b2:	493e      	ldr	r1, [pc, #248]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040ba:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c0:	f023 021f 	bic.w	r2, r3, #31
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	3b01      	subs	r3, #1
 80040ca:	4938      	ldr	r1, [pc, #224]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01d      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040de:	4b33      	ldr	r3, [pc, #204]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e4:	0e1b      	lsrs	r3, r3, #24
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040ec:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f2:	0f1b      	lsrs	r3, r3, #28
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	019a      	lsls	r2, r3, #6
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	431a      	orrs	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	061b      	lsls	r3, r3, #24
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	071b      	lsls	r3, r3, #28
 8004112:	4926      	ldr	r1, [pc, #152]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d011      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	019a      	lsls	r2, r3, #6
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	071b      	lsls	r3, r3, #28
 8004142:	491a      	ldr	r1, [pc, #104]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800414a:	4b18      	ldr	r3, [pc, #96]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a17      	ldr	r2, [pc, #92]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004150:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004156:	f7fd ff39 	bl	8001fcc <HAL_GetTick>
 800415a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800415e:	f7fd ff35 	bl	8001fcc <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b64      	cmp	r3, #100	; 0x64
 800416a:	d901      	bls.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e0d8      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004170:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b01      	cmp	r3, #1
 8004180:	f040 80ce 	bne.w	8004320 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a08      	ldr	r2, [pc, #32]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004190:	f7fd ff1c 	bl	8001fcc <HAL_GetTick>
 8004194:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004196:	e00b      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004198:	f7fd ff18 	bl	8001fcc <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d904      	bls.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e0bb      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041b0:	4b5e      	ldr	r3, [pc, #376]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041bc:	d0ec      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d02e      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d12a      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041e6:	4b51      	ldr	r3, [pc, #324]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041f4:	4b4d      	ldr	r3, [pc, #308]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	0f1b      	lsrs	r3, r3, #28
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	019a      	lsls	r2, r3, #6
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	041b      	lsls	r3, r3, #16
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	061b      	lsls	r3, r3, #24
 8004214:	431a      	orrs	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	071b      	lsls	r3, r3, #28
 800421a:	4944      	ldr	r1, [pc, #272]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004222:	4b42      	ldr	r3, [pc, #264]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004228:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	3b01      	subs	r3, #1
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	493d      	ldr	r1, [pc, #244]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d022      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800424c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004250:	d11d      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004252:	4b36      	ldr	r3, [pc, #216]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004258:	0e1b      	lsrs	r3, r3, #24
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004260:	4b32      	ldr	r3, [pc, #200]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	0f1b      	lsrs	r3, r3, #28
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	019a      	lsls	r2, r3, #6
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	431a      	orrs	r2, r3
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	061b      	lsls	r3, r3, #24
 8004280:	431a      	orrs	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	071b      	lsls	r3, r3, #28
 8004286:	4929      	ldr	r1, [pc, #164]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d028      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800429a:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a0:	0e1b      	lsrs	r3, r3, #24
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042a8:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	0c1b      	lsrs	r3, r3, #16
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	019a      	lsls	r2, r3, #6
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	431a      	orrs	r2, r3
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	061b      	lsls	r3, r3, #24
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	071b      	lsls	r3, r3, #28
 80042ce:	4917      	ldr	r1, [pc, #92]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042d6:	4b15      	ldr	r3, [pc, #84]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	4911      	ldr	r1, [pc, #68]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0e      	ldr	r2, [pc, #56]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f8:	f7fd fe68 	bl	8001fcc <HAL_GetTick>
 80042fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004300:	f7fd fe64 	bl	8001fcc <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e007      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800431a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800431e:	d1ef      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40023800 	.word	0x40023800

08004330 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800434e:	f040 80a3 	bne.w	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004352:	4bac      	ldr	r3, [pc, #688]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004358:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004360:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004368:	f000 808a 	beq.w	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004372:	f200 8093 	bhi.w	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800437c:	d07d      	beq.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004384:	f200 808a 	bhi.w	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004394:	d039      	beq.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004396:	e081      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004398:	4b9a      	ldr	r3, [pc, #616]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d108      	bne.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043a4:	4b97      	ldr	r3, [pc, #604]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ac:	4a96      	ldr	r2, [pc, #600]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80043ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	e007      	b.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80043b6:	4b93      	ldr	r3, [pc, #588]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043be:	4a93      	ldr	r2, [pc, #588]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80043c6:	4b8f      	ldr	r3, [pc, #572]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	0e1b      	lsrs	r3, r3, #24
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80043d4:	4b8b      	ldr	r3, [pc, #556]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	099b      	lsrs	r3, r3, #6
 80043dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	fb02 f203 	mul.w	r2, r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80043ee:	4b85      	ldr	r3, [pc, #532]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80043f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f4:	0a1b      	lsrs	r3, r3, #8
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	fbb2 f3f3 	udiv	r3, r2, r3
 8004406:	617b      	str	r3, [r7, #20]
        break;
 8004408:	e049      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800440a:	4b7e      	ldr	r3, [pc, #504]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d108      	bne.n	8004428 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004416:	4b7b      	ldr	r3, [pc, #492]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800441e:	4a7a      	ldr	r2, [pc, #488]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	e007      	b.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004428:	4b76      	ldr	r3, [pc, #472]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004430:	4a76      	ldr	r2, [pc, #472]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004438:	4b72      	ldr	r3, [pc, #456]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800443a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443e:	0e1b      	lsrs	r3, r3, #24
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004446:	4b6f      	ldr	r3, [pc, #444]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	fb02 f203 	mul.w	r2, r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	fbb2 f3f3 	udiv	r3, r2, r3
 800445e:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004460:	4b68      	ldr	r3, [pc, #416]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	3301      	adds	r3, #1
 800446c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	fbb2 f3f3 	udiv	r3, r2, r3
 8004476:	617b      	str	r3, [r7, #20]
        break;
 8004478:	e011      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800447a:	4b65      	ldr	r3, [pc, #404]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800447c:	617b      	str	r3, [r7, #20]
        break;
 800447e:	e00e      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004480:	4b60      	ldr	r3, [pc, #384]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d102      	bne.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800448c:	4b5e      	ldr	r3, [pc, #376]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800448e:	617b      	str	r3, [r7, #20]
        break;
 8004490:	e005      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8004492:	4b5e      	ldr	r3, [pc, #376]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004494:	617b      	str	r3, [r7, #20]
        break;
 8004496:	e002      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8004498:	bf00      	nop
 800449a:	e000      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 800449c:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a4:	f040 80a3 	bne.w	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 80044a8:	4b56      	ldr	r3, [pc, #344]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80044aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ae:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80044b6:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044be:	f000 808a 	beq.w	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044c8:	f200 8093 	bhi.w	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044d2:	d07d      	beq.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044da:	f200 808a 	bhi.w	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ea:	d039      	beq.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80044ec:	e081      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80044ee:	4b45      	ldr	r3, [pc, #276]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d108      	bne.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044fa:	4b42      	ldr	r3, [pc, #264]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004502:	4a41      	ldr	r2, [pc, #260]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	e007      	b.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800450c:	4b3d      	ldr	r3, [pc, #244]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004514:	4a3d      	ldr	r2, [pc, #244]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800451c:	4b39      	ldr	r3, [pc, #228]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	0e1b      	lsrs	r3, r3, #24
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800452a:	4b36      	ldr	r3, [pc, #216]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	099b      	lsrs	r3, r3, #6
 8004532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	fb02 f203 	mul.w	r2, r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004542:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004544:	4b2f      	ldr	r3, [pc, #188]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	3301      	adds	r3, #1
 8004552:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]
        break;
 800455e:	e049      	b.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004560:	4b28      	ldr	r3, [pc, #160]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d108      	bne.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800456c:	4b25      	ldr	r3, [pc, #148]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004574:	4a24      	ldr	r2, [pc, #144]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	e007      	b.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800457e:	4b21      	ldr	r3, [pc, #132]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004586:	4a21      	ldr	r2, [pc, #132]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800458e:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004594:	0e1b      	lsrs	r3, r3, #24
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800459e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a2:	099b      	lsrs	r3, r3, #6
 80045a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	fb02 f203 	mul.w	r2, r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80045b6:	4b13      	ldr	r3, [pc, #76]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80045b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	3301      	adds	r3, #1
 80045c2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]
        break;
 80045ce:	e011      	b.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80045d2:	617b      	str	r3, [r7, #20]
        break;
 80045d4:	e00e      	b.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80045e4:	617b      	str	r3, [r7, #20]
        break;
 80045e6:	e005      	b.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 80045e8:	4b08      	ldr	r3, [pc, #32]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80045ea:	617b      	str	r3, [r7, #20]
        break;
 80045ec:	e002      	b.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 80045ee:	bf00      	nop
 80045f0:	e000      	b.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 80045f2:	bf00      	nop

  return frequency;
 80045f4:	697b      	ldr	r3, [r7, #20]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800
 8004608:	00f42400 	.word	0x00f42400
 800460c:	017d7840 	.word	0x017d7840
 8004610:	00bb8000 	.word	0x00bb8000

08004614 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d904      	bls.n	8004636 <HAL_SAI_InitProtocol+0x22>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	3b03      	subs	r3, #3
 8004630:	2b01      	cmp	r3, #1
 8004632:	d812      	bhi.n	800465a <HAL_SAI_InitProtocol+0x46>
 8004634:	e008      	b.n	8004648 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fa55 	bl	8004aec <SAI_InitI2S>
 8004642:	4603      	mov	r3, r0
 8004644:	75fb      	strb	r3, [r7, #23]
      break;
 8004646:	e00b      	b.n	8004660 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 fafa 	bl	8004c48 <SAI_InitPCM>
 8004654:	4603      	mov	r3, r0
 8004656:	75fb      	strb	r3, [r7, #23]
      break;
 8004658:	e002      	b.n	8004660 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	75fb      	strb	r3, [r7, #23]
      break;
 800465e:	bf00      	nop
  }

  if (status == HAL_OK)
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d104      	bne.n	8004670 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f808 	bl	800467c <HAL_SAI_Init>
 800466c:	4603      	mov	r3, r0
 800466e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004670:	7dfb      	ldrb	r3, [r7, #23]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e156      	b.n	8004948 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd fb18 	bl	8001ce4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fb79 	bl	8004db4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d00c      	beq.n	80046e4 <HAL_SAI_Init+0x68>
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d80d      	bhi.n	80046ea <HAL_SAI_Init+0x6e>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_SAI_Init+0x5c>
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d003      	beq.n	80046de <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80046d6:	e008      	b.n	80046ea <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	61fb      	str	r3, [r7, #28]
      break;
 80046dc:	e006      	b.n	80046ec <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80046de:	2310      	movs	r3, #16
 80046e0:	61fb      	str	r3, [r7, #28]
      break;
 80046e2:	e003      	b.n	80046ec <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80046e4:	2320      	movs	r3, #32
 80046e6:	61fb      	str	r3, [r7, #28]
      break;
 80046e8:	e000      	b.n	80046ec <HAL_SAI_Init+0x70>
      break;
 80046ea:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d81e      	bhi.n	8004732 <HAL_SAI_Init+0xb6>
 80046f4:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <HAL_SAI_Init+0x80>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	0800470d 	.word	0x0800470d
 8004700:	08004713 	.word	0x08004713
 8004704:	0800471b 	.word	0x0800471b
 8004708:	08004723 	.word	0x08004723
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
    }
    break;
 8004710:	e010      	b.n	8004734 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004716:	617b      	str	r3, [r7, #20]
    }
    break;
 8004718:	e00c      	b.n	8004734 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800471a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800471e:	617b      	str	r3, [r7, #20]
    }
    break;
 8004720:	e008      	b.n	8004734 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004726:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004730:	e000      	b.n	8004734 <HAL_SAI_Init+0xb8>
    default:
      break;
 8004732:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a85      	ldr	r2, [pc, #532]	; (8004950 <HAL_SAI_Init+0x2d4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d004      	beq.n	8004748 <HAL_SAI_Init+0xcc>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a84      	ldr	r2, [pc, #528]	; (8004954 <HAL_SAI_Init+0x2d8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d103      	bne.n	8004750 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004748:	4a83      	ldr	r2, [pc, #524]	; (8004958 <HAL_SAI_Init+0x2dc>)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e002      	b.n	8004756 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004750:	4a82      	ldr	r2, [pc, #520]	; (800495c <HAL_SAI_Init+0x2e0>)
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d04c      	beq.n	80047f8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a7a      	ldr	r2, [pc, #488]	; (8004950 <HAL_SAI_Init+0x2d4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_SAI_Init+0xfa>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a78      	ldr	r2, [pc, #480]	; (8004954 <HAL_SAI_Init+0x2d8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d104      	bne.n	8004780 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004776:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800477a:	f7ff fdd9 	bl	8004330 <HAL_RCCEx_GetPeriphCLKFreq>
 800477e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a76      	ldr	r2, [pc, #472]	; (8004960 <HAL_SAI_Init+0x2e4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_SAI_Init+0x118>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a75      	ldr	r2, [pc, #468]	; (8004964 <HAL_SAI_Init+0x2e8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d104      	bne.n	800479e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004794:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004798:	f7ff fdca 	bl	8004330 <HAL_RCCEx_GetPeriphCLKFreq>
 800479c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	461a      	mov	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	025b      	lsls	r3, r3, #9
 80047b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a6b      	ldr	r2, [pc, #428]	; (8004968 <HAL_SAI_Init+0x2ec>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	08da      	lsrs	r2, r3, #3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80047c4:	68f9      	ldr	r1, [r7, #12]
 80047c6:	4b68      	ldr	r3, [pc, #416]	; (8004968 <HAL_SAI_Init+0x2ec>)
 80047c8:	fba3 2301 	umull	r2, r3, r3, r1
 80047cc:	08da      	lsrs	r2, r3, #3
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	1aca      	subs	r2, r1, r3
 80047d8:	2a08      	cmp	r2, #8
 80047da:	d904      	bls.n	80047e6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d104      	bne.n	80047f8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	085a      	lsrs	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_SAI_Init+0x18c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d109      	bne.n	800481c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_SAI_Init+0x198>
 8004810:	2300      	movs	r3, #0
 8004812:	e001      	b.n	8004818 <HAL_SAI_Init+0x19c>
 8004814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	e008      	b.n	800482e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	2b01      	cmp	r3, #1
 8004822:	d102      	bne.n	800482a <HAL_SAI_Init+0x1ae>
 8004824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004828:	e000      	b.n	800482c <HAL_SAI_Init+0x1b0>
 800482a:	2300      	movs	r3, #0
 800482c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4b4c      	ldr	r3, [pc, #304]	; (800496c <HAL_SAI_Init+0x2f0>)
 800483a:	400b      	ands	r3, r1
 800483c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004852:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004858:	431a      	orrs	r2, r3
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8004866:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004872:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	051b      	lsls	r3, r3, #20
 800487a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6859      	ldr	r1, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4b38      	ldr	r3, [pc, #224]	; (8004970 <HAL_SAI_Init+0x2f4>)
 8004890:	400b      	ands	r3, r1
 8004892:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6859      	ldr	r1, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6899      	ldr	r1, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4b2d      	ldr	r3, [pc, #180]	; (8004974 <HAL_SAI_Init+0x2f8>)
 80048be:	400b      	ands	r3, r1
 80048c0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6899      	ldr	r1, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80048d2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80048d8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80048de:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	3b01      	subs	r3, #1
 80048e6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80048e8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68d9      	ldr	r1, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004900:	400b      	ands	r3, r1
 8004902:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68d9      	ldr	r1, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004918:	041b      	lsls	r3, r3, #16
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004920:	3b01      	subs	r3, #1
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40015804 	.word	0x40015804
 8004954:	40015824 	.word	0x40015824
 8004958:	40015800 	.word	0x40015800
 800495c:	40015c00 	.word	0x40015c00
 8004960:	40015c04 	.word	0x40015c04
 8004964:	40015c24 	.word	0x40015c24
 8004968:	cccccccd 	.word	0xcccccccd
 800496c:	ff05c010 	.word	0xff05c010
 8004970:	ffff1ff0 	.word	0xffff1ff0
 8004974:	fff88000 	.word	0xfff88000

08004978 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	4613      	mov	r3, r2
 8004984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8004986:	f7fd fb21 	bl	8001fcc <HAL_GetTick>
 800498a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_SAI_Transmit_DMA+0x20>
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e093      	b.n	8004ac4 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	f040 808c 	bne.w	8004ac2 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_SAI_Transmit_DMA+0x40>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e085      	b.n	8004ac4 <HAL_SAI_Transmit_DMA+0x14c>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	88fa      	ldrh	r2, [r7, #6]
 80049ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	88fa      	ldrh	r2, [r7, #6]
 80049d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2212      	movs	r2, #18
 80049e2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ea:	4a38      	ldr	r2, [pc, #224]	; (8004acc <HAL_SAI_Transmit_DMA+0x154>)
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049f2:	4a37      	ldr	r2, [pc, #220]	; (8004ad0 <HAL_SAI_Transmit_DMA+0x158>)
 80049f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049fa:	4a36      	ldr	r2, [pc, #216]	; (8004ad4 <HAL_SAI_Transmit_DMA+0x15c>)
 80049fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a02:	2200      	movs	r2, #0
 8004a04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a0e:	4619      	mov	r1, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	331c      	adds	r3, #28
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004a1e:	f7fd fca1 	bl	8002364 <HAL_DMA_Start_IT>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e047      	b.n	8004ac4 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004a34:	2100      	movs	r1, #0
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f986 	bl	8004d48 <SAI_InterruptFlag>
 8004a3c:	4601      	mov	r1, r0
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004a5a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004a5c:	e015      	b.n	8004a8a <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004a5e:	f7fd fab5 	bl	8001fcc <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a6c:	d90d      	bls.n	8004a8a <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e01c      	b.n	8004ac4 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0e2      	beq.n	8004a5e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d107      	bne.n	8004ab6 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ab4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e000      	b.n	8004ac4 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
  }
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	08004e85 	.word	0x08004e85
 8004ad0:	08004e25 	.word	0x08004e25
 8004ad4:	08004ea1 	.word	0x08004ea1

08004ad8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <SAI_InitI2S+0x2a>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d103      	bne.n	8004b1e <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b1c:	e002      	b.n	8004b24 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b2a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b32:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e076      	b.n	8004c3c <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d107      	bne.n	8004b64 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004b60:	651a      	str	r2, [r3, #80]	; 0x50
 8004b62:	e006      	b.n	8004b72 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b6a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	651a      	str	r2, [r3, #80]	; 0x50
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d84f      	bhi.n	8004c18 <SAI_InitI2S+0x12c>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <SAI_InitI2S+0x94>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004bb3 	.word	0x08004bb3
 8004b88:	08004bd5 	.word	0x08004bd5
 8004b8c:	08004bf7 	.word	0x08004bf7

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2280      	movs	r2, #128	; 0x80
 8004b94:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	011a      	lsls	r2, r3, #4
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2240      	movs	r2, #64	; 0x40
 8004bae:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004bb0:	e034      	b.n	8004c1c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2280      	movs	r2, #128	; 0x80
 8004bb6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	019a      	lsls	r2, r3, #6
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2280      	movs	r2, #128	; 0x80
 8004bd0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004bd2:	e023      	b.n	8004c1c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	22c0      	movs	r2, #192	; 0xc0
 8004bd8:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	085b      	lsrs	r3, r3, #1
 8004bde:	019a      	lsls	r2, r3, #6
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2280      	movs	r2, #128	; 0x80
 8004bf2:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004bf4:	e012      	b.n	8004c1c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	22e0      	movs	r2, #224	; 0xe0
 8004bfa:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	019a      	lsls	r2, r3, #6
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	085b      	lsrs	r3, r3, #1
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2280      	movs	r2, #128	; 0x80
 8004c14:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004c16:	e001      	b.n	8004c1c <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e00f      	b.n	8004c3c <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d10b      	bne.n	8004c3a <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d102      	bne.n	8004c2e <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2210      	movs	r2, #16
 8004c2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d102      	bne.n	8004c3a <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2208      	movs	r2, #8
 8004c38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <SAI_InitPCM+0x2a>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d103      	bne.n	8004c7a <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c78:	e002      	b.n	8004c80 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004c94:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ca8:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d103      	bne.n	8004cb8 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	645a      	str	r2, [r3, #68]	; 0x44
 8004cb6:	e002      	b.n	8004cbe <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	220d      	movs	r2, #13
 8004cbc:	645a      	str	r2, [r3, #68]	; 0x44
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d837      	bhi.n	8004d34 <SAI_InitPCM+0xec>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <SAI_InitPCM+0x84>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004cdd 	.word	0x08004cdd
 8004cd0:	08004cf3 	.word	0x08004cf3
 8004cd4:	08004d09 	.word	0x08004d09
 8004cd8:	08004d1f 	.word	0x08004d1f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2280      	movs	r2, #128	; 0x80
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	011a      	lsls	r2, r3, #4
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2240      	movs	r2, #64	; 0x40
 8004cee:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004cf0:	e022      	b.n	8004d38 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2280      	movs	r2, #128	; 0x80
 8004cf6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2280      	movs	r2, #128	; 0x80
 8004d04:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004d06:	e017      	b.n	8004d38 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	22c0      	movs	r2, #192	; 0xc0
 8004d0c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2280      	movs	r2, #128	; 0x80
 8004d1a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004d1c:	e00c      	b.n	8004d38 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	22e0      	movs	r2, #224	; 0xe0
 8004d22:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2280      	movs	r2, #128	; 0x80
 8004d30:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004d32:	e001      	b.n	8004d38 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e000      	b.n	8004d3a <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop

08004d48 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d103      	bne.n	8004d64 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f043 0308 	orr.w	r3, r3, #8
 8004d62:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d10b      	bne.n	8004d84 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d003      	beq.n	8004d7c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d103      	bne.n	8004d84 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f043 0310 	orr.w	r3, r3, #16
 8004d82:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d003      	beq.n	8004d94 <SAI_InterruptFlag+0x4c>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d104      	bne.n	8004d9e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	e003      	b.n	8004da6 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f043 0304 	orr.w	r3, r3, #4
 8004da4:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8004da6:	68fb      	ldr	r3, [r7, #12]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8004dbc:	4b17      	ldr	r3, [pc, #92]	; (8004e1c <SAI_Disable+0x68>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a17      	ldr	r2, [pc, #92]	; (8004e20 <SAI_Disable+0x6c>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	0b1b      	lsrs	r3, r3, #12
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004dde:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1e5a      	subs	r2, r3, #1
 8004de4:	60fa      	str	r2, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	72fb      	strb	r3, [r7, #11]
      break;
 8004dfe:	e006      	b.n	8004e0e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e8      	bne.n	8004de0 <SAI_Disable+0x2c>

  return status;
 8004e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	2000002c 	.word	0x2000002c
 8004e20:	95cbec1b 	.word	0x95cbec1b

08004e24 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3a:	d01c      	beq.n	8004e76 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004e52:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004e54:	2100      	movs	r1, #0
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7ff ff76 	bl	8004d48 <SAI_InterruptFlag>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	43d9      	mvns	r1, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f7fb fe81 	bl	8000b7e <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7fb fe68 	bl	8000b68 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004e98:	bf00      	nop
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d004      	beq.n	8004ed2 <SAI_DMAError+0x32>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d112      	bne.n	8004ef8 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004ee0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff ff66 	bl	8004db4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7ff fded 	bl	8004ad8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e040      	b.n	8004f9a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d106      	bne.n	8004f2e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7fc fe45 	bl	8001bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2224      	movs	r2, #36	; 0x24
 8004f32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0201 	bic.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f87f 	bl	8005048 <UART_SetConfig>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e022      	b.n	8004f9a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fad5 	bl	800550c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fb5c 	bl	8005650 <UART_CheckIdleState>
 8004f98:	4603      	mov	r3, r0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	4613      	mov	r3, r2
 8004fae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d12c      	bne.n	8005012 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <HAL_UART_Receive_DMA+0x22>
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e025      	b.n	8005014 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_UART_Receive_DMA+0x34>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e01e      	b.n	8005014 <HAL_UART_Receive_DMA+0x72>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d007      	beq.n	8005002 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005000:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	461a      	mov	r2, r3
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 fbe7 	bl	80057dc <UART_Start_Receive_DMA>
 800500e:	4603      	mov	r3, r0
 8005010:	e000      	b.n	8005014 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005012:	2302      	movs	r3, #2
  }
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4ba7      	ldr	r3, [pc, #668]	; (8005310 <UART_SetConfig+0x2c8>)
 8005074:	4013      	ands	r3, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	6979      	ldr	r1, [r7, #20]
 800507c:	430b      	orrs	r3, r1
 800507e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a95      	ldr	r2, [pc, #596]	; (8005314 <UART_SetConfig+0x2cc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d120      	bne.n	8005106 <UART_SetConfig+0xbe>
 80050c4:	4b94      	ldr	r3, [pc, #592]	; (8005318 <UART_SetConfig+0x2d0>)
 80050c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d816      	bhi.n	8005100 <UART_SetConfig+0xb8>
 80050d2:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <UART_SetConfig+0x90>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	080050e9 	.word	0x080050e9
 80050dc:	080050f5 	.word	0x080050f5
 80050e0:	080050ef 	.word	0x080050ef
 80050e4:	080050fb 	.word	0x080050fb
 80050e8:	2301      	movs	r3, #1
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e14f      	b.n	800538e <UART_SetConfig+0x346>
 80050ee:	2302      	movs	r3, #2
 80050f0:	77fb      	strb	r3, [r7, #31]
 80050f2:	e14c      	b.n	800538e <UART_SetConfig+0x346>
 80050f4:	2304      	movs	r3, #4
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e149      	b.n	800538e <UART_SetConfig+0x346>
 80050fa:	2308      	movs	r3, #8
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e146      	b.n	800538e <UART_SetConfig+0x346>
 8005100:	2310      	movs	r3, #16
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e143      	b.n	800538e <UART_SetConfig+0x346>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a84      	ldr	r2, [pc, #528]	; (800531c <UART_SetConfig+0x2d4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d132      	bne.n	8005176 <UART_SetConfig+0x12e>
 8005110:	4b81      	ldr	r3, [pc, #516]	; (8005318 <UART_SetConfig+0x2d0>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b0c      	cmp	r3, #12
 800511c:	d828      	bhi.n	8005170 <UART_SetConfig+0x128>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <UART_SetConfig+0xdc>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005159 	.word	0x08005159
 8005128:	08005171 	.word	0x08005171
 800512c:	08005171 	.word	0x08005171
 8005130:	08005171 	.word	0x08005171
 8005134:	08005165 	.word	0x08005165
 8005138:	08005171 	.word	0x08005171
 800513c:	08005171 	.word	0x08005171
 8005140:	08005171 	.word	0x08005171
 8005144:	0800515f 	.word	0x0800515f
 8005148:	08005171 	.word	0x08005171
 800514c:	08005171 	.word	0x08005171
 8005150:	08005171 	.word	0x08005171
 8005154:	0800516b 	.word	0x0800516b
 8005158:	2300      	movs	r3, #0
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e117      	b.n	800538e <UART_SetConfig+0x346>
 800515e:	2302      	movs	r3, #2
 8005160:	77fb      	strb	r3, [r7, #31]
 8005162:	e114      	b.n	800538e <UART_SetConfig+0x346>
 8005164:	2304      	movs	r3, #4
 8005166:	77fb      	strb	r3, [r7, #31]
 8005168:	e111      	b.n	800538e <UART_SetConfig+0x346>
 800516a:	2308      	movs	r3, #8
 800516c:	77fb      	strb	r3, [r7, #31]
 800516e:	e10e      	b.n	800538e <UART_SetConfig+0x346>
 8005170:	2310      	movs	r3, #16
 8005172:	77fb      	strb	r3, [r7, #31]
 8005174:	e10b      	b.n	800538e <UART_SetConfig+0x346>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a69      	ldr	r2, [pc, #420]	; (8005320 <UART_SetConfig+0x2d8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d120      	bne.n	80051c2 <UART_SetConfig+0x17a>
 8005180:	4b65      	ldr	r3, [pc, #404]	; (8005318 <UART_SetConfig+0x2d0>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800518a:	2b30      	cmp	r3, #48	; 0x30
 800518c:	d013      	beq.n	80051b6 <UART_SetConfig+0x16e>
 800518e:	2b30      	cmp	r3, #48	; 0x30
 8005190:	d814      	bhi.n	80051bc <UART_SetConfig+0x174>
 8005192:	2b20      	cmp	r3, #32
 8005194:	d009      	beq.n	80051aa <UART_SetConfig+0x162>
 8005196:	2b20      	cmp	r3, #32
 8005198:	d810      	bhi.n	80051bc <UART_SetConfig+0x174>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <UART_SetConfig+0x15c>
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d006      	beq.n	80051b0 <UART_SetConfig+0x168>
 80051a2:	e00b      	b.n	80051bc <UART_SetConfig+0x174>
 80051a4:	2300      	movs	r3, #0
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	e0f1      	b.n	800538e <UART_SetConfig+0x346>
 80051aa:	2302      	movs	r3, #2
 80051ac:	77fb      	strb	r3, [r7, #31]
 80051ae:	e0ee      	b.n	800538e <UART_SetConfig+0x346>
 80051b0:	2304      	movs	r3, #4
 80051b2:	77fb      	strb	r3, [r7, #31]
 80051b4:	e0eb      	b.n	800538e <UART_SetConfig+0x346>
 80051b6:	2308      	movs	r3, #8
 80051b8:	77fb      	strb	r3, [r7, #31]
 80051ba:	e0e8      	b.n	800538e <UART_SetConfig+0x346>
 80051bc:	2310      	movs	r3, #16
 80051be:	77fb      	strb	r3, [r7, #31]
 80051c0:	e0e5      	b.n	800538e <UART_SetConfig+0x346>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a57      	ldr	r2, [pc, #348]	; (8005324 <UART_SetConfig+0x2dc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d120      	bne.n	800520e <UART_SetConfig+0x1c6>
 80051cc:	4b52      	ldr	r3, [pc, #328]	; (8005318 <UART_SetConfig+0x2d0>)
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051d6:	2bc0      	cmp	r3, #192	; 0xc0
 80051d8:	d013      	beq.n	8005202 <UART_SetConfig+0x1ba>
 80051da:	2bc0      	cmp	r3, #192	; 0xc0
 80051dc:	d814      	bhi.n	8005208 <UART_SetConfig+0x1c0>
 80051de:	2b80      	cmp	r3, #128	; 0x80
 80051e0:	d009      	beq.n	80051f6 <UART_SetConfig+0x1ae>
 80051e2:	2b80      	cmp	r3, #128	; 0x80
 80051e4:	d810      	bhi.n	8005208 <UART_SetConfig+0x1c0>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <UART_SetConfig+0x1a8>
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d006      	beq.n	80051fc <UART_SetConfig+0x1b4>
 80051ee:	e00b      	b.n	8005208 <UART_SetConfig+0x1c0>
 80051f0:	2300      	movs	r3, #0
 80051f2:	77fb      	strb	r3, [r7, #31]
 80051f4:	e0cb      	b.n	800538e <UART_SetConfig+0x346>
 80051f6:	2302      	movs	r3, #2
 80051f8:	77fb      	strb	r3, [r7, #31]
 80051fa:	e0c8      	b.n	800538e <UART_SetConfig+0x346>
 80051fc:	2304      	movs	r3, #4
 80051fe:	77fb      	strb	r3, [r7, #31]
 8005200:	e0c5      	b.n	800538e <UART_SetConfig+0x346>
 8005202:	2308      	movs	r3, #8
 8005204:	77fb      	strb	r3, [r7, #31]
 8005206:	e0c2      	b.n	800538e <UART_SetConfig+0x346>
 8005208:	2310      	movs	r3, #16
 800520a:	77fb      	strb	r3, [r7, #31]
 800520c:	e0bf      	b.n	800538e <UART_SetConfig+0x346>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a45      	ldr	r2, [pc, #276]	; (8005328 <UART_SetConfig+0x2e0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d125      	bne.n	8005264 <UART_SetConfig+0x21c>
 8005218:	4b3f      	ldr	r3, [pc, #252]	; (8005318 <UART_SetConfig+0x2d0>)
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005226:	d017      	beq.n	8005258 <UART_SetConfig+0x210>
 8005228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800522c:	d817      	bhi.n	800525e <UART_SetConfig+0x216>
 800522e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005232:	d00b      	beq.n	800524c <UART_SetConfig+0x204>
 8005234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005238:	d811      	bhi.n	800525e <UART_SetConfig+0x216>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <UART_SetConfig+0x1fe>
 800523e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005242:	d006      	beq.n	8005252 <UART_SetConfig+0x20a>
 8005244:	e00b      	b.n	800525e <UART_SetConfig+0x216>
 8005246:	2300      	movs	r3, #0
 8005248:	77fb      	strb	r3, [r7, #31]
 800524a:	e0a0      	b.n	800538e <UART_SetConfig+0x346>
 800524c:	2302      	movs	r3, #2
 800524e:	77fb      	strb	r3, [r7, #31]
 8005250:	e09d      	b.n	800538e <UART_SetConfig+0x346>
 8005252:	2304      	movs	r3, #4
 8005254:	77fb      	strb	r3, [r7, #31]
 8005256:	e09a      	b.n	800538e <UART_SetConfig+0x346>
 8005258:	2308      	movs	r3, #8
 800525a:	77fb      	strb	r3, [r7, #31]
 800525c:	e097      	b.n	800538e <UART_SetConfig+0x346>
 800525e:	2310      	movs	r3, #16
 8005260:	77fb      	strb	r3, [r7, #31]
 8005262:	e094      	b.n	800538e <UART_SetConfig+0x346>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a30      	ldr	r2, [pc, #192]	; (800532c <UART_SetConfig+0x2e4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d125      	bne.n	80052ba <UART_SetConfig+0x272>
 800526e:	4b2a      	ldr	r3, [pc, #168]	; (8005318 <UART_SetConfig+0x2d0>)
 8005270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005274:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800527c:	d017      	beq.n	80052ae <UART_SetConfig+0x266>
 800527e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005282:	d817      	bhi.n	80052b4 <UART_SetConfig+0x26c>
 8005284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005288:	d00b      	beq.n	80052a2 <UART_SetConfig+0x25a>
 800528a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800528e:	d811      	bhi.n	80052b4 <UART_SetConfig+0x26c>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <UART_SetConfig+0x254>
 8005294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005298:	d006      	beq.n	80052a8 <UART_SetConfig+0x260>
 800529a:	e00b      	b.n	80052b4 <UART_SetConfig+0x26c>
 800529c:	2301      	movs	r3, #1
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e075      	b.n	800538e <UART_SetConfig+0x346>
 80052a2:	2302      	movs	r3, #2
 80052a4:	77fb      	strb	r3, [r7, #31]
 80052a6:	e072      	b.n	800538e <UART_SetConfig+0x346>
 80052a8:	2304      	movs	r3, #4
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e06f      	b.n	800538e <UART_SetConfig+0x346>
 80052ae:	2308      	movs	r3, #8
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e06c      	b.n	800538e <UART_SetConfig+0x346>
 80052b4:	2310      	movs	r3, #16
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e069      	b.n	800538e <UART_SetConfig+0x346>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <UART_SetConfig+0x2e8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d137      	bne.n	8005334 <UART_SetConfig+0x2ec>
 80052c4:	4b14      	ldr	r3, [pc, #80]	; (8005318 <UART_SetConfig+0x2d0>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80052ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052d2:	d017      	beq.n	8005304 <UART_SetConfig+0x2bc>
 80052d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052d8:	d817      	bhi.n	800530a <UART_SetConfig+0x2c2>
 80052da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052de:	d00b      	beq.n	80052f8 <UART_SetConfig+0x2b0>
 80052e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e4:	d811      	bhi.n	800530a <UART_SetConfig+0x2c2>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <UART_SetConfig+0x2aa>
 80052ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ee:	d006      	beq.n	80052fe <UART_SetConfig+0x2b6>
 80052f0:	e00b      	b.n	800530a <UART_SetConfig+0x2c2>
 80052f2:	2300      	movs	r3, #0
 80052f4:	77fb      	strb	r3, [r7, #31]
 80052f6:	e04a      	b.n	800538e <UART_SetConfig+0x346>
 80052f8:	2302      	movs	r3, #2
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e047      	b.n	800538e <UART_SetConfig+0x346>
 80052fe:	2304      	movs	r3, #4
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	e044      	b.n	800538e <UART_SetConfig+0x346>
 8005304:	2308      	movs	r3, #8
 8005306:	77fb      	strb	r3, [r7, #31]
 8005308:	e041      	b.n	800538e <UART_SetConfig+0x346>
 800530a:	2310      	movs	r3, #16
 800530c:	77fb      	strb	r3, [r7, #31]
 800530e:	e03e      	b.n	800538e <UART_SetConfig+0x346>
 8005310:	efff69f3 	.word	0xefff69f3
 8005314:	40011000 	.word	0x40011000
 8005318:	40023800 	.word	0x40023800
 800531c:	40004400 	.word	0x40004400
 8005320:	40004800 	.word	0x40004800
 8005324:	40004c00 	.word	0x40004c00
 8005328:	40005000 	.word	0x40005000
 800532c:	40011400 	.word	0x40011400
 8005330:	40007800 	.word	0x40007800
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a71      	ldr	r2, [pc, #452]	; (8005500 <UART_SetConfig+0x4b8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d125      	bne.n	800538a <UART_SetConfig+0x342>
 800533e:	4b71      	ldr	r3, [pc, #452]	; (8005504 <UART_SetConfig+0x4bc>)
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005344:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005348:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800534c:	d017      	beq.n	800537e <UART_SetConfig+0x336>
 800534e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005352:	d817      	bhi.n	8005384 <UART_SetConfig+0x33c>
 8005354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005358:	d00b      	beq.n	8005372 <UART_SetConfig+0x32a>
 800535a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800535e:	d811      	bhi.n	8005384 <UART_SetConfig+0x33c>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <UART_SetConfig+0x324>
 8005364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005368:	d006      	beq.n	8005378 <UART_SetConfig+0x330>
 800536a:	e00b      	b.n	8005384 <UART_SetConfig+0x33c>
 800536c:	2300      	movs	r3, #0
 800536e:	77fb      	strb	r3, [r7, #31]
 8005370:	e00d      	b.n	800538e <UART_SetConfig+0x346>
 8005372:	2302      	movs	r3, #2
 8005374:	77fb      	strb	r3, [r7, #31]
 8005376:	e00a      	b.n	800538e <UART_SetConfig+0x346>
 8005378:	2304      	movs	r3, #4
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e007      	b.n	800538e <UART_SetConfig+0x346>
 800537e:	2308      	movs	r3, #8
 8005380:	77fb      	strb	r3, [r7, #31]
 8005382:	e004      	b.n	800538e <UART_SetConfig+0x346>
 8005384:	2310      	movs	r3, #16
 8005386:	77fb      	strb	r3, [r7, #31]
 8005388:	e001      	b.n	800538e <UART_SetConfig+0x346>
 800538a:	2310      	movs	r3, #16
 800538c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005396:	d15b      	bne.n	8005450 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005398:	7ffb      	ldrb	r3, [r7, #31]
 800539a:	2b08      	cmp	r3, #8
 800539c:	d827      	bhi.n	80053ee <UART_SetConfig+0x3a6>
 800539e:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <UART_SetConfig+0x35c>)
 80053a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053d9 	.word	0x080053d9
 80053b0:	080053ef 	.word	0x080053ef
 80053b4:	080053df 	.word	0x080053df
 80053b8:	080053ef 	.word	0x080053ef
 80053bc:	080053ef 	.word	0x080053ef
 80053c0:	080053ef 	.word	0x080053ef
 80053c4:	080053e7 	.word	0x080053e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c8:	f7fe fb62 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 80053cc:	61b8      	str	r0, [r7, #24]
        break;
 80053ce:	e013      	b.n	80053f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d0:	f7fe fb72 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 80053d4:	61b8      	str	r0, [r7, #24]
        break;
 80053d6:	e00f      	b.n	80053f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d8:	4b4b      	ldr	r3, [pc, #300]	; (8005508 <UART_SetConfig+0x4c0>)
 80053da:	61bb      	str	r3, [r7, #24]
        break;
 80053dc:	e00c      	b.n	80053f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053de:	f7fe fa95 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80053e2:	61b8      	str	r0, [r7, #24]
        break;
 80053e4:	e008      	b.n	80053f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ea:	61bb      	str	r3, [r7, #24]
        break;
 80053ec:	e004      	b.n	80053f8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	77bb      	strb	r3, [r7, #30]
        break;
 80053f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d074      	beq.n	80054e8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	005a      	lsls	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	085b      	lsrs	r3, r3, #1
 8005408:	441a      	add	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005412:	b29b      	uxth	r3, r3
 8005414:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b0f      	cmp	r3, #15
 800541a:	d916      	bls.n	800544a <UART_SetConfig+0x402>
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005422:	d212      	bcs.n	800544a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f023 030f 	bic.w	r3, r3, #15
 800542c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	b29b      	uxth	r3, r3
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	b29a      	uxth	r2, r3
 800543a:	89fb      	ldrh	r3, [r7, #14]
 800543c:	4313      	orrs	r3, r2
 800543e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	89fa      	ldrh	r2, [r7, #14]
 8005446:	60da      	str	r2, [r3, #12]
 8005448:	e04e      	b.n	80054e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	77bb      	strb	r3, [r7, #30]
 800544e:	e04b      	b.n	80054e8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005450:	7ffb      	ldrb	r3, [r7, #31]
 8005452:	2b08      	cmp	r3, #8
 8005454:	d827      	bhi.n	80054a6 <UART_SetConfig+0x45e>
 8005456:	a201      	add	r2, pc, #4	; (adr r2, 800545c <UART_SetConfig+0x414>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	08005481 	.word	0x08005481
 8005460:	08005489 	.word	0x08005489
 8005464:	08005491 	.word	0x08005491
 8005468:	080054a7 	.word	0x080054a7
 800546c:	08005497 	.word	0x08005497
 8005470:	080054a7 	.word	0x080054a7
 8005474:	080054a7 	.word	0x080054a7
 8005478:	080054a7 	.word	0x080054a7
 800547c:	0800549f 	.word	0x0800549f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005480:	f7fe fb06 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 8005484:	61b8      	str	r0, [r7, #24]
        break;
 8005486:	e013      	b.n	80054b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005488:	f7fe fb16 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 800548c:	61b8      	str	r0, [r7, #24]
        break;
 800548e:	e00f      	b.n	80054b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005490:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <UART_SetConfig+0x4c0>)
 8005492:	61bb      	str	r3, [r7, #24]
        break;
 8005494:	e00c      	b.n	80054b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005496:	f7fe fa39 	bl	800390c <HAL_RCC_GetSysClockFreq>
 800549a:	61b8      	str	r0, [r7, #24]
        break;
 800549c:	e008      	b.n	80054b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800549e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054a2:	61bb      	str	r3, [r7, #24]
        break;
 80054a4:	e004      	b.n	80054b0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	77bb      	strb	r3, [r7, #30]
        break;
 80054ae:	bf00      	nop
    }

    if (pclk != 0U)
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d018      	beq.n	80054e8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	085a      	lsrs	r2, r3, #1
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	441a      	add	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	2b0f      	cmp	r3, #15
 80054d0:	d908      	bls.n	80054e4 <UART_SetConfig+0x49c>
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d8:	d204      	bcs.n	80054e4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	60da      	str	r2, [r3, #12]
 80054e2:	e001      	b.n	80054e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40007c00 	.word	0x40007c00
 8005504:	40023800 	.word	0x40023800
 8005508:	00f42400 	.word	0x00f42400

0800550c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560a:	d10a      	bne.n	8005622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
  }
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005660:	f7fc fcb4 	bl	8001fcc <HAL_GetTick>
 8005664:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b08      	cmp	r3, #8
 8005672:	d10e      	bne.n	8005692 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f82d 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e023      	b.n	80056da <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b04      	cmp	r3, #4
 800569e:	d10e      	bne.n	80056be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f817 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e00d      	b.n	80056da <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f2:	e05e      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d05a      	beq.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fc:	f7fc fc66 	bl	8001fcc <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	429a      	cmp	r2, r3
 800570a:	d302      	bcc.n	8005712 <UART_WaitOnFlagUntilTimeout+0x30>
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d11b      	bne.n	800574a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005720:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0201 	bic.w	r2, r2, #1
 8005730:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e043      	b.n	80057d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d02c      	beq.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005766:	d124      	bne.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005770:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005780:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0201 	bic.w	r2, r2, #1
 8005790:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e00f      	b.n	80057d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4013      	ands	r3, r2
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	429a      	cmp	r2, r3
 80057c0:	bf0c      	ite	eq
 80057c2:	2301      	moveq	r3, #1
 80057c4:	2300      	movne	r3, #0
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d091      	beq.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	88fa      	ldrh	r2, [r7, #6]
 80057f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2222      	movs	r2, #34	; 0x22
 8005804:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	2b00      	cmp	r3, #0
 800580c:	d02b      	beq.n	8005866 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	4a25      	ldr	r2, [pc, #148]	; (80058a8 <UART_Start_Receive_DMA+0xcc>)
 8005814:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581a:	4a24      	ldr	r2, [pc, #144]	; (80058ac <UART_Start_Receive_DMA+0xd0>)
 800581c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005822:	4a23      	ldr	r2, [pc, #140]	; (80058b0 <UART_Start_Receive_DMA+0xd4>)
 8005824:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	2200      	movs	r2, #0
 800582c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3324      	adds	r3, #36	; 0x24
 8005838:	4619      	mov	r1, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	461a      	mov	r2, r3
 8005840:	88fb      	ldrh	r3, [r7, #6]
 8005842:	f7fc fd8f 	bl	8002364 <HAL_DMA_Start_IT>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00c      	beq.n	8005866 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2210      	movs	r2, #16
 8005850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e01c      	b.n	80058a0 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800587c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0201 	orr.w	r2, r2, #1
 800588c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800589c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	0800593d 	.word	0x0800593d
 80058ac:	080059d1 	.word	0x080059d1
 80058b0:	08005a09 	.word	0x08005a09

080058b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80058ca:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	679a      	str	r2, [r3, #120]	; 0x78
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058f4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0201 	bic.w	r2, r2, #1
 8005904:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590a:	2b01      	cmp	r3, #1
 800590c:	d107      	bne.n	800591e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0210 	bic.w	r2, r2, #16
 800591c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005952:	d02a      	beq.n	80059aa <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800596a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0201 	bic.w	r2, r2, #1
 800597a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005996:	2b01      	cmp	r3, #1
 8005998:	d107      	bne.n	80059aa <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0210 	bic.w	r2, r2, #16
 80059a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d107      	bne.n	80059c2 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059b8:	4619      	mov	r1, r3
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7ff fb38 	bl	8005030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059c0:	e002      	b.n	80059c8 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f7fb fd24 	bl	8001410 <HAL_UART_RxCpltCallback>
}
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d109      	bne.n	80059fa <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059ec:	085b      	lsrs	r3, r3, #1
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	4619      	mov	r1, r3
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f7ff fb1c 	bl	8005030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059f8:	e002      	b.n	8005a00 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f7fb fcfe 	bl	80013fc <HAL_UART_RxHalfCpltCallback>
}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a1a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2c:	2b80      	cmp	r3, #128	; 0x80
 8005a2e:	d109      	bne.n	8005a44 <UART_DMAError+0x3c>
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2b21      	cmp	r3, #33	; 0x21
 8005a34:	d106      	bne.n	8005a44 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005a3e:	6978      	ldr	r0, [r7, #20]
 8005a40:	f7ff ff38 	bl	80058b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4e:	2b40      	cmp	r3, #64	; 0x40
 8005a50:	d109      	bne.n	8005a66 <UART_DMAError+0x5e>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b22      	cmp	r3, #34	; 0x22
 8005a56:	d106      	bne.n	8005a66 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005a60:	6978      	ldr	r0, [r7, #20]
 8005a62:	f7ff ff3c 	bl	80058de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a6c:	f043 0210 	orr.w	r2, r3, #16
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a76:	6978      	ldr	r0, [r7, #20]
 8005a78:	f7ff fad0 	bl	800501c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a7c:	bf00      	nop
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <__errno>:
 8005a84:	4b01      	ldr	r3, [pc, #4]	; (8005a8c <__errno+0x8>)
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000038 	.word	0x20000038

08005a90 <__libc_init_array>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	4d0d      	ldr	r5, [pc, #52]	; (8005ac8 <__libc_init_array+0x38>)
 8005a94:	4c0d      	ldr	r4, [pc, #52]	; (8005acc <__libc_init_array+0x3c>)
 8005a96:	1b64      	subs	r4, r4, r5
 8005a98:	10a4      	asrs	r4, r4, #2
 8005a9a:	2600      	movs	r6, #0
 8005a9c:	42a6      	cmp	r6, r4
 8005a9e:	d109      	bne.n	8005ab4 <__libc_init_array+0x24>
 8005aa0:	4d0b      	ldr	r5, [pc, #44]	; (8005ad0 <__libc_init_array+0x40>)
 8005aa2:	4c0c      	ldr	r4, [pc, #48]	; (8005ad4 <__libc_init_array+0x44>)
 8005aa4:	f000 f8f8 	bl	8005c98 <_init>
 8005aa8:	1b64      	subs	r4, r4, r5
 8005aaa:	10a4      	asrs	r4, r4, #2
 8005aac:	2600      	movs	r6, #0
 8005aae:	42a6      	cmp	r6, r4
 8005ab0:	d105      	bne.n	8005abe <__libc_init_array+0x2e>
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab8:	4798      	blx	r3
 8005aba:	3601      	adds	r6, #1
 8005abc:	e7ee      	b.n	8005a9c <__libc_init_array+0xc>
 8005abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac2:	4798      	blx	r3
 8005ac4:	3601      	adds	r6, #1
 8005ac6:	e7f2      	b.n	8005aae <__libc_init_array+0x1e>
 8005ac8:	0800aec8 	.word	0x0800aec8
 8005acc:	0800aec8 	.word	0x0800aec8
 8005ad0:	0800aec8 	.word	0x0800aec8
 8005ad4:	0800aecc 	.word	0x0800aecc

08005ad8 <malloc>:
 8005ad8:	4b02      	ldr	r3, [pc, #8]	; (8005ae4 <malloc+0xc>)
 8005ada:	4601      	mov	r1, r0
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	f000 b863 	b.w	8005ba8 <_malloc_r>
 8005ae2:	bf00      	nop
 8005ae4:	20000038 	.word	0x20000038

08005ae8 <free>:
 8005ae8:	4b02      	ldr	r3, [pc, #8]	; (8005af4 <free+0xc>)
 8005aea:	4601      	mov	r1, r0
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	f000 b80b 	b.w	8005b08 <_free_r>
 8005af2:	bf00      	nop
 8005af4:	20000038 	.word	0x20000038

08005af8 <memset>:
 8005af8:	4402      	add	r2, r0
 8005afa:	4603      	mov	r3, r0
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d100      	bne.n	8005b02 <memset+0xa>
 8005b00:	4770      	bx	lr
 8005b02:	f803 1b01 	strb.w	r1, [r3], #1
 8005b06:	e7f9      	b.n	8005afc <memset+0x4>

08005b08 <_free_r>:
 8005b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b0a:	2900      	cmp	r1, #0
 8005b0c:	d048      	beq.n	8005ba0 <_free_r+0x98>
 8005b0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b12:	9001      	str	r0, [sp, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f1a1 0404 	sub.w	r4, r1, #4
 8005b1a:	bfb8      	it	lt
 8005b1c:	18e4      	addlt	r4, r4, r3
 8005b1e:	f000 f8af 	bl	8005c80 <__malloc_lock>
 8005b22:	4a20      	ldr	r2, [pc, #128]	; (8005ba4 <_free_r+0x9c>)
 8005b24:	9801      	ldr	r0, [sp, #4]
 8005b26:	6813      	ldr	r3, [r2, #0]
 8005b28:	4615      	mov	r5, r2
 8005b2a:	b933      	cbnz	r3, 8005b3a <_free_r+0x32>
 8005b2c:	6063      	str	r3, [r4, #4]
 8005b2e:	6014      	str	r4, [r2, #0]
 8005b30:	b003      	add	sp, #12
 8005b32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b36:	f000 b8a9 	b.w	8005c8c <__malloc_unlock>
 8005b3a:	42a3      	cmp	r3, r4
 8005b3c:	d90b      	bls.n	8005b56 <_free_r+0x4e>
 8005b3e:	6821      	ldr	r1, [r4, #0]
 8005b40:	1862      	adds	r2, r4, r1
 8005b42:	4293      	cmp	r3, r2
 8005b44:	bf04      	itt	eq
 8005b46:	681a      	ldreq	r2, [r3, #0]
 8005b48:	685b      	ldreq	r3, [r3, #4]
 8005b4a:	6063      	str	r3, [r4, #4]
 8005b4c:	bf04      	itt	eq
 8005b4e:	1852      	addeq	r2, r2, r1
 8005b50:	6022      	streq	r2, [r4, #0]
 8005b52:	602c      	str	r4, [r5, #0]
 8005b54:	e7ec      	b.n	8005b30 <_free_r+0x28>
 8005b56:	461a      	mov	r2, r3
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	b10b      	cbz	r3, 8005b60 <_free_r+0x58>
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	d9fa      	bls.n	8005b56 <_free_r+0x4e>
 8005b60:	6811      	ldr	r1, [r2, #0]
 8005b62:	1855      	adds	r5, r2, r1
 8005b64:	42a5      	cmp	r5, r4
 8005b66:	d10b      	bne.n	8005b80 <_free_r+0x78>
 8005b68:	6824      	ldr	r4, [r4, #0]
 8005b6a:	4421      	add	r1, r4
 8005b6c:	1854      	adds	r4, r2, r1
 8005b6e:	42a3      	cmp	r3, r4
 8005b70:	6011      	str	r1, [r2, #0]
 8005b72:	d1dd      	bne.n	8005b30 <_free_r+0x28>
 8005b74:	681c      	ldr	r4, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	6053      	str	r3, [r2, #4]
 8005b7a:	4421      	add	r1, r4
 8005b7c:	6011      	str	r1, [r2, #0]
 8005b7e:	e7d7      	b.n	8005b30 <_free_r+0x28>
 8005b80:	d902      	bls.n	8005b88 <_free_r+0x80>
 8005b82:	230c      	movs	r3, #12
 8005b84:	6003      	str	r3, [r0, #0]
 8005b86:	e7d3      	b.n	8005b30 <_free_r+0x28>
 8005b88:	6825      	ldr	r5, [r4, #0]
 8005b8a:	1961      	adds	r1, r4, r5
 8005b8c:	428b      	cmp	r3, r1
 8005b8e:	bf04      	itt	eq
 8005b90:	6819      	ldreq	r1, [r3, #0]
 8005b92:	685b      	ldreq	r3, [r3, #4]
 8005b94:	6063      	str	r3, [r4, #4]
 8005b96:	bf04      	itt	eq
 8005b98:	1949      	addeq	r1, r1, r5
 8005b9a:	6021      	streq	r1, [r4, #0]
 8005b9c:	6054      	str	r4, [r2, #4]
 8005b9e:	e7c7      	b.n	8005b30 <_free_r+0x28>
 8005ba0:	b003      	add	sp, #12
 8005ba2:	bd30      	pop	{r4, r5, pc}
 8005ba4:	2000413c 	.word	0x2000413c

08005ba8 <_malloc_r>:
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	1ccd      	adds	r5, r1, #3
 8005bac:	f025 0503 	bic.w	r5, r5, #3
 8005bb0:	3508      	adds	r5, #8
 8005bb2:	2d0c      	cmp	r5, #12
 8005bb4:	bf38      	it	cc
 8005bb6:	250c      	movcc	r5, #12
 8005bb8:	2d00      	cmp	r5, #0
 8005bba:	4606      	mov	r6, r0
 8005bbc:	db01      	blt.n	8005bc2 <_malloc_r+0x1a>
 8005bbe:	42a9      	cmp	r1, r5
 8005bc0:	d903      	bls.n	8005bca <_malloc_r+0x22>
 8005bc2:	230c      	movs	r3, #12
 8005bc4:	6033      	str	r3, [r6, #0]
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bca:	f000 f859 	bl	8005c80 <__malloc_lock>
 8005bce:	4921      	ldr	r1, [pc, #132]	; (8005c54 <_malloc_r+0xac>)
 8005bd0:	680a      	ldr	r2, [r1, #0]
 8005bd2:	4614      	mov	r4, r2
 8005bd4:	b99c      	cbnz	r4, 8005bfe <_malloc_r+0x56>
 8005bd6:	4f20      	ldr	r7, [pc, #128]	; (8005c58 <_malloc_r+0xb0>)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	b923      	cbnz	r3, 8005be6 <_malloc_r+0x3e>
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4630      	mov	r0, r6
 8005be0:	f000 f83c 	bl	8005c5c <_sbrk_r>
 8005be4:	6038      	str	r0, [r7, #0]
 8005be6:	4629      	mov	r1, r5
 8005be8:	4630      	mov	r0, r6
 8005bea:	f000 f837 	bl	8005c5c <_sbrk_r>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	d123      	bne.n	8005c3a <_malloc_r+0x92>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	6033      	str	r3, [r6, #0]
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	f000 f848 	bl	8005c8c <__malloc_unlock>
 8005bfc:	e7e3      	b.n	8005bc6 <_malloc_r+0x1e>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	1b5b      	subs	r3, r3, r5
 8005c02:	d417      	bmi.n	8005c34 <_malloc_r+0x8c>
 8005c04:	2b0b      	cmp	r3, #11
 8005c06:	d903      	bls.n	8005c10 <_malloc_r+0x68>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	441c      	add	r4, r3
 8005c0c:	6025      	str	r5, [r4, #0]
 8005c0e:	e004      	b.n	8005c1a <_malloc_r+0x72>
 8005c10:	6863      	ldr	r3, [r4, #4]
 8005c12:	42a2      	cmp	r2, r4
 8005c14:	bf0c      	ite	eq
 8005c16:	600b      	streq	r3, [r1, #0]
 8005c18:	6053      	strne	r3, [r2, #4]
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	f000 f836 	bl	8005c8c <__malloc_unlock>
 8005c20:	f104 000b 	add.w	r0, r4, #11
 8005c24:	1d23      	adds	r3, r4, #4
 8005c26:	f020 0007 	bic.w	r0, r0, #7
 8005c2a:	1ac2      	subs	r2, r0, r3
 8005c2c:	d0cc      	beq.n	8005bc8 <_malloc_r+0x20>
 8005c2e:	1a1b      	subs	r3, r3, r0
 8005c30:	50a3      	str	r3, [r4, r2]
 8005c32:	e7c9      	b.n	8005bc8 <_malloc_r+0x20>
 8005c34:	4622      	mov	r2, r4
 8005c36:	6864      	ldr	r4, [r4, #4]
 8005c38:	e7cc      	b.n	8005bd4 <_malloc_r+0x2c>
 8005c3a:	1cc4      	adds	r4, r0, #3
 8005c3c:	f024 0403 	bic.w	r4, r4, #3
 8005c40:	42a0      	cmp	r0, r4
 8005c42:	d0e3      	beq.n	8005c0c <_malloc_r+0x64>
 8005c44:	1a21      	subs	r1, r4, r0
 8005c46:	4630      	mov	r0, r6
 8005c48:	f000 f808 	bl	8005c5c <_sbrk_r>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d1dd      	bne.n	8005c0c <_malloc_r+0x64>
 8005c50:	e7cf      	b.n	8005bf2 <_malloc_r+0x4a>
 8005c52:	bf00      	nop
 8005c54:	2000413c 	.word	0x2000413c
 8005c58:	20004140 	.word	0x20004140

08005c5c <_sbrk_r>:
 8005c5c:	b538      	push	{r3, r4, r5, lr}
 8005c5e:	4d06      	ldr	r5, [pc, #24]	; (8005c78 <_sbrk_r+0x1c>)
 8005c60:	2300      	movs	r3, #0
 8005c62:	4604      	mov	r4, r0
 8005c64:	4608      	mov	r0, r1
 8005c66:	602b      	str	r3, [r5, #0]
 8005c68:	f7fc f8ee 	bl	8001e48 <_sbrk>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_sbrk_r+0x1a>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_sbrk_r+0x1a>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	200043f4 	.word	0x200043f4

08005c7c <__retarget_lock_acquire_recursive>:
 8005c7c:	4770      	bx	lr

08005c7e <__retarget_lock_release_recursive>:
 8005c7e:	4770      	bx	lr

08005c80 <__malloc_lock>:
 8005c80:	4801      	ldr	r0, [pc, #4]	; (8005c88 <__malloc_lock+0x8>)
 8005c82:	f7ff bffb 	b.w	8005c7c <__retarget_lock_acquire_recursive>
 8005c86:	bf00      	nop
 8005c88:	200043ec 	.word	0x200043ec

08005c8c <__malloc_unlock>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	; (8005c94 <__malloc_unlock+0x8>)
 8005c8e:	f7ff bff6 	b.w	8005c7e <__retarget_lock_release_recursive>
 8005c92:	bf00      	nop
 8005c94:	200043ec 	.word	0x200043ec

08005c98 <_init>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	bf00      	nop
 8005c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	469e      	mov	lr, r3
 8005ca2:	4770      	bx	lr

08005ca4 <_fini>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	bf00      	nop
 8005ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005caa:	bc08      	pop	{r3}
 8005cac:	469e      	mov	lr, r3
 8005cae:	4770      	bx	lr
