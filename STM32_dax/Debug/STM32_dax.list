
STM32_dax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  080054cc  080054cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056ac  080056ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080056ac  080056ac  000156ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056b4  080056b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056b8  080056b8  000156b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000070  0800572c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  0800572c  00020388  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf08  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002054  00000000  00000000  0002cfa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002f000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002f9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002835b  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6da  00000000  00000000  00058663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f47ad  00000000  00000000  00063d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001584ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002efc  00000000  00000000  00158540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080054b4 	.word	0x080054b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080054b4 	.word	0x080054b4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fda7 	bl	800112e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f824 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f93c 	bl	8000860 <MX_GPIO_Init>
  MX_I2S1_Init();
 80005e8:	f000 f8c2 	bl	8000770 <MX_I2S1_Init>
  MX_DMA_Init();
 80005ec:	f000 f91a 	bl	8000824 <MX_DMA_Init>
  MX_UART4_Init();
 80005f0:	f000 f8e8 	bl	80007c4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);
 80005f4:	2204      	movs	r2, #4
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <main+0x40>)
 80005f8:	4808      	ldr	r0, [pc, #32]	; (800061c <main+0x44>)
 80005fa:	f001 fee5 	bl	80023c8 <HAL_I2S_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer,MIDI_BUFFER_LENGTH);
 80005fe:	2208      	movs	r2, #8
 8000600:	4907      	ldr	r1, [pc, #28]	; (8000620 <main+0x48>)
 8000602:	4808      	ldr	r0, [pc, #32]	; (8000624 <main+0x4c>)
 8000604:	f003 fa53 	bl	8003aae <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  HAL_I2S_Transmit(&hi2s1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);
 8000608:	230a      	movs	r3, #10
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	4906      	ldr	r1, [pc, #24]	; (8000628 <main+0x50>)
 800060e:	4803      	ldr	r0, [pc, #12]	; (800061c <main+0x44>)
 8000610:	f001 fd20 	bl	8002054 <HAL_I2S_Transmit>
 8000614:	e7f8      	b.n	8000608 <main+0x30>
 8000616:	bf00      	nop
 8000618:	2000008c 	.word	0x2000008c
 800061c:	20000270 	.word	0x20000270
 8000620:	20000094 	.word	0x20000094
 8000624:	200002b0 	.word	0x200002b0
 8000628:	080054f4 	.word	0x080054f4

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0b8      	sub	sp, #224	; 0xe0
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000636:	2234      	movs	r2, #52	; 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f003 ffdc 	bl	80045f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2290      	movs	r2, #144	; 0x90
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f003 ffcd 	bl	80045f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b42      	ldr	r3, [pc, #264]	; (8000768 <SystemClock_Config+0x13c>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	4a41      	ldr	r2, [pc, #260]	; (8000768 <SystemClock_Config+0x13c>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	6413      	str	r3, [r2, #64]	; 0x40
 800066a:	4b3f      	ldr	r3, [pc, #252]	; (8000768 <SystemClock_Config+0x13c>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000676:	4b3d      	ldr	r3, [pc, #244]	; (800076c <SystemClock_Config+0x140>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800067e:	4a3b      	ldr	r2, [pc, #236]	; (800076c <SystemClock_Config+0x140>)
 8000680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	4b39      	ldr	r3, [pc, #228]	; (800076c <SystemClock_Config+0x140>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000692:	2302      	movs	r3, #2
 8000694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2310      	movs	r3, #16
 80006a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006b6:	2360      	movs	r3, #96	; 0x60
 80006b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 f85e 	bl	8002794 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006de:	f000 fb0f 	bl	8000d00 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e2:	f002 f807 	bl	80026f4 <HAL_PWREx_EnableOverDrive>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ec:	f000 fb08 	bl	8000d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000712:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000716:	2103      	movs	r1, #3
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fae9 	bl	8002cf0 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000724:	f000 faec 	bl	8000d00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2S;
 8000728:	f240 2301 	movw	r3, #513	; 0x201
 800072c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 800072e:	2360      	movs	r3, #96	; 0x60
 8000730:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000742:	2300      	movs	r3, #0
 8000744:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000746:	2300      	movs	r3, #0
 8000748:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fca4 	bl	800309c <HAL_RCCEx_PeriphCLKConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x132>
  {
    Error_Handler();
 800075a:	f000 fad1 	bl	8000d00 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	37e0      	adds	r7, #224	; 0xe0
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_I2S1_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_I2S1_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_I2S1_Init+0x4c>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_I2S1_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_I2S1_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_I2S1_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_I2S1_Init+0x4c>)
 8000796:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800079a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_I2S1_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_I2S1_Init+0x4c>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_I2S1_Init+0x4c>)
 80007aa:	f001 fb6d 	bl	8001e88 <HAL_I2S_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 80007b4:	f000 faa4 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000270 	.word	0x20000270
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_UART4_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_UART4_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_UART4_Init+0x58>)
 80007d0:	f647 2212 	movw	r2, #31250	; 0x7a12
 80007d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_UART4_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_UART4_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_UART4_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_UART4_Init+0x58>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_UART4_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_UART4_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_UART4_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_UART4_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_UART4_Init+0x58>)
 8000808:	f003 f870 	bl	80038ec <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 fa75 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200002b0 	.word	0x200002b0
 8000820:	40004c00 	.word	0x40004c00

08000824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_DMA_Init+0x38>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <MX_DMA_Init+0x38>)
 8000830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_DMA_Init+0x38>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	200d      	movs	r0, #13
 8000848:	f000 fda9 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800084c:	200d      	movs	r0, #13
 800084e:	f000 fdc2 	bl	80013d6 <HAL_NVIC_EnableIRQ>

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_GPIO_Init+0x8c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_GPIO_Init+0x8c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_GPIO_Init+0x8c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_GPIO_Init+0x8c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <MX_GPIO_Init+0x8c>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_GPIO_Init+0x8c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_GPIO_Init+0x8c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <MX_GPIO_Init+0x8c>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_GPIO_Init+0x8c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	480b      	ldr	r0, [pc, #44]	; (80008f0 <MX_GPIO_Init+0x90>)
 80008c4:	f001 fac6 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_GPIO_Init+0x90>)
 80008e0:	f001 f90c 	bl	8001afc <HAL_GPIO_Init>

}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020400 	.word	0x40020400

080008f4 <HAL_I2S_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2S_TxCpltCallback( I2S_HandleTypeDef *hi2s1){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
		HAL_I2S_Receive(&hi2s1, sendBuff, 8, 100);
 80008fc:	1d38      	adds	r0, r7, #4
 80008fe:	2364      	movs	r3, #100	; 0x64
 8000900:	2208      	movs	r2, #8
 8000902:	4906      	ldr	r1, [pc, #24]	; (800091c <HAL_I2S_TxCpltCallback+0x28>)
 8000904:	f001 fc97 	bl	8002236 <HAL_I2S_Receive>
		//HAL_I2S_(hi2s1, sendBuff, 16, 100);
		HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, 8);
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2208      	movs	r2, #8
 800090c:	4903      	ldr	r1, [pc, #12]	; (800091c <HAL_I2S_TxCpltCallback+0x28>)
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fd5a 	bl	80023c8 <HAL_I2S_Transmit_DMA>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000008c 	.word	0x2000008c

08000920 <processBuffer>:
	//HAL_I2S_(hi2s1, sendBuff, 16, 100);
	//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);

//}

void processBuffer(){
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
	__IO uint32_t received_char;

	int i = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
	int state = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]

	while(i < MIDI_BUFFER_LENGTH )
 800092e:	bf00      	nop
 8000930:	e192      	b.n	8000c58 <processBuffer+0x338>
	{
		received_char = UART4_rxBuffer[i];
 8000932:	4aaa      	ldr	r2, [pc, #680]	; (8000bdc <processBuffer+0x2bc>)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4413      	add	r3, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	2b29      	cmp	r3, #41	; 0x29
 8000940:	f200 818a 	bhi.w	8000c58 <processBuffer+0x338>
 8000944:	a201      	add	r2, pc, #4	; (adr r2, 800094c <processBuffer+0x2c>)
 8000946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094a:	bf00      	nop
 800094c:	080009f5 	.word	0x080009f5
 8000950:	08000c59 	.word	0x08000c59
 8000954:	08000c59 	.word	0x08000c59
 8000958:	08000c59 	.word	0x08000c59
 800095c:	08000c59 	.word	0x08000c59
 8000960:	08000c59 	.word	0x08000c59
 8000964:	08000c59 	.word	0x08000c59
 8000968:	08000c59 	.word	0x08000c59
 800096c:	08000c59 	.word	0x08000c59
 8000970:	08000c59 	.word	0x08000c59
 8000974:	08000a93 	.word	0x08000a93
 8000978:	08000ac7 	.word	0x08000ac7
 800097c:	08000c59 	.word	0x08000c59
 8000980:	08000c59 	.word	0x08000c59
 8000984:	08000c59 	.word	0x08000c59
 8000988:	08000c59 	.word	0x08000c59
 800098c:	08000c59 	.word	0x08000c59
 8000990:	08000c59 	.word	0x08000c59
 8000994:	08000c59 	.word	0x08000c59
 8000998:	08000c59 	.word	0x08000c59
 800099c:	08000b2d 	.word	0x08000b2d
 80009a0:	08000b61 	.word	0x08000b61
 80009a4:	08000c59 	.word	0x08000c59
 80009a8:	08000c59 	.word	0x08000c59
 80009ac:	08000c59 	.word	0x08000c59
 80009b0:	08000c59 	.word	0x08000c59
 80009b4:	08000c59 	.word	0x08000c59
 80009b8:	08000c59 	.word	0x08000c59
 80009bc:	08000c59 	.word	0x08000c59
 80009c0:	08000c59 	.word	0x08000c59
 80009c4:	08000b9b 	.word	0x08000b9b
 80009c8:	08000bc7 	.word	0x08000bc7
 80009cc:	08000c59 	.word	0x08000c59
 80009d0:	08000c59 	.word	0x08000c59
 80009d4:	08000c59 	.word	0x08000c59
 80009d8:	08000c59 	.word	0x08000c59
 80009dc:	08000c59 	.word	0x08000c59
 80009e0:	08000c59 	.word	0x08000c59
 80009e4:	08000c59 	.word	0x08000c59
 80009e8:	08000c59 	.word	0x08000c59
 80009ec:	08000c0d 	.word	0x08000c0d
 80009f0:	08000c39 	.word	0x08000c39

				// State 0 = Starting point for a new MIDI message

				case 0 :
				{
					switch (received_char & 0xF0)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009fa:	2be0      	cmp	r3, #224	; 0xe0
 80009fc:	d032      	beq.n	8000a64 <processBuffer+0x144>
 80009fe:	2be0      	cmp	r3, #224	; 0xe0
 8000a00:	d83c      	bhi.n	8000a7c <processBuffer+0x15c>
 8000a02:	2bb0      	cmp	r3, #176	; 0xb0
 8000a04:	d022      	beq.n	8000a4c <processBuffer+0x12c>
 8000a06:	2bb0      	cmp	r3, #176	; 0xb0
 8000a08:	d838      	bhi.n	8000a7c <processBuffer+0x15c>
 8000a0a:	2b80      	cmp	r3, #128	; 0x80
 8000a0c:	d00d      	beq.n	8000a2a <processBuffer+0x10a>
 8000a0e:	2b90      	cmp	r3, #144	; 0x90
 8000a10:	d134      	bne.n	8000a7c <processBuffer+0x15c>
					{

						case 0x90 :														// Note ON message
						{
							state = 10;													// Next state is 10
 8000a12:	230a      	movs	r3, #10
 8000a14:	60bb      	str	r3, [r7, #8]

							// printf ("note ON event\n");

							if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2b07      	cmp	r3, #7
 8000a1a:	d102      	bne.n	8000a22 <processBuffer+0x102>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
							else i ++;

							break;
 8000a20:	e036      	b.n	8000a90 <processBuffer+0x170>
							else i ++;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3301      	adds	r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
							break;
 8000a28:	e032      	b.n	8000a90 <processBuffer+0x170>
						}


						case 0x80 :														// Note OFF message
						{
							state = 20;	// Next state is 20
 8000a2a:	2314      	movs	r3, #20
 8000a2c:	60bb      	str	r3, [r7, #8]

							// printf ("note OFF event\n");
							stop_note(midimsg);
 8000a2e:	4b6c      	ldr	r3, [pc, #432]	; (8000be0 <processBuffer+0x2c0>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f954 	bl	8000ce0 <stop_note>

							if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2b07      	cmp	r3, #7
 8000a3c:	d102      	bne.n	8000a44 <processBuffer+0x124>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
							else i ++;

							break;
 8000a42:	e025      	b.n	8000a90 <processBuffer+0x170>
							else i ++;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3301      	adds	r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
							break;
 8000a4a:	e021      	b.n	8000a90 <processBuffer+0x170>
						}

						case 0xB0 :														// CC message
						{
							state = 30;													// Next state is 30
 8000a4c:	231e      	movs	r3, #30
 8000a4e:	60bb      	str	r3, [r7, #8]

							// printf ("CC event\n");

							if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b07      	cmp	r3, #7
 8000a54:	d102      	bne.n	8000a5c <processBuffer+0x13c>
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
							else i ++;

							break;
 8000a5a:	e019      	b.n	8000a90 <processBuffer+0x170>
							else i ++;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
							break;
 8000a62:	e015      	b.n	8000a90 <processBuffer+0x170>
						}

						case 0xE0 :														// Pitch Bend message
						{
							state = 40;													// Next state is 40
 8000a64:	2328      	movs	r3, #40	; 0x28
 8000a66:	60bb      	str	r3, [r7, #8]

							// printf ("PB event\n");

							if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2b07      	cmp	r3, #7
 8000a6c:	d102      	bne.n	8000a74 <processBuffer+0x154>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
							else i ++;

							break;
 8000a72:	e00d      	b.n	8000a90 <processBuffer+0x170>
							else i ++;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3301      	adds	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
							break;
 8000a7a:	e009      	b.n	8000a90 <processBuffer+0x170>
						}


						default :														// Other type of message, move to next byte but stays in state 0
						{
							if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b07      	cmp	r3, #7
 8000a80:	d102      	bne.n	8000a88 <processBuffer+0x168>
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
							else i ++;

							break;
 8000a86:	e002      	b.n	8000a8e <processBuffer+0x16e>
							else i ++;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
							break;
 8000a8e:	bf00      	nop
						}
					}

					break;
 8000a90:	e0e2      	b.n	8000c58 <processBuffer+0x338>

				// State 10 & 11 : Note ON command

				case 10 :
				{
					if (received_char>0x7F)												// If the following byte is not a note number
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b7f      	cmp	r3, #127	; 0x7f
 8000a96:	d902      	bls.n	8000a9e <processBuffer+0x17e>
					{
						state = 0;													// Return to state 0 without moving to next byte
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	e0dc      	b.n	8000c58 <processBuffer+0x338>
					}

					else
					{	// Save MIDI note
						ctrl = key = received_char;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <processBuffer+0x2c4>)
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	4b4f      	ldr	r3, [pc, #316]	; (8000be4 <processBuffer+0x2c4>)
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	4b4f      	ldr	r3, [pc, #316]	; (8000be8 <processBuffer+0x2c8>)
 8000aac:	701a      	strb	r2, [r3, #0]

						if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b07      	cmp	r3, #7
 8000ab2:	d102      	bne.n	8000aba <processBuffer+0x19a>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	e002      	b.n	8000ac0 <processBuffer+0x1a0>
						else i ++;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3301      	adds	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]

						state = 11;													// Next state is 11
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	60bb      	str	r3, [r7, #8]
					}

					break;
 8000ac4:	e0c8      	b.n	8000c58 <processBuffer+0x338>
				}

				case 11 :
				{
					data=velocity = received_char;										// Save MIDI velocity
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b48      	ldr	r3, [pc, #288]	; (8000bec <processBuffer+0x2cc>)
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	4b47      	ldr	r3, [pc, #284]	; (8000bec <processBuffer+0x2cc>)
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	4b47      	ldr	r3, [pc, #284]	; (8000bf0 <processBuffer+0x2d0>)
 8000ad4:	701a      	strb	r2, [r3, #0]


					if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;					// Move to next MIDI byte
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2b07      	cmp	r3, #7
 8000ada:	d102      	bne.n	8000ae2 <processBuffer+0x1c2>
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	e002      	b.n	8000ae8 <processBuffer+0x1c8>
					else i ++;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]

					state = 10;											// Next state is 10
 8000ae8:	230a      	movs	r3, #10
 8000aea:	60bb      	str	r3, [r7, #8]

					if (velocity > 0)
 8000aec:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <processBuffer+0x2cc>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d011      	beq.n	8000b18 <processBuffer+0x1f8>
					{
						printf ("Note ON : %d %d\n", midimsg, velocity);
 8000af4:	4b3a      	ldr	r3, [pc, #232]	; (8000be0 <processBuffer+0x2c0>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <processBuffer+0x2cc>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	483c      	ldr	r0, [pc, #240]	; (8000bf4 <processBuffer+0x2d4>)
 8000b02:	f003 fd81 	bl	8004608 <iprintf>
						play_note(midimsg,velocity);
 8000b06:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <processBuffer+0x2c0>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4a38      	ldr	r2, [pc, #224]	; (8000bec <processBuffer+0x2cc>)
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f8c7 	bl	8000ca4 <play_note>
 8000b16:	e09f      	b.n	8000c58 <processBuffer+0x338>
					}
					else
					{
						printf ("Note OFF : %d %d\n", midimsg, velocity);
 8000b18:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <processBuffer+0x2c0>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4b33      	ldr	r3, [pc, #204]	; (8000bec <processBuffer+0x2cc>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	4834      	ldr	r0, [pc, #208]	; (8000bf8 <processBuffer+0x2d8>)
 8000b26:	f003 fd6f 	bl	8004608 <iprintf>
					}


					break;
 8000b2a:	e095      	b.n	8000c58 <processBuffer+0x338>

				// State 20 & 21 : Note OFF command

				case 20 :
				{
					if (received_char>0x7F)												// If the following byte is not a note number
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b30:	d902      	bls.n	8000b38 <processBuffer+0x218>
					{
						state = 0;													// Return to state 0 without moving to next byte
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	e08f      	b.n	8000c58 <processBuffer+0x338>
					}

					else
					{
						ctrl= key = received_char;										// Save MIDI note
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <processBuffer+0x2c4>)
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <processBuffer+0x2c4>)
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <processBuffer+0x2c8>)
 8000b46:	701a      	strb	r2, [r3, #0]

						if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b07      	cmp	r3, #7
 8000b4c:	d102      	bne.n	8000b54 <processBuffer+0x234>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	e002      	b.n	8000b5a <processBuffer+0x23a>
						else i ++;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	3301      	adds	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]

						state = 21;													// Next state is 21
 8000b5a:	2315      	movs	r3, #21
 8000b5c:	60bb      	str	r3, [r7, #8]
					}

					break;
 8000b5e:	e07b      	b.n	8000c58 <processBuffer+0x338>
				}

				case 21 :
				{
					velocity =data = received_char;										// Save MIDI velocity
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <processBuffer+0x2d0>)
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <processBuffer+0x2d0>)
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <processBuffer+0x2cc>)
 8000b6e:	701a      	strb	r2, [r3, #0]

					if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;					// Move to next MIDI byte
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2b07      	cmp	r3, #7
 8000b74:	d102      	bne.n	8000b7c <processBuffer+0x25c>
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	e002      	b.n	8000b82 <processBuffer+0x262>
					else i ++;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]

					state = 20;														// Next state is 20
 8000b82:	2314      	movs	r3, #20
 8000b84:	60bb      	str	r3, [r7, #8]

					printf ("Note OFF : %d %d\n", midimsg, velocity);
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <processBuffer+0x2c0>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <processBuffer+0x2cc>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4819      	ldr	r0, [pc, #100]	; (8000bf8 <processBuffer+0x2d8>)
 8000b94:	f003 fd38 	bl	8004608 <iprintf>

					break;
 8000b98:	e05e      	b.n	8000c58 <processBuffer+0x338>

				// State 30 & 31 : CC command

				case 30 :
				{
					if (received_char>0x7F)												// If the following byte is not a CC number
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b9e:	d902      	bls.n	8000ba6 <processBuffer+0x286>
					{
						state = 0;													// Return to state 0 without moving to next byte
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	e058      	b.n	8000c58 <processBuffer+0x338>
					}

					else
					{
						param = received_char;									// Save MIDI CC number
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <processBuffer+0x2dc>)
 8000bac:	701a      	strb	r2, [r3, #0]

						if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2b07      	cmp	r3, #7
 8000bb2:	d102      	bne.n	8000bba <processBuffer+0x29a>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	e002      	b.n	8000bc0 <processBuffer+0x2a0>
						else i ++;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]

						state = 31;													// Next state is 31
 8000bc0:	231f      	movs	r3, #31
 8000bc2:	60bb      	str	r3, [r7, #8]
					}

					break;
 8000bc4:	e048      	b.n	8000c58 <processBuffer+0x338>
				}

				case 31 :
				{
					param = received_char;										// Save MIDI velocity
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <processBuffer+0x2dc>)
 8000bcc:	701a      	strb	r2, [r3, #0]

					if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;					// Move to next MIDI byte
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b07      	cmp	r3, #7
 8000bd2:	d115      	bne.n	8000c00 <processBuffer+0x2e0>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	e015      	b.n	8000c06 <processBuffer+0x2e6>
 8000bda:	bf00      	nop
 8000bdc:	20000094 	.word	0x20000094
 8000be0:	20000335 	.word	0x20000335
 8000be4:	20000250 	.word	0x20000250
 8000be8:	20000180 	.word	0x20000180
 8000bec:	200001fc 	.word	0x200001fc
 8000bf0:	20000219 	.word	0x20000219
 8000bf4:	080054cc 	.word	0x080054cc
 8000bf8:	080054e0 	.word	0x080054e0
 8000bfc:	20000139 	.word	0x20000139
					else i ++;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3301      	adds	r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]

					state = 30;														// Next state is 30
 8000c06:	231e      	movs	r3, #30
 8000c08:	60bb      	str	r3, [r7, #8]

					break;
 8000c0a:	e025      	b.n	8000c58 <processBuffer+0x338>

				// State 40 & 41 : Pitch Bend message

				case 40 :
				{
					if (received_char > 0x7F)												// If following byte is note a PB value
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c10:	d902      	bls.n	8000c18 <processBuffer+0x2f8>
					{
						state = 0;													// Return to state 0
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	e01f      	b.n	8000c58 <processBuffer+0x338>
					}

					else
					{
						param = received_char;									// Save MIDI CC number
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <processBuffer+0x34c>)
 8000c1e:	701a      	strb	r2, [r3, #0]

						if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b07      	cmp	r3, #7
 8000c24:	d102      	bne.n	8000c2c <processBuffer+0x30c>
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	e002      	b.n	8000c32 <processBuffer+0x312>
						else i ++;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]

						state = 41;													// Next state is 41
 8000c32:	2329      	movs	r3, #41	; 0x29
 8000c34:	60bb      	str	r3, [r7, #8]
					}

					break;
 8000c36:	e00f      	b.n	8000c58 <processBuffer+0x338>
				}

				case 41 :
				{
					param = received_char;										// Save MIDI velocity
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <processBuffer+0x34c>)
 8000c3e:	701a      	strb	r2, [r3, #0]

					if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;					// Move to next MIDI byte
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d102      	bne.n	8000c4c <processBuffer+0x32c>
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	e002      	b.n	8000c52 <processBuffer+0x332>
					else i ++;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]

					state = 40;														// Next state is 00
 8000c52:	2328      	movs	r3, #40	; 0x28
 8000c54:	60bb      	str	r3, [r7, #8]

					break;
 8000c56:	bf00      	nop
	while(i < MIDI_BUFFER_LENGTH )
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b07      	cmp	r3, #7
 8000c5c:	f77f ae69 	ble.w	8000932 <processBuffer+0x12>
				}
			}
	}
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000139 	.word	0x20000139

08000c70 <HAL_UART_RxCpltCallback>:
}
*/

//buffer is full here, do something when full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
 8000c78:	2364      	movs	r3, #100	; 0x64
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	4907      	ldr	r1, [pc, #28]	; (8000c9c <HAL_UART_RxCpltCallback+0x2c>)
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <HAL_UART_RxCpltCallback+0x30>)
 8000c80:	f002 fe82 	bl	8003988 <HAL_UART_Transmit>
    HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 8000c84:	2208      	movs	r2, #8
 8000c86:	4905      	ldr	r1, [pc, #20]	; (8000c9c <HAL_UART_RxCpltCallback+0x2c>)
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_UART_RxCpltCallback+0x30>)
 8000c8a:	f002 ff10 	bl	8003aae <HAL_UART_Receive_DMA>

    processBuffer();
 8000c8e:	f7ff fe47 	bl	8000920 <processBuffer>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000094 	.word	0x20000094
 8000ca0:	200002b0 	.word	0x200002b0

08000ca4 <play_note>:
					break;
	}
}

// TO DO: RARELY GETS TO 0X90 MESSAGE, CHECK HOW WE EMPTY THE BUFFER
void play_note(uint8_t note, uint8_t velocity){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	460a      	mov	r2, r1
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	71bb      	strb	r3, [r7, #6]
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <play_note+0x30>)
 8000cba:	f001 f8cb 	bl	8001e54 <HAL_GPIO_WritePin>
	memcpy(sendBuff, triangle_wave, AUDIO_BUFFER_LENGTH*2);
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <play_note+0x34>)
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <play_note+0x38>)
 8000cc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cc6:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	2000008c 	.word	0x2000008c
 8000cdc:	080054f4 	.word	0x080054f4

08000ce0 <stop_note>:

void stop_note(uint8_t note){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	4803      	ldr	r0, [pc, #12]	; (8000cfc <stop_note+0x1c>)
 8000cf0:	f001 f8b0 	bl	8001e54 <HAL_GPIO_WritePin>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40020400 	.word	0x40020400

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_MspInit+0x44>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <HAL_MspInit+0x44>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <HAL_MspInit+0x44>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_MspInit+0x44>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x44>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x44>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <HAL_I2S_MspInit+0x7c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d127      	bne.n	8000dc6 <HAL_I2S_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_I2S_MspInit+0x80>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <HAL_I2S_MspInit+0x80>)
 8000d7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_I2S_MspInit+0x80>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_I2S_MspInit+0x80>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <HAL_I2S_MspInit+0x80>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_I2S_MspInit+0x80>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000da6:	23b0      	movs	r3, #176	; 0xb0
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db6:	2305      	movs	r3, #5
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <HAL_I2S_MspInit+0x84>)
 8000dc2:	f000 fe9b 	bl	8001afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40013000 	.word	0x40013000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a3d      	ldr	r2, [pc, #244]	; (8000ef0 <HAL_UART_MspInit+0x114>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d173      	bne.n	8000ee6 <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dfe:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <HAL_UART_MspInit+0x118>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a3c      	ldr	r2, [pc, #240]	; (8000ef4 <HAL_UART_MspInit+0x118>)
 8000e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <HAL_UART_MspInit+0x118>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <HAL_UART_MspInit+0x118>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a36      	ldr	r2, [pc, #216]	; (8000ef4 <HAL_UART_MspInit+0x118>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <HAL_UART_MspInit+0x118>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <HAL_UART_MspInit+0x118>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a30      	ldr	r2, [pc, #192]	; (8000ef4 <HAL_UART_MspInit+0x118>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <HAL_UART_MspInit+0x118>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e56:	2308      	movs	r3, #8
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4825      	ldr	r0, [pc, #148]	; (8000ef8 <HAL_UART_MspInit+0x11c>)
 8000e62:	f000 fe4b 	bl	8001afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e78:	2308      	movs	r3, #8
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	481e      	ldr	r0, [pc, #120]	; (8000efc <HAL_UART_MspInit+0x120>)
 8000e84:	f000 fe3a 	bl	8001afc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_UART_MspInit+0x124>)
 8000e8a:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <HAL_UART_MspInit+0x128>)
 8000e8c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_UART_MspInit+0x124>)
 8000e90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <HAL_UART_MspInit+0x124>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <HAL_UART_MspInit+0x124>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_UART_MspInit+0x124>)
 8000ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_UART_MspInit+0x124>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <HAL_UART_MspInit+0x124>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_UART_MspInit+0x124>)
 8000eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ebc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_UART_MspInit+0x124>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_UART_MspInit+0x124>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <HAL_UART_MspInit+0x124>)
 8000ecc:	f000 fa9e 	bl	800140c <HAL_DMA_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8000ed6:	f7ff ff13 	bl	8000d00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <HAL_UART_MspInit+0x124>)
 8000ede:	671a      	str	r2, [r3, #112]	; 0x70
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_UART_MspInit+0x124>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	; 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40004c00 	.word	0x40004c00
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020800 	.word	0x40020800
 8000f00:	200000d8 	.word	0x200000d8
 8000f04:	40026040 	.word	0x40026040

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f54:	f000 f928 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <DMA1_Stream2_IRQHandler+0x10>)
 8000f62:	f000 fb61 	bl	8001628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000d8 	.word	0x200000d8

08000f70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e00a      	b.n	8000f98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f82:	f3af 8000 	nop.w
 8000f86:	4601      	mov	r1, r0
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbf0      	blt.n	8000f82 <_read+0x12>
	}

return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e009      	b.n	8000fd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbf1      	blt.n	8000fbc <_write+0x12>
	}
	return len;
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_close>:

int _close(int file)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	return -1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100a:	605a      	str	r2, [r3, #4]
	return 0;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_isatty>:

int _isatty(int file)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	return 1;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f003 fa92 	bl	80045a4 <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20080000 	.word	0x20080000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	2000009c 	.word	0x2000009c
 80010b4:	20000388 	.word	0x20000388

080010b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <SystemInit+0x20>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <SystemInit+0x20>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001114 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010e2:	490e      	ldr	r1, [pc, #56]	; (800111c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e4:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f8:	4c0b      	ldr	r4, [pc, #44]	; (8001128 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001106:	f7ff ffd7 	bl	80010b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110a:	f003 fa51 	bl	80045b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110e:	f7ff fa63 	bl	80005d8 <main>
  bx  lr    
 8001112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001120:	080056bc 	.word	0x080056bc
  ldr r2, =_sbss
 8001124:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001128:	20000388 	.word	0x20000388

0800112c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC_IRQHandler>

0800112e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001132:	2003      	movs	r0, #3
 8001134:	f000 f928 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001138:	200f      	movs	r0, #15
 800113a:	f000 f805 	bl	8001148 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800113e:	f7ff fde5 	bl	8000d0c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f943 	bl	80013f2 <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 f90b 	bl	800139e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000374 	.word	0x20000374

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000374 	.word	0x20000374

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <__NVIC_SetPriorityGrouping+0x40>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	4313      	orrs	r3, r2
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <__NVIC_SetPriorityGrouping+0x40>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00
 800122c:	05fa0000 	.word	0x05fa0000

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	; (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f7ff ff8e 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff29 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b0:	f7ff ff3e 	bl	8001230 <__NVIC_GetPriorityGrouping>
 80013b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff ff8e 	bl	80012dc <NVIC_EncodePriority>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5d 	bl	8001288 <__NVIC_SetPriority>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff31 	bl	800124c <__NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffa2 	bl	8001344 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff feda 	bl	80011d0 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e099      	b.n	800155c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2202      	movs	r2, #2
 8001434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001448:	e00f      	b.n	800146a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800144a:	f7ff fec1 	bl	80011d0 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b05      	cmp	r3, #5
 8001456:	d908      	bls.n	800146a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2220      	movs	r2, #32
 800145c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e078      	b.n	800155c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1e8      	bne.n	800144a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	4b38      	ldr	r3, [pc, #224]	; (8001564 <HAL_DMA_Init+0x158>)
 8001484:	4013      	ands	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d107      	bne.n	80014d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	4313      	orrs	r3, r2
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f023 0307 	bic.w	r3, r3, #7
 80014ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d117      	bne.n	800152e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4313      	orrs	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00e      	beq.n	800152e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fa77 	bl	8001a04 <DMA_CheckFifoParam>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2240      	movs	r2, #64	; 0x40
 8001520:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800152a:	2301      	movs	r3, #1
 800152c:	e016      	b.n	800155c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 fa2e 	bl	8001998 <DMA_CalcBaseAndBitshift>
 800153c:	4603      	mov	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001544:	223f      	movs	r2, #63	; 0x3f
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	e010803f 	.word	0xe010803f

08001568 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_DMA_Start_IT+0x26>
 800158a:	2302      	movs	r3, #2
 800158c:	e048      	b.n	8001620 <HAL_DMA_Start_IT+0xb8>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d137      	bne.n	8001612 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2202      	movs	r2, #2
 80015a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 f9c0 	bl	800193c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	223f      	movs	r2, #63	; 0x3f
 80015c2:	409a      	lsls	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0216 	orr.w	r2, r2, #22
 80015d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d007      	beq.n	8001600 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0208 	orr.w	r2, r2, #8
 80015fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e005      	b.n	800161e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800161a:	2302      	movs	r3, #2
 800161c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800161e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001634:	4b92      	ldr	r3, [pc, #584]	; (8001880 <HAL_DMA_IRQHandler+0x258>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a92      	ldr	r2, [pc, #584]	; (8001884 <HAL_DMA_IRQHandler+0x25c>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0a9b      	lsrs	r3, r3, #10
 8001640:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001652:	2208      	movs	r2, #8
 8001654:	409a      	lsls	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01a      	beq.n	8001694 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0204 	bic.w	r2, r2, #4
 800167a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	2208      	movs	r2, #8
 8001682:	409a      	lsls	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	2201      	movs	r2, #1
 800169a:	409a      	lsls	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d012      	beq.n	80016ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00b      	beq.n	80016ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b6:	2201      	movs	r2, #1
 80016b8:	409a      	lsls	r2, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c2:	f043 0202 	orr.w	r2, r3, #2
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ce:	2204      	movs	r2, #4
 80016d0:	409a      	lsls	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d012      	beq.n	8001700 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00b      	beq.n	8001700 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	2204      	movs	r2, #4
 80016ee:	409a      	lsls	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f8:	f043 0204 	orr.w	r2, r3, #4
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	2210      	movs	r2, #16
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d043      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d03c      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001722:	2210      	movs	r2, #16
 8001724:	409a      	lsls	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d018      	beq.n	800176a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d108      	bne.n	8001758 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d024      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
 8001756:	e01f      	b.n	8001798 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175c:	2b00      	cmp	r3, #0
 800175e:	d01b      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4798      	blx	r3
 8001768:	e016      	b.n	8001798 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0208 	bic.w	r2, r2, #8
 8001786:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179c:	2220      	movs	r2, #32
 800179e:	409a      	lsls	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 808e 	beq.w	80018c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 8086 	beq.w	80018c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017be:	2220      	movs	r2, #32
 80017c0:	409a      	lsls	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	d136      	bne.n	8001840 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0216 	bic.w	r2, r2, #22
 80017e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d103      	bne.n	8001802 <HAL_DMA_IRQHandler+0x1da>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0208 	bic.w	r2, r2, #8
 8001810:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	223f      	movs	r2, #63	; 0x3f
 8001818:	409a      	lsls	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001832:	2b00      	cmp	r3, #0
 8001834:	d07d      	beq.n	8001932 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	4798      	blx	r3
        }
        return;
 800183e:	e078      	b.n	8001932 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d01c      	beq.n	8001888 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d108      	bne.n	800186e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	2b00      	cmp	r3, #0
 8001862:	d030      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
 800186c:	e02b      	b.n	80018c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001872:	2b00      	cmp	r3, #0
 8001874:	d027      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4798      	blx	r3
 800187e:	e022      	b.n	80018c6 <HAL_DMA_IRQHandler+0x29e>
 8001880:	20000000 	.word	0x20000000
 8001884:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10f      	bne.n	80018b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0210 	bic.w	r2, r2, #16
 80018a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d032      	beq.n	8001934 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d022      	beq.n	8001920 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2205      	movs	r2, #5
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0201 	bic.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	3301      	adds	r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d307      	bcc.n	800190e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f2      	bne.n	80018f2 <HAL_DMA_IRQHandler+0x2ca>
 800190c:	e000      	b.n	8001910 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800190e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
 8001930:	e000      	b.n	8001934 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001932:	bf00      	nop
    }
  }
}
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop

0800193c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001958:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b40      	cmp	r3, #64	; 0x40
 8001968:	d108      	bne.n	800197c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800197a:	e007      	b.n	800198c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	3b10      	subs	r3, #16
 80019a8:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <DMA_CalcBaseAndBitshift+0x60>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <DMA_CalcBaseAndBitshift+0x64>)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d908      	bls.n	80019d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <DMA_CalcBaseAndBitshift+0x68>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	1d1a      	adds	r2, r3, #4
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	659a      	str	r2, [r3, #88]	; 0x58
 80019d6:	e006      	b.n	80019e6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <DMA_CalcBaseAndBitshift+0x68>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	aaaaaaab 	.word	0xaaaaaaab
 80019fc:	0800560c 	.word	0x0800560c
 8001a00:	fffffc00 	.word	0xfffffc00

08001a04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d11f      	bne.n	8001a5e <DMA_CheckFifoParam+0x5a>
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d856      	bhi.n	8001ad2 <DMA_CheckFifoParam+0xce>
 8001a24:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <DMA_CheckFifoParam+0x28>)
 8001a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2a:	bf00      	nop
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a4f 	.word	0x08001a4f
 8001a34:	08001a3d 	.word	0x08001a3d
 8001a38:	08001ad3 	.word	0x08001ad3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d046      	beq.n	8001ad6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a4c:	e043      	b.n	8001ad6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a56:	d140      	bne.n	8001ada <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a5c:	e03d      	b.n	8001ada <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a66:	d121      	bne.n	8001aac <DMA_CheckFifoParam+0xa8>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d837      	bhi.n	8001ade <DMA_CheckFifoParam+0xda>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <DMA_CheckFifoParam+0x70>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001a85 	.word	0x08001a85
 8001a78:	08001a8b 	.word	0x08001a8b
 8001a7c:	08001a85 	.word	0x08001a85
 8001a80:	08001a9d 	.word	0x08001a9d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
      break;
 8001a88:	e030      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d025      	beq.n	8001ae2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a9a:	e022      	b.n	8001ae2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aa4:	d11f      	bne.n	8001ae6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001aaa:	e01c      	b.n	8001ae6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d903      	bls.n	8001aba <DMA_CheckFifoParam+0xb6>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d003      	beq.n	8001ac0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ab8:	e018      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
      break;
 8001abe:	e015      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00e      	beq.n	8001aea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad0:	e00b      	b.n	8001aea <DMA_CheckFifoParam+0xe6>
      break;
 8001ad2:	bf00      	nop
 8001ad4:	e00a      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001ad6:	bf00      	nop
 8001ad8:	e008      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001ada:	bf00      	nop
 8001adc:	e006      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001ade:	bf00      	nop
 8001ae0:	e004      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001ae2:	bf00      	nop
 8001ae4:	e002      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;   
 8001ae6:	bf00      	nop
 8001ae8:	e000      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001aea:	bf00      	nop
    }
  } 
  
  return status; 
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	e175      	b.n	8001e08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	f040 8164 	bne.w	8001e02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d00b      	beq.n	8001b5a <HAL_GPIO_Init+0x5e>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d007      	beq.n	8001b5a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4e:	2b11      	cmp	r3, #17
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b12      	cmp	r3, #18
 8001b58:	d130      	bne.n	8001bbc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 0201 	and.w	r2, r3, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x100>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b12      	cmp	r3, #18
 8001bfa:	d123      	bne.n	8001c44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	08da      	lsrs	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3208      	adds	r2, #8
 8001c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	08da      	lsrs	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3208      	adds	r2, #8
 8001c3e:	69b9      	ldr	r1, [r7, #24]
 8001c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0203 	and.w	r2, r3, #3
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80be 	beq.w	8001e02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	4b66      	ldr	r3, [pc, #408]	; (8001e20 <HAL_GPIO_Init+0x324>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a65      	ldr	r2, [pc, #404]	; (8001e20 <HAL_GPIO_Init+0x324>)
 8001c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b63      	ldr	r3, [pc, #396]	; (8001e20 <HAL_GPIO_Init+0x324>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c9e:	4a61      	ldr	r2, [pc, #388]	; (8001e24 <HAL_GPIO_Init+0x328>)
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <HAL_GPIO_Init+0x32c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d037      	beq.n	8001d3a <HAL_GPIO_Init+0x23e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a57      	ldr	r2, [pc, #348]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d031      	beq.n	8001d36 <HAL_GPIO_Init+0x23a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a56      	ldr	r2, [pc, #344]	; (8001e30 <HAL_GPIO_Init+0x334>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d02b      	beq.n	8001d32 <HAL_GPIO_Init+0x236>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a55      	ldr	r2, [pc, #340]	; (8001e34 <HAL_GPIO_Init+0x338>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d025      	beq.n	8001d2e <HAL_GPIO_Init+0x232>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a54      	ldr	r2, [pc, #336]	; (8001e38 <HAL_GPIO_Init+0x33c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d01f      	beq.n	8001d2a <HAL_GPIO_Init+0x22e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a53      	ldr	r2, [pc, #332]	; (8001e3c <HAL_GPIO_Init+0x340>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d019      	beq.n	8001d26 <HAL_GPIO_Init+0x22a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <HAL_GPIO_Init+0x344>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_GPIO_Init+0x226>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a51      	ldr	r2, [pc, #324]	; (8001e44 <HAL_GPIO_Init+0x348>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00d      	beq.n	8001d1e <HAL_GPIO_Init+0x222>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a50      	ldr	r2, [pc, #320]	; (8001e48 <HAL_GPIO_Init+0x34c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d007      	beq.n	8001d1a <HAL_GPIO_Init+0x21e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4f      	ldr	r2, [pc, #316]	; (8001e4c <HAL_GPIO_Init+0x350>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_GPIO_Init+0x21a>
 8001d12:	2309      	movs	r3, #9
 8001d14:	e012      	b.n	8001d3c <HAL_GPIO_Init+0x240>
 8001d16:	230a      	movs	r3, #10
 8001d18:	e010      	b.n	8001d3c <HAL_GPIO_Init+0x240>
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	e00e      	b.n	8001d3c <HAL_GPIO_Init+0x240>
 8001d1e:	2307      	movs	r3, #7
 8001d20:	e00c      	b.n	8001d3c <HAL_GPIO_Init+0x240>
 8001d22:	2306      	movs	r3, #6
 8001d24:	e00a      	b.n	8001d3c <HAL_GPIO_Init+0x240>
 8001d26:	2305      	movs	r3, #5
 8001d28:	e008      	b.n	8001d3c <HAL_GPIO_Init+0x240>
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x240>
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e004      	b.n	8001d3c <HAL_GPIO_Init+0x240>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e002      	b.n	8001d3c <HAL_GPIO_Init+0x240>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_GPIO_Init+0x240>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	f002 0203 	and.w	r2, r2, #3
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	4093      	lsls	r3, r2
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d4c:	4935      	ldr	r1, [pc, #212]	; (8001e24 <HAL_GPIO_Init+0x328>)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	3302      	adds	r3, #2
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <HAL_GPIO_Init+0x354>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d7e:	4a34      	ldr	r2, [pc, #208]	; (8001e50 <HAL_GPIO_Init+0x354>)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d84:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <HAL_GPIO_Init+0x354>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001da8:	4a29      	ldr	r2, [pc, #164]	; (8001e50 <HAL_GPIO_Init+0x354>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dae:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <HAL_GPIO_Init+0x354>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd2:	4a1f      	ldr	r2, [pc, #124]	; (8001e50 <HAL_GPIO_Init+0x354>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_GPIO_Init+0x354>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dfc:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <HAL_GPIO_Init+0x354>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3301      	adds	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	2b0f      	cmp	r3, #15
 8001e0c:	f67f ae86 	bls.w	8001b1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40013800 	.word	0x40013800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40021400 	.word	0x40021400
 8001e40:	40021800 	.word	0x40021800
 8001e44:	40021c00 	.word	0x40021c00
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40022400 	.word	0x40022400
 8001e50:	40013c00 	.word	0x40013c00

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e70:	e003      	b.n	8001e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	619a      	str	r2, [r3, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0d2      	b.n	8002040 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe ff50 	bl	8000d54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69d9      	ldr	r1, [r3, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4b60      	ldr	r3, [pc, #384]	; (8002048 <HAL_I2S_Init+0x1c0>)
 8001ec8:	400b      	ands	r3, r1
 8001eca:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d067      	beq.n	8001fac <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001ee4:	2310      	movs	r3, #16
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	e001      	b.n	8001eee <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001eea:	2320      	movs	r3, #32
 8001eec:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d802      	bhi.n	8001efc <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d102      	bne.n	8001f0a <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8001f04:	4b51      	ldr	r3, [pc, #324]	; (800204c <HAL_I2S_Init+0x1c4>)
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e003      	b.n	8001f12 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fb18 	bl	8002540 <I2S_GetClockFreq>
 8001f10:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f1a:	d125      	bne.n	8001f68 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d010      	beq.n	8001f46 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	461a      	mov	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	3305      	adds	r3, #5
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	e01f      	b.n	8001f86 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	461a      	mov	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	3305      	adds	r3, #5
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	e00e      	b.n	8001f86 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	461a      	mov	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	3305      	adds	r3, #5
 8001f84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4a31      	ldr	r2, [pc, #196]	; (8002050 <HAL_I2S_Init+0x1c8>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	08db      	lsrs	r3, r3, #3
 8001f90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	085b      	lsrs	r3, r3, #1
 8001fa2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	e003      	b.n	8001fb4 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001fac:	2302      	movs	r3, #2
 8001fae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d902      	bls.n	8001fc0 <HAL_I2S_Init+0x138>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	2bff      	cmp	r3, #255	; 0xff
 8001fbe:	d907      	bls.n	8001fd0 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc4:	f043 0210 	orr.w	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e037      	b.n	8002040 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	ea42 0103 	orr.w	r1, r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_I2S_Init+0x1c0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6851      	ldr	r1, [r2, #4]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6892      	ldr	r2, [r2, #8]
 8001ff6:	4311      	orrs	r1, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68d2      	ldr	r2, [r2, #12]
 8001ffc:	4311      	orrs	r1, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6992      	ldr	r2, [r2, #24]
 8002002:	430a      	orrs	r2, r1
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800200e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b30      	cmp	r3, #48	; 0x30
 8002016:	d003      	beq.n	8002020 <HAL_I2S_Init+0x198>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2bb0      	cmp	r3, #176	; 0xb0
 800201e:	d107      	bne.n	8002030 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800202e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	fffff040 	.word	0xfffff040
 800204c:	00bb8000 	.word	0x00bb8000
 8002050:	cccccccd 	.word	0xcccccccd

08002054 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_I2S_Transmit+0x1c>
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0dc      	b.n	800222e <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_I2S_Transmit+0x30>
 8002080:	2302      	movs	r3, #2
 8002082:	e0d4      	b.n	800222e <HAL_I2S_Transmit+0x1da>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d005      	beq.n	80020a4 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 80020a0:	2302      	movs	r3, #2
 80020a2:	e0c4      	b.n	800222e <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2203      	movs	r2, #3
 80020a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pTxBuffPtr = pData;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	621a      	str	r2, [r3, #32]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d002      	beq.n	80020d0 <HAL_I2S_Transmit+0x7c>
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d10a      	bne.n	80020e6 <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = (Size << 1U);
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	84da      	strh	r2, [r3, #38]	; 0x26
 80020e4:	e005      	b.n	80020f2 <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	88fa      	ldrh	r2, [r7, #6]
 80020ea:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = Size;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	88fa      	ldrh	r2, [r7, #6]
 80020f0:	84da      	strh	r2, [r3, #38]	; 0x26
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002108:	d007      	beq.n	800211a <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69da      	ldr	r2, [r3, #28]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002118:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	2102      	movs	r1, #2
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 faae 	bl	8002682 <I2S_WaitFlagStateUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d04e      	beq.n	80021ca <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	f043 0201 	orr.w	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    __HAL_UNLOCK(hi2s);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e070      	b.n	800222e <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	881a      	ldrh	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	1c9a      	adds	r2, r3, #2
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	621a      	str	r2, [r3, #32]
    hi2s->TxXferCount--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2201      	movs	r2, #1
 8002174:	2102      	movs	r1, #2
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fa83 	bl	8002682 <I2S_WaitFlagStateUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00f      	beq.n	80021a2 <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	f043 0201 	orr.w	r2, r3, #1
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      __HAL_UNLOCK(hi2s);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e045      	b.n	800222e <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d10c      	bne.n	80021ca <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80021b0:	2300      	movs	r3, #0
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	f043 0204 	orr.w	r2, r3, #4
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	63da      	str	r2, [r3, #60]	; 0x3c
  while (hi2s->TxXferCount > 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1bb      	bne.n	800214c <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e8:	d118      	bne.n	800221c <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2200      	movs	r2, #0
 80021ee:	2180      	movs	r1, #128	; 0x80
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 fa46 	bl	8002682 <I2S_WaitFlagStateUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00f      	beq.n	800221c <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      __HAL_UNLOCK(hi2s);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e008      	b.n	800222e <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  __HAL_UNLOCK(hi2s);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b088      	sub	sp, #32
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_I2S_Receive+0x1c>
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0b4      	b.n	80023c0 <HAL_I2S_Receive+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_I2S_Receive+0x30>
 8002262:	2302      	movs	r3, #2
 8002264:	e0ac      	b.n	80023c0 <HAL_I2S_Receive+0x18a>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b01      	cmp	r3, #1
 8002278:	d005      	beq.n	8002286 <HAL_I2S_Receive+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 8002282:	2302      	movs	r3, #2
 8002284:	e09c      	b.n	80023c0 <HAL_I2S_Receive+0x18a>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2204      	movs	r2, #4
 800228a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pRxBuffPtr = pData;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	629a      	str	r2, [r3, #40]	; 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d002      	beq.n	80022b2 <HAL_I2S_Receive+0x7c>
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d10a      	bne.n	80022c8 <HAL_I2S_Receive+0x92>
  {
    hi2s->RxXferSize = (Size << 1U);
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = (Size << 1U);
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	85da      	strh	r2, [r3, #46]	; 0x2e
 80022c6:	e005      	b.n	80022d4 <HAL_I2S_Receive+0x9e>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	88fa      	ldrh	r2, [r7, #6]
 80022cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = Size;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	88fa      	ldrh	r2, [r7, #6]
 80022d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e2:	d007      	beq.n	80022f4 <HAL_I2S_Receive+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69da      	ldr	r2, [r3, #28]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022f2:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002302:	d14f      	bne.n	80023a4 <HAL_I2S_Receive+0x16e>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 800231a:	e043      	b.n	80023a4 <HAL_I2S_Receive+0x16e>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2201      	movs	r2, #1
 8002320:	2101      	movs	r1, #1
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f9ad 	bl	8002682 <I2S_WaitFlagStateUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00f      	beq.n	800234e <HAL_I2S_Receive+0x118>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      __HAL_UNLOCK(hi2s);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e038      	b.n	80023c0 <HAL_I2S_Receive+0x18a>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	b292      	uxth	r2, r2
 800235a:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	1c9a      	adds	r2, r3, #2
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
    hi2s->RxXferCount--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237e:	2b40      	cmp	r3, #64	; 0x40
 8002380:	d110      	bne.n	80023a4 <HAL_I2S_Receive+0x16e>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	f043 0202 	orr.w	r2, r3, #2
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c
  while (hi2s->RxXferCount > 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1b6      	bne.n	800231c <HAL_I2S_Receive+0xe6>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  __HAL_UNLOCK(hi2s);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	4613      	mov	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_I2S_Transmit_DMA+0x1a>
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e08e      	b.n	8002504 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_I2S_Transmit_DMA+0x2e>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e086      	b.n	8002504 <HAL_I2S_Transmit_DMA+0x13c>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d005      	beq.n	8002416 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 8002412:	2302      	movs	r3, #2
 8002414:	e076      	b.n	8002504 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2203      	movs	r2, #3
 800241a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pTxBuffPtr = pData;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	621a      	str	r2, [r3, #32]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d002      	beq.n	8002442 <HAL_I2S_Transmit_DMA+0x7a>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d10a      	bne.n	8002458 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = (Size << 1U);
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	84da      	strh	r2, [r3, #38]	; 0x26
 8002456:	e005      	b.n	8002464 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	88fa      	ldrh	r2, [r7, #6]
 8002462:	84da      	strh	r2, [r3, #38]	; 0x26
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4a28      	ldr	r2, [pc, #160]	; (800250c <HAL_I2S_Transmit_DMA+0x144>)
 800246a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4a27      	ldr	r2, [pc, #156]	; (8002510 <HAL_I2S_Transmit_DMA+0x148>)
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	4a26      	ldr	r2, [pc, #152]	; (8002514 <HAL_I2S_Transmit_DMA+0x14c>)
 800247a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b18      	ldr	r0, [r3, #48]	; 0x30
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a1b      	ldr	r3, [r3, #32]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002484:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800248c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002492:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002494:	f7ff f868 	bl	8001568 <HAL_DMA_Start_IT>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00f      	beq.n	80024be <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a2:	f043 0208 	orr.w	r2, r3, #8
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e022      	b.n	8002504 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d107      	bne.n	80024dc <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69da      	ldr	r2, [r3, #28]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024da:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d107      	bne.n	80024fa <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0202 	orr.w	r2, r2, #2
 80024f8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	0800261b 	.word	0x0800261b
 8002510:	080025d9 	.word	0x080025d9
 8002514:	08002637 	.word	0x08002637

08002518 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d02d      	beq.n	80025ac <I2S_GetClockFreq+0x6c>
 8002550:	2b02      	cmp	r3, #2
 8002552:	d12e      	bne.n	80025b2 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002554:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <I2S_GetClockFreq+0x88>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d108      	bne.n	8002572 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <I2S_GetClockFreq+0x88>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002568:	4a18      	ldr	r2, [pc, #96]	; (80025cc <I2S_GetClockFreq+0x8c>)
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e007      	b.n	8002582 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <I2S_GetClockFreq+0x88>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800257a:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <I2S_GetClockFreq+0x90>)
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <I2S_GetClockFreq+0x88>)
 8002584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002588:	0f1b      	lsrs	r3, r3, #28
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <I2S_GetClockFreq+0x88>)
 8002592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	fb02 f203 	mul.w	r2, r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	613b      	str	r3, [r7, #16]

      break;
 80025aa:	e005      	b.n	80025b8 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <I2S_GetClockFreq+0x94>)
 80025ae:	613b      	str	r3, [r7, #16]
      break;
 80025b0:	e002      	b.n	80025b8 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
      break;
 80025b6:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 80025b8:	693b      	ldr	r3, [r7, #16]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	00f42400 	.word	0x00f42400
 80025d0:	017d7840 	.word	0x017d7840
 80025d4:	00bb8000 	.word	0x00bb8000

080025d8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10e      	bne.n	800260c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0202 	bic.w	r2, r2, #2
 80025fc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	84da      	strh	r2, [r3, #38]	; 0x26
    hi2s->State = HAL_I2S_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f7fe f971 	bl	80008f4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f7ff ff75 	bl	8002518 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0203 	bic.w	r2, r2, #3
 8002652:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	84da      	strh	r2, [r3, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	85da      	strh	r2, [r3, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	f043 0208 	orr.w	r2, r3, #8
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7ff ff59 	bl	800252c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	4613      	mov	r3, r2
 8002690:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002692:	f7fe fd9d 	bl	80011d0 <HAL_GetTick>
 8002696:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002698:	e018      	b.n	80026cc <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d014      	beq.n	80026cc <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80026a2:	f7fe fd95 	bl	80011d0 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d902      	bls.n	80026b8 <I2S_WaitFlagStateUntilTimeout+0x36>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d109      	bne.n	80026cc <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e00f      	b.n	80026ec <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4013      	ands	r3, r2
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	429a      	cmp	r2, r3
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d1d7      	bne.n	800269a <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	4b23      	ldr	r3, [pc, #140]	; (800278c <HAL_PWREx_EnableOverDrive+0x98>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a22      	ldr	r2, [pc, #136]	; (800278c <HAL_PWREx_EnableOverDrive+0x98>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_PWREx_EnableOverDrive+0x98>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002722:	f7fe fd55 	bl	80011d0 <HAL_GetTick>
 8002726:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002728:	e009      	b.n	800273e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800272a:	f7fe fd51 	bl	80011d0 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002738:	d901      	bls.n	800273e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e022      	b.n	8002784 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274a:	d1ee      	bne.n	800272a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0f      	ldr	r2, [pc, #60]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002756:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002758:	f7fe fd3a 	bl	80011d0 <HAL_GetTick>
 800275c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800275e:	e009      	b.n	8002774 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002760:	f7fe fd36 	bl	80011d0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800276e:	d901      	bls.n	8002774 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e007      	b.n	8002784 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002780:	d1ee      	bne.n	8002760 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	40007000 	.word	0x40007000

08002794 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e29b      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8087 	beq.w	80028c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b8:	4b96      	ldr	r3, [pc, #600]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d00c      	beq.n	80027de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c4:	4b93      	ldr	r3, [pc, #588]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d112      	bne.n	80027f6 <HAL_RCC_OscConfig+0x62>
 80027d0:	4b90      	ldr	r3, [pc, #576]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027dc:	d10b      	bne.n	80027f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027de:	4b8d      	ldr	r3, [pc, #564]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d06c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x130>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d168      	bne.n	80028c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e275      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x7a>
 8002800:	4b84      	ldr	r3, [pc, #528]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a83      	ldr	r2, [pc, #524]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	e02e      	b.n	800286c <HAL_RCC_OscConfig+0xd8>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x9c>
 8002816:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7e      	ldr	r2, [pc, #504]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800281c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b7c      	ldr	r3, [pc, #496]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a7b      	ldr	r2, [pc, #492]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e01d      	b.n	800286c <HAL_RCC_OscConfig+0xd8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0xc0>
 800283a:	4b76      	ldr	r3, [pc, #472]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a75      	ldr	r2, [pc, #468]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b73      	ldr	r3, [pc, #460]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a72      	ldr	r2, [pc, #456]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0xd8>
 8002854:	4b6f      	ldr	r3, [pc, #444]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6e      	ldr	r2, [pc, #440]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800285a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b6c      	ldr	r3, [pc, #432]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a6b      	ldr	r2, [pc, #428]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fcac 	bl	80011d0 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe fca8 	bl	80011d0 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e229      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b61      	ldr	r3, [pc, #388]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0xe8>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fc98 	bl	80011d0 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe fc94 	bl	80011d0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e215      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	4b57      	ldr	r3, [pc, #348]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x110>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d069      	beq.n	80029a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028d2:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028de:	4b4d      	ldr	r3, [pc, #308]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d11c      	bne.n	8002924 <HAL_RCC_OscConfig+0x190>
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x17a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1e9      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	493d      	ldr	r1, [pc, #244]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	e040      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d023      	beq.n	8002974 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292c:	4b39      	ldr	r3, [pc, #228]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a38      	ldr	r2, [pc, #224]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fc4a 	bl	80011d0 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002940:	f7fe fc46 	bl	80011d0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e1c7      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4929      	ldr	r1, [pc, #164]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
 8002972:	e018      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a26      	ldr	r2, [pc, #152]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fc26 	bl	80011d0 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002988:	f7fe fc22 	bl	80011d0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e1a3      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d038      	beq.n	8002a24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d019      	beq.n	80029ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029be:	4a15      	ldr	r2, [pc, #84]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c6:	f7fe fc03 	bl	80011d0 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ce:	f7fe fbff 	bl	80011d0 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e180      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x23a>
 80029ec:	e01a      	b.n	8002a24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fe fbe9 	bl	80011d0 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a02:	f7fe fbe5 	bl	80011d0 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d903      	bls.n	8002a18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e166      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
 8002a14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	4b92      	ldr	r3, [pc, #584]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ee      	bne.n	8002a02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80a4 	beq.w	8002b7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a32:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10d      	bne.n	8002a5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	4b89      	ldr	r3, [pc, #548]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4a88      	ldr	r2, [pc, #544]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a48:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4a:	4b86      	ldr	r3, [pc, #536]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a56:	2301      	movs	r3, #1
 8002a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5a:	4b83      	ldr	r3, [pc, #524]	; (8002c68 <HAL_RCC_OscConfig+0x4d4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d118      	bne.n	8002a98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a66:	4b80      	ldr	r3, [pc, #512]	; (8002c68 <HAL_RCC_OscConfig+0x4d4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a7f      	ldr	r2, [pc, #508]	; (8002c68 <HAL_RCC_OscConfig+0x4d4>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a72:	f7fe fbad 	bl	80011d0 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7a:	f7fe fba9 	bl	80011d0 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b64      	cmp	r3, #100	; 0x64
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e12a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8c:	4b76      	ldr	r3, [pc, #472]	; (8002c68 <HAL_RCC_OscConfig+0x4d4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x31a>
 8002aa0:	4b70      	ldr	r3, [pc, #448]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	4a6f      	ldr	r2, [pc, #444]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002aac:	e02d      	b.n	8002b0a <HAL_RCC_OscConfig+0x376>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x33c>
 8002ab6:	4b6b      	ldr	r3, [pc, #428]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	4a6a      	ldr	r2, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac2:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	4a67      	ldr	r2, [pc, #412]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ac8:	f023 0304 	bic.w	r3, r3, #4
 8002acc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ace:	e01c      	b.n	8002b0a <HAL_RCC_OscConfig+0x376>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d10c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x35e>
 8002ad8:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a61      	ldr	r2, [pc, #388]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae4:	4b5f      	ldr	r3, [pc, #380]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a5e      	ldr	r2, [pc, #376]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	e00b      	b.n	8002b0a <HAL_RCC_OscConfig+0x376>
 8002af2:	4b5c      	ldr	r3, [pc, #368]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a5b      	ldr	r2, [pc, #364]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
 8002afe:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b04:	f023 0304 	bic.w	r3, r3, #4
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d015      	beq.n	8002b3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b12:	f7fe fb5d 	bl	80011d0 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1a:	f7fe fb59 	bl	80011d0 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e0d8      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b30:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ee      	beq.n	8002b1a <HAL_RCC_OscConfig+0x386>
 8002b3c:	e014      	b.n	8002b68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fb47 	bl	80011d0 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7fe fb43 	bl	80011d0 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e0c2      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5c:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1ee      	bne.n	8002b46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d105      	bne.n	8002b7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a3c      	ldr	r2, [pc, #240]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80ae 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d06d      	beq.n	8002c6c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d14b      	bne.n	8002c30 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a31      	ldr	r2, [pc, #196]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fb14 	bl	80011d0 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe fb10 	bl	80011d0 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e091      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	4b29      	ldr	r3, [pc, #164]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	071b      	lsls	r3, r3, #28
 8002bf6:	491b      	ldr	r1, [pc, #108]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fae2 	bl	80011d0 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe fade 	bl	80011d0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e05f      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x47c>
 8002c2e:	e057      	b.n	8002ce0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fac8 	bl	80011d0 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe fac4 	bl	80011d0 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e045      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4b0>
 8002c62:	e03d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x54c>
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <HAL_RCC_OscConfig+0x558>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d030      	beq.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d129      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d122      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ca2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d119      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d10f      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800

08002cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0d0      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d08:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d910      	bls.n	8002d38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b67      	ldr	r3, [pc, #412]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 020f 	bic.w	r2, r3, #15
 8002d1e:	4965      	ldr	r1, [pc, #404]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0b8      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d50:	4b59      	ldr	r3, [pc, #356]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d68:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a52      	ldr	r2, [pc, #328]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b50      	ldr	r3, [pc, #320]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	494d      	ldr	r1, [pc, #308]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d040      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d115      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e07f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db2:	4b41      	ldr	r3, [pc, #260]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e073      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e06b      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd2:	4b39      	ldr	r3, [pc, #228]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 0203 	bic.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4936      	ldr	r1, [pc, #216]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de4:	f7fe f9f4 	bl	80011d0 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7fe f9f0 	bl	80011d0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e053      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 020c 	and.w	r2, r3, #12
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d1eb      	bne.n	8002dec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e14:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d210      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 020f 	bic.w	r2, r3, #15
 8002e2a:	4922      	ldr	r1, [pc, #136]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e032      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4916      	ldr	r1, [pc, #88]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	490e      	ldr	r1, [pc, #56]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e82:	f000 f821 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	490a      	ldr	r1, [pc, #40]	; (8002ebc <HAL_RCC_ClockConfig+0x1cc>)
 8002e94:	5ccb      	ldrb	r3, [r1, r3]
 8002e96:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9a:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1d0>)
 8002e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_RCC_ClockConfig+0x1d4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe f950 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023c00 	.word	0x40023c00
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	080055f4 	.word	0x080055f4
 8002ec0:	20000000 	.word	0x20000000
 8002ec4:	20000004 	.word	0x20000004

08002ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec8:	b5b0      	push	{r4, r5, r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ece:	2100      	movs	r1, #0
 8002ed0:	6079      	str	r1, [r7, #4]
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	60f9      	str	r1, [r7, #12]
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002eda:	2100      	movs	r1, #0
 8002edc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ede:	4952      	ldr	r1, [pc, #328]	; (8003028 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ee0:	6889      	ldr	r1, [r1, #8]
 8002ee2:	f001 010c 	and.w	r1, r1, #12
 8002ee6:	2908      	cmp	r1, #8
 8002ee8:	d00d      	beq.n	8002f06 <HAL_RCC_GetSysClockFreq+0x3e>
 8002eea:	2908      	cmp	r1, #8
 8002eec:	f200 8094 	bhi.w	8003018 <HAL_RCC_GetSysClockFreq+0x150>
 8002ef0:	2900      	cmp	r1, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x32>
 8002ef4:	2904      	cmp	r1, #4
 8002ef6:	d003      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x38>
 8002ef8:	e08e      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002efa:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_RCC_GetSysClockFreq+0x164>)
 8002efc:	60bb      	str	r3, [r7, #8]
      break;
 8002efe:	e08e      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f00:	4b4b      	ldr	r3, [pc, #300]	; (8003030 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f02:	60bb      	str	r3, [r7, #8]
      break;
 8002f04:	e08b      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f06:	4948      	ldr	r1, [pc, #288]	; (8003028 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f08:	6849      	ldr	r1, [r1, #4]
 8002f0a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002f0e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f10:	4945      	ldr	r1, [pc, #276]	; (8003028 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f12:	6849      	ldr	r1, [r1, #4]
 8002f14:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f18:	2900      	cmp	r1, #0
 8002f1a:	d024      	beq.n	8002f66 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1c:	4942      	ldr	r1, [pc, #264]	; (8003028 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f1e:	6849      	ldr	r1, [r1, #4]
 8002f20:	0989      	lsrs	r1, r1, #6
 8002f22:	4608      	mov	r0, r1
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002f2c:	f04f 0500 	mov.w	r5, #0
 8002f30:	ea00 0204 	and.w	r2, r0, r4
 8002f34:	ea01 0305 	and.w	r3, r1, r5
 8002f38:	493d      	ldr	r1, [pc, #244]	; (8003030 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f3a:	fb01 f003 	mul.w	r0, r1, r3
 8002f3e:	2100      	movs	r1, #0
 8002f40:	fb01 f102 	mul.w	r1, r1, r2
 8002f44:	1844      	adds	r4, r0, r1
 8002f46:	493a      	ldr	r1, [pc, #232]	; (8003030 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f48:	fba2 0101 	umull	r0, r1, r2, r1
 8002f4c:	1863      	adds	r3, r4, r1
 8002f4e:	4619      	mov	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	f7fd f9c2 	bl	80002e0 <__aeabi_uldivmod>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4613      	mov	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e04a      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f66:	4b30      	ldr	r3, [pc, #192]	; (8003028 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	099b      	lsrs	r3, r3, #6
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f76:	f04f 0100 	mov.w	r1, #0
 8002f7a:	ea02 0400 	and.w	r4, r2, r0
 8002f7e:	ea03 0501 	and.w	r5, r3, r1
 8002f82:	4620      	mov	r0, r4
 8002f84:	4629      	mov	r1, r5
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	014b      	lsls	r3, r1, #5
 8002f90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f94:	0142      	lsls	r2, r0, #5
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	1b00      	subs	r0, r0, r4
 8002f9c:	eb61 0105 	sbc.w	r1, r1, r5
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	018b      	lsls	r3, r1, #6
 8002faa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fae:	0182      	lsls	r2, r0, #6
 8002fb0:	1a12      	subs	r2, r2, r0
 8002fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fb6:	f04f 0000 	mov.w	r0, #0
 8002fba:	f04f 0100 	mov.w	r1, #0
 8002fbe:	00d9      	lsls	r1, r3, #3
 8002fc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fc4:	00d0      	lsls	r0, r2, #3
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	1912      	adds	r2, r2, r4
 8002fcc:	eb45 0303 	adc.w	r3, r5, r3
 8002fd0:	f04f 0000 	mov.w	r0, #0
 8002fd4:	f04f 0100 	mov.w	r1, #0
 8002fd8:	0299      	lsls	r1, r3, #10
 8002fda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fde:	0290      	lsls	r0, r2, #10
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	f7fd f976 	bl	80002e0 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	0c1b      	lsrs	r3, r3, #16
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	3301      	adds	r3, #1
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	60bb      	str	r3, [r7, #8]
      break;
 8003016:	e002      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <HAL_RCC_GetSysClockFreq+0x164>)
 800301a:	60bb      	str	r3, [r7, #8]
      break;
 800301c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301e:	68bb      	ldr	r3, [r7, #8]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bdb0      	pop	{r4, r5, r7, pc}
 8003028:	40023800 	.word	0x40023800
 800302c:	00f42400 	.word	0x00f42400
 8003030:	017d7840 	.word	0x017d7840

08003034 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_RCC_GetHCLKFreq+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000000 	.word	0x20000000

0800304c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003050:	f7ff fff0 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	0a9b      	lsrs	r3, r3, #10
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4903      	ldr	r1, [pc, #12]	; (8003070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	08005604 	.word	0x08005604

08003074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003078:	f7ff ffdc 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0b5b      	lsrs	r3, r3, #13
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	; (8003098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	08005604 	.word	0x08005604

0800309c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d012      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030c4:	4b69      	ldr	r3, [pc, #420]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a68      	ldr	r2, [pc, #416]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030ce:	6093      	str	r3, [r2, #8]
 80030d0:	4b66      	ldr	r3, [pc, #408]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	4964      	ldr	r1, [pc, #400]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d017      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030f6:	4b5d      	ldr	r3, [pc, #372]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003104:	4959      	ldr	r1, [pc, #356]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003114:	d101      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003116:	2301      	movs	r3, #1
 8003118:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003122:	2301      	movs	r3, #1
 8003124:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d017      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003132:	4b4e      	ldr	r3, [pc, #312]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003138:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	494a      	ldr	r1, [pc, #296]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003150:	d101      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003152:	2301      	movs	r3, #1
 8003154:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800315e:	2301      	movs	r3, #1
 8003160:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800316e:	2301      	movs	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 808b 	beq.w	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003180:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	4a39      	ldr	r2, [pc, #228]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318a:	6413      	str	r3, [r2, #64]	; 0x40
 800318c:	4b37      	ldr	r3, [pc, #220]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003198:	4b35      	ldr	r3, [pc, #212]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a34      	ldr	r2, [pc, #208]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800319e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a4:	f7fe f814 	bl	80011d0 <HAL_GetTick>
 80031a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ac:	f7fe f810 	bl	80011d0 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	; 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e38f      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031be:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031ca:	4b28      	ldr	r3, [pc, #160]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d035      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d02e      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031e8:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031f2:	4b1e      	ldr	r3, [pc, #120]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a1d      	ldr	r2, [pc, #116]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031fe:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a1a      	ldr	r2, [pc, #104]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003208:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800320a:	4a18      	ldr	r2, [pc, #96]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003210:	4b16      	ldr	r3, [pc, #88]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d114      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fd ffd8 	bl	80011d0 <HAL_GetTick>
 8003220:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003222:	e00a      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003224:	f7fd ffd4 	bl	80011d0 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e351      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0ee      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003252:	d111      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003262:	400b      	ands	r3, r1
 8003264:	4901      	ldr	r1, [pc, #4]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
 800326a:	e00b      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800326c:	40023800 	.word	0x40023800
 8003270:	40007000 	.word	0x40007000
 8003274:	0ffffcff 	.word	0x0ffffcff
 8003278:	4bb3      	ldr	r3, [pc, #716]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4ab2      	ldr	r2, [pc, #712]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800327e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003282:	6093      	str	r3, [r2, #8]
 8003284:	4bb0      	ldr	r3, [pc, #704]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003290:	49ad      	ldr	r1, [pc, #692]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003292:	4313      	orrs	r3, r2
 8003294:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d010      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032a2:	4ba9      	ldr	r3, [pc, #676]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a8:	4aa7      	ldr	r2, [pc, #668]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032b2:	4ba5      	ldr	r3, [pc, #660]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	49a2      	ldr	r1, [pc, #648]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032d0:	4b9d      	ldr	r3, [pc, #628]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032de:	499a      	ldr	r1, [pc, #616]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032f2:	4b95      	ldr	r3, [pc, #596]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003300:	4991      	ldr	r1, [pc, #580]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003314:	4b8c      	ldr	r3, [pc, #560]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003322:	4989      	ldr	r1, [pc, #548]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003336:	4b84      	ldr	r3, [pc, #528]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4980      	ldr	r1, [pc, #512]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003358:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	f023 0203 	bic.w	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	4978      	ldr	r1, [pc, #480]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800337a:	4b73      	ldr	r3, [pc, #460]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	f023 020c 	bic.w	r2, r3, #12
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003388:	496f      	ldr	r1, [pc, #444]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800339c:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033aa:	4967      	ldr	r1, [pc, #412]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033be:	4b62      	ldr	r3, [pc, #392]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033cc:	495e      	ldr	r1, [pc, #376]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033e0:	4b59      	ldr	r3, [pc, #356]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	4956      	ldr	r1, [pc, #344]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	494d      	ldr	r1, [pc, #308]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003424:	4b48      	ldr	r3, [pc, #288]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	4945      	ldr	r1, [pc, #276]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003446:	4b40      	ldr	r3, [pc, #256]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003454:	493c      	ldr	r1, [pc, #240]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003468:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003476:	4934      	ldr	r1, [pc, #208]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d011      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800348a:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003498:	492b      	ldr	r1, [pc, #172]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a8:	d101      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80034aa:	2301      	movs	r3, #1
 80034ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d8:	491b      	ldr	r1, [pc, #108]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00b      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034ec:	4b16      	ldr	r3, [pc, #88]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034fc:	4912      	ldr	r1, [pc, #72]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003520:	4909      	ldr	r1, [pc, #36]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00f      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800353a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	e002      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
 800354c:	4986      	ldr	r1, [pc, #536]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00b      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003560:	4b81      	ldr	r3, [pc, #516]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003566:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003570:	497d      	ldr	r1, [pc, #500]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d006      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80d6 	beq.w	8003738 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800358c:	4b76      	ldr	r3, [pc, #472]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a75      	ldr	r2, [pc, #468]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003592:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003598:	f7fd fe1a 	bl	80011d0 <HAL_GetTick>
 800359c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035a0:	f7fd fe16 	bl	80011d0 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	; 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e195      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035b2:	4b6d      	ldr	r3, [pc, #436]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d021      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d11d      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035d2:	4b65      	ldr	r3, [pc, #404]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d8:	0c1b      	lsrs	r3, r3, #16
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035e0:	4b61      	ldr	r3, [pc, #388]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e6:	0e1b      	lsrs	r3, r3, #24
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	019a      	lsls	r2, r3, #6
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	041b      	lsls	r3, r3, #16
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	071b      	lsls	r3, r3, #28
 8003606:	4958      	ldr	r1, [pc, #352]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800362c:	2b00      	cmp	r3, #0
 800362e:	d02e      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003638:	d129      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800363a:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800363c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003648:	4b47      	ldr	r3, [pc, #284]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800364a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364e:	0f1b      	lsrs	r3, r3, #28
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	019a      	lsls	r2, r3, #6
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	041b      	lsls	r3, r3, #16
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	061b      	lsls	r3, r3, #24
 8003668:	431a      	orrs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	071b      	lsls	r3, r3, #28
 800366e:	493e      	ldr	r1, [pc, #248]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003676:	4b3c      	ldr	r3, [pc, #240]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800367c:	f023 021f 	bic.w	r2, r3, #31
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	3b01      	subs	r3, #1
 8003686:	4938      	ldr	r1, [pc, #224]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01d      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800369a:	4b33      	ldr	r3, [pc, #204]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800369c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a0:	0e1b      	lsrs	r3, r3, #24
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036a8:	4b2f      	ldr	r3, [pc, #188]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ae:	0f1b      	lsrs	r3, r3, #28
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	019a      	lsls	r2, r3, #6
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	041b      	lsls	r3, r3, #16
 80036c2:	431a      	orrs	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	061b      	lsls	r3, r3, #24
 80036c8:	431a      	orrs	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	4926      	ldr	r1, [pc, #152]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d011      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	019a      	lsls	r2, r3, #6
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	071b      	lsls	r3, r3, #28
 80036fe:	491a      	ldr	r1, [pc, #104]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a17      	ldr	r2, [pc, #92]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800370c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003712:	f7fd fd5d 	bl	80011d0 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800371a:	f7fd fd59 	bl	80011d0 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b64      	cmp	r3, #100	; 0x64
 8003726:	d901      	bls.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e0d8      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b01      	cmp	r3, #1
 800373c:	f040 80ce 	bne.w	80038dc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a08      	ldr	r2, [pc, #32]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800374c:	f7fd fd40 	bl	80011d0 <HAL_GetTick>
 8003750:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003752:	e00b      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003754:	f7fd fd3c 	bl	80011d0 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d904      	bls.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e0bb      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800376c:	4b5e      	ldr	r3, [pc, #376]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003778:	d0ec      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003796:	2b00      	cmp	r3, #0
 8003798:	d02e      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d12a      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037a2:	4b51      	ldr	r3, [pc, #324]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037b0:	4b4d      	ldr	r3, [pc, #308]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	0f1b      	lsrs	r3, r3, #28
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	019a      	lsls	r2, r3, #6
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	061b      	lsls	r3, r3, #24
 80037d0:	431a      	orrs	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	071b      	lsls	r3, r3, #28
 80037d6:	4944      	ldr	r1, [pc, #272]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037de:	4b42      	ldr	r3, [pc, #264]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	493d      	ldr	r1, [pc, #244]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d022      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800380c:	d11d      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800380e:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	0e1b      	lsrs	r3, r3, #24
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800381c:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	0f1b      	lsrs	r3, r3, #28
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	019a      	lsls	r2, r3, #6
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	431a      	orrs	r2, r3
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	061b      	lsls	r3, r3, #24
 800383c:	431a      	orrs	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	071b      	lsls	r3, r3, #28
 8003842:	4929      	ldr	r1, [pc, #164]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d028      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	0e1b      	lsrs	r3, r3, #24
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003864:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	0c1b      	lsrs	r3, r3, #16
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	019a      	lsls	r2, r3, #6
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	431a      	orrs	r2, r3
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	071b      	lsls	r3, r3, #28
 800388a:	4917      	ldr	r1, [pc, #92]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003898:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	4911      	ldr	r1, [pc, #68]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b4:	f7fd fc8c 	bl	80011d0 <HAL_GetTick>
 80038b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038bc:	f7fd fc88 	bl	80011d0 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e007      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038da:	d1ef      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800

080038ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e040      	b.n	8003980 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd fa64 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	; 0x24
 8003918:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f91c 	bl	8003b68 <UART_SetConfig>
 8003930:	4603      	mov	r3, r0
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e022      	b.n	8003980 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fb72 	bl	800402c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fbf9 	bl	8004170 <UART_CheckIdleState>
 800397e:	4603      	mov	r3, r0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800399c:	2b20      	cmp	r3, #32
 800399e:	f040 8081 	bne.w	8003aa4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_UART_Transmit+0x26>
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e079      	b.n	8003aa6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_UART_Transmit+0x38>
 80039bc:	2302      	movs	r3, #2
 80039be:	e072      	b.n	8003aa6 <HAL_UART_Transmit+0x11e>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2221      	movs	r2, #33	; 0x21
 80039d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039d6:	f7fd fbfb 	bl	80011d0 <HAL_GetTick>
 80039da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f4:	d108      	bne.n	8003a08 <HAL_UART_Transmit+0x80>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d104      	bne.n	8003a08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	e003      	b.n	8003a10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003a18:	e02c      	b.n	8003a74 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2200      	movs	r2, #0
 8003a22:	2180      	movs	r1, #128	; 0x80
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fbec 	bl	8004202 <UART_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e038      	b.n	8003aa6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	61bb      	str	r3, [r7, #24]
 8003a50:	e007      	b.n	8003a62 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1cc      	bne.n	8003a1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2200      	movs	r2, #0
 8003a88:	2140      	movs	r1, #64	; 0x40
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fbb9 	bl	8004202 <UART_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e005      	b.n	8003aa6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d12c      	bne.n	8003b1e <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_UART_Receive_DMA+0x22>
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e025      	b.n	8003b20 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_UART_Receive_DMA+0x34>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e01e      	b.n	8003b20 <HAL_UART_Receive_DMA+0x72>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b0c:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	461a      	mov	r2, r3
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fbf1 	bl	80042fc <UART_Start_Receive_DMA>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	e000      	b.n	8003b20 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003b1e:	2302      	movs	r3, #2
  }
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4ba7      	ldr	r3, [pc, #668]	; (8003e30 <UART_SetConfig+0x2c8>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	6979      	ldr	r1, [r7, #20]
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a95      	ldr	r2, [pc, #596]	; (8003e34 <UART_SetConfig+0x2cc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d120      	bne.n	8003c26 <UART_SetConfig+0xbe>
 8003be4:	4b94      	ldr	r3, [pc, #592]	; (8003e38 <UART_SetConfig+0x2d0>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d816      	bhi.n	8003c20 <UART_SetConfig+0xb8>
 8003bf2:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <UART_SetConfig+0x90>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c15 	.word	0x08003c15
 8003c00:	08003c0f 	.word	0x08003c0f
 8003c04:	08003c1b 	.word	0x08003c1b
 8003c08:	2301      	movs	r3, #1
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e14f      	b.n	8003eae <UART_SetConfig+0x346>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	77fb      	strb	r3, [r7, #31]
 8003c12:	e14c      	b.n	8003eae <UART_SetConfig+0x346>
 8003c14:	2304      	movs	r3, #4
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e149      	b.n	8003eae <UART_SetConfig+0x346>
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	77fb      	strb	r3, [r7, #31]
 8003c1e:	e146      	b.n	8003eae <UART_SetConfig+0x346>
 8003c20:	2310      	movs	r3, #16
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	e143      	b.n	8003eae <UART_SetConfig+0x346>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a84      	ldr	r2, [pc, #528]	; (8003e3c <UART_SetConfig+0x2d4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d132      	bne.n	8003c96 <UART_SetConfig+0x12e>
 8003c30:	4b81      	ldr	r3, [pc, #516]	; (8003e38 <UART_SetConfig+0x2d0>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d828      	bhi.n	8003c90 <UART_SetConfig+0x128>
 8003c3e:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <UART_SetConfig+0xdc>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003c79 	.word	0x08003c79
 8003c48:	08003c91 	.word	0x08003c91
 8003c4c:	08003c91 	.word	0x08003c91
 8003c50:	08003c91 	.word	0x08003c91
 8003c54:	08003c85 	.word	0x08003c85
 8003c58:	08003c91 	.word	0x08003c91
 8003c5c:	08003c91 	.word	0x08003c91
 8003c60:	08003c91 	.word	0x08003c91
 8003c64:	08003c7f 	.word	0x08003c7f
 8003c68:	08003c91 	.word	0x08003c91
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08003c91 	.word	0x08003c91
 8003c74:	08003c8b 	.word	0x08003c8b
 8003c78:	2300      	movs	r3, #0
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e117      	b.n	8003eae <UART_SetConfig+0x346>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e114      	b.n	8003eae <UART_SetConfig+0x346>
 8003c84:	2304      	movs	r3, #4
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e111      	b.n	8003eae <UART_SetConfig+0x346>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e10e      	b.n	8003eae <UART_SetConfig+0x346>
 8003c90:	2310      	movs	r3, #16
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e10b      	b.n	8003eae <UART_SetConfig+0x346>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a69      	ldr	r2, [pc, #420]	; (8003e40 <UART_SetConfig+0x2d8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d120      	bne.n	8003ce2 <UART_SetConfig+0x17a>
 8003ca0:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <UART_SetConfig+0x2d0>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003caa:	2b30      	cmp	r3, #48	; 0x30
 8003cac:	d013      	beq.n	8003cd6 <UART_SetConfig+0x16e>
 8003cae:	2b30      	cmp	r3, #48	; 0x30
 8003cb0:	d814      	bhi.n	8003cdc <UART_SetConfig+0x174>
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d009      	beq.n	8003cca <UART_SetConfig+0x162>
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d810      	bhi.n	8003cdc <UART_SetConfig+0x174>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <UART_SetConfig+0x15c>
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d006      	beq.n	8003cd0 <UART_SetConfig+0x168>
 8003cc2:	e00b      	b.n	8003cdc <UART_SetConfig+0x174>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e0f1      	b.n	8003eae <UART_SetConfig+0x346>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	e0ee      	b.n	8003eae <UART_SetConfig+0x346>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	e0eb      	b.n	8003eae <UART_SetConfig+0x346>
 8003cd6:	2308      	movs	r3, #8
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	e0e8      	b.n	8003eae <UART_SetConfig+0x346>
 8003cdc:	2310      	movs	r3, #16
 8003cde:	77fb      	strb	r3, [r7, #31]
 8003ce0:	e0e5      	b.n	8003eae <UART_SetConfig+0x346>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a57      	ldr	r2, [pc, #348]	; (8003e44 <UART_SetConfig+0x2dc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d120      	bne.n	8003d2e <UART_SetConfig+0x1c6>
 8003cec:	4b52      	ldr	r3, [pc, #328]	; (8003e38 <UART_SetConfig+0x2d0>)
 8003cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cf8:	d013      	beq.n	8003d22 <UART_SetConfig+0x1ba>
 8003cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8003cfc:	d814      	bhi.n	8003d28 <UART_SetConfig+0x1c0>
 8003cfe:	2b80      	cmp	r3, #128	; 0x80
 8003d00:	d009      	beq.n	8003d16 <UART_SetConfig+0x1ae>
 8003d02:	2b80      	cmp	r3, #128	; 0x80
 8003d04:	d810      	bhi.n	8003d28 <UART_SetConfig+0x1c0>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <UART_SetConfig+0x1a8>
 8003d0a:	2b40      	cmp	r3, #64	; 0x40
 8003d0c:	d006      	beq.n	8003d1c <UART_SetConfig+0x1b4>
 8003d0e:	e00b      	b.n	8003d28 <UART_SetConfig+0x1c0>
 8003d10:	2300      	movs	r3, #0
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e0cb      	b.n	8003eae <UART_SetConfig+0x346>
 8003d16:	2302      	movs	r3, #2
 8003d18:	77fb      	strb	r3, [r7, #31]
 8003d1a:	e0c8      	b.n	8003eae <UART_SetConfig+0x346>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e0c5      	b.n	8003eae <UART_SetConfig+0x346>
 8003d22:	2308      	movs	r3, #8
 8003d24:	77fb      	strb	r3, [r7, #31]
 8003d26:	e0c2      	b.n	8003eae <UART_SetConfig+0x346>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e0bf      	b.n	8003eae <UART_SetConfig+0x346>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a45      	ldr	r2, [pc, #276]	; (8003e48 <UART_SetConfig+0x2e0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d125      	bne.n	8003d84 <UART_SetConfig+0x21c>
 8003d38:	4b3f      	ldr	r3, [pc, #252]	; (8003e38 <UART_SetConfig+0x2d0>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d46:	d017      	beq.n	8003d78 <UART_SetConfig+0x210>
 8003d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d4c:	d817      	bhi.n	8003d7e <UART_SetConfig+0x216>
 8003d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d52:	d00b      	beq.n	8003d6c <UART_SetConfig+0x204>
 8003d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d58:	d811      	bhi.n	8003d7e <UART_SetConfig+0x216>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <UART_SetConfig+0x1fe>
 8003d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d62:	d006      	beq.n	8003d72 <UART_SetConfig+0x20a>
 8003d64:	e00b      	b.n	8003d7e <UART_SetConfig+0x216>
 8003d66:	2300      	movs	r3, #0
 8003d68:	77fb      	strb	r3, [r7, #31]
 8003d6a:	e0a0      	b.n	8003eae <UART_SetConfig+0x346>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	77fb      	strb	r3, [r7, #31]
 8003d70:	e09d      	b.n	8003eae <UART_SetConfig+0x346>
 8003d72:	2304      	movs	r3, #4
 8003d74:	77fb      	strb	r3, [r7, #31]
 8003d76:	e09a      	b.n	8003eae <UART_SetConfig+0x346>
 8003d78:	2308      	movs	r3, #8
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e097      	b.n	8003eae <UART_SetConfig+0x346>
 8003d7e:	2310      	movs	r3, #16
 8003d80:	77fb      	strb	r3, [r7, #31]
 8003d82:	e094      	b.n	8003eae <UART_SetConfig+0x346>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a30      	ldr	r2, [pc, #192]	; (8003e4c <UART_SetConfig+0x2e4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d125      	bne.n	8003dda <UART_SetConfig+0x272>
 8003d8e:	4b2a      	ldr	r3, [pc, #168]	; (8003e38 <UART_SetConfig+0x2d0>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d9c:	d017      	beq.n	8003dce <UART_SetConfig+0x266>
 8003d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003da2:	d817      	bhi.n	8003dd4 <UART_SetConfig+0x26c>
 8003da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da8:	d00b      	beq.n	8003dc2 <UART_SetConfig+0x25a>
 8003daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dae:	d811      	bhi.n	8003dd4 <UART_SetConfig+0x26c>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <UART_SetConfig+0x254>
 8003db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db8:	d006      	beq.n	8003dc8 <UART_SetConfig+0x260>
 8003dba:	e00b      	b.n	8003dd4 <UART_SetConfig+0x26c>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e075      	b.n	8003eae <UART_SetConfig+0x346>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e072      	b.n	8003eae <UART_SetConfig+0x346>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e06f      	b.n	8003eae <UART_SetConfig+0x346>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e06c      	b.n	8003eae <UART_SetConfig+0x346>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e069      	b.n	8003eae <UART_SetConfig+0x346>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <UART_SetConfig+0x2e8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d137      	bne.n	8003e54 <UART_SetConfig+0x2ec>
 8003de4:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <UART_SetConfig+0x2d0>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003dee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003df2:	d017      	beq.n	8003e24 <UART_SetConfig+0x2bc>
 8003df4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003df8:	d817      	bhi.n	8003e2a <UART_SetConfig+0x2c2>
 8003dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfe:	d00b      	beq.n	8003e18 <UART_SetConfig+0x2b0>
 8003e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e04:	d811      	bhi.n	8003e2a <UART_SetConfig+0x2c2>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <UART_SetConfig+0x2aa>
 8003e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0e:	d006      	beq.n	8003e1e <UART_SetConfig+0x2b6>
 8003e10:	e00b      	b.n	8003e2a <UART_SetConfig+0x2c2>
 8003e12:	2300      	movs	r3, #0
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e04a      	b.n	8003eae <UART_SetConfig+0x346>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	77fb      	strb	r3, [r7, #31]
 8003e1c:	e047      	b.n	8003eae <UART_SetConfig+0x346>
 8003e1e:	2304      	movs	r3, #4
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e044      	b.n	8003eae <UART_SetConfig+0x346>
 8003e24:	2308      	movs	r3, #8
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e041      	b.n	8003eae <UART_SetConfig+0x346>
 8003e2a:	2310      	movs	r3, #16
 8003e2c:	77fb      	strb	r3, [r7, #31]
 8003e2e:	e03e      	b.n	8003eae <UART_SetConfig+0x346>
 8003e30:	efff69f3 	.word	0xefff69f3
 8003e34:	40011000 	.word	0x40011000
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	40004400 	.word	0x40004400
 8003e40:	40004800 	.word	0x40004800
 8003e44:	40004c00 	.word	0x40004c00
 8003e48:	40005000 	.word	0x40005000
 8003e4c:	40011400 	.word	0x40011400
 8003e50:	40007800 	.word	0x40007800
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a71      	ldr	r2, [pc, #452]	; (8004020 <UART_SetConfig+0x4b8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d125      	bne.n	8003eaa <UART_SetConfig+0x342>
 8003e5e:	4b71      	ldr	r3, [pc, #452]	; (8004024 <UART_SetConfig+0x4bc>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e6c:	d017      	beq.n	8003e9e <UART_SetConfig+0x336>
 8003e6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e72:	d817      	bhi.n	8003ea4 <UART_SetConfig+0x33c>
 8003e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e78:	d00b      	beq.n	8003e92 <UART_SetConfig+0x32a>
 8003e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7e:	d811      	bhi.n	8003ea4 <UART_SetConfig+0x33c>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <UART_SetConfig+0x324>
 8003e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e88:	d006      	beq.n	8003e98 <UART_SetConfig+0x330>
 8003e8a:	e00b      	b.n	8003ea4 <UART_SetConfig+0x33c>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	77fb      	strb	r3, [r7, #31]
 8003e90:	e00d      	b.n	8003eae <UART_SetConfig+0x346>
 8003e92:	2302      	movs	r3, #2
 8003e94:	77fb      	strb	r3, [r7, #31]
 8003e96:	e00a      	b.n	8003eae <UART_SetConfig+0x346>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	77fb      	strb	r3, [r7, #31]
 8003e9c:	e007      	b.n	8003eae <UART_SetConfig+0x346>
 8003e9e:	2308      	movs	r3, #8
 8003ea0:	77fb      	strb	r3, [r7, #31]
 8003ea2:	e004      	b.n	8003eae <UART_SetConfig+0x346>
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e001      	b.n	8003eae <UART_SetConfig+0x346>
 8003eaa:	2310      	movs	r3, #16
 8003eac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb6:	d15b      	bne.n	8003f70 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003eb8:	7ffb      	ldrb	r3, [r7, #31]
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d827      	bhi.n	8003f0e <UART_SetConfig+0x3a6>
 8003ebe:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <UART_SetConfig+0x35c>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003ef9 	.word	0x08003ef9
 8003ed0:	08003f0f 	.word	0x08003f0f
 8003ed4:	08003eff 	.word	0x08003eff
 8003ed8:	08003f0f 	.word	0x08003f0f
 8003edc:	08003f0f 	.word	0x08003f0f
 8003ee0:	08003f0f 	.word	0x08003f0f
 8003ee4:	08003f07 	.word	0x08003f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee8:	f7ff f8b0 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 8003eec:	61b8      	str	r0, [r7, #24]
        break;
 8003eee:	e013      	b.n	8003f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef0:	f7ff f8c0 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 8003ef4:	61b8      	str	r0, [r7, #24]
        break;
 8003ef6:	e00f      	b.n	8003f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef8:	4b4b      	ldr	r3, [pc, #300]	; (8004028 <UART_SetConfig+0x4c0>)
 8003efa:	61bb      	str	r3, [r7, #24]
        break;
 8003efc:	e00c      	b.n	8003f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efe:	f7fe ffe3 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8003f02:	61b8      	str	r0, [r7, #24]
        break;
 8003f04:	e008      	b.n	8003f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0a:	61bb      	str	r3, [r7, #24]
        break;
 8003f0c:	e004      	b.n	8003f18 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	77bb      	strb	r3, [r7, #30]
        break;
 8003f16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d074      	beq.n	8004008 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	005a      	lsls	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	441a      	add	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b0f      	cmp	r3, #15
 8003f3a:	d916      	bls.n	8003f6a <UART_SetConfig+0x402>
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f42:	d212      	bcs.n	8003f6a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f023 030f 	bic.w	r3, r3, #15
 8003f4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	89fb      	ldrh	r3, [r7, #14]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	89fa      	ldrh	r2, [r7, #14]
 8003f66:	60da      	str	r2, [r3, #12]
 8003f68:	e04e      	b.n	8004008 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	77bb      	strb	r3, [r7, #30]
 8003f6e:	e04b      	b.n	8004008 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f70:	7ffb      	ldrb	r3, [r7, #31]
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d827      	bhi.n	8003fc6 <UART_SetConfig+0x45e>
 8003f76:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <UART_SetConfig+0x414>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003fa1 	.word	0x08003fa1
 8003f80:	08003fa9 	.word	0x08003fa9
 8003f84:	08003fb1 	.word	0x08003fb1
 8003f88:	08003fc7 	.word	0x08003fc7
 8003f8c:	08003fb7 	.word	0x08003fb7
 8003f90:	08003fc7 	.word	0x08003fc7
 8003f94:	08003fc7 	.word	0x08003fc7
 8003f98:	08003fc7 	.word	0x08003fc7
 8003f9c:	08003fbf 	.word	0x08003fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa0:	f7ff f854 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 8003fa4:	61b8      	str	r0, [r7, #24]
        break;
 8003fa6:	e013      	b.n	8003fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa8:	f7ff f864 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 8003fac:	61b8      	str	r0, [r7, #24]
        break;
 8003fae:	e00f      	b.n	8003fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <UART_SetConfig+0x4c0>)
 8003fb2:	61bb      	str	r3, [r7, #24]
        break;
 8003fb4:	e00c      	b.n	8003fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb6:	f7fe ff87 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8003fba:	61b8      	str	r0, [r7, #24]
        break;
 8003fbc:	e008      	b.n	8003fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc2:	61bb      	str	r3, [r7, #24]
        break;
 8003fc4:	e004      	b.n	8003fd0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	77bb      	strb	r3, [r7, #30]
        break;
 8003fce:	bf00      	nop
    }

    if (pclk != 0U)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d018      	beq.n	8004008 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	085a      	lsrs	r2, r3, #1
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	441a      	add	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	d908      	bls.n	8004004 <UART_SetConfig+0x49c>
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff8:	d204      	bcs.n	8004004 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	e001      	b.n	8004008 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004014:	7fbb      	ldrb	r3, [r7, #30]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40007c00 	.word	0x40007c00
 8004024:	40023800 	.word	0x40023800
 8004028:	00f42400 	.word	0x00f42400

0800402c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01a      	beq.n	8004142 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800412a:	d10a      	bne.n	8004142 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	605a      	str	r2, [r3, #4]
  }
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af02      	add	r7, sp, #8
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004180:	f7fd f826 	bl	80011d0 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b08      	cmp	r3, #8
 8004192:	d10e      	bne.n	80041b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f82d 	bl	8004202 <UART_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e023      	b.n	80041fa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d10e      	bne.n	80041de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f817 	bl	8004202 <UART_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e00d      	b.n	80041fa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4613      	mov	r3, r2
 8004210:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004212:	e05e      	b.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d05a      	beq.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421c:	f7fc ffd8 	bl	80011d0 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	429a      	cmp	r2, r3
 800422a:	d302      	bcc.n	8004232 <UART_WaitOnFlagUntilTimeout+0x30>
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d11b      	bne.n	800426a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004240:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0201 	bic.w	r2, r2, #1
 8004250:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2220      	movs	r2, #32
 8004256:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e043      	b.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d02c      	beq.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004286:	d124      	bne.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004290:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042a0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0201 	bic.w	r2, r2, #1
 80042b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e00f      	b.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4013      	ands	r3, r2
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	429a      	cmp	r2, r3
 80042e0:	bf0c      	ite	eq
 80042e2:	2301      	moveq	r3, #1
 80042e4:	2300      	movne	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d091      	beq.n	8004214 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2222      	movs	r2, #34	; 0x22
 8004324:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	2b00      	cmp	r3, #0
 800432c:	d02b      	beq.n	8004386 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	4a25      	ldr	r2, [pc, #148]	; (80043c8 <UART_Start_Receive_DMA+0xcc>)
 8004334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	4a24      	ldr	r2, [pc, #144]	; (80043cc <UART_Start_Receive_DMA+0xd0>)
 800433c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	4a23      	ldr	r2, [pc, #140]	; (80043d0 <UART_Start_Receive_DMA+0xd4>)
 8004344:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	2200      	movs	r2, #0
 800434c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3324      	adds	r3, #36	; 0x24
 8004358:	4619      	mov	r1, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435e:	461a      	mov	r2, r3
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	f7fd f901 	bl	8001568 <HAL_DMA_Start_IT>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00c      	beq.n	8004386 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2210      	movs	r2, #16
 8004370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e01c      	b.n	80043c0 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800439c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043bc:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	0800445d 	.word	0x0800445d
 80043cc:	080044f1 	.word	0x080044f1
 80043d0:	08004529 	.word	0x08004529

080043d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80043ea:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	679a      	str	r2, [r3, #120]	; 0x78
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004414:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442a:	2b01      	cmp	r3, #1
 800442c:	d107      	bne.n	800443e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0210 	bic.w	r2, r2, #16
 800443c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004472:	d02a      	beq.n	80044ca <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800448a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0201 	bic.w	r2, r2, #1
 800449a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044aa:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d107      	bne.n	80044ca <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0210 	bic.w	r2, r2, #16
 80044c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d107      	bne.n	80044e2 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044d8:	4619      	mov	r1, r3
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff fb38 	bl	8003b50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044e0:	e002      	b.n	80044e8 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7fc fbc4 	bl	8000c70 <HAL_UART_RxCpltCallback>
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004502:	2b01      	cmp	r3, #1
 8004504:	d109      	bne.n	800451a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	4619      	mov	r1, r3
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f7ff fb1c 	bl	8003b50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004518:	e002      	b.n	8004520 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f7ff fb04 	bl	8003b28 <HAL_UART_RxHalfCpltCallback>
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800453a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004540:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454c:	2b80      	cmp	r3, #128	; 0x80
 800454e:	d109      	bne.n	8004564 <UART_DMAError+0x3c>
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b21      	cmp	r3, #33	; 0x21
 8004554:	d106      	bne.n	8004564 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2200      	movs	r2, #0
 800455a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800455e:	6978      	ldr	r0, [r7, #20]
 8004560:	f7ff ff38 	bl	80043d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d109      	bne.n	8004586 <UART_DMAError+0x5e>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b22      	cmp	r3, #34	; 0x22
 8004576:	d106      	bne.n	8004586 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2200      	movs	r2, #0
 800457c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004580:	6978      	ldr	r0, [r7, #20]
 8004582:	f7ff ff3c 	bl	80043fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800458c:	f043 0210 	orr.w	r2, r3, #16
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004596:	6978      	ldr	r0, [r7, #20]
 8004598:	f7ff fad0 	bl	8003b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800459c:	bf00      	nop
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <__errno>:
 80045a4:	4b01      	ldr	r3, [pc, #4]	; (80045ac <__errno+0x8>)
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	2000000c 	.word	0x2000000c

080045b0 <__libc_init_array>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	4d0d      	ldr	r5, [pc, #52]	; (80045e8 <__libc_init_array+0x38>)
 80045b4:	4c0d      	ldr	r4, [pc, #52]	; (80045ec <__libc_init_array+0x3c>)
 80045b6:	1b64      	subs	r4, r4, r5
 80045b8:	10a4      	asrs	r4, r4, #2
 80045ba:	2600      	movs	r6, #0
 80045bc:	42a6      	cmp	r6, r4
 80045be:	d109      	bne.n	80045d4 <__libc_init_array+0x24>
 80045c0:	4d0b      	ldr	r5, [pc, #44]	; (80045f0 <__libc_init_array+0x40>)
 80045c2:	4c0c      	ldr	r4, [pc, #48]	; (80045f4 <__libc_init_array+0x44>)
 80045c4:	f000 ff76 	bl	80054b4 <_init>
 80045c8:	1b64      	subs	r4, r4, r5
 80045ca:	10a4      	asrs	r4, r4, #2
 80045cc:	2600      	movs	r6, #0
 80045ce:	42a6      	cmp	r6, r4
 80045d0:	d105      	bne.n	80045de <__libc_init_array+0x2e>
 80045d2:	bd70      	pop	{r4, r5, r6, pc}
 80045d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d8:	4798      	blx	r3
 80045da:	3601      	adds	r6, #1
 80045dc:	e7ee      	b.n	80045bc <__libc_init_array+0xc>
 80045de:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e2:	4798      	blx	r3
 80045e4:	3601      	adds	r6, #1
 80045e6:	e7f2      	b.n	80045ce <__libc_init_array+0x1e>
 80045e8:	080056b4 	.word	0x080056b4
 80045ec:	080056b4 	.word	0x080056b4
 80045f0:	080056b4 	.word	0x080056b4
 80045f4:	080056b8 	.word	0x080056b8

080045f8 <memset>:
 80045f8:	4402      	add	r2, r0
 80045fa:	4603      	mov	r3, r0
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d100      	bne.n	8004602 <memset+0xa>
 8004600:	4770      	bx	lr
 8004602:	f803 1b01 	strb.w	r1, [r3], #1
 8004606:	e7f9      	b.n	80045fc <memset+0x4>

08004608 <iprintf>:
 8004608:	b40f      	push	{r0, r1, r2, r3}
 800460a:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <iprintf+0x2c>)
 800460c:	b513      	push	{r0, r1, r4, lr}
 800460e:	681c      	ldr	r4, [r3, #0]
 8004610:	b124      	cbz	r4, 800461c <iprintf+0x14>
 8004612:	69a3      	ldr	r3, [r4, #24]
 8004614:	b913      	cbnz	r3, 800461c <iprintf+0x14>
 8004616:	4620      	mov	r0, r4
 8004618:	f000 f866 	bl	80046e8 <__sinit>
 800461c:	ab05      	add	r3, sp, #20
 800461e:	9a04      	ldr	r2, [sp, #16]
 8004620:	68a1      	ldr	r1, [r4, #8]
 8004622:	9301      	str	r3, [sp, #4]
 8004624:	4620      	mov	r0, r4
 8004626:	f000 f983 	bl	8004930 <_vfiprintf_r>
 800462a:	b002      	add	sp, #8
 800462c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004630:	b004      	add	sp, #16
 8004632:	4770      	bx	lr
 8004634:	2000000c 	.word	0x2000000c

08004638 <std>:
 8004638:	2300      	movs	r3, #0
 800463a:	b510      	push	{r4, lr}
 800463c:	4604      	mov	r4, r0
 800463e:	e9c0 3300 	strd	r3, r3, [r0]
 8004642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004646:	6083      	str	r3, [r0, #8]
 8004648:	8181      	strh	r1, [r0, #12]
 800464a:	6643      	str	r3, [r0, #100]	; 0x64
 800464c:	81c2      	strh	r2, [r0, #14]
 800464e:	6183      	str	r3, [r0, #24]
 8004650:	4619      	mov	r1, r3
 8004652:	2208      	movs	r2, #8
 8004654:	305c      	adds	r0, #92	; 0x5c
 8004656:	f7ff ffcf 	bl	80045f8 <memset>
 800465a:	4b05      	ldr	r3, [pc, #20]	; (8004670 <std+0x38>)
 800465c:	6263      	str	r3, [r4, #36]	; 0x24
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <std+0x3c>)
 8004660:	62a3      	str	r3, [r4, #40]	; 0x28
 8004662:	4b05      	ldr	r3, [pc, #20]	; (8004678 <std+0x40>)
 8004664:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <std+0x44>)
 8004668:	6224      	str	r4, [r4, #32]
 800466a:	6323      	str	r3, [r4, #48]	; 0x30
 800466c:	bd10      	pop	{r4, pc}
 800466e:	bf00      	nop
 8004670:	08004ed9 	.word	0x08004ed9
 8004674:	08004efb 	.word	0x08004efb
 8004678:	08004f33 	.word	0x08004f33
 800467c:	08004f57 	.word	0x08004f57

08004680 <_cleanup_r>:
 8004680:	4901      	ldr	r1, [pc, #4]	; (8004688 <_cleanup_r+0x8>)
 8004682:	f000 b8af 	b.w	80047e4 <_fwalk_reent>
 8004686:	bf00      	nop
 8004688:	08005231 	.word	0x08005231

0800468c <__sfmoreglue>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	1e4a      	subs	r2, r1, #1
 8004690:	2568      	movs	r5, #104	; 0x68
 8004692:	4355      	muls	r5, r2
 8004694:	460e      	mov	r6, r1
 8004696:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800469a:	f000 f8c5 	bl	8004828 <_malloc_r>
 800469e:	4604      	mov	r4, r0
 80046a0:	b140      	cbz	r0, 80046b4 <__sfmoreglue+0x28>
 80046a2:	2100      	movs	r1, #0
 80046a4:	e9c0 1600 	strd	r1, r6, [r0]
 80046a8:	300c      	adds	r0, #12
 80046aa:	60a0      	str	r0, [r4, #8]
 80046ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046b0:	f7ff ffa2 	bl	80045f8 <memset>
 80046b4:	4620      	mov	r0, r4
 80046b6:	bd70      	pop	{r4, r5, r6, pc}

080046b8 <__sfp_lock_acquire>:
 80046b8:	4801      	ldr	r0, [pc, #4]	; (80046c0 <__sfp_lock_acquire+0x8>)
 80046ba:	f000 b8b3 	b.w	8004824 <__retarget_lock_acquire_recursive>
 80046be:	bf00      	nop
 80046c0:	20000380 	.word	0x20000380

080046c4 <__sfp_lock_release>:
 80046c4:	4801      	ldr	r0, [pc, #4]	; (80046cc <__sfp_lock_release+0x8>)
 80046c6:	f000 b8ae 	b.w	8004826 <__retarget_lock_release_recursive>
 80046ca:	bf00      	nop
 80046cc:	20000380 	.word	0x20000380

080046d0 <__sinit_lock_acquire>:
 80046d0:	4801      	ldr	r0, [pc, #4]	; (80046d8 <__sinit_lock_acquire+0x8>)
 80046d2:	f000 b8a7 	b.w	8004824 <__retarget_lock_acquire_recursive>
 80046d6:	bf00      	nop
 80046d8:	2000037b 	.word	0x2000037b

080046dc <__sinit_lock_release>:
 80046dc:	4801      	ldr	r0, [pc, #4]	; (80046e4 <__sinit_lock_release+0x8>)
 80046de:	f000 b8a2 	b.w	8004826 <__retarget_lock_release_recursive>
 80046e2:	bf00      	nop
 80046e4:	2000037b 	.word	0x2000037b

080046e8 <__sinit>:
 80046e8:	b510      	push	{r4, lr}
 80046ea:	4604      	mov	r4, r0
 80046ec:	f7ff fff0 	bl	80046d0 <__sinit_lock_acquire>
 80046f0:	69a3      	ldr	r3, [r4, #24]
 80046f2:	b11b      	cbz	r3, 80046fc <__sinit+0x14>
 80046f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f8:	f7ff bff0 	b.w	80046dc <__sinit_lock_release>
 80046fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004700:	6523      	str	r3, [r4, #80]	; 0x50
 8004702:	4b13      	ldr	r3, [pc, #76]	; (8004750 <__sinit+0x68>)
 8004704:	4a13      	ldr	r2, [pc, #76]	; (8004754 <__sinit+0x6c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	62a2      	str	r2, [r4, #40]	; 0x28
 800470a:	42a3      	cmp	r3, r4
 800470c:	bf04      	itt	eq
 800470e:	2301      	moveq	r3, #1
 8004710:	61a3      	streq	r3, [r4, #24]
 8004712:	4620      	mov	r0, r4
 8004714:	f000 f820 	bl	8004758 <__sfp>
 8004718:	6060      	str	r0, [r4, #4]
 800471a:	4620      	mov	r0, r4
 800471c:	f000 f81c 	bl	8004758 <__sfp>
 8004720:	60a0      	str	r0, [r4, #8]
 8004722:	4620      	mov	r0, r4
 8004724:	f000 f818 	bl	8004758 <__sfp>
 8004728:	2200      	movs	r2, #0
 800472a:	60e0      	str	r0, [r4, #12]
 800472c:	2104      	movs	r1, #4
 800472e:	6860      	ldr	r0, [r4, #4]
 8004730:	f7ff ff82 	bl	8004638 <std>
 8004734:	68a0      	ldr	r0, [r4, #8]
 8004736:	2201      	movs	r2, #1
 8004738:	2109      	movs	r1, #9
 800473a:	f7ff ff7d 	bl	8004638 <std>
 800473e:	68e0      	ldr	r0, [r4, #12]
 8004740:	2202      	movs	r2, #2
 8004742:	2112      	movs	r1, #18
 8004744:	f7ff ff78 	bl	8004638 <std>
 8004748:	2301      	movs	r3, #1
 800474a:	61a3      	str	r3, [r4, #24]
 800474c:	e7d2      	b.n	80046f4 <__sinit+0xc>
 800474e:	bf00      	nop
 8004750:	08005614 	.word	0x08005614
 8004754:	08004681 	.word	0x08004681

08004758 <__sfp>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	4607      	mov	r7, r0
 800475c:	f7ff ffac 	bl	80046b8 <__sfp_lock_acquire>
 8004760:	4b1e      	ldr	r3, [pc, #120]	; (80047dc <__sfp+0x84>)
 8004762:	681e      	ldr	r6, [r3, #0]
 8004764:	69b3      	ldr	r3, [r6, #24]
 8004766:	b913      	cbnz	r3, 800476e <__sfp+0x16>
 8004768:	4630      	mov	r0, r6
 800476a:	f7ff ffbd 	bl	80046e8 <__sinit>
 800476e:	3648      	adds	r6, #72	; 0x48
 8004770:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004774:	3b01      	subs	r3, #1
 8004776:	d503      	bpl.n	8004780 <__sfp+0x28>
 8004778:	6833      	ldr	r3, [r6, #0]
 800477a:	b30b      	cbz	r3, 80047c0 <__sfp+0x68>
 800477c:	6836      	ldr	r6, [r6, #0]
 800477e:	e7f7      	b.n	8004770 <__sfp+0x18>
 8004780:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004784:	b9d5      	cbnz	r5, 80047bc <__sfp+0x64>
 8004786:	4b16      	ldr	r3, [pc, #88]	; (80047e0 <__sfp+0x88>)
 8004788:	60e3      	str	r3, [r4, #12]
 800478a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800478e:	6665      	str	r5, [r4, #100]	; 0x64
 8004790:	f000 f847 	bl	8004822 <__retarget_lock_init_recursive>
 8004794:	f7ff ff96 	bl	80046c4 <__sfp_lock_release>
 8004798:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800479c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80047a0:	6025      	str	r5, [r4, #0]
 80047a2:	61a5      	str	r5, [r4, #24]
 80047a4:	2208      	movs	r2, #8
 80047a6:	4629      	mov	r1, r5
 80047a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047ac:	f7ff ff24 	bl	80045f8 <memset>
 80047b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047b8:	4620      	mov	r0, r4
 80047ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047bc:	3468      	adds	r4, #104	; 0x68
 80047be:	e7d9      	b.n	8004774 <__sfp+0x1c>
 80047c0:	2104      	movs	r1, #4
 80047c2:	4638      	mov	r0, r7
 80047c4:	f7ff ff62 	bl	800468c <__sfmoreglue>
 80047c8:	4604      	mov	r4, r0
 80047ca:	6030      	str	r0, [r6, #0]
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d1d5      	bne.n	800477c <__sfp+0x24>
 80047d0:	f7ff ff78 	bl	80046c4 <__sfp_lock_release>
 80047d4:	230c      	movs	r3, #12
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	e7ee      	b.n	80047b8 <__sfp+0x60>
 80047da:	bf00      	nop
 80047dc:	08005614 	.word	0x08005614
 80047e0:	ffff0001 	.word	0xffff0001

080047e4 <_fwalk_reent>:
 80047e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047e8:	4606      	mov	r6, r0
 80047ea:	4688      	mov	r8, r1
 80047ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047f0:	2700      	movs	r7, #0
 80047f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047f6:	f1b9 0901 	subs.w	r9, r9, #1
 80047fa:	d505      	bpl.n	8004808 <_fwalk_reent+0x24>
 80047fc:	6824      	ldr	r4, [r4, #0]
 80047fe:	2c00      	cmp	r4, #0
 8004800:	d1f7      	bne.n	80047f2 <_fwalk_reent+0xe>
 8004802:	4638      	mov	r0, r7
 8004804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004808:	89ab      	ldrh	r3, [r5, #12]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d907      	bls.n	800481e <_fwalk_reent+0x3a>
 800480e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004812:	3301      	adds	r3, #1
 8004814:	d003      	beq.n	800481e <_fwalk_reent+0x3a>
 8004816:	4629      	mov	r1, r5
 8004818:	4630      	mov	r0, r6
 800481a:	47c0      	blx	r8
 800481c:	4307      	orrs	r7, r0
 800481e:	3568      	adds	r5, #104	; 0x68
 8004820:	e7e9      	b.n	80047f6 <_fwalk_reent+0x12>

08004822 <__retarget_lock_init_recursive>:
 8004822:	4770      	bx	lr

08004824 <__retarget_lock_acquire_recursive>:
 8004824:	4770      	bx	lr

08004826 <__retarget_lock_release_recursive>:
 8004826:	4770      	bx	lr

08004828 <_malloc_r>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	1ccd      	adds	r5, r1, #3
 800482c:	f025 0503 	bic.w	r5, r5, #3
 8004830:	3508      	adds	r5, #8
 8004832:	2d0c      	cmp	r5, #12
 8004834:	bf38      	it	cc
 8004836:	250c      	movcc	r5, #12
 8004838:	2d00      	cmp	r5, #0
 800483a:	4606      	mov	r6, r0
 800483c:	db01      	blt.n	8004842 <_malloc_r+0x1a>
 800483e:	42a9      	cmp	r1, r5
 8004840:	d903      	bls.n	800484a <_malloc_r+0x22>
 8004842:	230c      	movs	r3, #12
 8004844:	6033      	str	r3, [r6, #0]
 8004846:	2000      	movs	r0, #0
 8004848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800484a:	f000 fda3 	bl	8005394 <__malloc_lock>
 800484e:	4921      	ldr	r1, [pc, #132]	; (80048d4 <_malloc_r+0xac>)
 8004850:	680a      	ldr	r2, [r1, #0]
 8004852:	4614      	mov	r4, r2
 8004854:	b99c      	cbnz	r4, 800487e <_malloc_r+0x56>
 8004856:	4f20      	ldr	r7, [pc, #128]	; (80048d8 <_malloc_r+0xb0>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	b923      	cbnz	r3, 8004866 <_malloc_r+0x3e>
 800485c:	4621      	mov	r1, r4
 800485e:	4630      	mov	r0, r6
 8004860:	f000 fb2a 	bl	8004eb8 <_sbrk_r>
 8004864:	6038      	str	r0, [r7, #0]
 8004866:	4629      	mov	r1, r5
 8004868:	4630      	mov	r0, r6
 800486a:	f000 fb25 	bl	8004eb8 <_sbrk_r>
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	d123      	bne.n	80048ba <_malloc_r+0x92>
 8004872:	230c      	movs	r3, #12
 8004874:	6033      	str	r3, [r6, #0]
 8004876:	4630      	mov	r0, r6
 8004878:	f000 fd92 	bl	80053a0 <__malloc_unlock>
 800487c:	e7e3      	b.n	8004846 <_malloc_r+0x1e>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	1b5b      	subs	r3, r3, r5
 8004882:	d417      	bmi.n	80048b4 <_malloc_r+0x8c>
 8004884:	2b0b      	cmp	r3, #11
 8004886:	d903      	bls.n	8004890 <_malloc_r+0x68>
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	441c      	add	r4, r3
 800488c:	6025      	str	r5, [r4, #0]
 800488e:	e004      	b.n	800489a <_malloc_r+0x72>
 8004890:	6863      	ldr	r3, [r4, #4]
 8004892:	42a2      	cmp	r2, r4
 8004894:	bf0c      	ite	eq
 8004896:	600b      	streq	r3, [r1, #0]
 8004898:	6053      	strne	r3, [r2, #4]
 800489a:	4630      	mov	r0, r6
 800489c:	f000 fd80 	bl	80053a0 <__malloc_unlock>
 80048a0:	f104 000b 	add.w	r0, r4, #11
 80048a4:	1d23      	adds	r3, r4, #4
 80048a6:	f020 0007 	bic.w	r0, r0, #7
 80048aa:	1ac2      	subs	r2, r0, r3
 80048ac:	d0cc      	beq.n	8004848 <_malloc_r+0x20>
 80048ae:	1a1b      	subs	r3, r3, r0
 80048b0:	50a3      	str	r3, [r4, r2]
 80048b2:	e7c9      	b.n	8004848 <_malloc_r+0x20>
 80048b4:	4622      	mov	r2, r4
 80048b6:	6864      	ldr	r4, [r4, #4]
 80048b8:	e7cc      	b.n	8004854 <_malloc_r+0x2c>
 80048ba:	1cc4      	adds	r4, r0, #3
 80048bc:	f024 0403 	bic.w	r4, r4, #3
 80048c0:	42a0      	cmp	r0, r4
 80048c2:	d0e3      	beq.n	800488c <_malloc_r+0x64>
 80048c4:	1a21      	subs	r1, r4, r0
 80048c6:	4630      	mov	r0, r6
 80048c8:	f000 faf6 	bl	8004eb8 <_sbrk_r>
 80048cc:	3001      	adds	r0, #1
 80048ce:	d1dd      	bne.n	800488c <_malloc_r+0x64>
 80048d0:	e7cf      	b.n	8004872 <_malloc_r+0x4a>
 80048d2:	bf00      	nop
 80048d4:	200000a0 	.word	0x200000a0
 80048d8:	200000a4 	.word	0x200000a4

080048dc <__sfputc_r>:
 80048dc:	6893      	ldr	r3, [r2, #8]
 80048de:	3b01      	subs	r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	b410      	push	{r4}
 80048e4:	6093      	str	r3, [r2, #8]
 80048e6:	da08      	bge.n	80048fa <__sfputc_r+0x1e>
 80048e8:	6994      	ldr	r4, [r2, #24]
 80048ea:	42a3      	cmp	r3, r4
 80048ec:	db01      	blt.n	80048f2 <__sfputc_r+0x16>
 80048ee:	290a      	cmp	r1, #10
 80048f0:	d103      	bne.n	80048fa <__sfputc_r+0x1e>
 80048f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048f6:	f000 bb33 	b.w	8004f60 <__swbuf_r>
 80048fa:	6813      	ldr	r3, [r2, #0]
 80048fc:	1c58      	adds	r0, r3, #1
 80048fe:	6010      	str	r0, [r2, #0]
 8004900:	7019      	strb	r1, [r3, #0]
 8004902:	4608      	mov	r0, r1
 8004904:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004908:	4770      	bx	lr

0800490a <__sfputs_r>:
 800490a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490c:	4606      	mov	r6, r0
 800490e:	460f      	mov	r7, r1
 8004910:	4614      	mov	r4, r2
 8004912:	18d5      	adds	r5, r2, r3
 8004914:	42ac      	cmp	r4, r5
 8004916:	d101      	bne.n	800491c <__sfputs_r+0x12>
 8004918:	2000      	movs	r0, #0
 800491a:	e007      	b.n	800492c <__sfputs_r+0x22>
 800491c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004920:	463a      	mov	r2, r7
 8004922:	4630      	mov	r0, r6
 8004924:	f7ff ffda 	bl	80048dc <__sfputc_r>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d1f3      	bne.n	8004914 <__sfputs_r+0xa>
 800492c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004930 <_vfiprintf_r>:
 8004930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004934:	460d      	mov	r5, r1
 8004936:	b09d      	sub	sp, #116	; 0x74
 8004938:	4614      	mov	r4, r2
 800493a:	4698      	mov	r8, r3
 800493c:	4606      	mov	r6, r0
 800493e:	b118      	cbz	r0, 8004948 <_vfiprintf_r+0x18>
 8004940:	6983      	ldr	r3, [r0, #24]
 8004942:	b90b      	cbnz	r3, 8004948 <_vfiprintf_r+0x18>
 8004944:	f7ff fed0 	bl	80046e8 <__sinit>
 8004948:	4b89      	ldr	r3, [pc, #548]	; (8004b70 <_vfiprintf_r+0x240>)
 800494a:	429d      	cmp	r5, r3
 800494c:	d11b      	bne.n	8004986 <_vfiprintf_r+0x56>
 800494e:	6875      	ldr	r5, [r6, #4]
 8004950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004952:	07d9      	lsls	r1, r3, #31
 8004954:	d405      	bmi.n	8004962 <_vfiprintf_r+0x32>
 8004956:	89ab      	ldrh	r3, [r5, #12]
 8004958:	059a      	lsls	r2, r3, #22
 800495a:	d402      	bmi.n	8004962 <_vfiprintf_r+0x32>
 800495c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800495e:	f7ff ff61 	bl	8004824 <__retarget_lock_acquire_recursive>
 8004962:	89ab      	ldrh	r3, [r5, #12]
 8004964:	071b      	lsls	r3, r3, #28
 8004966:	d501      	bpl.n	800496c <_vfiprintf_r+0x3c>
 8004968:	692b      	ldr	r3, [r5, #16]
 800496a:	b9eb      	cbnz	r3, 80049a8 <_vfiprintf_r+0x78>
 800496c:	4629      	mov	r1, r5
 800496e:	4630      	mov	r0, r6
 8004970:	f000 fb5a 	bl	8005028 <__swsetup_r>
 8004974:	b1c0      	cbz	r0, 80049a8 <_vfiprintf_r+0x78>
 8004976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004978:	07dc      	lsls	r4, r3, #31
 800497a:	d50e      	bpl.n	800499a <_vfiprintf_r+0x6a>
 800497c:	f04f 30ff 	mov.w	r0, #4294967295
 8004980:	b01d      	add	sp, #116	; 0x74
 8004982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004986:	4b7b      	ldr	r3, [pc, #492]	; (8004b74 <_vfiprintf_r+0x244>)
 8004988:	429d      	cmp	r5, r3
 800498a:	d101      	bne.n	8004990 <_vfiprintf_r+0x60>
 800498c:	68b5      	ldr	r5, [r6, #8]
 800498e:	e7df      	b.n	8004950 <_vfiprintf_r+0x20>
 8004990:	4b79      	ldr	r3, [pc, #484]	; (8004b78 <_vfiprintf_r+0x248>)
 8004992:	429d      	cmp	r5, r3
 8004994:	bf08      	it	eq
 8004996:	68f5      	ldreq	r5, [r6, #12]
 8004998:	e7da      	b.n	8004950 <_vfiprintf_r+0x20>
 800499a:	89ab      	ldrh	r3, [r5, #12]
 800499c:	0598      	lsls	r0, r3, #22
 800499e:	d4ed      	bmi.n	800497c <_vfiprintf_r+0x4c>
 80049a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049a2:	f7ff ff40 	bl	8004826 <__retarget_lock_release_recursive>
 80049a6:	e7e9      	b.n	800497c <_vfiprintf_r+0x4c>
 80049a8:	2300      	movs	r3, #0
 80049aa:	9309      	str	r3, [sp, #36]	; 0x24
 80049ac:	2320      	movs	r3, #32
 80049ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80049b6:	2330      	movs	r3, #48	; 0x30
 80049b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b7c <_vfiprintf_r+0x24c>
 80049bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049c0:	f04f 0901 	mov.w	r9, #1
 80049c4:	4623      	mov	r3, r4
 80049c6:	469a      	mov	sl, r3
 80049c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049cc:	b10a      	cbz	r2, 80049d2 <_vfiprintf_r+0xa2>
 80049ce:	2a25      	cmp	r2, #37	; 0x25
 80049d0:	d1f9      	bne.n	80049c6 <_vfiprintf_r+0x96>
 80049d2:	ebba 0b04 	subs.w	fp, sl, r4
 80049d6:	d00b      	beq.n	80049f0 <_vfiprintf_r+0xc0>
 80049d8:	465b      	mov	r3, fp
 80049da:	4622      	mov	r2, r4
 80049dc:	4629      	mov	r1, r5
 80049de:	4630      	mov	r0, r6
 80049e0:	f7ff ff93 	bl	800490a <__sfputs_r>
 80049e4:	3001      	adds	r0, #1
 80049e6:	f000 80aa 	beq.w	8004b3e <_vfiprintf_r+0x20e>
 80049ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049ec:	445a      	add	r2, fp
 80049ee:	9209      	str	r2, [sp, #36]	; 0x24
 80049f0:	f89a 3000 	ldrb.w	r3, [sl]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80a2 	beq.w	8004b3e <_vfiprintf_r+0x20e>
 80049fa:	2300      	movs	r3, #0
 80049fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a04:	f10a 0a01 	add.w	sl, sl, #1
 8004a08:	9304      	str	r3, [sp, #16]
 8004a0a:	9307      	str	r3, [sp, #28]
 8004a0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a10:	931a      	str	r3, [sp, #104]	; 0x68
 8004a12:	4654      	mov	r4, sl
 8004a14:	2205      	movs	r2, #5
 8004a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a1a:	4858      	ldr	r0, [pc, #352]	; (8004b7c <_vfiprintf_r+0x24c>)
 8004a1c:	f7fb fc10 	bl	8000240 <memchr>
 8004a20:	9a04      	ldr	r2, [sp, #16]
 8004a22:	b9d8      	cbnz	r0, 8004a5c <_vfiprintf_r+0x12c>
 8004a24:	06d1      	lsls	r1, r2, #27
 8004a26:	bf44      	itt	mi
 8004a28:	2320      	movmi	r3, #32
 8004a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a2e:	0713      	lsls	r3, r2, #28
 8004a30:	bf44      	itt	mi
 8004a32:	232b      	movmi	r3, #43	; 0x2b
 8004a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a38:	f89a 3000 	ldrb.w	r3, [sl]
 8004a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a3e:	d015      	beq.n	8004a6c <_vfiprintf_r+0x13c>
 8004a40:	9a07      	ldr	r2, [sp, #28]
 8004a42:	4654      	mov	r4, sl
 8004a44:	2000      	movs	r0, #0
 8004a46:	f04f 0c0a 	mov.w	ip, #10
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a50:	3b30      	subs	r3, #48	; 0x30
 8004a52:	2b09      	cmp	r3, #9
 8004a54:	d94e      	bls.n	8004af4 <_vfiprintf_r+0x1c4>
 8004a56:	b1b0      	cbz	r0, 8004a86 <_vfiprintf_r+0x156>
 8004a58:	9207      	str	r2, [sp, #28]
 8004a5a:	e014      	b.n	8004a86 <_vfiprintf_r+0x156>
 8004a5c:	eba0 0308 	sub.w	r3, r0, r8
 8004a60:	fa09 f303 	lsl.w	r3, r9, r3
 8004a64:	4313      	orrs	r3, r2
 8004a66:	9304      	str	r3, [sp, #16]
 8004a68:	46a2      	mov	sl, r4
 8004a6a:	e7d2      	b.n	8004a12 <_vfiprintf_r+0xe2>
 8004a6c:	9b03      	ldr	r3, [sp, #12]
 8004a6e:	1d19      	adds	r1, r3, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	9103      	str	r1, [sp, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bfbb      	ittet	lt
 8004a78:	425b      	neglt	r3, r3
 8004a7a:	f042 0202 	orrlt.w	r2, r2, #2
 8004a7e:	9307      	strge	r3, [sp, #28]
 8004a80:	9307      	strlt	r3, [sp, #28]
 8004a82:	bfb8      	it	lt
 8004a84:	9204      	strlt	r2, [sp, #16]
 8004a86:	7823      	ldrb	r3, [r4, #0]
 8004a88:	2b2e      	cmp	r3, #46	; 0x2e
 8004a8a:	d10c      	bne.n	8004aa6 <_vfiprintf_r+0x176>
 8004a8c:	7863      	ldrb	r3, [r4, #1]
 8004a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a90:	d135      	bne.n	8004afe <_vfiprintf_r+0x1ce>
 8004a92:	9b03      	ldr	r3, [sp, #12]
 8004a94:	1d1a      	adds	r2, r3, #4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	9203      	str	r2, [sp, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfb8      	it	lt
 8004a9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004aa2:	3402      	adds	r4, #2
 8004aa4:	9305      	str	r3, [sp, #20]
 8004aa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b8c <_vfiprintf_r+0x25c>
 8004aaa:	7821      	ldrb	r1, [r4, #0]
 8004aac:	2203      	movs	r2, #3
 8004aae:	4650      	mov	r0, sl
 8004ab0:	f7fb fbc6 	bl	8000240 <memchr>
 8004ab4:	b140      	cbz	r0, 8004ac8 <_vfiprintf_r+0x198>
 8004ab6:	2340      	movs	r3, #64	; 0x40
 8004ab8:	eba0 000a 	sub.w	r0, r0, sl
 8004abc:	fa03 f000 	lsl.w	r0, r3, r0
 8004ac0:	9b04      	ldr	r3, [sp, #16]
 8004ac2:	4303      	orrs	r3, r0
 8004ac4:	3401      	adds	r4, #1
 8004ac6:	9304      	str	r3, [sp, #16]
 8004ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004acc:	482c      	ldr	r0, [pc, #176]	; (8004b80 <_vfiprintf_r+0x250>)
 8004ace:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ad2:	2206      	movs	r2, #6
 8004ad4:	f7fb fbb4 	bl	8000240 <memchr>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	d03f      	beq.n	8004b5c <_vfiprintf_r+0x22c>
 8004adc:	4b29      	ldr	r3, [pc, #164]	; (8004b84 <_vfiprintf_r+0x254>)
 8004ade:	bb1b      	cbnz	r3, 8004b28 <_vfiprintf_r+0x1f8>
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	3307      	adds	r3, #7
 8004ae4:	f023 0307 	bic.w	r3, r3, #7
 8004ae8:	3308      	adds	r3, #8
 8004aea:	9303      	str	r3, [sp, #12]
 8004aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aee:	443b      	add	r3, r7
 8004af0:	9309      	str	r3, [sp, #36]	; 0x24
 8004af2:	e767      	b.n	80049c4 <_vfiprintf_r+0x94>
 8004af4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004af8:	460c      	mov	r4, r1
 8004afa:	2001      	movs	r0, #1
 8004afc:	e7a5      	b.n	8004a4a <_vfiprintf_r+0x11a>
 8004afe:	2300      	movs	r3, #0
 8004b00:	3401      	adds	r4, #1
 8004b02:	9305      	str	r3, [sp, #20]
 8004b04:	4619      	mov	r1, r3
 8004b06:	f04f 0c0a 	mov.w	ip, #10
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b10:	3a30      	subs	r2, #48	; 0x30
 8004b12:	2a09      	cmp	r2, #9
 8004b14:	d903      	bls.n	8004b1e <_vfiprintf_r+0x1ee>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0c5      	beq.n	8004aa6 <_vfiprintf_r+0x176>
 8004b1a:	9105      	str	r1, [sp, #20]
 8004b1c:	e7c3      	b.n	8004aa6 <_vfiprintf_r+0x176>
 8004b1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b22:	4604      	mov	r4, r0
 8004b24:	2301      	movs	r3, #1
 8004b26:	e7f0      	b.n	8004b0a <_vfiprintf_r+0x1da>
 8004b28:	ab03      	add	r3, sp, #12
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	462a      	mov	r2, r5
 8004b2e:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <_vfiprintf_r+0x258>)
 8004b30:	a904      	add	r1, sp, #16
 8004b32:	4630      	mov	r0, r6
 8004b34:	f3af 8000 	nop.w
 8004b38:	4607      	mov	r7, r0
 8004b3a:	1c78      	adds	r0, r7, #1
 8004b3c:	d1d6      	bne.n	8004aec <_vfiprintf_r+0x1bc>
 8004b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b40:	07d9      	lsls	r1, r3, #31
 8004b42:	d405      	bmi.n	8004b50 <_vfiprintf_r+0x220>
 8004b44:	89ab      	ldrh	r3, [r5, #12]
 8004b46:	059a      	lsls	r2, r3, #22
 8004b48:	d402      	bmi.n	8004b50 <_vfiprintf_r+0x220>
 8004b4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b4c:	f7ff fe6b 	bl	8004826 <__retarget_lock_release_recursive>
 8004b50:	89ab      	ldrh	r3, [r5, #12]
 8004b52:	065b      	lsls	r3, r3, #25
 8004b54:	f53f af12 	bmi.w	800497c <_vfiprintf_r+0x4c>
 8004b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b5a:	e711      	b.n	8004980 <_vfiprintf_r+0x50>
 8004b5c:	ab03      	add	r3, sp, #12
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	462a      	mov	r2, r5
 8004b62:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <_vfiprintf_r+0x258>)
 8004b64:	a904      	add	r1, sp, #16
 8004b66:	4630      	mov	r0, r6
 8004b68:	f000 f880 	bl	8004c6c <_printf_i>
 8004b6c:	e7e4      	b.n	8004b38 <_vfiprintf_r+0x208>
 8004b6e:	bf00      	nop
 8004b70:	08005638 	.word	0x08005638
 8004b74:	08005658 	.word	0x08005658
 8004b78:	08005618 	.word	0x08005618
 8004b7c:	08005678 	.word	0x08005678
 8004b80:	08005682 	.word	0x08005682
 8004b84:	00000000 	.word	0x00000000
 8004b88:	0800490b 	.word	0x0800490b
 8004b8c:	0800567e 	.word	0x0800567e

08004b90 <_printf_common>:
 8004b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b94:	4616      	mov	r6, r2
 8004b96:	4699      	mov	r9, r3
 8004b98:	688a      	ldr	r2, [r1, #8]
 8004b9a:	690b      	ldr	r3, [r1, #16]
 8004b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	bfb8      	it	lt
 8004ba4:	4613      	movlt	r3, r2
 8004ba6:	6033      	str	r3, [r6, #0]
 8004ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bac:	4607      	mov	r7, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	b10a      	cbz	r2, 8004bb6 <_printf_common+0x26>
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	6033      	str	r3, [r6, #0]
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	0699      	lsls	r1, r3, #26
 8004bba:	bf42      	ittt	mi
 8004bbc:	6833      	ldrmi	r3, [r6, #0]
 8004bbe:	3302      	addmi	r3, #2
 8004bc0:	6033      	strmi	r3, [r6, #0]
 8004bc2:	6825      	ldr	r5, [r4, #0]
 8004bc4:	f015 0506 	ands.w	r5, r5, #6
 8004bc8:	d106      	bne.n	8004bd8 <_printf_common+0x48>
 8004bca:	f104 0a19 	add.w	sl, r4, #25
 8004bce:	68e3      	ldr	r3, [r4, #12]
 8004bd0:	6832      	ldr	r2, [r6, #0]
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	42ab      	cmp	r3, r5
 8004bd6:	dc26      	bgt.n	8004c26 <_printf_common+0x96>
 8004bd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bdc:	1e13      	subs	r3, r2, #0
 8004bde:	6822      	ldr	r2, [r4, #0]
 8004be0:	bf18      	it	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	0692      	lsls	r2, r2, #26
 8004be6:	d42b      	bmi.n	8004c40 <_printf_common+0xb0>
 8004be8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bec:	4649      	mov	r1, r9
 8004bee:	4638      	mov	r0, r7
 8004bf0:	47c0      	blx	r8
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d01e      	beq.n	8004c34 <_printf_common+0xa4>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	68e5      	ldr	r5, [r4, #12]
 8004bfa:	6832      	ldr	r2, [r6, #0]
 8004bfc:	f003 0306 	and.w	r3, r3, #6
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	bf08      	it	eq
 8004c04:	1aad      	subeq	r5, r5, r2
 8004c06:	68a3      	ldr	r3, [r4, #8]
 8004c08:	6922      	ldr	r2, [r4, #16]
 8004c0a:	bf0c      	ite	eq
 8004c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c10:	2500      	movne	r5, #0
 8004c12:	4293      	cmp	r3, r2
 8004c14:	bfc4      	itt	gt
 8004c16:	1a9b      	subgt	r3, r3, r2
 8004c18:	18ed      	addgt	r5, r5, r3
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	341a      	adds	r4, #26
 8004c1e:	42b5      	cmp	r5, r6
 8004c20:	d11a      	bne.n	8004c58 <_printf_common+0xc8>
 8004c22:	2000      	movs	r0, #0
 8004c24:	e008      	b.n	8004c38 <_printf_common+0xa8>
 8004c26:	2301      	movs	r3, #1
 8004c28:	4652      	mov	r2, sl
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	47c0      	blx	r8
 8004c30:	3001      	adds	r0, #1
 8004c32:	d103      	bne.n	8004c3c <_printf_common+0xac>
 8004c34:	f04f 30ff 	mov.w	r0, #4294967295
 8004c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c3c:	3501      	adds	r5, #1
 8004c3e:	e7c6      	b.n	8004bce <_printf_common+0x3e>
 8004c40:	18e1      	adds	r1, r4, r3
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	2030      	movs	r0, #48	; 0x30
 8004c46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c4a:	4422      	add	r2, r4
 8004c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c54:	3302      	adds	r3, #2
 8004c56:	e7c7      	b.n	8004be8 <_printf_common+0x58>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	4649      	mov	r1, r9
 8004c5e:	4638      	mov	r0, r7
 8004c60:	47c0      	blx	r8
 8004c62:	3001      	adds	r0, #1
 8004c64:	d0e6      	beq.n	8004c34 <_printf_common+0xa4>
 8004c66:	3601      	adds	r6, #1
 8004c68:	e7d9      	b.n	8004c1e <_printf_common+0x8e>
	...

08004c6c <_printf_i>:
 8004c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c70:	460c      	mov	r4, r1
 8004c72:	4691      	mov	r9, r2
 8004c74:	7e27      	ldrb	r7, [r4, #24]
 8004c76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c78:	2f78      	cmp	r7, #120	; 0x78
 8004c7a:	4680      	mov	r8, r0
 8004c7c:	469a      	mov	sl, r3
 8004c7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c82:	d807      	bhi.n	8004c94 <_printf_i+0x28>
 8004c84:	2f62      	cmp	r7, #98	; 0x62
 8004c86:	d80a      	bhi.n	8004c9e <_printf_i+0x32>
 8004c88:	2f00      	cmp	r7, #0
 8004c8a:	f000 80d8 	beq.w	8004e3e <_printf_i+0x1d2>
 8004c8e:	2f58      	cmp	r7, #88	; 0x58
 8004c90:	f000 80a3 	beq.w	8004dda <_printf_i+0x16e>
 8004c94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c9c:	e03a      	b.n	8004d14 <_printf_i+0xa8>
 8004c9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ca2:	2b15      	cmp	r3, #21
 8004ca4:	d8f6      	bhi.n	8004c94 <_printf_i+0x28>
 8004ca6:	a001      	add	r0, pc, #4	; (adr r0, 8004cac <_printf_i+0x40>)
 8004ca8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004cac:	08004d05 	.word	0x08004d05
 8004cb0:	08004d19 	.word	0x08004d19
 8004cb4:	08004c95 	.word	0x08004c95
 8004cb8:	08004c95 	.word	0x08004c95
 8004cbc:	08004c95 	.word	0x08004c95
 8004cc0:	08004c95 	.word	0x08004c95
 8004cc4:	08004d19 	.word	0x08004d19
 8004cc8:	08004c95 	.word	0x08004c95
 8004ccc:	08004c95 	.word	0x08004c95
 8004cd0:	08004c95 	.word	0x08004c95
 8004cd4:	08004c95 	.word	0x08004c95
 8004cd8:	08004e25 	.word	0x08004e25
 8004cdc:	08004d49 	.word	0x08004d49
 8004ce0:	08004e07 	.word	0x08004e07
 8004ce4:	08004c95 	.word	0x08004c95
 8004ce8:	08004c95 	.word	0x08004c95
 8004cec:	08004e47 	.word	0x08004e47
 8004cf0:	08004c95 	.word	0x08004c95
 8004cf4:	08004d49 	.word	0x08004d49
 8004cf8:	08004c95 	.word	0x08004c95
 8004cfc:	08004c95 	.word	0x08004c95
 8004d00:	08004e0f 	.word	0x08004e0f
 8004d04:	680b      	ldr	r3, [r1, #0]
 8004d06:	1d1a      	adds	r2, r3, #4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	600a      	str	r2, [r1, #0]
 8004d0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0a3      	b.n	8004e60 <_printf_i+0x1f4>
 8004d18:	6825      	ldr	r5, [r4, #0]
 8004d1a:	6808      	ldr	r0, [r1, #0]
 8004d1c:	062e      	lsls	r6, r5, #24
 8004d1e:	f100 0304 	add.w	r3, r0, #4
 8004d22:	d50a      	bpl.n	8004d3a <_printf_i+0xce>
 8004d24:	6805      	ldr	r5, [r0, #0]
 8004d26:	600b      	str	r3, [r1, #0]
 8004d28:	2d00      	cmp	r5, #0
 8004d2a:	da03      	bge.n	8004d34 <_printf_i+0xc8>
 8004d2c:	232d      	movs	r3, #45	; 0x2d
 8004d2e:	426d      	negs	r5, r5
 8004d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d34:	485e      	ldr	r0, [pc, #376]	; (8004eb0 <_printf_i+0x244>)
 8004d36:	230a      	movs	r3, #10
 8004d38:	e019      	b.n	8004d6e <_printf_i+0x102>
 8004d3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d3e:	6805      	ldr	r5, [r0, #0]
 8004d40:	600b      	str	r3, [r1, #0]
 8004d42:	bf18      	it	ne
 8004d44:	b22d      	sxthne	r5, r5
 8004d46:	e7ef      	b.n	8004d28 <_printf_i+0xbc>
 8004d48:	680b      	ldr	r3, [r1, #0]
 8004d4a:	6825      	ldr	r5, [r4, #0]
 8004d4c:	1d18      	adds	r0, r3, #4
 8004d4e:	6008      	str	r0, [r1, #0]
 8004d50:	0628      	lsls	r0, r5, #24
 8004d52:	d501      	bpl.n	8004d58 <_printf_i+0xec>
 8004d54:	681d      	ldr	r5, [r3, #0]
 8004d56:	e002      	b.n	8004d5e <_printf_i+0xf2>
 8004d58:	0669      	lsls	r1, r5, #25
 8004d5a:	d5fb      	bpl.n	8004d54 <_printf_i+0xe8>
 8004d5c:	881d      	ldrh	r5, [r3, #0]
 8004d5e:	4854      	ldr	r0, [pc, #336]	; (8004eb0 <_printf_i+0x244>)
 8004d60:	2f6f      	cmp	r7, #111	; 0x6f
 8004d62:	bf0c      	ite	eq
 8004d64:	2308      	moveq	r3, #8
 8004d66:	230a      	movne	r3, #10
 8004d68:	2100      	movs	r1, #0
 8004d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d6e:	6866      	ldr	r6, [r4, #4]
 8004d70:	60a6      	str	r6, [r4, #8]
 8004d72:	2e00      	cmp	r6, #0
 8004d74:	bfa2      	ittt	ge
 8004d76:	6821      	ldrge	r1, [r4, #0]
 8004d78:	f021 0104 	bicge.w	r1, r1, #4
 8004d7c:	6021      	strge	r1, [r4, #0]
 8004d7e:	b90d      	cbnz	r5, 8004d84 <_printf_i+0x118>
 8004d80:	2e00      	cmp	r6, #0
 8004d82:	d04d      	beq.n	8004e20 <_printf_i+0x1b4>
 8004d84:	4616      	mov	r6, r2
 8004d86:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d8a:	fb03 5711 	mls	r7, r3, r1, r5
 8004d8e:	5dc7      	ldrb	r7, [r0, r7]
 8004d90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d94:	462f      	mov	r7, r5
 8004d96:	42bb      	cmp	r3, r7
 8004d98:	460d      	mov	r5, r1
 8004d9a:	d9f4      	bls.n	8004d86 <_printf_i+0x11a>
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d10b      	bne.n	8004db8 <_printf_i+0x14c>
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	07df      	lsls	r7, r3, #31
 8004da4:	d508      	bpl.n	8004db8 <_printf_i+0x14c>
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	6861      	ldr	r1, [r4, #4]
 8004daa:	4299      	cmp	r1, r3
 8004dac:	bfde      	ittt	le
 8004dae:	2330      	movle	r3, #48	; 0x30
 8004db0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004db4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004db8:	1b92      	subs	r2, r2, r6
 8004dba:	6122      	str	r2, [r4, #16]
 8004dbc:	f8cd a000 	str.w	sl, [sp]
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	aa03      	add	r2, sp, #12
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	f7ff fee2 	bl	8004b90 <_printf_common>
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d14c      	bne.n	8004e6a <_printf_i+0x1fe>
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd4:	b004      	add	sp, #16
 8004dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dda:	4835      	ldr	r0, [pc, #212]	; (8004eb0 <_printf_i+0x244>)
 8004ddc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	680e      	ldr	r6, [r1, #0]
 8004de4:	061f      	lsls	r7, r3, #24
 8004de6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004dea:	600e      	str	r6, [r1, #0]
 8004dec:	d514      	bpl.n	8004e18 <_printf_i+0x1ac>
 8004dee:	07d9      	lsls	r1, r3, #31
 8004df0:	bf44      	itt	mi
 8004df2:	f043 0320 	orrmi.w	r3, r3, #32
 8004df6:	6023      	strmi	r3, [r4, #0]
 8004df8:	b91d      	cbnz	r5, 8004e02 <_printf_i+0x196>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	f023 0320 	bic.w	r3, r3, #32
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	2310      	movs	r3, #16
 8004e04:	e7b0      	b.n	8004d68 <_printf_i+0xfc>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	f043 0320 	orr.w	r3, r3, #32
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	2378      	movs	r3, #120	; 0x78
 8004e10:	4828      	ldr	r0, [pc, #160]	; (8004eb4 <_printf_i+0x248>)
 8004e12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e16:	e7e3      	b.n	8004de0 <_printf_i+0x174>
 8004e18:	065e      	lsls	r6, r3, #25
 8004e1a:	bf48      	it	mi
 8004e1c:	b2ad      	uxthmi	r5, r5
 8004e1e:	e7e6      	b.n	8004dee <_printf_i+0x182>
 8004e20:	4616      	mov	r6, r2
 8004e22:	e7bb      	b.n	8004d9c <_printf_i+0x130>
 8004e24:	680b      	ldr	r3, [r1, #0]
 8004e26:	6826      	ldr	r6, [r4, #0]
 8004e28:	6960      	ldr	r0, [r4, #20]
 8004e2a:	1d1d      	adds	r5, r3, #4
 8004e2c:	600d      	str	r5, [r1, #0]
 8004e2e:	0635      	lsls	r5, r6, #24
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	d501      	bpl.n	8004e38 <_printf_i+0x1cc>
 8004e34:	6018      	str	r0, [r3, #0]
 8004e36:	e002      	b.n	8004e3e <_printf_i+0x1d2>
 8004e38:	0671      	lsls	r1, r6, #25
 8004e3a:	d5fb      	bpl.n	8004e34 <_printf_i+0x1c8>
 8004e3c:	8018      	strh	r0, [r3, #0]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	6123      	str	r3, [r4, #16]
 8004e42:	4616      	mov	r6, r2
 8004e44:	e7ba      	b.n	8004dbc <_printf_i+0x150>
 8004e46:	680b      	ldr	r3, [r1, #0]
 8004e48:	1d1a      	adds	r2, r3, #4
 8004e4a:	600a      	str	r2, [r1, #0]
 8004e4c:	681e      	ldr	r6, [r3, #0]
 8004e4e:	6862      	ldr	r2, [r4, #4]
 8004e50:	2100      	movs	r1, #0
 8004e52:	4630      	mov	r0, r6
 8004e54:	f7fb f9f4 	bl	8000240 <memchr>
 8004e58:	b108      	cbz	r0, 8004e5e <_printf_i+0x1f2>
 8004e5a:	1b80      	subs	r0, r0, r6
 8004e5c:	6060      	str	r0, [r4, #4]
 8004e5e:	6863      	ldr	r3, [r4, #4]
 8004e60:	6123      	str	r3, [r4, #16]
 8004e62:	2300      	movs	r3, #0
 8004e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e68:	e7a8      	b.n	8004dbc <_printf_i+0x150>
 8004e6a:	6923      	ldr	r3, [r4, #16]
 8004e6c:	4632      	mov	r2, r6
 8004e6e:	4649      	mov	r1, r9
 8004e70:	4640      	mov	r0, r8
 8004e72:	47d0      	blx	sl
 8004e74:	3001      	adds	r0, #1
 8004e76:	d0ab      	beq.n	8004dd0 <_printf_i+0x164>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	079b      	lsls	r3, r3, #30
 8004e7c:	d413      	bmi.n	8004ea6 <_printf_i+0x23a>
 8004e7e:	68e0      	ldr	r0, [r4, #12]
 8004e80:	9b03      	ldr	r3, [sp, #12]
 8004e82:	4298      	cmp	r0, r3
 8004e84:	bfb8      	it	lt
 8004e86:	4618      	movlt	r0, r3
 8004e88:	e7a4      	b.n	8004dd4 <_printf_i+0x168>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4632      	mov	r2, r6
 8004e8e:	4649      	mov	r1, r9
 8004e90:	4640      	mov	r0, r8
 8004e92:	47d0      	blx	sl
 8004e94:	3001      	adds	r0, #1
 8004e96:	d09b      	beq.n	8004dd0 <_printf_i+0x164>
 8004e98:	3501      	adds	r5, #1
 8004e9a:	68e3      	ldr	r3, [r4, #12]
 8004e9c:	9903      	ldr	r1, [sp, #12]
 8004e9e:	1a5b      	subs	r3, r3, r1
 8004ea0:	42ab      	cmp	r3, r5
 8004ea2:	dcf2      	bgt.n	8004e8a <_printf_i+0x21e>
 8004ea4:	e7eb      	b.n	8004e7e <_printf_i+0x212>
 8004ea6:	2500      	movs	r5, #0
 8004ea8:	f104 0619 	add.w	r6, r4, #25
 8004eac:	e7f5      	b.n	8004e9a <_printf_i+0x22e>
 8004eae:	bf00      	nop
 8004eb0:	08005689 	.word	0x08005689
 8004eb4:	0800569a 	.word	0x0800569a

08004eb8 <_sbrk_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4d06      	ldr	r5, [pc, #24]	; (8004ed4 <_sbrk_r+0x1c>)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	602b      	str	r3, [r5, #0]
 8004ec4:	f7fc f8c2 	bl	800104c <_sbrk>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_sbrk_r+0x1a>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_sbrk_r+0x1a>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	20000384 	.word	0x20000384

08004ed8 <__sread>:
 8004ed8:	b510      	push	{r4, lr}
 8004eda:	460c      	mov	r4, r1
 8004edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee0:	f000 fab4 	bl	800544c <_read_r>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	bfab      	itete	ge
 8004ee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004eea:	89a3      	ldrhlt	r3, [r4, #12]
 8004eec:	181b      	addge	r3, r3, r0
 8004eee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ef2:	bfac      	ite	ge
 8004ef4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ef6:	81a3      	strhlt	r3, [r4, #12]
 8004ef8:	bd10      	pop	{r4, pc}

08004efa <__swrite>:
 8004efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004efe:	461f      	mov	r7, r3
 8004f00:	898b      	ldrh	r3, [r1, #12]
 8004f02:	05db      	lsls	r3, r3, #23
 8004f04:	4605      	mov	r5, r0
 8004f06:	460c      	mov	r4, r1
 8004f08:	4616      	mov	r6, r2
 8004f0a:	d505      	bpl.n	8004f18 <__swrite+0x1e>
 8004f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f10:	2302      	movs	r3, #2
 8004f12:	2200      	movs	r2, #0
 8004f14:	f000 f9c8 	bl	80052a8 <_lseek_r>
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f22:	81a3      	strh	r3, [r4, #12]
 8004f24:	4632      	mov	r2, r6
 8004f26:	463b      	mov	r3, r7
 8004f28:	4628      	mov	r0, r5
 8004f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2e:	f000 b869 	b.w	8005004 <_write_r>

08004f32 <__sseek>:
 8004f32:	b510      	push	{r4, lr}
 8004f34:	460c      	mov	r4, r1
 8004f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f3a:	f000 f9b5 	bl	80052a8 <_lseek_r>
 8004f3e:	1c43      	adds	r3, r0, #1
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	bf15      	itete	ne
 8004f44:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f4e:	81a3      	strheq	r3, [r4, #12]
 8004f50:	bf18      	it	ne
 8004f52:	81a3      	strhne	r3, [r4, #12]
 8004f54:	bd10      	pop	{r4, pc}

08004f56 <__sclose>:
 8004f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f5a:	f000 b8d3 	b.w	8005104 <_close_r>
	...

08004f60 <__swbuf_r>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	460e      	mov	r6, r1
 8004f64:	4614      	mov	r4, r2
 8004f66:	4605      	mov	r5, r0
 8004f68:	b118      	cbz	r0, 8004f72 <__swbuf_r+0x12>
 8004f6a:	6983      	ldr	r3, [r0, #24]
 8004f6c:	b90b      	cbnz	r3, 8004f72 <__swbuf_r+0x12>
 8004f6e:	f7ff fbbb 	bl	80046e8 <__sinit>
 8004f72:	4b21      	ldr	r3, [pc, #132]	; (8004ff8 <__swbuf_r+0x98>)
 8004f74:	429c      	cmp	r4, r3
 8004f76:	d12b      	bne.n	8004fd0 <__swbuf_r+0x70>
 8004f78:	686c      	ldr	r4, [r5, #4]
 8004f7a:	69a3      	ldr	r3, [r4, #24]
 8004f7c:	60a3      	str	r3, [r4, #8]
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	071a      	lsls	r2, r3, #28
 8004f82:	d52f      	bpl.n	8004fe4 <__swbuf_r+0x84>
 8004f84:	6923      	ldr	r3, [r4, #16]
 8004f86:	b36b      	cbz	r3, 8004fe4 <__swbuf_r+0x84>
 8004f88:	6923      	ldr	r3, [r4, #16]
 8004f8a:	6820      	ldr	r0, [r4, #0]
 8004f8c:	1ac0      	subs	r0, r0, r3
 8004f8e:	6963      	ldr	r3, [r4, #20]
 8004f90:	b2f6      	uxtb	r6, r6
 8004f92:	4283      	cmp	r3, r0
 8004f94:	4637      	mov	r7, r6
 8004f96:	dc04      	bgt.n	8004fa2 <__swbuf_r+0x42>
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f000 f948 	bl	8005230 <_fflush_r>
 8004fa0:	bb30      	cbnz	r0, 8004ff0 <__swbuf_r+0x90>
 8004fa2:	68a3      	ldr	r3, [r4, #8]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	60a3      	str	r3, [r4, #8]
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	6022      	str	r2, [r4, #0]
 8004fae:	701e      	strb	r6, [r3, #0]
 8004fb0:	6963      	ldr	r3, [r4, #20]
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	4283      	cmp	r3, r0
 8004fb6:	d004      	beq.n	8004fc2 <__swbuf_r+0x62>
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	07db      	lsls	r3, r3, #31
 8004fbc:	d506      	bpl.n	8004fcc <__swbuf_r+0x6c>
 8004fbe:	2e0a      	cmp	r6, #10
 8004fc0:	d104      	bne.n	8004fcc <__swbuf_r+0x6c>
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	f000 f933 	bl	8005230 <_fflush_r>
 8004fca:	b988      	cbnz	r0, 8004ff0 <__swbuf_r+0x90>
 8004fcc:	4638      	mov	r0, r7
 8004fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fd0:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <__swbuf_r+0x9c>)
 8004fd2:	429c      	cmp	r4, r3
 8004fd4:	d101      	bne.n	8004fda <__swbuf_r+0x7a>
 8004fd6:	68ac      	ldr	r4, [r5, #8]
 8004fd8:	e7cf      	b.n	8004f7a <__swbuf_r+0x1a>
 8004fda:	4b09      	ldr	r3, [pc, #36]	; (8005000 <__swbuf_r+0xa0>)
 8004fdc:	429c      	cmp	r4, r3
 8004fde:	bf08      	it	eq
 8004fe0:	68ec      	ldreq	r4, [r5, #12]
 8004fe2:	e7ca      	b.n	8004f7a <__swbuf_r+0x1a>
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f000 f81e 	bl	8005028 <__swsetup_r>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d0cb      	beq.n	8004f88 <__swbuf_r+0x28>
 8004ff0:	f04f 37ff 	mov.w	r7, #4294967295
 8004ff4:	e7ea      	b.n	8004fcc <__swbuf_r+0x6c>
 8004ff6:	bf00      	nop
 8004ff8:	08005638 	.word	0x08005638
 8004ffc:	08005658 	.word	0x08005658
 8005000:	08005618 	.word	0x08005618

08005004 <_write_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d07      	ldr	r5, [pc, #28]	; (8005024 <_write_r+0x20>)
 8005008:	4604      	mov	r4, r0
 800500a:	4608      	mov	r0, r1
 800500c:	4611      	mov	r1, r2
 800500e:	2200      	movs	r2, #0
 8005010:	602a      	str	r2, [r5, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	f7fb ffc9 	bl	8000faa <_write>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_write_r+0x1e>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_write_r+0x1e>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	20000384 	.word	0x20000384

08005028 <__swsetup_r>:
 8005028:	4b32      	ldr	r3, [pc, #200]	; (80050f4 <__swsetup_r+0xcc>)
 800502a:	b570      	push	{r4, r5, r6, lr}
 800502c:	681d      	ldr	r5, [r3, #0]
 800502e:	4606      	mov	r6, r0
 8005030:	460c      	mov	r4, r1
 8005032:	b125      	cbz	r5, 800503e <__swsetup_r+0x16>
 8005034:	69ab      	ldr	r3, [r5, #24]
 8005036:	b913      	cbnz	r3, 800503e <__swsetup_r+0x16>
 8005038:	4628      	mov	r0, r5
 800503a:	f7ff fb55 	bl	80046e8 <__sinit>
 800503e:	4b2e      	ldr	r3, [pc, #184]	; (80050f8 <__swsetup_r+0xd0>)
 8005040:	429c      	cmp	r4, r3
 8005042:	d10f      	bne.n	8005064 <__swsetup_r+0x3c>
 8005044:	686c      	ldr	r4, [r5, #4]
 8005046:	89a3      	ldrh	r3, [r4, #12]
 8005048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800504c:	0719      	lsls	r1, r3, #28
 800504e:	d42c      	bmi.n	80050aa <__swsetup_r+0x82>
 8005050:	06dd      	lsls	r5, r3, #27
 8005052:	d411      	bmi.n	8005078 <__swsetup_r+0x50>
 8005054:	2309      	movs	r3, #9
 8005056:	6033      	str	r3, [r6, #0]
 8005058:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800505c:	81a3      	strh	r3, [r4, #12]
 800505e:	f04f 30ff 	mov.w	r0, #4294967295
 8005062:	e03e      	b.n	80050e2 <__swsetup_r+0xba>
 8005064:	4b25      	ldr	r3, [pc, #148]	; (80050fc <__swsetup_r+0xd4>)
 8005066:	429c      	cmp	r4, r3
 8005068:	d101      	bne.n	800506e <__swsetup_r+0x46>
 800506a:	68ac      	ldr	r4, [r5, #8]
 800506c:	e7eb      	b.n	8005046 <__swsetup_r+0x1e>
 800506e:	4b24      	ldr	r3, [pc, #144]	; (8005100 <__swsetup_r+0xd8>)
 8005070:	429c      	cmp	r4, r3
 8005072:	bf08      	it	eq
 8005074:	68ec      	ldreq	r4, [r5, #12]
 8005076:	e7e6      	b.n	8005046 <__swsetup_r+0x1e>
 8005078:	0758      	lsls	r0, r3, #29
 800507a:	d512      	bpl.n	80050a2 <__swsetup_r+0x7a>
 800507c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800507e:	b141      	cbz	r1, 8005092 <__swsetup_r+0x6a>
 8005080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005084:	4299      	cmp	r1, r3
 8005086:	d002      	beq.n	800508e <__swsetup_r+0x66>
 8005088:	4630      	mov	r0, r6
 800508a:	f000 f98f 	bl	80053ac <_free_r>
 800508e:	2300      	movs	r3, #0
 8005090:	6363      	str	r3, [r4, #52]	; 0x34
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	2300      	movs	r3, #0
 800509c:	6063      	str	r3, [r4, #4]
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	89a3      	ldrh	r3, [r4, #12]
 80050a4:	f043 0308 	orr.w	r3, r3, #8
 80050a8:	81a3      	strh	r3, [r4, #12]
 80050aa:	6923      	ldr	r3, [r4, #16]
 80050ac:	b94b      	cbnz	r3, 80050c2 <__swsetup_r+0x9a>
 80050ae:	89a3      	ldrh	r3, [r4, #12]
 80050b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b8:	d003      	beq.n	80050c2 <__swsetup_r+0x9a>
 80050ba:	4621      	mov	r1, r4
 80050bc:	4630      	mov	r0, r6
 80050be:	f000 f929 	bl	8005314 <__smakebuf_r>
 80050c2:	89a0      	ldrh	r0, [r4, #12]
 80050c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050c8:	f010 0301 	ands.w	r3, r0, #1
 80050cc:	d00a      	beq.n	80050e4 <__swsetup_r+0xbc>
 80050ce:	2300      	movs	r3, #0
 80050d0:	60a3      	str	r3, [r4, #8]
 80050d2:	6963      	ldr	r3, [r4, #20]
 80050d4:	425b      	negs	r3, r3
 80050d6:	61a3      	str	r3, [r4, #24]
 80050d8:	6923      	ldr	r3, [r4, #16]
 80050da:	b943      	cbnz	r3, 80050ee <__swsetup_r+0xc6>
 80050dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80050e0:	d1ba      	bne.n	8005058 <__swsetup_r+0x30>
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
 80050e4:	0781      	lsls	r1, r0, #30
 80050e6:	bf58      	it	pl
 80050e8:	6963      	ldrpl	r3, [r4, #20]
 80050ea:	60a3      	str	r3, [r4, #8]
 80050ec:	e7f4      	b.n	80050d8 <__swsetup_r+0xb0>
 80050ee:	2000      	movs	r0, #0
 80050f0:	e7f7      	b.n	80050e2 <__swsetup_r+0xba>
 80050f2:	bf00      	nop
 80050f4:	2000000c 	.word	0x2000000c
 80050f8:	08005638 	.word	0x08005638
 80050fc:	08005658 	.word	0x08005658
 8005100:	08005618 	.word	0x08005618

08005104 <_close_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4d06      	ldr	r5, [pc, #24]	; (8005120 <_close_r+0x1c>)
 8005108:	2300      	movs	r3, #0
 800510a:	4604      	mov	r4, r0
 800510c:	4608      	mov	r0, r1
 800510e:	602b      	str	r3, [r5, #0]
 8005110:	f7fb ff67 	bl	8000fe2 <_close>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_close_r+0x1a>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	b103      	cbz	r3, 800511e <_close_r+0x1a>
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	20000384 	.word	0x20000384

08005124 <__sflush_r>:
 8005124:	898a      	ldrh	r2, [r1, #12]
 8005126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800512a:	4605      	mov	r5, r0
 800512c:	0710      	lsls	r0, r2, #28
 800512e:	460c      	mov	r4, r1
 8005130:	d458      	bmi.n	80051e4 <__sflush_r+0xc0>
 8005132:	684b      	ldr	r3, [r1, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	dc05      	bgt.n	8005144 <__sflush_r+0x20>
 8005138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	dc02      	bgt.n	8005144 <__sflush_r+0x20>
 800513e:	2000      	movs	r0, #0
 8005140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005146:	2e00      	cmp	r6, #0
 8005148:	d0f9      	beq.n	800513e <__sflush_r+0x1a>
 800514a:	2300      	movs	r3, #0
 800514c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005150:	682f      	ldr	r7, [r5, #0]
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	d032      	beq.n	80051bc <__sflush_r+0x98>
 8005156:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	075a      	lsls	r2, r3, #29
 800515c:	d505      	bpl.n	800516a <__sflush_r+0x46>
 800515e:	6863      	ldr	r3, [r4, #4]
 8005160:	1ac0      	subs	r0, r0, r3
 8005162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005164:	b10b      	cbz	r3, 800516a <__sflush_r+0x46>
 8005166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005168:	1ac0      	subs	r0, r0, r3
 800516a:	2300      	movs	r3, #0
 800516c:	4602      	mov	r2, r0
 800516e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005170:	6a21      	ldr	r1, [r4, #32]
 8005172:	4628      	mov	r0, r5
 8005174:	47b0      	blx	r6
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	d106      	bne.n	800518a <__sflush_r+0x66>
 800517c:	6829      	ldr	r1, [r5, #0]
 800517e:	291d      	cmp	r1, #29
 8005180:	d82c      	bhi.n	80051dc <__sflush_r+0xb8>
 8005182:	4a2a      	ldr	r2, [pc, #168]	; (800522c <__sflush_r+0x108>)
 8005184:	40ca      	lsrs	r2, r1
 8005186:	07d6      	lsls	r6, r2, #31
 8005188:	d528      	bpl.n	80051dc <__sflush_r+0xb8>
 800518a:	2200      	movs	r2, #0
 800518c:	6062      	str	r2, [r4, #4]
 800518e:	04d9      	lsls	r1, r3, #19
 8005190:	6922      	ldr	r2, [r4, #16]
 8005192:	6022      	str	r2, [r4, #0]
 8005194:	d504      	bpl.n	80051a0 <__sflush_r+0x7c>
 8005196:	1c42      	adds	r2, r0, #1
 8005198:	d101      	bne.n	800519e <__sflush_r+0x7a>
 800519a:	682b      	ldr	r3, [r5, #0]
 800519c:	b903      	cbnz	r3, 80051a0 <__sflush_r+0x7c>
 800519e:	6560      	str	r0, [r4, #84]	; 0x54
 80051a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051a2:	602f      	str	r7, [r5, #0]
 80051a4:	2900      	cmp	r1, #0
 80051a6:	d0ca      	beq.n	800513e <__sflush_r+0x1a>
 80051a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051ac:	4299      	cmp	r1, r3
 80051ae:	d002      	beq.n	80051b6 <__sflush_r+0x92>
 80051b0:	4628      	mov	r0, r5
 80051b2:	f000 f8fb 	bl	80053ac <_free_r>
 80051b6:	2000      	movs	r0, #0
 80051b8:	6360      	str	r0, [r4, #52]	; 0x34
 80051ba:	e7c1      	b.n	8005140 <__sflush_r+0x1c>
 80051bc:	6a21      	ldr	r1, [r4, #32]
 80051be:	2301      	movs	r3, #1
 80051c0:	4628      	mov	r0, r5
 80051c2:	47b0      	blx	r6
 80051c4:	1c41      	adds	r1, r0, #1
 80051c6:	d1c7      	bne.n	8005158 <__sflush_r+0x34>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0c4      	beq.n	8005158 <__sflush_r+0x34>
 80051ce:	2b1d      	cmp	r3, #29
 80051d0:	d001      	beq.n	80051d6 <__sflush_r+0xb2>
 80051d2:	2b16      	cmp	r3, #22
 80051d4:	d101      	bne.n	80051da <__sflush_r+0xb6>
 80051d6:	602f      	str	r7, [r5, #0]
 80051d8:	e7b1      	b.n	800513e <__sflush_r+0x1a>
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e0:	81a3      	strh	r3, [r4, #12]
 80051e2:	e7ad      	b.n	8005140 <__sflush_r+0x1c>
 80051e4:	690f      	ldr	r7, [r1, #16]
 80051e6:	2f00      	cmp	r7, #0
 80051e8:	d0a9      	beq.n	800513e <__sflush_r+0x1a>
 80051ea:	0793      	lsls	r3, r2, #30
 80051ec:	680e      	ldr	r6, [r1, #0]
 80051ee:	bf08      	it	eq
 80051f0:	694b      	ldreq	r3, [r1, #20]
 80051f2:	600f      	str	r7, [r1, #0]
 80051f4:	bf18      	it	ne
 80051f6:	2300      	movne	r3, #0
 80051f8:	eba6 0807 	sub.w	r8, r6, r7
 80051fc:	608b      	str	r3, [r1, #8]
 80051fe:	f1b8 0f00 	cmp.w	r8, #0
 8005202:	dd9c      	ble.n	800513e <__sflush_r+0x1a>
 8005204:	6a21      	ldr	r1, [r4, #32]
 8005206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005208:	4643      	mov	r3, r8
 800520a:	463a      	mov	r2, r7
 800520c:	4628      	mov	r0, r5
 800520e:	47b0      	blx	r6
 8005210:	2800      	cmp	r0, #0
 8005212:	dc06      	bgt.n	8005222 <__sflush_r+0xfe>
 8005214:	89a3      	ldrh	r3, [r4, #12]
 8005216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800521a:	81a3      	strh	r3, [r4, #12]
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
 8005220:	e78e      	b.n	8005140 <__sflush_r+0x1c>
 8005222:	4407      	add	r7, r0
 8005224:	eba8 0800 	sub.w	r8, r8, r0
 8005228:	e7e9      	b.n	80051fe <__sflush_r+0xda>
 800522a:	bf00      	nop
 800522c:	20400001 	.word	0x20400001

08005230 <_fflush_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	690b      	ldr	r3, [r1, #16]
 8005234:	4605      	mov	r5, r0
 8005236:	460c      	mov	r4, r1
 8005238:	b913      	cbnz	r3, 8005240 <_fflush_r+0x10>
 800523a:	2500      	movs	r5, #0
 800523c:	4628      	mov	r0, r5
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	b118      	cbz	r0, 800524a <_fflush_r+0x1a>
 8005242:	6983      	ldr	r3, [r0, #24]
 8005244:	b90b      	cbnz	r3, 800524a <_fflush_r+0x1a>
 8005246:	f7ff fa4f 	bl	80046e8 <__sinit>
 800524a:	4b14      	ldr	r3, [pc, #80]	; (800529c <_fflush_r+0x6c>)
 800524c:	429c      	cmp	r4, r3
 800524e:	d11b      	bne.n	8005288 <_fflush_r+0x58>
 8005250:	686c      	ldr	r4, [r5, #4]
 8005252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0ef      	beq.n	800523a <_fflush_r+0xa>
 800525a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800525c:	07d0      	lsls	r0, r2, #31
 800525e:	d404      	bmi.n	800526a <_fflush_r+0x3a>
 8005260:	0599      	lsls	r1, r3, #22
 8005262:	d402      	bmi.n	800526a <_fflush_r+0x3a>
 8005264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005266:	f7ff fadd 	bl	8004824 <__retarget_lock_acquire_recursive>
 800526a:	4628      	mov	r0, r5
 800526c:	4621      	mov	r1, r4
 800526e:	f7ff ff59 	bl	8005124 <__sflush_r>
 8005272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005274:	07da      	lsls	r2, r3, #31
 8005276:	4605      	mov	r5, r0
 8005278:	d4e0      	bmi.n	800523c <_fflush_r+0xc>
 800527a:	89a3      	ldrh	r3, [r4, #12]
 800527c:	059b      	lsls	r3, r3, #22
 800527e:	d4dd      	bmi.n	800523c <_fflush_r+0xc>
 8005280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005282:	f7ff fad0 	bl	8004826 <__retarget_lock_release_recursive>
 8005286:	e7d9      	b.n	800523c <_fflush_r+0xc>
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <_fflush_r+0x70>)
 800528a:	429c      	cmp	r4, r3
 800528c:	d101      	bne.n	8005292 <_fflush_r+0x62>
 800528e:	68ac      	ldr	r4, [r5, #8]
 8005290:	e7df      	b.n	8005252 <_fflush_r+0x22>
 8005292:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <_fflush_r+0x74>)
 8005294:	429c      	cmp	r4, r3
 8005296:	bf08      	it	eq
 8005298:	68ec      	ldreq	r4, [r5, #12]
 800529a:	e7da      	b.n	8005252 <_fflush_r+0x22>
 800529c:	08005638 	.word	0x08005638
 80052a0:	08005658 	.word	0x08005658
 80052a4:	08005618 	.word	0x08005618

080052a8 <_lseek_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d07      	ldr	r5, [pc, #28]	; (80052c8 <_lseek_r+0x20>)
 80052ac:	4604      	mov	r4, r0
 80052ae:	4608      	mov	r0, r1
 80052b0:	4611      	mov	r1, r2
 80052b2:	2200      	movs	r2, #0
 80052b4:	602a      	str	r2, [r5, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f7fb feba 	bl	8001030 <_lseek>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_lseek_r+0x1e>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_lseek_r+0x1e>
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	20000384 	.word	0x20000384

080052cc <__swhatbuf_r>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	460e      	mov	r6, r1
 80052d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d4:	2900      	cmp	r1, #0
 80052d6:	b096      	sub	sp, #88	; 0x58
 80052d8:	4614      	mov	r4, r2
 80052da:	461d      	mov	r5, r3
 80052dc:	da07      	bge.n	80052ee <__swhatbuf_r+0x22>
 80052de:	2300      	movs	r3, #0
 80052e0:	602b      	str	r3, [r5, #0]
 80052e2:	89b3      	ldrh	r3, [r6, #12]
 80052e4:	061a      	lsls	r2, r3, #24
 80052e6:	d410      	bmi.n	800530a <__swhatbuf_r+0x3e>
 80052e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052ec:	e00e      	b.n	800530c <__swhatbuf_r+0x40>
 80052ee:	466a      	mov	r2, sp
 80052f0:	f000 f8be 	bl	8005470 <_fstat_r>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	dbf2      	blt.n	80052de <__swhatbuf_r+0x12>
 80052f8:	9a01      	ldr	r2, [sp, #4]
 80052fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005302:	425a      	negs	r2, r3
 8005304:	415a      	adcs	r2, r3
 8005306:	602a      	str	r2, [r5, #0]
 8005308:	e7ee      	b.n	80052e8 <__swhatbuf_r+0x1c>
 800530a:	2340      	movs	r3, #64	; 0x40
 800530c:	2000      	movs	r0, #0
 800530e:	6023      	str	r3, [r4, #0]
 8005310:	b016      	add	sp, #88	; 0x58
 8005312:	bd70      	pop	{r4, r5, r6, pc}

08005314 <__smakebuf_r>:
 8005314:	898b      	ldrh	r3, [r1, #12]
 8005316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005318:	079d      	lsls	r5, r3, #30
 800531a:	4606      	mov	r6, r0
 800531c:	460c      	mov	r4, r1
 800531e:	d507      	bpl.n	8005330 <__smakebuf_r+0x1c>
 8005320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	6123      	str	r3, [r4, #16]
 8005328:	2301      	movs	r3, #1
 800532a:	6163      	str	r3, [r4, #20]
 800532c:	b002      	add	sp, #8
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	ab01      	add	r3, sp, #4
 8005332:	466a      	mov	r2, sp
 8005334:	f7ff ffca 	bl	80052cc <__swhatbuf_r>
 8005338:	9900      	ldr	r1, [sp, #0]
 800533a:	4605      	mov	r5, r0
 800533c:	4630      	mov	r0, r6
 800533e:	f7ff fa73 	bl	8004828 <_malloc_r>
 8005342:	b948      	cbnz	r0, 8005358 <__smakebuf_r+0x44>
 8005344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005348:	059a      	lsls	r2, r3, #22
 800534a:	d4ef      	bmi.n	800532c <__smakebuf_r+0x18>
 800534c:	f023 0303 	bic.w	r3, r3, #3
 8005350:	f043 0302 	orr.w	r3, r3, #2
 8005354:	81a3      	strh	r3, [r4, #12]
 8005356:	e7e3      	b.n	8005320 <__smakebuf_r+0xc>
 8005358:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <__smakebuf_r+0x7c>)
 800535a:	62b3      	str	r3, [r6, #40]	; 0x28
 800535c:	89a3      	ldrh	r3, [r4, #12]
 800535e:	6020      	str	r0, [r4, #0]
 8005360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005364:	81a3      	strh	r3, [r4, #12]
 8005366:	9b00      	ldr	r3, [sp, #0]
 8005368:	6163      	str	r3, [r4, #20]
 800536a:	9b01      	ldr	r3, [sp, #4]
 800536c:	6120      	str	r0, [r4, #16]
 800536e:	b15b      	cbz	r3, 8005388 <__smakebuf_r+0x74>
 8005370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005374:	4630      	mov	r0, r6
 8005376:	f000 f88d 	bl	8005494 <_isatty_r>
 800537a:	b128      	cbz	r0, 8005388 <__smakebuf_r+0x74>
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	89a0      	ldrh	r0, [r4, #12]
 800538a:	4305      	orrs	r5, r0
 800538c:	81a5      	strh	r5, [r4, #12]
 800538e:	e7cd      	b.n	800532c <__smakebuf_r+0x18>
 8005390:	08004681 	.word	0x08004681

08005394 <__malloc_lock>:
 8005394:	4801      	ldr	r0, [pc, #4]	; (800539c <__malloc_lock+0x8>)
 8005396:	f7ff ba45 	b.w	8004824 <__retarget_lock_acquire_recursive>
 800539a:	bf00      	nop
 800539c:	2000037c 	.word	0x2000037c

080053a0 <__malloc_unlock>:
 80053a0:	4801      	ldr	r0, [pc, #4]	; (80053a8 <__malloc_unlock+0x8>)
 80053a2:	f7ff ba40 	b.w	8004826 <__retarget_lock_release_recursive>
 80053a6:	bf00      	nop
 80053a8:	2000037c 	.word	0x2000037c

080053ac <_free_r>:
 80053ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ae:	2900      	cmp	r1, #0
 80053b0:	d048      	beq.n	8005444 <_free_r+0x98>
 80053b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b6:	9001      	str	r0, [sp, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f1a1 0404 	sub.w	r4, r1, #4
 80053be:	bfb8      	it	lt
 80053c0:	18e4      	addlt	r4, r4, r3
 80053c2:	f7ff ffe7 	bl	8005394 <__malloc_lock>
 80053c6:	4a20      	ldr	r2, [pc, #128]	; (8005448 <_free_r+0x9c>)
 80053c8:	9801      	ldr	r0, [sp, #4]
 80053ca:	6813      	ldr	r3, [r2, #0]
 80053cc:	4615      	mov	r5, r2
 80053ce:	b933      	cbnz	r3, 80053de <_free_r+0x32>
 80053d0:	6063      	str	r3, [r4, #4]
 80053d2:	6014      	str	r4, [r2, #0]
 80053d4:	b003      	add	sp, #12
 80053d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053da:	f7ff bfe1 	b.w	80053a0 <__malloc_unlock>
 80053de:	42a3      	cmp	r3, r4
 80053e0:	d90b      	bls.n	80053fa <_free_r+0x4e>
 80053e2:	6821      	ldr	r1, [r4, #0]
 80053e4:	1862      	adds	r2, r4, r1
 80053e6:	4293      	cmp	r3, r2
 80053e8:	bf04      	itt	eq
 80053ea:	681a      	ldreq	r2, [r3, #0]
 80053ec:	685b      	ldreq	r3, [r3, #4]
 80053ee:	6063      	str	r3, [r4, #4]
 80053f0:	bf04      	itt	eq
 80053f2:	1852      	addeq	r2, r2, r1
 80053f4:	6022      	streq	r2, [r4, #0]
 80053f6:	602c      	str	r4, [r5, #0]
 80053f8:	e7ec      	b.n	80053d4 <_free_r+0x28>
 80053fa:	461a      	mov	r2, r3
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	b10b      	cbz	r3, 8005404 <_free_r+0x58>
 8005400:	42a3      	cmp	r3, r4
 8005402:	d9fa      	bls.n	80053fa <_free_r+0x4e>
 8005404:	6811      	ldr	r1, [r2, #0]
 8005406:	1855      	adds	r5, r2, r1
 8005408:	42a5      	cmp	r5, r4
 800540a:	d10b      	bne.n	8005424 <_free_r+0x78>
 800540c:	6824      	ldr	r4, [r4, #0]
 800540e:	4421      	add	r1, r4
 8005410:	1854      	adds	r4, r2, r1
 8005412:	42a3      	cmp	r3, r4
 8005414:	6011      	str	r1, [r2, #0]
 8005416:	d1dd      	bne.n	80053d4 <_free_r+0x28>
 8005418:	681c      	ldr	r4, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	6053      	str	r3, [r2, #4]
 800541e:	4421      	add	r1, r4
 8005420:	6011      	str	r1, [r2, #0]
 8005422:	e7d7      	b.n	80053d4 <_free_r+0x28>
 8005424:	d902      	bls.n	800542c <_free_r+0x80>
 8005426:	230c      	movs	r3, #12
 8005428:	6003      	str	r3, [r0, #0]
 800542a:	e7d3      	b.n	80053d4 <_free_r+0x28>
 800542c:	6825      	ldr	r5, [r4, #0]
 800542e:	1961      	adds	r1, r4, r5
 8005430:	428b      	cmp	r3, r1
 8005432:	bf04      	itt	eq
 8005434:	6819      	ldreq	r1, [r3, #0]
 8005436:	685b      	ldreq	r3, [r3, #4]
 8005438:	6063      	str	r3, [r4, #4]
 800543a:	bf04      	itt	eq
 800543c:	1949      	addeq	r1, r1, r5
 800543e:	6021      	streq	r1, [r4, #0]
 8005440:	6054      	str	r4, [r2, #4]
 8005442:	e7c7      	b.n	80053d4 <_free_r+0x28>
 8005444:	b003      	add	sp, #12
 8005446:	bd30      	pop	{r4, r5, pc}
 8005448:	200000a0 	.word	0x200000a0

0800544c <_read_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d07      	ldr	r5, [pc, #28]	; (800546c <_read_r+0x20>)
 8005450:	4604      	mov	r4, r0
 8005452:	4608      	mov	r0, r1
 8005454:	4611      	mov	r1, r2
 8005456:	2200      	movs	r2, #0
 8005458:	602a      	str	r2, [r5, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	f7fb fd88 	bl	8000f70 <_read>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_read_r+0x1e>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_read_r+0x1e>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	20000384 	.word	0x20000384

08005470 <_fstat_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d07      	ldr	r5, [pc, #28]	; (8005490 <_fstat_r+0x20>)
 8005474:	2300      	movs	r3, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	4611      	mov	r1, r2
 800547c:	602b      	str	r3, [r5, #0]
 800547e:	f7fb fdbc 	bl	8000ffa <_fstat>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	d102      	bne.n	800548c <_fstat_r+0x1c>
 8005486:	682b      	ldr	r3, [r5, #0]
 8005488:	b103      	cbz	r3, 800548c <_fstat_r+0x1c>
 800548a:	6023      	str	r3, [r4, #0]
 800548c:	bd38      	pop	{r3, r4, r5, pc}
 800548e:	bf00      	nop
 8005490:	20000384 	.word	0x20000384

08005494 <_isatty_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4d06      	ldr	r5, [pc, #24]	; (80054b0 <_isatty_r+0x1c>)
 8005498:	2300      	movs	r3, #0
 800549a:	4604      	mov	r4, r0
 800549c:	4608      	mov	r0, r1
 800549e:	602b      	str	r3, [r5, #0]
 80054a0:	f7fb fdbb 	bl	800101a <_isatty>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d102      	bne.n	80054ae <_isatty_r+0x1a>
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	b103      	cbz	r3, 80054ae <_isatty_r+0x1a>
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	20000384 	.word	0x20000384

080054b4 <_init>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	bf00      	nop
 80054b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ba:	bc08      	pop	{r3}
 80054bc:	469e      	mov	lr, r3
 80054be:	4770      	bx	lr

080054c0 <_fini>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	bf00      	nop
 80054c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c6:	bc08      	pop	{r3}
 80054c8:	469e      	mov	lr, r3
 80054ca:	4770      	bx	lr
