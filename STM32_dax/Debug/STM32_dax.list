
STM32_dax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000655c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000067f8  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf4c  0800cf4c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf4c  0800cf4c  0001cf4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf54  0800cf54  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf54  0800cf54  0001cf54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf58  0800cf58  0001cf58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800cf5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000473c  2000009c  0800cff8  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200047d8  0800cff8  000247d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b36  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce3  00000000  00000000  00034c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  000378e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  00038c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c92  00000000  00000000  00039e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b2a  00000000  00000000  00062aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8341  00000000  00000000  00076614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016e955  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe0  00000000  00000000  0016e9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000009c 	.word	0x2000009c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800673c 	.word	0x0800673c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000a0 	.word	0x200000a0
 8000234:	0800673c 	.word	0x0800673c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <add_note_last>:

// Add a note at the end of the list
// ---------------------------------

llist add_note_last(llist list, uint8_t midi_note, uint8_t velocity)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
 800053c:	4613      	mov	r3, r2
 800053e:	70bb      	strb	r3, [r7, #2]
    // Add a new element in memory

    note* new_note = malloc(sizeof(note));
 8000540:	2008      	movs	r0, #8
 8000542:	f006 f81b 	bl	800657c <malloc>
 8000546:	4603      	mov	r3, r0
 8000548:	60bb      	str	r3, [r7, #8]

    // Set the new element values

    new_note->midi_note = midi_note;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	701a      	strb	r2, [r3, #0]
    new_note->velocity = velocity;
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	78ba      	ldrb	r2, [r7, #2]
 8000554:	705a      	strb	r2, [r3, #1]

    // There is no next element

    new_note->nxt = NULL;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]

    // If list is empty, then simply return the newly created element

    if(list == NULL)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <add_note_last+0x36>
    {
        return new_note;
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	e00d      	b.n	8000582 <add_note_last+0x52>

    // Else, walk through the list to find the actual last element

    else
    {
    	note* temp=list;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 800056a:	e002      	b.n	8000572 <add_note_last+0x42>
        {
            temp = temp->nxt;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1f8      	bne.n	800056c <add_note_last+0x3c>
        }
        temp->nxt = new_note;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	605a      	str	r2, [r3, #4]
        return list;
 8000580:	687b      	ldr	r3, [r7, #4]
    }
}
 8000582:	4618      	mov	r0, r3
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <delete_note>:

// Delete a note based on the midi_note
// ------------------------------------

llist delete_note(llist list, uint8_t midi_note)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	70fb      	strb	r3, [r7, #3]
    // If list is empty, then just returns

    if(list == NULL)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d101      	bne.n	80005a0 <delete_note+0x16>
        return NULL;
 800059c:	2300      	movs	r3, #0
 800059e:	e01d      	b.n	80005dc <delete_note+0x52>

    // If the current element is the one to delete

    if(list->midi_note == midi_note)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	78fa      	ldrb	r2, [r7, #3]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d10d      	bne.n	80005c6 <delete_note+0x3c>
    {
        note* tmp = list->nxt;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	60fb      	str	r3, [r7, #12]
        free(list);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f005 ffeb 	bl	800658c <free>
        tmp = delete_note(tmp, midi_note);
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	4619      	mov	r1, r3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f7ff ffe5 	bl	800058a <delete_note>
 80005c0:	60f8      	str	r0, [r7, #12]
        return tmp;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	e00a      	b.n	80005dc <delete_note+0x52>

    // Else, the current element is not the one to delete

    else
    {
        list->nxt = delete_note(list->nxt, midi_note);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ffdb 	bl	800058a <delete_note>
 80005d4:	4602      	mov	r2, r0
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	605a      	str	r2, [r3, #4]
        return list;
 80005da:	687b      	ldr	r3, [r7, #4]
    }
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <get_last_note>:

// Get pointer to last note in the list
// ------------------------------------

note* get_last_note(llist list)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

    if(list == NULL)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <get_last_note+0x12>
    {
        return NULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e00a      	b.n	800060c <get_last_note+0x28>
    }

    else
        {
        	note* temp=list;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 80005fa:	e002      	b.n	8000602 <get_last_note+0x1e>
            {
                temp = temp->nxt;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f8      	bne.n	80005fc <get_last_note+0x18>
            }
            return temp;
 800060a:	68fb      	ldr	r3, [r7, #12]
        }
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
	int screenOn;
	note* play_note;
	//for dma counting
	//uint8_t	nb_MIDI_bytes;

	int i = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
	for (i=0; i<AUDIO_BUFFER_LENGTH; i=i+2)
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	e00d      	b.n	8000644 <main+0x2c>
		{
			sendBuff[i] = (uint16_t)((int16_t) 0.0f);			// Left Channel value
 8000628:	4a3c      	ldr	r2, [pc, #240]	; (800071c <main+0x104>)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2100      	movs	r1, #0
 800062e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			sendBuff[i+1] = (uint16_t)((int16_t) 0.0f);		// Right Channel Value
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	3301      	adds	r3, #1
 8000636:	4a39      	ldr	r2, [pc, #228]	; (800071c <main+0x104>)
 8000638:	2100      	movs	r1, #0
 800063a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=0; i<AUDIO_BUFFER_LENGTH; i=i+2)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	3302      	adds	r3, #2
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800064a:	dbed      	blt.n	8000628 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f001 fe4f 	bl	80022ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f878 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 fa2a 	bl	8000aac <MX_GPIO_Init>
  MX_I2S1_Init();
 8000658:	f000 f966 	bl	8000928 <MX_I2S1_Init>
  MX_DMA_Init();
 800065c:	f000 f9f4 	bl	8000a48 <MX_DMA_Init>
  MX_UART4_Init();
 8000660:	f000 f9c2 	bl	80009e8 <MX_UART4_Init>
  MX_I2C2_Init();
 8000664:	f000 f920 	bl	80008a8 <MX_I2C2_Init>
  MX_SAI1_Init();
 8000668:	f000 f988 	bl	800097c <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  //Setting up the interupt case/callback
	//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);
  //AUDIO_BUFFER_LENGTH = DATA NEEDED TO TRIGGER INTERUPT
	HAL_SAI_Transmit_DMA(&hsai_BlockA1,(uint16_t *) sendBuff, AUDIO_BUFFER_LENGTH);
 800066c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000670:	492a      	ldr	r1, [pc, #168]	; (800071c <main+0x104>)
 8000672:	482b      	ldr	r0, [pc, #172]	; (8000720 <main+0x108>)
 8000674:	f004 fed2 	bl	800541c <HAL_SAI_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 8000678:	2240      	movs	r2, #64	; 0x40
 800067a:	492a      	ldr	r1, [pc, #168]	; (8000724 <main+0x10c>)
 800067c:	482a      	ldr	r0, [pc, #168]	; (8000728 <main+0x110>)
 800067e:	f005 f9e2 	bl	8005a46 <HAL_UART_Receive_DMA>
	SSD1306_Init(); // initialize the LCD screen display
 8000682:	f001 f8df 	bl	8001844 <SSD1306_Init>
	SSD1306_Menu();
 8000686:	f001 fb87 	bl	8001d98 <SSD1306_Menu>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// HAL_I2S_Transmit(&hi2s1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);

		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 800068a:	f000 fa95 	bl	8000bb8 <MIDI_GetNbNewBytes>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <main+0x114>)
 8000694:	701a      	strb	r2, [r3, #0]


		if(nb_MIDI_bytes){
 8000696:	4b25      	ldr	r3, [pc, #148]	; (800072c <main+0x114>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00f      	beq.n	80006be <main+0xa6>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	4823      	ldr	r0, [pc, #140]	; (8000730 <main+0x118>)
 80006a4:	f002 fcb6 	bl	8003014 <HAL_GPIO_WritePin>
			processBuffer(UART4_rxBuffer,nb_MIDI_bytes);
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <main+0x114>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	481d      	ldr	r0, [pc, #116]	; (8000724 <main+0x10c>)
 80006b0:	f000 fab0 	bl	8000c14 <processBuffer>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	481d      	ldr	r0, [pc, #116]	; (8000730 <main+0x118>)
 80006ba:	f002 fcab 	bl	8003014 <HAL_GPIO_WritePin>
		}

		play_note = get_last_note(note_list);
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <main+0x11c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff8e 	bl	80005e4 <get_last_note>
 80006c8:	6078      	str	r0, [r7, #4]

		if (play_note == NULL){ //no notes in the list
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d107      	bne.n	80006e0 <main+0xc8>
			pitch = 0;
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <main+0x120>)
 80006d2:	f04f 0200 	mov.w	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			trig = 0;
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <main+0x124>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	e010      	b.n	8000702 <main+0xea>
		}
		else {
			//set the pitch and trigger the notes
			pitch = pitch_table[(play_note->midi_note)-18];
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	3b12      	subs	r3, #18
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <main+0x128>)
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <main+0x120>)
 80006f0:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <main+0x118>)
 80006f8:	f002 fc8c 	bl	8003014 <HAL_GPIO_WritePin>
			trig = 1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <main+0x124>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
		}
		//test code
		if ( trig == 1)
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <main+0x124>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d005      	beq.n	8000716 <main+0xfe>
		{
			//HAL_SAI_Transmit(&hsai_BlockA1, tone_c, sizeof(tone_c) / sizeof(tone_c[0]), 1000);
			if (screenOn == 0)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1bc      	bne.n	800068a <main+0x72>
			{
				//SSD1306_Note0();
				screenOn = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	e7b9      	b.n	800068a <main+0x72>
			}
		}
		else
		{
			screenOn = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 800071a:	e7b6      	b.n	800068a <main+0x72>
 800071c:	200000c8 	.word	0x200000c8
 8000720:	2000473c 	.word	0x2000473c
 8000724:	200040c8 	.word	0x200040c8
 8000728:	200046b4 	.word	0x200046b4
 800072c:	200047c2 	.word	0x200047c2
 8000730:	40020400 	.word	0x40020400
 8000734:	200000c4 	.word	0x200000c4
 8000738:	200000c0 	.word	0x200000c0
 800073c:	200045dd 	.word	0x200045dd
 8000740:	0800cd3c 	.word	0x0800cd3c

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b0b8      	sub	sp, #224	; 0xe0
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800074e:	2234      	movs	r2, #52	; 0x34
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f005 ff22 	bl	800659c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2290      	movs	r2, #144	; 0x90
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f005 ff13 	bl	800659c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b49      	ldr	r3, [pc, #292]	; (800089c <SystemClock_Config+0x158>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a48      	ldr	r2, [pc, #288]	; (800089c <SystemClock_Config+0x158>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b46      	ldr	r3, [pc, #280]	; (800089c <SystemClock_Config+0x158>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800078e:	4b44      	ldr	r3, [pc, #272]	; (80008a0 <SystemClock_Config+0x15c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000796:	4a42      	ldr	r2, [pc, #264]	; (80008a0 <SystemClock_Config+0x15c>)
 8000798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	4b40      	ldr	r3, [pc, #256]	; (80008a0 <SystemClock_Config+0x15c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b6:	2310      	movs	r3, #16
 80007b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	2302      	movs	r3, #2
 80007be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c8:	2308      	movs	r3, #8
 80007ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007ce:	2360      	movs	r3, #96	; 0x60
 80007d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 fa46 	bl	8003c7c <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007f6:	f001 f81f 	bl	8001838 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007fa:	f003 f9ef 	bl	8003bdc <HAL_PWREx_EnableOverDrive>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000804:	f001 f818 	bl	8001838 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2302      	movs	r3, #2
 8000810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800082a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800082e:	2103      	movs	r1, #3
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fcd1 	bl	80041d8 <HAL_RCC_ClockConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800083c:	f000 fffc 	bl	8001838 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SAI1
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <SystemClock_Config+0x160>)
 8000842:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000844:	2360      	movs	r3, #96	; 0x60
 8000846:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000854:	23c0      	movs	r3, #192	; 0xc0
 8000856:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 800085c:	2306      	movs	r3, #6
 800085e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000864:	2301      	movs	r3, #1
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000868:	2301      	movs	r3, #1
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000870:	2300      	movs	r3, #0
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000874:	2300      	movs	r3, #0
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000878:	2300      	movs	r3, #0
 800087a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800087c:	2300      	movs	r3, #0
 800087e:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	4618      	mov	r0, r3
 8000886:	f003 fe7d 	bl	8004584 <HAL_RCCEx_PeriphCLKConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8000890:	f000 ffd2 	bl	8001838 <Error_Handler>
  }
}
 8000894:	bf00      	nop
 8000896:	37e0      	adds	r7, #224	; 0xe0
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000
 80008a4:	00088201 	.word	0x00088201

080008a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_I2C2_Init+0x74>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <MX_I2C2_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_I2C2_Init+0x74>)
 80008b4:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <MX_I2C2_Init+0x7c>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_I2C2_Init+0x74>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_I2C2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_I2C2_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_I2C2_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_I2C2_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_I2C2_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <MX_I2C2_Init+0x74>)
 80008e4:	f002 fbb0 	bl	8003048 <HAL_I2C_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ee:	f000 ffa3 	bl	8001838 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4809      	ldr	r0, [pc, #36]	; (800091c <MX_I2C2_Init+0x74>)
 80008f6:	f002 ffa7 	bl	8003848 <HAL_I2CEx_ConfigAnalogFilter>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000900:	f000 ff9a 	bl	8001838 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_I2C2_Init+0x74>)
 8000908:	f002 ffe9 	bl	80038de <HAL_I2CEx_ConfigDigitalFilter>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000912:	f000 ff91 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20004590 	.word	0x20004590
 8000920:	40005800 	.word	0x40005800
 8000924:	0090194b 	.word	0x0090194b

08000928 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2S1_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_I2S1_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_I2S1_Init+0x4c>)
 8000934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000938:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_I2S1_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_I2S1_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_I2S1_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_I2S1_Init+0x4c>)
 800094e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000952:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_I2S1_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_I2S1_Init+0x4c>)
 800095c:	2202      	movs	r2, #2
 800095e:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_I2S1_Init+0x4c>)
 8000962:	f003 f809 	bl	8003978 <HAL_I2S_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 800096c:	f000 ff64 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20004674 	.word	0x20004674
 8000978:	40013000 	.word	0x40013000

0800097c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_SAI1_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_SAI1_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_SAI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_SAI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_SAI1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_SAI1_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009a6:	f64a 4244 	movw	r2, #44100	; 0xac44
 80009aa:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80009c4:	2302      	movs	r3, #2
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009cc:	f004 fb74 	bl	80050b8 <HAL_SAI_InitProtocol>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80009d6:	f000 ff2f 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000473c 	.word	0x2000473c
 80009e4:	40015804 	.word	0x40015804

080009e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_UART4_Init+0x58>)
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <MX_UART4_Init+0x5c>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_UART4_Init+0x58>)
 80009f4:	f647 2212 	movw	r2, #31250	; 0x7a12
 80009f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_UART4_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a2c:	f004 ffbd 	bl	80059aa <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a36:	f000 feff 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200046b4 	.word	0x200046b4
 8000a44:	40004c00 	.word	0x40004c00

08000a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_DMA_Init+0x60>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <MX_DMA_Init+0x60>)
 8000a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_DMA_Init+0x60>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_DMA_Init+0x60>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <MX_DMA_Init+0x60>)
 8000a6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_DMA_Init+0x60>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	200d      	movs	r0, #13
 8000a84:	f001 fd6b 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a88:	200d      	movs	r0, #13
 8000a8a:	f001 fd84 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2039      	movs	r0, #57	; 0x39
 8000a94:	f001 fd63 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a98:	2039      	movs	r0, #57	; 0x39
 8000a9a:	f001 fd7c 	bl	8002596 <HAL_NVIC_EnableIRQ>

}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac2:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a28      	ldr	r2, [pc, #160]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ada:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000ae0:	f043 0320 	orr.w	r3, r3, #32
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0320 	and.w	r3, r3, #32
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0xc0>)
 8000b40:	f002 fa68 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_GPIO_Init+0xc0>)
 8000b5c:	f002 f8ae 	bl	8002cbc <HAL_GPIO_Init>

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400

08000b70 <HAL_SAI_TxHalfCpltCallback>:
	HAL_I2S_Receive(&hi2s1, sendBuff, 8, 100);
	//HAL_I2S_(hi2s1, sendBuff, 16, 100);
	HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, 8);
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	make_sound(0);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 fe25 	bl	80017c8 <make_sound>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	make_sound(AUDIO_BUFFER_LENGTH_DIV2);
 8000b8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b92:	f000 fe19 	bl	80017c8 <make_sound>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <DMA_GetCurrDataCounter>:
//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);

//}

uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	b29b      	uxth	r3, r3
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <MIDI_GetNbNewBytes>:


uint8_t MIDI_GetNbNewBytes()
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	static uint16_t dma_cpt_prev = MIDI_BUFFER_LENGTH;
	uint16_t dma_cpt, n = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	// Get current DMA counter
	dma_cpt = DMA_GetCurrDataCounter(DMA1_Stream2);
 8000bc2:	4812      	ldr	r0, [pc, #72]	; (8000c0c <MIDI_GetNbNewBytes+0x54>)
 8000bc4:	f7ff ffeb 	bl	8000b9e <DMA_GetCurrDataCounter>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	80bb      	strh	r3, [r7, #4]

	// If DMA counter has changed, compute the number of received MIDI bytes
	if (dma_cpt != dma_cpt_prev)
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MIDI_GetNbNewBytes+0x58>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	88ba      	ldrh	r2, [r7, #4]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d014      	beq.n	8000c00 <MIDI_GetNbNewBytes+0x48>
	{
		if (dma_cpt < dma_cpt_prev)
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MIDI_GetNbNewBytes+0x58>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	88ba      	ldrh	r2, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d205      	bcs.n	8000bec <MIDI_GetNbNewBytes+0x34>
		{
			n = dma_cpt_prev - dma_cpt;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MIDI_GetNbNewBytes+0x58>)
 8000be2:	881a      	ldrh	r2, [r3, #0]
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	80fb      	strh	r3, [r7, #6]
 8000bea:	e006      	b.n	8000bfa <MIDI_GetNbNewBytes+0x42>
		}
		else
		{
			n = dma_cpt_prev - (dma_cpt - MIDI_BUFFER_LENGTH);
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MIDI_GetNbNewBytes+0x58>)
 8000bee:	881a      	ldrh	r2, [r3, #0]
 8000bf0:	88bb      	ldrh	r3, [r7, #4]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	3340      	adds	r3, #64	; 0x40
 8000bf8:	80fb      	strh	r3, [r7, #6]
		}
		// Store the new DMA counter
		dma_cpt_prev = dma_cpt;
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <MIDI_GetNbNewBytes+0x58>)
 8000bfc:	88bb      	ldrh	r3, [r7, #4]
 8000bfe:	8013      	strh	r3, [r2, #0]
	}
	return (n);
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	b2db      	uxtb	r3, r3
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40026040 	.word	0x40026040
 8000c10:	20000028 	.word	0x20000028

08000c14 <processBuffer>:

//Author: Synthol Project, Adjusted to fit projec
void processBuffer(uint8_t* MIDI_buffer, uint8_t nb_MIDI_bytes)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
	__IO uint32_t received_char;

	static uint8_t i = 0;
	static uint8_t state = 0;

	while (nb_MIDI_bytes != 0)
 8000c20:	bf00      	nop
 8000c22:	e1ff      	b.n	8001024 <processBuffer+0x410>
	{
		//reading a byte from the buffer
		received_char = UART4_rxBuffer[i];
 8000c24:	4ba8      	ldr	r3, [pc, #672]	; (8000ec8 <processBuffer+0x2b4>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4ba8      	ldr	r3, [pc, #672]	; (8000ecc <processBuffer+0x2b8>)
 8000c2c:	5c9b      	ldrb	r3, [r3, r2]
 8000c2e:	60fb      	str	r3, [r7, #12]
		switch (state)
 8000c30:	4ba7      	ldr	r3, [pc, #668]	; (8000ed0 <processBuffer+0x2bc>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b29      	cmp	r3, #41	; 0x29
 8000c36:	f200 81f5 	bhi.w	8001024 <processBuffer+0x410>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <processBuffer+0x2c>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000ce9 	.word	0x08000ce9
 8000c44:	08001025 	.word	0x08001025
 8000c48:	08001025 	.word	0x08001025
 8000c4c:	08001025 	.word	0x08001025
 8000c50:	08001025 	.word	0x08001025
 8000c54:	08001025 	.word	0x08001025
 8000c58:	08001025 	.word	0x08001025
 8000c5c:	08001025 	.word	0x08001025
 8000c60:	08001025 	.word	0x08001025
 8000c64:	08001025 	.word	0x08001025
 8000c68:	08000dbf 	.word	0x08000dbf
 8000c6c:	08000e07 	.word	0x08000e07
 8000c70:	08001025 	.word	0x08001025
 8000c74:	08001025 	.word	0x08001025
 8000c78:	08001025 	.word	0x08001025
 8000c7c:	08001025 	.word	0x08001025
 8000c80:	08001025 	.word	0x08001025
 8000c84:	08001025 	.word	0x08001025
 8000c88:	08001025 	.word	0x08001025
 8000c8c:	08001025 	.word	0x08001025
 8000c90:	08000e7f 	.word	0x08000e7f
 8000c94:	08000eed 	.word	0x08000eed
 8000c98:	08001025 	.word	0x08001025
 8000c9c:	08001025 	.word	0x08001025
 8000ca0:	08001025 	.word	0x08001025
 8000ca4:	08001025 	.word	0x08001025
 8000ca8:	08001025 	.word	0x08001025
 8000cac:	08001025 	.word	0x08001025
 8000cb0:	08001025 	.word	0x08001025
 8000cb4:	08001025 	.word	0x08001025
 8000cb8:	08000f3d 	.word	0x08000f3d
 8000cbc:	08000f7d 	.word	0x08000f7d
 8000cc0:	08001025 	.word	0x08001025
 8000cc4:	08001025 	.word	0x08001025
 8000cc8:	08001025 	.word	0x08001025
 8000ccc:	08001025 	.word	0x08001025
 8000cd0:	08001025 	.word	0x08001025
 8000cd4:	08001025 	.word	0x08001025
 8000cd8:	08001025 	.word	0x08001025
 8000cdc:	08001025 	.word	0x08001025
 8000ce0:	08000fb3 	.word	0x08000fb3
 8000ce4:	08000ff3 	.word	0x08000ff3
		{
		// State 0 = Starting point for a new MIDI message
		case 0:
		{
			switch (received_char & 0xF0)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cee:	2be0      	cmp	r3, #224	; 0xe0
 8000cf0:	d048      	beq.n	8000d84 <processBuffer+0x170>
 8000cf2:	2be0      	cmp	r3, #224	; 0xe0
 8000cf4:	d85b      	bhi.n	8000dae <processBuffer+0x19a>
 8000cf6:	2bb0      	cmp	r3, #176	; 0xb0
 8000cf8:	d02f      	beq.n	8000d5a <processBuffer+0x146>
 8000cfa:	2bb0      	cmp	r3, #176	; 0xb0
 8000cfc:	d857      	bhi.n	8000dae <processBuffer+0x19a>
 8000cfe:	2b80      	cmp	r3, #128	; 0x80
 8000d00:	d016      	beq.n	8000d30 <processBuffer+0x11c>
 8000d02:	2b90      	cmp	r3, #144	; 0x90
 8000d04:	d153      	bne.n	8000dae <processBuffer+0x19a>
			{
			case 0x90: // Note ON message
			{
				state = 10; // Next state is 10
 8000d06:	4b72      	ldr	r3, [pc, #456]	; (8000ed0 <processBuffer+0x2bc>)
 8000d08:	220a      	movs	r2, #10
 8000d0a:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d0c:	4b6e      	ldr	r3, [pc, #440]	; (8000ec8 <processBuffer+0x2b4>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b3f      	cmp	r3, #63	; 0x3f
 8000d12:	d103      	bne.n	8000d1c <processBuffer+0x108>
					i = 0;				// Move to next MIDI byte
 8000d14:	4b6c      	ldr	r3, [pc, #432]	; (8000ec8 <processBuffer+0x2b4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e005      	b.n	8000d28 <processBuffer+0x114>
				}
				else {
					i++;
 8000d1c:	4b6a      	ldr	r3, [pc, #424]	; (8000ec8 <processBuffer+0x2b4>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b68      	ldr	r3, [pc, #416]	; (8000ec8 <processBuffer+0x2b4>)
 8000d26:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	70fb      	strb	r3, [r7, #3]
				break;
 8000d2e:	e045      	b.n	8000dbc <processBuffer+0x1a8>
			}
			case 0x80: // Note OFF message
			{
				state = 20; // Next state is 20
 8000d30:	4b67      	ldr	r3, [pc, #412]	; (8000ed0 <processBuffer+0x2bc>)
 8000d32:	2214      	movs	r2, #20
 8000d34:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d36:	4b64      	ldr	r3, [pc, #400]	; (8000ec8 <processBuffer+0x2b4>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d3c:	d103      	bne.n	8000d46 <processBuffer+0x132>
					i = 0;				// Move to next MIDI byte
 8000d3e:	4b62      	ldr	r3, [pc, #392]	; (8000ec8 <processBuffer+0x2b4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
 8000d44:	e005      	b.n	8000d52 <processBuffer+0x13e>
				}
				else {
					i++;
 8000d46:	4b60      	ldr	r3, [pc, #384]	; (8000ec8 <processBuffer+0x2b4>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b5e      	ldr	r3, [pc, #376]	; (8000ec8 <processBuffer+0x2b4>)
 8000d50:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	70fb      	strb	r3, [r7, #3]
				break;
 8000d58:	e030      	b.n	8000dbc <processBuffer+0x1a8>
			}
			case 0xB0: // CC message
			{
				state = 30; // Next state is 30
 8000d5a:	4b5d      	ldr	r3, [pc, #372]	; (8000ed0 <processBuffer+0x2bc>)
 8000d5c:	221e      	movs	r2, #30
 8000d5e:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d60:	4b59      	ldr	r3, [pc, #356]	; (8000ec8 <processBuffer+0x2b4>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b3f      	cmp	r3, #63	; 0x3f
 8000d66:	d103      	bne.n	8000d70 <processBuffer+0x15c>
					i = 0;				// Move to next MIDI byte
 8000d68:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <processBuffer+0x2b4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	e005      	b.n	8000d7c <processBuffer+0x168>
				}
				else {
					i++;
 8000d70:	4b55      	ldr	r3, [pc, #340]	; (8000ec8 <processBuffer+0x2b4>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b53      	ldr	r3, [pc, #332]	; (8000ec8 <processBuffer+0x2b4>)
 8000d7a:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	70fb      	strb	r3, [r7, #3]
				break;
 8000d82:	e01b      	b.n	8000dbc <processBuffer+0x1a8>
			}

			case 0xE0: // Pitch Bend message
			{
				state = 40; // Next state is 40
 8000d84:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <processBuffer+0x2bc>)
 8000d86:	2228      	movs	r2, #40	; 0x28
 8000d88:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d8a:	4b4f      	ldr	r3, [pc, #316]	; (8000ec8 <processBuffer+0x2b4>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000d90:	d103      	bne.n	8000d9a <processBuffer+0x186>
					i = 0;				// Move to next MIDI byte
 8000d92:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <processBuffer+0x2b4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e005      	b.n	8000da6 <processBuffer+0x192>
				}
				else {
					i++;
 8000d9a:	4b4b      	ldr	r3, [pc, #300]	; (8000ec8 <processBuffer+0x2b4>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b49      	ldr	r3, [pc, #292]	; (8000ec8 <processBuffer+0x2b4>)
 8000da4:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	70fb      	strb	r3, [r7, #3]
				break;
 8000dac:	e006      	b.n	8000dbc <processBuffer+0x1a8>
			}
			default: // Other type of message, move to next byte but stays in state 0
			{
				//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
				i++;
 8000dae:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <processBuffer+0x2b4>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b44      	ldr	r3, [pc, #272]	; (8000ec8 <processBuffer+0x2b4>)
 8000db8:	701a      	strb	r2, [r3, #0]
				break;
 8000dba:	bf00      	nop
			}
			}
			break;
 8000dbc:	e132      	b.n	8001024 <processBuffer+0x410>
		}
		// State 10 & 11 : Note ON command
		case 10:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc2:	d903      	bls.n	8000dcc <processBuffer+0x1b8>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000dc4:	4b42      	ldr	r3, [pc, #264]	; (8000ed0 <processBuffer+0x2bc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e12b      	b.n	8001024 <processBuffer+0x410>
			}
			else
			{ // Save MIDI note
				ctrl = key = received_char;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <processBuffer+0x2c0>)
 8000dd2:	701a      	strb	r2, [r3, #0]
 8000dd4:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <processBuffer+0x2c0>)
 8000dd6:	781a      	ldrb	r2, [r3, #0]
 8000dd8:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <processBuffer+0x2c4>)
 8000dda:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <processBuffer+0x2b4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b3f      	cmp	r3, #63	; 0x3f
 8000de2:	d103      	bne.n	8000dec <processBuffer+0x1d8>
					i = 0;				// Move to next MIDI byte
 8000de4:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <processBuffer+0x2b4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e005      	b.n	8000df8 <processBuffer+0x1e4>
				}
				else {
					i++;
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <processBuffer+0x2b4>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <processBuffer+0x2b4>)
 8000df6:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	70fb      	strb	r3, [r7, #3]
				state = 11; // Next state is 11
 8000dfe:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <processBuffer+0x2bc>)
 8000e00:	220b      	movs	r2, #11
 8000e02:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000e04:	e10e      	b.n	8001024 <processBuffer+0x410>
		}
		case 11:
		{
			data = velocity = received_char; //will only ever get velocity in this section i think
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b34      	ldr	r3, [pc, #208]	; (8000edc <processBuffer+0x2c8>)
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	4b33      	ldr	r3, [pc, #204]	; (8000edc <processBuffer+0x2c8>)
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <processBuffer+0x2cc>)
 8000e14:	701a      	strb	r2, [r3, #0]

			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <processBuffer+0x2b4>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e1c:	d103      	bne.n	8000e26 <processBuffer+0x212>
				i = 0;				// Move to next MIDI byte
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <processBuffer+0x2b4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	e005      	b.n	8000e32 <processBuffer+0x21e>
			}
			else {
				i++;
 8000e26:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <processBuffer+0x2b4>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <processBuffer+0x2b4>)
 8000e30:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	70fb      	strb	r3, [r7, #3]

			state = 10; // Next state is 10
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <processBuffer+0x2bc>)
 8000e3a:	220a      	movs	r2, #10
 8000e3c:	701a      	strb	r2, [r3, #0]

			if (velocity > 0)
 8000e3e:	4b27      	ldr	r3, [pc, #156]	; (8000edc <processBuffer+0x2c8>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00f      	beq.n	8000e66 <processBuffer+0x252>
			{

				note_list = add_note_last(note_list, key, velocity);
 8000e46:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <processBuffer+0x2d0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a22      	ldr	r2, [pc, #136]	; (8000ed4 <processBuffer+0x2c0>)
 8000e4c:	7811      	ldrb	r1, [r2, #0]
 8000e4e:	4a23      	ldr	r2, [pc, #140]	; (8000edc <processBuffer+0x2c8>)
 8000e50:	7812      	ldrb	r2, [r2, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fb6c 	bl	8000530 <add_note_last>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <processBuffer+0x2d0>)
 8000e5c:	6013      	str	r3, [r2, #0]

				newNote = 1;
 8000e5e:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <processBuffer+0x2d4>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
 8000e64:	e0de      	b.n	8001024 <processBuffer+0x410>

			}
			else
			{
				//find the key and deletes it
				note_list = delete_note(note_list, key);
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <processBuffer+0x2d0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ed4 <processBuffer+0x2c0>)
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb8a 	bl	800058a <delete_note>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4a1a      	ldr	r2, [pc, #104]	; (8000ee4 <processBuffer+0x2d0>)
 8000e7a:	6013      	str	r3, [r2, #0]
			}
			break;
 8000e7c:	e0d2      	b.n	8001024 <processBuffer+0x410>
		}
		// State 20 & 21 : Note OFF command
		case 20:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2b7f      	cmp	r3, #127	; 0x7f
 8000e82:	d903      	bls.n	8000e8c <processBuffer+0x278>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <processBuffer+0x2bc>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	e0cb      	b.n	8001024 <processBuffer+0x410>
			}

			else
			{
				ctrl = key = received_char; // Save MIDI note
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <processBuffer+0x2c0>)
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <processBuffer+0x2c0>)
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <processBuffer+0x2c4>)
 8000e9a:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <processBuffer+0x2b4>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ea2:	d103      	bne.n	8000eac <processBuffer+0x298>
					i = 0;				// Move to next MIDI byte
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <processBuffer+0x2b4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e005      	b.n	8000eb8 <processBuffer+0x2a4>
				}
				else {
					i++;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <processBuffer+0x2b4>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <processBuffer+0x2b4>)
 8000eb6:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	70fb      	strb	r3, [r7, #3]

				state = 21; // Next state is 21
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <processBuffer+0x2bc>)
 8000ec0:	2215      	movs	r2, #21
 8000ec2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ec4:	e0ae      	b.n	8001024 <processBuffer+0x410>
 8000ec6:	bf00      	nop
 8000ec8:	20004108 	.word	0x20004108
 8000ecc:	200040c8 	.word	0x200040c8
 8000ed0:	20004109 	.word	0x20004109
 8000ed4:	2000466d 	.word	0x2000466d
 8000ed8:	200045dc 	.word	0x200045dc
 8000edc:	2000466a 	.word	0x2000466a
 8000ee0:	2000466c 	.word	0x2000466c
 8000ee4:	200000c4 	.word	0x200000c4
 8000ee8:	200045e1 	.word	0x200045e1
		}
		case 21:
		{
			velocity = data = received_char; // Save MIDI velocity
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b51      	ldr	r3, [pc, #324]	; (8001038 <processBuffer+0x424>)
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	4b50      	ldr	r3, [pc, #320]	; (8001038 <processBuffer+0x424>)
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	4b50      	ldr	r3, [pc, #320]	; (800103c <processBuffer+0x428>)
 8000efa:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <processBuffer+0x42c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b3f      	cmp	r3, #63	; 0x3f
 8000f02:	d103      	bne.n	8000f0c <processBuffer+0x2f8>
				i = 0;				// Move to next MIDI byte
 8000f04:	4b4e      	ldr	r3, [pc, #312]	; (8001040 <processBuffer+0x42c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e005      	b.n	8000f18 <processBuffer+0x304>
			}
			else {
				i++;
 8000f0c:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <processBuffer+0x42c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b4a      	ldr	r3, [pc, #296]	; (8001040 <processBuffer+0x42c>)
 8000f16:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	70fb      	strb	r3, [r7, #3]

			state = 20; // Next state is 20
 8000f1e:	4b49      	ldr	r3, [pc, #292]	; (8001044 <processBuffer+0x430>)
 8000f20:	2214      	movs	r2, #20
 8000f22:	701a      	strb	r2, [r3, #0]

			note_list = delete_note(note_list, key);
 8000f24:	4b48      	ldr	r3, [pc, #288]	; (8001048 <processBuffer+0x434>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a48      	ldr	r2, [pc, #288]	; (800104c <processBuffer+0x438>)
 8000f2a:	7812      	ldrb	r2, [r2, #0]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fb2b 	bl	800058a <delete_note>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a44      	ldr	r2, [pc, #272]	; (8001048 <processBuffer+0x434>)
 8000f38:	6013      	str	r3, [r2, #0]
			break;
 8000f3a:	e073      	b.n	8001024 <processBuffer+0x410>
		}
		// State 30 & 31 : CC command
		case 30:
		{
			if (received_char > 0x7F) // If the following byte is not a CC number
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f40:	d903      	bls.n	8000f4a <processBuffer+0x336>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000f42:	4b40      	ldr	r3, [pc, #256]	; (8001044 <processBuffer+0x430>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	e06c      	b.n	8001024 <processBuffer+0x410>
			}
			else
			{
				paramNum = received_char; // Save MIDI CC number
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b40      	ldr	r3, [pc, #256]	; (8001050 <processBuffer+0x43c>)
 8000f50:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f52:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <processBuffer+0x42c>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b3f      	cmp	r3, #63	; 0x3f
 8000f58:	d103      	bne.n	8000f62 <processBuffer+0x34e>
					i = 0;				// Move to next MIDI byte
 8000f5a:	4b39      	ldr	r3, [pc, #228]	; (8001040 <processBuffer+0x42c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	e005      	b.n	8000f6e <processBuffer+0x35a>
				}
				else {
					i++;
 8000f62:	4b37      	ldr	r3, [pc, #220]	; (8001040 <processBuffer+0x42c>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b35      	ldr	r3, [pc, #212]	; (8001040 <processBuffer+0x42c>)
 8000f6c:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	70fb      	strb	r3, [r7, #3]
				state = 31; // Next state is 31
 8000f74:	4b33      	ldr	r3, [pc, #204]	; (8001044 <processBuffer+0x430>)
 8000f76:	221f      	movs	r2, #31
 8000f78:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f7a:	e053      	b.n	8001024 <processBuffer+0x410>
		}
		case 31:
		{
			paramVal = received_char; // Save MIDI velocity
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b34      	ldr	r3, [pc, #208]	; (8001054 <processBuffer+0x440>)
 8000f82:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f84:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <processBuffer+0x42c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b3f      	cmp	r3, #63	; 0x3f
 8000f8a:	d103      	bne.n	8000f94 <processBuffer+0x380>
				i = 0;				// Move to next MIDI byte
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <processBuffer+0x42c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e005      	b.n	8000fa0 <processBuffer+0x38c>
			}
			else {
				i++;
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <processBuffer+0x42c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <processBuffer+0x42c>)
 8000f9e:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	70fb      	strb	r3, [r7, #3]
			state = 30;
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <processBuffer+0x430>)
 8000fa8:	221e      	movs	r2, #30
 8000faa:	701a      	strb	r2, [r3, #0]

			setParams();
 8000fac:	f000 f856 	bl	800105c <setParams>

			break;
 8000fb0:	e038      	b.n	8001024 <processBuffer+0x410>
		}
		// State 40 & 41 : Pitch Bend message
		case 40:
		{
			if (received_char > 0x7F) // If following byte is note a PB value
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000fb6:	d903      	bls.n	8000fc0 <processBuffer+0x3ac>
			{
				state = 0; // Return to state 0
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <processBuffer+0x430>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e031      	b.n	8001024 <processBuffer+0x410>
			}
			else
			{
				param = received_char; // Save MIDI CC number
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <processBuffer+0x444>)
 8000fc6:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <processBuffer+0x42c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b3f      	cmp	r3, #63	; 0x3f
 8000fce:	d103      	bne.n	8000fd8 <processBuffer+0x3c4>
					i = 0;				// Move to next MIDI byte
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <processBuffer+0x42c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e005      	b.n	8000fe4 <processBuffer+0x3d0>
				}
				else {
					i++;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <processBuffer+0x42c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <processBuffer+0x42c>)
 8000fe2:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	70fb      	strb	r3, [r7, #3]
				state = 41; // Next state is 41
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <processBuffer+0x430>)
 8000fec:	2229      	movs	r2, #41	; 0x29
 8000fee:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ff0:	e018      	b.n	8001024 <processBuffer+0x410>
		}
		case 41:
		{
			param = received_char; // Save MIDI velocity
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <processBuffer+0x444>)
 8000ff8:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <processBuffer+0x42c>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b3f      	cmp	r3, #63	; 0x3f
 8001000:	d103      	bne.n	800100a <processBuffer+0x3f6>
				i = 0;				// Move to next MIDI byte
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <processBuffer+0x42c>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	e005      	b.n	8001016 <processBuffer+0x402>
			}
			else {
				i++;
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <processBuffer+0x42c>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <processBuffer+0x42c>)
 8001014:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8001016:	78fb      	ldrb	r3, [r7, #3]
 8001018:	3b01      	subs	r3, #1
 800101a:	70fb      	strb	r3, [r7, #3]
			state = 40; // Next state is 00
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <processBuffer+0x430>)
 800101e:	2228      	movs	r2, #40	; 0x28
 8001020:	701a      	strb	r2, [r3, #0]
			break;
 8001022:	bf00      	nop
	while (nb_MIDI_bytes != 0)
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f47f adfc 	bne.w	8000c24 <processBuffer+0x10>
		}
	}
	}
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000466c 	.word	0x2000466c
 800103c:	2000466a 	.word	0x2000466a
 8001040:	20004108 	.word	0x20004108
 8001044:	20004109 	.word	0x20004109
 8001048:	200000c4 	.word	0x200000c4
 800104c:	2000466d 	.word	0x2000466d
 8001050:	20004646 	.word	0x20004646
 8001054:	200045de 	.word	0x200045de
 8001058:	2000458a 	.word	0x2000458a

0800105c <setParams>:

//TODO:logic for ADSR as well as DSP
void setParams(){
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
	switch (paramNum){
 8001060:	4bb0      	ldr	r3, [pc, #704]	; (8001324 <setParams+0x2c8>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	3b10      	subs	r3, #16
 8001066:	2b3f      	cmp	r3, #63	; 0x3f
 8001068:	f200 8156 	bhi.w	8001318 <setParams+0x2bc>
 800106c:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <setParams+0x18>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	0800126f 	.word	0x0800126f
 8001078:	080011fd 	.word	0x080011fd
 800107c:	08001319 	.word	0x08001319
 8001080:	08001319 	.word	0x08001319
 8001084:	08001319 	.word	0x08001319
 8001088:	08001319 	.word	0x08001319
 800108c:	08001319 	.word	0x08001319
 8001090:	08001319 	.word	0x08001319
 8001094:	08001319 	.word	0x08001319
 8001098:	08001319 	.word	0x08001319
 800109c:	08001319 	.word	0x08001319
 80010a0:	08001319 	.word	0x08001319
 80010a4:	08001319 	.word	0x08001319
 80010a8:	08001319 	.word	0x08001319
 80010ac:	08001319 	.word	0x08001319
 80010b0:	08001319 	.word	0x08001319
 80010b4:	08001319 	.word	0x08001319
 80010b8:	08001319 	.word	0x08001319
 80010bc:	08001319 	.word	0x08001319
 80010c0:	08001319 	.word	0x08001319
 80010c4:	08001319 	.word	0x08001319
 80010c8:	08001319 	.word	0x08001319
 80010cc:	08001319 	.word	0x08001319
 80010d0:	08001319 	.word	0x08001319
 80010d4:	08001319 	.word	0x08001319
 80010d8:	08001319 	.word	0x08001319
 80010dc:	08001319 	.word	0x08001319
 80010e0:	08001319 	.word	0x08001319
 80010e4:	08001319 	.word	0x08001319
 80010e8:	08001319 	.word	0x08001319
 80010ec:	08001319 	.word	0x08001319
 80010f0:	08001319 	.word	0x08001319
 80010f4:	08001319 	.word	0x08001319
 80010f8:	08001319 	.word	0x08001319
 80010fc:	08001319 	.word	0x08001319
 8001100:	08001319 	.word	0x08001319
 8001104:	08001319 	.word	0x08001319
 8001108:	08001319 	.word	0x08001319
 800110c:	08001319 	.word	0x08001319
 8001110:	08001319 	.word	0x08001319
 8001114:	08001319 	.word	0x08001319
 8001118:	08001319 	.word	0x08001319
 800111c:	08001319 	.word	0x08001319
 8001120:	08001319 	.word	0x08001319
 8001124:	08001319 	.word	0x08001319
 8001128:	08001319 	.word	0x08001319
 800112c:	08001319 	.word	0x08001319
 8001130:	08001319 	.word	0x08001319
 8001134:	08001319 	.word	0x08001319
 8001138:	08001319 	.word	0x08001319
 800113c:	08001319 	.word	0x08001319
 8001140:	08001319 	.word	0x08001319
 8001144:	08001319 	.word	0x08001319
 8001148:	08001319 	.word	0x08001319
 800114c:	08001319 	.word	0x08001319
 8001150:	080012fd 	.word	0x080012fd
 8001154:	080011d9 	.word	0x080011d9
 8001158:	08001175 	.word	0x08001175
 800115c:	080012e1 	.word	0x080012e1
 8001160:	08001199 	.word	0x08001199
 8001164:	08001319 	.word	0x08001319
 8001168:	08001319 	.word	0x08001319
 800116c:	08001319 	.word	0x08001319
 8001170:	080011bd 	.word	0x080011bd
	case 73:								// ADRS Attack Time
		{
			adsrAttack = 0.001f + (float_t) paramVal / 127;
 8001174:	4b6c      	ldr	r3, [pc, #432]	; (8001328 <setParams+0x2cc>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001180:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800132c <setParams+0x2d0>
 8001184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001188:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001330 <setParams+0x2d4>
 800118c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001190:	4b68      	ldr	r3, [pc, #416]	; (8001334 <setParams+0x2d8>)
 8001192:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001196:	e0bf      	b.n	8001318 <setParams+0x2bc>
		}

	case 75:								// ADRS Decay Time
		{
			adsrDecay = 0.001f + (float_t) paramVal / 127;
 8001198:	4b63      	ldr	r3, [pc, #396]	; (8001328 <setParams+0x2cc>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011a4:	eddf 6a61 	vldr	s13, [pc, #388]	; 800132c <setParams+0x2d0>
 80011a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ac:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001330 <setParams+0x2d4>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	4b60      	ldr	r3, [pc, #384]	; (8001338 <setParams+0x2dc>)
 80011b6:	edc3 7a00 	vstr	s15, [r3]
			break;
 80011ba:	e0ad      	b.n	8001318 <setParams+0x2bc>
		}

	case 79:								// ADRS Sustain Level
		{
			adsrSus = (float_t) paramVal / 127;
 80011bc:	4b5a      	ldr	r3, [pc, #360]	; (8001328 <setParams+0x2cc>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c8:	eddf 6a58 	vldr	s13, [pc, #352]	; 800132c <setParams+0x2d0>
 80011cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d0:	4b5a      	ldr	r3, [pc, #360]	; (800133c <setParams+0x2e0>)
 80011d2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80011d6:	e09f      	b.n	8001318 <setParams+0x2bc>
		}

	case 72:								// ADRS Release Time
		{
			adsrRel = 0.001f + (float_t) paramVal / 127;
 80011d8:	4b53      	ldr	r3, [pc, #332]	; (8001328 <setParams+0x2cc>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011e4:	eddf 6a51 	vldr	s13, [pc, #324]	; 800132c <setParams+0x2d0>
 80011e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ec:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001330 <setParams+0x2d4>
 80011f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011f4:	4b52      	ldr	r3, [pc, #328]	; (8001340 <setParams+0x2e4>)
 80011f6:	edc3 7a00 	vstr	s15, [r3]
			break;
 80011fa:	e08d      	b.n	8001318 <setParams+0x2bc>


	//Waveform Select OSC2
	case 17:
			{
				if (paramVal >= 0 && paramVal < 32)	{
 80011fc:	4b4a      	ldr	r3, [pc, #296]	; (8001328 <setParams+0x2cc>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b1f      	cmp	r3, #31
 8001202:	d803      	bhi.n	800120c <setParams+0x1b0>
					osc2Waveform = 0;
 8001204:	4b4f      	ldr	r3, [pc, #316]	; (8001344 <setParams+0x2e8>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
				}
				else {
					osc2Waveform = 0;
				}

				break;
 800120a:	e085      	b.n	8001318 <setParams+0x2bc>
				else if (paramVal >= 32 && paramVal < 64)	{
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <setParams+0x2cc>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b1f      	cmp	r3, #31
 8001212:	d907      	bls.n	8001224 <setParams+0x1c8>
 8001214:	4b44      	ldr	r3, [pc, #272]	; (8001328 <setParams+0x2cc>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b3f      	cmp	r3, #63	; 0x3f
 800121a:	d803      	bhi.n	8001224 <setParams+0x1c8>
					osc2Waveform = 1;
 800121c:	4b49      	ldr	r3, [pc, #292]	; (8001344 <setParams+0x2e8>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e023      	b.n	800126c <setParams+0x210>
				else if (paramVal >= 64 && paramVal < 96)	{
 8001224:	4b40      	ldr	r3, [pc, #256]	; (8001328 <setParams+0x2cc>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b3f      	cmp	r3, #63	; 0x3f
 800122a:	d907      	bls.n	800123c <setParams+0x1e0>
 800122c:	4b3e      	ldr	r3, [pc, #248]	; (8001328 <setParams+0x2cc>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b5f      	cmp	r3, #95	; 0x5f
 8001232:	d803      	bhi.n	800123c <setParams+0x1e0>
					osc2Waveform = 2;
 8001234:	4b43      	ldr	r3, [pc, #268]	; (8001344 <setParams+0x2e8>)
 8001236:	2202      	movs	r2, #2
 8001238:	701a      	strb	r2, [r3, #0]
 800123a:	e017      	b.n	800126c <setParams+0x210>
				else if (paramVal >= 96 && paramVal < 125){
 800123c:	4b3a      	ldr	r3, [pc, #232]	; (8001328 <setParams+0x2cc>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b5f      	cmp	r3, #95	; 0x5f
 8001242:	d907      	bls.n	8001254 <setParams+0x1f8>
 8001244:	4b38      	ldr	r3, [pc, #224]	; (8001328 <setParams+0x2cc>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b7c      	cmp	r3, #124	; 0x7c
 800124a:	d803      	bhi.n	8001254 <setParams+0x1f8>
					osc2Waveform = 3;
 800124c:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <setParams+0x2e8>)
 800124e:	2203      	movs	r2, #3
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	e00b      	b.n	800126c <setParams+0x210>
				else if (paramVal >= 125 ){
 8001254:	4b34      	ldr	r3, [pc, #208]	; (8001328 <setParams+0x2cc>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b7c      	cmp	r3, #124	; 0x7c
 800125a:	d903      	bls.n	8001264 <setParams+0x208>
					osc2Waveform = 4;
 800125c:	4b39      	ldr	r3, [pc, #228]	; (8001344 <setParams+0x2e8>)
 800125e:	2204      	movs	r2, #4
 8001260:	701a      	strb	r2, [r3, #0]
				break;
 8001262:	e059      	b.n	8001318 <setParams+0x2bc>
					osc2Waveform = 0;
 8001264:	4b37      	ldr	r3, [pc, #220]	; (8001344 <setParams+0x2e8>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
				break;
 800126a:	e055      	b.n	8001318 <setParams+0x2bc>
 800126c:	e054      	b.n	8001318 <setParams+0x2bc>
			}
	//Waveform Select OSC1
	case 16:
			{
				if (paramVal >= 0 && paramVal < 32)	{
 800126e:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <setParams+0x2cc>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b1f      	cmp	r3, #31
 8001274:	d803      	bhi.n	800127e <setParams+0x222>
					osc1Waveform = 0;
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <setParams+0x2ec>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
				}
				else {
					osc1Waveform = 0;
				}

				break;
 800127c:	e04c      	b.n	8001318 <setParams+0x2bc>
				else if (paramVal >= 32 && paramVal < 64)	{
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <setParams+0x2cc>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b1f      	cmp	r3, #31
 8001284:	d907      	bls.n	8001296 <setParams+0x23a>
 8001286:	4b28      	ldr	r3, [pc, #160]	; (8001328 <setParams+0x2cc>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b3f      	cmp	r3, #63	; 0x3f
 800128c:	d803      	bhi.n	8001296 <setParams+0x23a>
					osc1Waveform = 1;
 800128e:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <setParams+0x2ec>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	e023      	b.n	80012de <setParams+0x282>
				else if (paramVal >= 64 && paramVal < 96)	{
 8001296:	4b24      	ldr	r3, [pc, #144]	; (8001328 <setParams+0x2cc>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b3f      	cmp	r3, #63	; 0x3f
 800129c:	d907      	bls.n	80012ae <setParams+0x252>
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <setParams+0x2cc>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b5f      	cmp	r3, #95	; 0x5f
 80012a4:	d803      	bhi.n	80012ae <setParams+0x252>
					osc1Waveform = 2;
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <setParams+0x2ec>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e017      	b.n	80012de <setParams+0x282>
				else if (paramVal >= 96 && paramVal < 125){
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <setParams+0x2cc>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b5f      	cmp	r3, #95	; 0x5f
 80012b4:	d907      	bls.n	80012c6 <setParams+0x26a>
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <setParams+0x2cc>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b7c      	cmp	r3, #124	; 0x7c
 80012bc:	d803      	bhi.n	80012c6 <setParams+0x26a>
					osc1Waveform = 3;
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <setParams+0x2ec>)
 80012c0:	2203      	movs	r2, #3
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e00b      	b.n	80012de <setParams+0x282>
				else if (paramVal >= 125 ){
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <setParams+0x2cc>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b7c      	cmp	r3, #124	; 0x7c
 80012cc:	d903      	bls.n	80012d6 <setParams+0x27a>
					osc1Waveform = 4;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <setParams+0x2ec>)
 80012d0:	2204      	movs	r2, #4
 80012d2:	701a      	strb	r2, [r3, #0]
				break;
 80012d4:	e020      	b.n	8001318 <setParams+0x2bc>
					osc1Waveform = 0;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <setParams+0x2ec>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
				break;
 80012dc:	e01c      	b.n	8001318 <setParams+0x2bc>
 80012de:	e01b      	b.n	8001318 <setParams+0x2bc>
			}
	case 74 :								// OSC1 mix level
	{
		osc1mix = (float_t) paramVal / 127;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <setParams+0x2cc>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012ec:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800132c <setParams+0x2d0>
 80012f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <setParams+0x2f0>)
 80012f6:	edc3 7a00 	vstr	s15, [r3]
		break;
 80012fa:	e00d      	b.n	8001318 <setParams+0x2bc>
	}

	case 71 :								// OSC2 mix level
	{
		osc2mix = (float_t) paramVal / 127;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <setParams+0x2cc>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001308:	eddf 6a08 	vldr	s13, [pc, #32]	; 800132c <setParams+0x2d0>
 800130c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <setParams+0x2f4>)
 8001312:	edc3 7a00 	vstr	s15, [r3]
		break;
 8001316:	bf00      	nop
	}
	}
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20004646 	.word	0x20004646
 8001328:	200045de 	.word	0x200045de
 800132c:	42fe0000 	.word	0x42fe0000
 8001330:	3a83126f 	.word	0x3a83126f
 8001334:	20000010 	.word	0x20000010
 8001338:	20000014 	.word	0x20000014
 800133c:	20000018 	.word	0x20000018
 8001340:	2000001c 	.word	0x2000001c
 8001344:	20004668 	.word	0x20004668
 8001348:	20004589 	.word	0x20004589
 800134c:	20000020 	.word	0x20000020
 8001350:	20000024 	.word	0x20000024

08001354 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	//HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
	//new version dose not call here
		//processBuffer();
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	//HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
	//once MIDI buffer is full we send to the process buffer function
	//new version dose not call here
	//processBuffer();
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <calcSynth>:

float calcSynth(){
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
	uint16_t a,b;
	float da, db;

	float osc_wtb_incr = WAVETABLE_LENGTH * (pitch) / SAMPLE_RATE;
 8001382:	4bcb      	ldr	r3, [pc, #812]	; (80016b0 <calcSynth+0x334>)
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	ed9f 7aca 	vldr	s14, [pc, #808]	; 80016b4 <calcSynth+0x338>
 800138c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001390:	eddf 6ac9 	vldr	s13, [pc, #804]	; 80016b8 <calcSynth+0x33c>
 8001394:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001398:	edc7 7a04 	vstr	s15, [r7, #16]
	osc1WavePointer = osc1WavePointer + osc_wtb_incr;
 800139c:	4bc7      	ldr	r3, [pc, #796]	; (80016bc <calcSynth+0x340>)
 800139e:	ed93 7a00 	vldr	s14, [r3]
 80013a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013aa:	4bc4      	ldr	r3, [pc, #784]	; (80016bc <calcSynth+0x340>)
 80013ac:	edc3 7a00 	vstr	s15, [r3]

	if(osc1WavePointer > WAVETABLE_LENGTH){
 80013b0:	4bc2      	ldr	r3, [pc, #776]	; (80016bc <calcSynth+0x340>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80016b4 <calcSynth+0x338>
 80013ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	dd09      	ble.n	80013d8 <calcSynth+0x5c>
		osc1WavePointer = osc1WavePointer - WAVETABLE_LENGTH;
 80013c4:	4bbd      	ldr	r3, [pc, #756]	; (80016bc <calcSynth+0x340>)
 80013c6:	edd3 7a00 	vldr	s15, [r3]
 80013ca:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80016b4 <calcSynth+0x338>
 80013ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013d2:	4bba      	ldr	r3, [pc, #744]	; (80016bc <calcSynth+0x340>)
 80013d4:	edc3 7a00 	vstr	s15, [r3]
	}

	a = (int)osc1WavePointer;
 80013d8:	4bb8      	ldr	r3, [pc, #736]	; (80016bc <calcSynth+0x340>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e2:	ee17 3a90 	vmov	r3, s15
 80013e6:	81fb      	strh	r3, [r7, #14]
	da = osc1WavePointer -a;
 80013e8:	4bb4      	ldr	r3, [pc, #720]	; (80016bc <calcSynth+0x340>)
 80013ea:	ed93 7a00 	vldr	s14, [r3]
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fc:	edc7 7a02 	vstr	s15, [r7, #8]
	b= a+1;
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	3301      	adds	r3, #1
 8001404:	82fb      	strh	r3, [r7, #22]
	db = b - osc1WavePointer;
 8001406:	8afb      	ldrh	r3, [r7, #22]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001410:	4baa      	ldr	r3, [pc, #680]	; (80016bc <calcSynth+0x340>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141a:	edc7 7a01 	vstr	s15, [r7, #4]

	if (b>= WAVETABLE_LENGTH){
 800141e:	8afb      	ldrh	r3, [r7, #22]
 8001420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001424:	d301      	bcc.n	800142a <calcSynth+0xae>
		b = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	82fb      	strh	r3, [r7, #22]
	}


	switch (osc1Waveform)
 800142a:	4ba5      	ldr	r3, [pc, #660]	; (80016c0 <calcSynth+0x344>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b04      	cmp	r3, #4
 8001430:	f200 8090 	bhi.w	8001554 <calcSynth+0x1d8>
 8001434:	a201      	add	r2, pc, #4	; (adr r2, 800143c <calcSynth+0xc0>)
 8001436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143a:	bf00      	nop
 800143c:	08001451 	.word	0x08001451
 8001440:	08001485 	.word	0x08001485
 8001444:	080014b9 	.word	0x080014b9
 8001448:	080014ed 	.word	0x080014ed
 800144c:	08001521 	.word	0x08001521
	{
		case 0 :
		{
			osc1 = db*square[a] + da*square[b];					// Linear interpolation (same as weighted average)
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	4a9c      	ldr	r2, [pc, #624]	; (80016c4 <calcSynth+0x348>)
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	ed93 7a00 	vldr	s14, [r3]
 800145c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001464:	8afb      	ldrh	r3, [r7, #22]
 8001466:	4a97      	ldr	r2, [pc, #604]	; (80016c4 <calcSynth+0x348>)
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	edd3 6a00 	vldr	s13, [r3]
 8001470:	edd7 7a02 	vldr	s15, [r7, #8]
 8001474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147c:	4b92      	ldr	r3, [pc, #584]	; (80016c8 <calcSynth+0x34c>)
 800147e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001482:	e081      	b.n	8001588 <calcSynth+0x20c>
		}

		case 1 :
		{
			osc1 = db*triangle[a] + da*triangle[b];
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	4a91      	ldr	r2, [pc, #580]	; (80016cc <calcSynth+0x350>)
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	ed93 7a00 	vldr	s14, [r3]
 8001490:	edd7 7a01 	vldr	s15, [r7, #4]
 8001494:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001498:	8afb      	ldrh	r3, [r7, #22]
 800149a:	4a8c      	ldr	r2, [pc, #560]	; (80016cc <calcSynth+0x350>)
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	edd3 6a00 	vldr	s13, [r3]
 80014a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b0:	4b85      	ldr	r3, [pc, #532]	; (80016c8 <calcSynth+0x34c>)
 80014b2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014b6:	e067      	b.n	8001588 <calcSynth+0x20c>
		}

		case 2 :
		{
			osc1 = db*sawtooth[a] + da*sawtooth[b];
 80014b8:	89fb      	ldrh	r3, [r7, #14]
 80014ba:	4a85      	ldr	r2, [pc, #532]	; (80016d0 <calcSynth+0x354>)
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014cc:	8afb      	ldrh	r3, [r7, #22]
 80014ce:	4a80      	ldr	r2, [pc, #512]	; (80016d0 <calcSynth+0x354>)
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	edd3 6a00 	vldr	s13, [r3]
 80014d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e4:	4b78      	ldr	r3, [pc, #480]	; (80016c8 <calcSynth+0x34c>)
 80014e6:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014ea:	e04d      	b.n	8001588 <calcSynth+0x20c>
		}

		case 3 :
		{
			osc1 = db*distosine[a] + da*distosine[b];
 80014ec:	89fb      	ldrh	r3, [r7, #14]
 80014ee:	4a79      	ldr	r2, [pc, #484]	; (80016d4 <calcSynth+0x358>)
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	ed93 7a00 	vldr	s14, [r3]
 80014f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001500:	8afb      	ldrh	r3, [r7, #22]
 8001502:	4a74      	ldr	r2, [pc, #464]	; (80016d4 <calcSynth+0x358>)
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	edd3 6a00 	vldr	s13, [r3]
 800150c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001518:	4b6b      	ldr	r3, [pc, #428]	; (80016c8 <calcSynth+0x34c>)
 800151a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800151e:	e033      	b.n	8001588 <calcSynth+0x20c>
		}
		case 4 :
		{
			osc1 = db*sinewave[a] + da*sinewave[b];
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	4a6d      	ldr	r2, [pc, #436]	; (80016d8 <calcSynth+0x35c>)
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	ed93 7a00 	vldr	s14, [r3]
 800152c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001534:	8afb      	ldrh	r3, [r7, #22]
 8001536:	4a68      	ldr	r2, [pc, #416]	; (80016d8 <calcSynth+0x35c>)
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	edd3 6a00 	vldr	s13, [r3]
 8001540:	edd7 7a02 	vldr	s15, [r7, #8]
 8001544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154c:	4b5e      	ldr	r3, [pc, #376]	; (80016c8 <calcSynth+0x34c>)
 800154e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001552:	e019      	b.n	8001588 <calcSynth+0x20c>
		}

		default :
		{
			osc1 = db*sinewave[a] + da*sinewave[b];
 8001554:	89fb      	ldrh	r3, [r7, #14]
 8001556:	4a60      	ldr	r2, [pc, #384]	; (80016d8 <calcSynth+0x35c>)
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	ed93 7a00 	vldr	s14, [r3]
 8001560:	edd7 7a01 	vldr	s15, [r7, #4]
 8001564:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001568:	8afb      	ldrh	r3, [r7, #22]
 800156a:	4a5b      	ldr	r2, [pc, #364]	; (80016d8 <calcSynth+0x35c>)
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	edd3 6a00 	vldr	s13, [r3]
 8001574:	edd7 7a02 	vldr	s15, [r7, #8]
 8001578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <calcSynth+0x34c>)
 8001582:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001586:	bf00      	nop
		}
	}

	switch (osc2Waveform)
 8001588:	4b54      	ldr	r3, [pc, #336]	; (80016dc <calcSynth+0x360>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b04      	cmp	r3, #4
 800158e:	f200 80a9 	bhi.w	80016e4 <calcSynth+0x368>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <calcSynth+0x21c>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015ad 	.word	0x080015ad
 800159c:	080015e1 	.word	0x080015e1
 80015a0:	08001615 	.word	0x08001615
 80015a4:	08001649 	.word	0x08001649
 80015a8:	0800167d 	.word	0x0800167d
	{
		case 0 :
		{
			osc2 = db*square[a] + da*square[b];
 80015ac:	89fb      	ldrh	r3, [r7, #14]
 80015ae:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <calcSynth+0x348>)
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	ed93 7a00 	vldr	s14, [r3]
 80015b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c0:	8afb      	ldrh	r3, [r7, #22]
 80015c2:	4a40      	ldr	r2, [pc, #256]	; (80016c4 <calcSynth+0x348>)
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	edd3 6a00 	vldr	s13, [r3]
 80015cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d8:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <calcSynth+0x364>)
 80015da:	edc3 7a00 	vstr	s15, [r3]
			break;
 80015de:	e09b      	b.n	8001718 <calcSynth+0x39c>
		}

		case 1 :
		{
			osc2 = db*triangle[a] + da*triangle[b];
 80015e0:	89fb      	ldrh	r3, [r7, #14]
 80015e2:	4a3a      	ldr	r2, [pc, #232]	; (80016cc <calcSynth+0x350>)
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	ed93 7a00 	vldr	s14, [r3]
 80015ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f4:	8afb      	ldrh	r3, [r7, #22]
 80015f6:	4a35      	ldr	r2, [pc, #212]	; (80016cc <calcSynth+0x350>)
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	edd3 6a00 	vldr	s13, [r3]
 8001600:	edd7 7a02 	vldr	s15, [r7, #8]
 8001604:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160c:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <calcSynth+0x364>)
 800160e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001612:	e081      	b.n	8001718 <calcSynth+0x39c>
		}

		case 2 :
		{
			osc2 = db*sawtooth[a] + da*sawtooth[b];
 8001614:	89fb      	ldrh	r3, [r7, #14]
 8001616:	4a2e      	ldr	r2, [pc, #184]	; (80016d0 <calcSynth+0x354>)
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	ed93 7a00 	vldr	s14, [r3]
 8001620:	edd7 7a01 	vldr	s15, [r7, #4]
 8001624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001628:	8afb      	ldrh	r3, [r7, #22]
 800162a:	4a29      	ldr	r2, [pc, #164]	; (80016d0 <calcSynth+0x354>)
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	edd3 6a00 	vldr	s13, [r3]
 8001634:	edd7 7a02 	vldr	s15, [r7, #8]
 8001638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <calcSynth+0x364>)
 8001642:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001646:	e067      	b.n	8001718 <calcSynth+0x39c>
		}

		case 3 :
		{
			osc2 = db*distosine[a] + da*distosine[b];
 8001648:	89fb      	ldrh	r3, [r7, #14]
 800164a:	4a22      	ldr	r2, [pc, #136]	; (80016d4 <calcSynth+0x358>)
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	edd7 7a01 	vldr	s15, [r7, #4]
 8001658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165c:	8afb      	ldrh	r3, [r7, #22]
 800165e:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <calcSynth+0x358>)
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	edd3 6a00 	vldr	s13, [r3]
 8001668:	edd7 7a02 	vldr	s15, [r7, #8]
 800166c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <calcSynth+0x364>)
 8001676:	edc3 7a00 	vstr	s15, [r3]
			break;
 800167a:	e04d      	b.n	8001718 <calcSynth+0x39c>
		}
		case 4 :
		{
			osc2 = db*sinewave[a] + da*sinewave[b];
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <calcSynth+0x35c>)
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	ed93 7a00 	vldr	s14, [r3]
 8001688:	edd7 7a01 	vldr	s15, [r7, #4]
 800168c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001690:	8afb      	ldrh	r3, [r7, #22]
 8001692:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <calcSynth+0x35c>)
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	edd3 6a00 	vldr	s13, [r3]
 800169c:	edd7 7a02 	vldr	s15, [r7, #8]
 80016a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <calcSynth+0x364>)
 80016aa:	edc3 7a00 	vstr	s15, [r3]
			break;
 80016ae:	e033      	b.n	8001718 <calcSynth+0x39c>
 80016b0:	200000c0 	.word	0x200000c0
 80016b4:	44800000 	.word	0x44800000
 80016b8:	472c4400 	.word	0x472c4400
 80016bc:	200000b8 	.word	0x200000b8
 80016c0:	20004589 	.word	0x20004589
 80016c4:	08007d3c 	.word	0x08007d3c
 80016c8:	20004584 	.word	0x20004584
 80016cc:	08008d3c 	.word	0x08008d3c
 80016d0:	08009d3c 	.word	0x08009d3c
 80016d4:	0800ad3c 	.word	0x0800ad3c
 80016d8:	0800bd3c 	.word	0x0800bd3c
 80016dc:	20004668 	.word	0x20004668
 80016e0:	20004670 	.word	0x20004670
		}

		default :
		{
			osc2 = db*sinewave[a] + da*sinewave[b];
 80016e4:	89fb      	ldrh	r3, [r7, #14]
 80016e6:	4a2e      	ldr	r2, [pc, #184]	; (80017a0 <calcSynth+0x424>)
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	ed93 7a00 	vldr	s14, [r3]
 80016f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f8:	8afb      	ldrh	r3, [r7, #22]
 80016fa:	4a29      	ldr	r2, [pc, #164]	; (80017a0 <calcSynth+0x424>)
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	edd3 6a00 	vldr	s13, [r3]
 8001704:	edd7 7a02 	vldr	s15, [r7, #8]
 8001708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001710:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <calcSynth+0x428>)
 8001712:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001716:	bf00      	nop
		}
	}

	signal = (osc1mix * osc1) + (osc2mix * osc2);
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <calcSynth+0x42c>)
 800171a:	ed93 7a00 	vldr	s14, [r3]
 800171e:	4b23      	ldr	r3, [pc, #140]	; (80017ac <calcSynth+0x430>)
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <calcSynth+0x434>)
 800172a:	edd3 6a00 	vldr	s13, [r3]
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <calcSynth+0x428>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <calcSynth+0x438>)
 800173e:	edc3 7a00 	vstr	s15, [r3]
	//signal = (osc1mix * osc1);

	signal =  signal * 32767.0f;
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <calcSynth+0x438>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80017b8 <calcSynth+0x43c>
 800174c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <calcSynth+0x438>)
 8001752:	edc3 7a00 	vstr	s15, [r3]

	if (signal > 32767.0f){
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <calcSynth+0x438>)
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80017b8 <calcSynth+0x43c>
 8001760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	dd02      	ble.n	8001770 <calcSynth+0x3f4>
		signal = 32767.0f;
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <calcSynth+0x438>)
 800176c:	4a13      	ldr	r2, [pc, #76]	; (80017bc <calcSynth+0x440>)
 800176e:	601a      	str	r2, [r3, #0]
	}
	if (signal < -32767.0f){
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <calcSynth+0x438>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80017c0 <calcSynth+0x444>
 800177a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	d502      	bpl.n	800178a <calcSynth+0x40e>
		signal = -32767.0f;
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <calcSynth+0x438>)
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <calcSynth+0x448>)
 8001788:	601a      	str	r2, [r3, #0]

	//signal = adsr1_output * 32767.0f * signal_pf;



	return signal;
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <calcSynth+0x438>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	ee07 3a90 	vmov	s15, r3
}
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	371c      	adds	r7, #28
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	0800bd3c 	.word	0x0800bd3c
 80017a4:	20004670 	.word	0x20004670
 80017a8:	20000020 	.word	0x20000020
 80017ac:	20004584 	.word	0x20004584
 80017b0:	20000024 	.word	0x20000024
 80017b4:	200000bc 	.word	0x200000bc
 80017b8:	46fffe00 	.word	0x46fffe00
 80017bc:	46fffe00 	.word	0x46fffe00
 80017c0:	c6fffe00 	.word	0xc6fffe00
 80017c4:	c6fffe00 	.word	0xc6fffe00

080017c8 <make_sound>:

void make_sound(uint16_t start_index) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < AUDIO_BUFFER_LENGTH_DIV2 ;  i=i+2) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	81fb      	strh	r3, [r7, #14]
 80017d6:	e023      	b.n	8001820 <make_sound+0x58>
		float signal = calcSynth();
 80017d8:	f7ff fdd0 	bl	800137c <calcSynth>
 80017dc:	ed87 0a02 	vstr	s0, [r7, #8]
		sendBuff[start_index + i] = (int16_t)signal;
 80017e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e8:	ee17 3a90 	vmov	r3, s15
 80017ec:	b219      	sxth	r1, r3
 80017ee:	88fa      	ldrh	r2, [r7, #6]
 80017f0:	89fb      	ldrh	r3, [r7, #14]
 80017f2:	4413      	add	r3, r2
 80017f4:	b289      	uxth	r1, r1
 80017f6:	4a0f      	ldr	r2, [pc, #60]	; (8001834 <make_sound+0x6c>)
 80017f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sendBuff[start_index + i + 1] = (int16_t)signal;
 80017fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001804:	ee17 3a90 	vmov	r3, s15
 8001808:	b219      	sxth	r1, r3
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	4413      	add	r3, r2
 8001810:	3301      	adds	r3, #1
 8001812:	b289      	uxth	r1, r1
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <make_sound+0x6c>)
 8001816:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < AUDIO_BUFFER_LENGTH_DIV2 ;  i=i+2) {
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	3302      	adds	r3, #2
 800181e:	81fb      	strh	r3, [r7, #14]
 8001820:	89fb      	ldrh	r3, [r7, #14]
 8001822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001826:	d3d7      	bcc.n	80017d8 <make_sound+0x10>
	}
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200000c8 	.word	0x200000c8

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001840:	e7fe      	b.n	8001840 <Error_Handler+0x8>
	...

08001844 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800184a:	f000 fa29 	bl	8001ca0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800184e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001852:	2201      	movs	r2, #1
 8001854:	2178      	movs	r1, #120	; 0x78
 8001856:	485b      	ldr	r0, [pc, #364]	; (80019c4 <SSD1306_Init+0x180>)
 8001858:	f001 fd7a 	bl	8003350 <HAL_I2C_IsDeviceReady>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001862:	2300      	movs	r3, #0
 8001864:	e0a9      	b.n	80019ba <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001866:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800186a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800186c:	e002      	b.n	8001874 <SSD1306_Init+0x30>
		p--;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3b01      	subs	r3, #1
 8001872:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f9      	bne.n	800186e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800187a:	22ae      	movs	r2, #174	; 0xae
 800187c:	2100      	movs	r1, #0
 800187e:	2078      	movs	r0, #120	; 0x78
 8001880:	f000 fa6c 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001884:	2220      	movs	r2, #32
 8001886:	2100      	movs	r1, #0
 8001888:	2078      	movs	r0, #120	; 0x78
 800188a:	f000 fa67 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800188e:	2210      	movs	r2, #16
 8001890:	2100      	movs	r1, #0
 8001892:	2078      	movs	r0, #120	; 0x78
 8001894:	f000 fa62 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001898:	22b0      	movs	r2, #176	; 0xb0
 800189a:	2100      	movs	r1, #0
 800189c:	2078      	movs	r0, #120	; 0x78
 800189e:	f000 fa5d 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80018a2:	22c8      	movs	r2, #200	; 0xc8
 80018a4:	2100      	movs	r1, #0
 80018a6:	2078      	movs	r0, #120	; 0x78
 80018a8:	f000 fa58 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	2078      	movs	r0, #120	; 0x78
 80018b2:	f000 fa53 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80018b6:	2210      	movs	r2, #16
 80018b8:	2100      	movs	r1, #0
 80018ba:	2078      	movs	r0, #120	; 0x78
 80018bc:	f000 fa4e 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80018c0:	2240      	movs	r2, #64	; 0x40
 80018c2:	2100      	movs	r1, #0
 80018c4:	2078      	movs	r0, #120	; 0x78
 80018c6:	f000 fa49 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80018ca:	2281      	movs	r2, #129	; 0x81
 80018cc:	2100      	movs	r1, #0
 80018ce:	2078      	movs	r0, #120	; 0x78
 80018d0:	f000 fa44 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80018d4:	22ff      	movs	r2, #255	; 0xff
 80018d6:	2100      	movs	r1, #0
 80018d8:	2078      	movs	r0, #120	; 0x78
 80018da:	f000 fa3f 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80018de:	22a1      	movs	r2, #161	; 0xa1
 80018e0:	2100      	movs	r1, #0
 80018e2:	2078      	movs	r0, #120	; 0x78
 80018e4:	f000 fa3a 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80018e8:	22a6      	movs	r2, #166	; 0xa6
 80018ea:	2100      	movs	r1, #0
 80018ec:	2078      	movs	r0, #120	; 0x78
 80018ee:	f000 fa35 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80018f2:	22a8      	movs	r2, #168	; 0xa8
 80018f4:	2100      	movs	r1, #0
 80018f6:	2078      	movs	r0, #120	; 0x78
 80018f8:	f000 fa30 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80018fc:	223f      	movs	r2, #63	; 0x3f
 80018fe:	2100      	movs	r1, #0
 8001900:	2078      	movs	r0, #120	; 0x78
 8001902:	f000 fa2b 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001906:	22a4      	movs	r2, #164	; 0xa4
 8001908:	2100      	movs	r1, #0
 800190a:	2078      	movs	r0, #120	; 0x78
 800190c:	f000 fa26 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001910:	22d3      	movs	r2, #211	; 0xd3
 8001912:	2100      	movs	r1, #0
 8001914:	2078      	movs	r0, #120	; 0x78
 8001916:	f000 fa21 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2078      	movs	r0, #120	; 0x78
 8001920:	f000 fa1c 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001924:	22d5      	movs	r2, #213	; 0xd5
 8001926:	2100      	movs	r1, #0
 8001928:	2078      	movs	r0, #120	; 0x78
 800192a:	f000 fa17 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800192e:	22f0      	movs	r2, #240	; 0xf0
 8001930:	2100      	movs	r1, #0
 8001932:	2078      	movs	r0, #120	; 0x78
 8001934:	f000 fa12 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001938:	22d9      	movs	r2, #217	; 0xd9
 800193a:	2100      	movs	r1, #0
 800193c:	2078      	movs	r0, #120	; 0x78
 800193e:	f000 fa0d 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001942:	2222      	movs	r2, #34	; 0x22
 8001944:	2100      	movs	r1, #0
 8001946:	2078      	movs	r0, #120	; 0x78
 8001948:	f000 fa08 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800194c:	22da      	movs	r2, #218	; 0xda
 800194e:	2100      	movs	r1, #0
 8001950:	2078      	movs	r0, #120	; 0x78
 8001952:	f000 fa03 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001956:	2212      	movs	r2, #18
 8001958:	2100      	movs	r1, #0
 800195a:	2078      	movs	r0, #120	; 0x78
 800195c:	f000 f9fe 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001960:	22db      	movs	r2, #219	; 0xdb
 8001962:	2100      	movs	r1, #0
 8001964:	2078      	movs	r0, #120	; 0x78
 8001966:	f000 f9f9 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800196a:	2220      	movs	r2, #32
 800196c:	2100      	movs	r1, #0
 800196e:	2078      	movs	r0, #120	; 0x78
 8001970:	f000 f9f4 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001974:	228d      	movs	r2, #141	; 0x8d
 8001976:	2100      	movs	r1, #0
 8001978:	2078      	movs	r0, #120	; 0x78
 800197a:	f000 f9ef 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800197e:	2214      	movs	r2, #20
 8001980:	2100      	movs	r1, #0
 8001982:	2078      	movs	r0, #120	; 0x78
 8001984:	f000 f9ea 	bl	8001d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001988:	22af      	movs	r2, #175	; 0xaf
 800198a:	2100      	movs	r1, #0
 800198c:	2078      	movs	r0, #120	; 0x78
 800198e:	f000 f9e5 	bl	8001d5c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001992:	222e      	movs	r2, #46	; 0x2e
 8001994:	2100      	movs	r1, #0
 8001996:	2078      	movs	r0, #120	; 0x78
 8001998:	f000 f9e0 	bl	8001d5c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800199c:	2000      	movs	r0, #0
 800199e:	f000 f843 	bl	8001a28 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80019a2:	f000 f813 	bl	80019cc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <SSD1306_Init+0x184>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <SSD1306_Init+0x184>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SSD1306_Init+0x184>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20004590 	.word	0x20004590
 80019c8:	2000450c 	.word	0x2000450c

080019cc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	e01d      	b.n	8001a14 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	3b50      	subs	r3, #80	; 0x50
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	2100      	movs	r1, #0
 80019e2:	2078      	movs	r0, #120	; 0x78
 80019e4:	f000 f9ba 	bl	8001d5c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	2078      	movs	r0, #120	; 0x78
 80019ee:	f000 f9b5 	bl	8001d5c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80019f2:	2210      	movs	r2, #16
 80019f4:	2100      	movs	r1, #0
 80019f6:	2078      	movs	r0, #120	; 0x78
 80019f8:	f000 f9b0 	bl	8001d5c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	01db      	lsls	r3, r3, #7
 8001a00:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <SSD1306_UpdateScreen+0x58>)
 8001a02:	441a      	add	r2, r3
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	2140      	movs	r1, #64	; 0x40
 8001a08:	2078      	movs	r0, #120	; 0x78
 8001a0a:	f000 f95f 	bl	8001ccc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	3301      	adds	r3, #1
 8001a12:	71fb      	strb	r3, [r7, #7]
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	2b07      	cmp	r3, #7
 8001a18:	d9de      	bls.n	80019d8 <SSD1306_UpdateScreen+0xc>
	}
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000410c 	.word	0x2000410c

08001a28 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <SSD1306_Fill+0x14>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e000      	b.n	8001a3e <SSD1306_Fill+0x16>
 8001a3c:	23ff      	movs	r3, #255	; 0xff
 8001a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a42:	4619      	mov	r1, r3
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <SSD1306_Fill+0x2c>)
 8001a46:	f004 fda9 	bl	800659c <memset>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000410c 	.word	0x2000410c

08001a58 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
 8001a62:	460b      	mov	r3, r1
 8001a64:	80bb      	strh	r3, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	70fb      	strb	r3, [r7, #3]
	if (
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8001a6e:	d848      	bhi.n	8001b02 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a70:	88bb      	ldrh	r3, [r7, #4]
 8001a72:	2b3f      	cmp	r3, #63	; 0x3f
 8001a74:	d845      	bhi.n	8001b02 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <SSD1306_DrawPixel+0xb8>)
 8001a78:	791b      	ldrb	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d11a      	bne.n	8001ac8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a92:	88fa      	ldrh	r2, [r7, #6]
 8001a94:	88bb      	ldrh	r3, [r7, #4]
 8001a96:	08db      	lsrs	r3, r3, #3
 8001a98:	b298      	uxth	r0, r3
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	01db      	lsls	r3, r3, #7
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <SSD1306_DrawPixel+0xbc>)
 8001aa2:	5cd3      	ldrb	r3, [r2, r3]
 8001aa4:	b25a      	sxtb	r2, r3
 8001aa6:	88bb      	ldrh	r3, [r7, #4]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	2101      	movs	r1, #1
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	b25b      	sxtb	r3, r3
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b259      	sxtb	r1, r3
 8001ab8:	88fa      	ldrh	r2, [r7, #6]
 8001aba:	4603      	mov	r3, r0
 8001abc:	01db      	lsls	r3, r3, #7
 8001abe:	4413      	add	r3, r2
 8001ac0:	b2c9      	uxtb	r1, r1
 8001ac2:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <SSD1306_DrawPixel+0xbc>)
 8001ac4:	54d1      	strb	r1, [r2, r3]
 8001ac6:	e01d      	b.n	8001b04 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ac8:	88fa      	ldrh	r2, [r7, #6]
 8001aca:	88bb      	ldrh	r3, [r7, #4]
 8001acc:	08db      	lsrs	r3, r3, #3
 8001ace:	b298      	uxth	r0, r3
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	01db      	lsls	r3, r3, #7
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <SSD1306_DrawPixel+0xbc>)
 8001ad8:	5cd3      	ldrb	r3, [r2, r3]
 8001ada:	b25a      	sxtb	r2, r3
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	b25b      	sxtb	r3, r3
 8001aee:	4013      	ands	r3, r2
 8001af0:	b259      	sxtb	r1, r3
 8001af2:	88fa      	ldrh	r2, [r7, #6]
 8001af4:	4603      	mov	r3, r0
 8001af6:	01db      	lsls	r3, r3, #7
 8001af8:	4413      	add	r3, r2
 8001afa:	b2c9      	uxtb	r1, r1
 8001afc:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <SSD1306_DrawPixel+0xbc>)
 8001afe:	54d1      	strb	r1, [r2, r3]
 8001b00:	e000      	b.n	8001b04 <SSD1306_DrawPixel+0xac>
		return;
 8001b02:	bf00      	nop
	}
}
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	2000450c 	.word	0x2000450c
 8001b14:	2000410c 	.word	0x2000410c

08001b18 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	80fb      	strh	r3, [r7, #6]
 8001b24:	4613      	mov	r3, r2
 8001b26:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b28:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <SSD1306_GotoXY+0x28>)
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <SSD1306_GotoXY+0x28>)
 8001b30:	88bb      	ldrh	r3, [r7, #4]
 8001b32:	8053      	strh	r3, [r2, #2]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	2000450c 	.word	0x2000450c

08001b44 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
 8001b50:	4613      	mov	r3, r2
 8001b52:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b54:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <SSD1306_Putc+0xfc>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
	if (
 8001b60:	2b7f      	cmp	r3, #127	; 0x7f
 8001b62:	dc07      	bgt.n	8001b74 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b64:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <SSD1306_Putc+0xfc>)
 8001b66:	885b      	ldrh	r3, [r3, #2]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	785b      	ldrb	r3, [r3, #1]
 8001b6e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b70:	2b3f      	cmp	r3, #63	; 0x3f
 8001b72:	dd01      	ble.n	8001b78 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e05e      	b.n	8001c36 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e04b      	b.n	8001c16 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	3b20      	subs	r3, #32
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	7849      	ldrb	r1, [r1, #1]
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4619      	mov	r1, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	440b      	add	r3, r1
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	e030      	b.n	8001c04 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d010      	beq.n	8001bd4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001bb2:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <SSD1306_Putc+0xfc>)
 8001bb4:	881a      	ldrh	r2, [r3, #0]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	b298      	uxth	r0, r3
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <SSD1306_Putc+0xfc>)
 8001bc0:	885a      	ldrh	r2, [r3, #2]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	79ba      	ldrb	r2, [r7, #6]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7ff ff43 	bl	8001a58 <SSD1306_DrawPixel>
 8001bd2:	e014      	b.n	8001bfe <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <SSD1306_Putc+0xfc>)
 8001bd6:	881a      	ldrh	r2, [r3, #0]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	b298      	uxth	r0, r3
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <SSD1306_Putc+0xfc>)
 8001be2:	885a      	ldrh	r2, [r3, #2]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	b299      	uxth	r1, r3
 8001bec:	79bb      	ldrb	r3, [r7, #6]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	bf0c      	ite	eq
 8001bf2:	2301      	moveq	r3, #1
 8001bf4:	2300      	movne	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f7ff ff2d 	bl	8001a58 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	3301      	adds	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d3c8      	bcc.n	8001ba2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	785b      	ldrb	r3, [r3, #1]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d3ad      	bcc.n	8001b7e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <SSD1306_Putc+0xfc>)
 8001c24:	881a      	ldrh	r2, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <SSD1306_Putc+0xfc>)
 8001c32:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001c34:	79fb      	ldrb	r3, [r7, #7]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000450c 	.word	0x2000450c

08001c44 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001c52:	e012      	b.n	8001c7a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	79fa      	ldrb	r2, [r7, #7]
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff71 	bl	8001b44 <SSD1306_Putc>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461a      	mov	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d002      	beq.n	8001c74 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	e008      	b.n	8001c86 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3301      	adds	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1e8      	bne.n	8001c54 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	781b      	ldrb	r3, [r3, #0]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fec8 	bl	8001a28 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001c98:	f7ff fe98 	bl	80019cc <SSD1306_UpdateScreen>
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <ssd1306_I2C_Init+0x28>)
 8001ca8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001caa:	e002      	b.n	8001cb2 <ssd1306_I2C_Init+0x12>
		p--;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f9      	bne.n	8001cac <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	0003d090 	.word	0x0003d090

08001ccc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b0c7      	sub	sp, #284	; 0x11c
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	4639      	mov	r1, r7
 8001cd8:	600a      	str	r2, [r1, #0]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	4622      	mov	r2, r4
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	1dbb      	adds	r3, r7, #6
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	460a      	mov	r2, r1
 8001cec:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	1dba      	adds	r2, r7, #6
 8001cf4:	7812      	ldrb	r2, [r2, #0]
 8001cf6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001cfe:	e010      	b.n	8001d22 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001d00:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d04:	463a      	mov	r2, r7
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	441a      	add	r2, r3
 8001d0a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d0e:	3301      	adds	r3, #1
 8001d10:	7811      	ldrb	r1, [r2, #0]
 8001d12:	f107 020c 	add.w	r2, r7, #12
 8001d16:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d18:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d22:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	1d3a      	adds	r2, r7, #4
 8001d2a:	8812      	ldrh	r2, [r2, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d8e7      	bhi.n	8001d00 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8001d30:	1dfb      	adds	r3, r7, #7
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b299      	uxth	r1, r3
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	f107 020c 	add.w	r2, r7, #12
 8001d42:	200a      	movs	r0, #10
 8001d44:	9000      	str	r0, [sp, #0]
 8001d46:	4804      	ldr	r0, [pc, #16]	; (8001d58 <ssd1306_I2C_WriteMulti+0x8c>)
 8001d48:	f001 fa0e 	bl	8003168 <HAL_I2C_Master_Transmit>
}
 8001d4c:	bf00      	nop
 8001d4e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20004590 	.word	0x20004590

08001d5c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	460b      	mov	r3, r1
 8001d68:	71bb      	strb	r3, [r7, #6]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001d6e:	79bb      	ldrb	r3, [r7, #6]
 8001d70:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001d72:	797b      	ldrb	r3, [r7, #5]
 8001d74:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	b299      	uxth	r1, r3
 8001d7a:	f107 020c 	add.w	r2, r7, #12
 8001d7e:	230a      	movs	r3, #10
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2302      	movs	r3, #2
 8001d84:	4803      	ldr	r0, [pc, #12]	; (8001d94 <ssd1306_I2C_Write+0x38>)
 8001d86:	f001 f9ef 	bl	8003168 <HAL_I2C_Master_Transmit>
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20004590 	.word	0x20004590

08001d98 <SSD1306_Menu>:

/////////////////////////////////////////////////////////////////////////////////////////
//////////////////////[BASE MENU SCREEN]////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
void SSD1306_Menu()
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	SSD1306_Init (); 								// initialize the OLED screen
 8001d9c:	f7ff fd52 	bl	8001844 <SSD1306_Init>
	SSD1306_Clear();								// clear screen of any previous input information
 8001da0:	f7ff ff75 	bl	8001c8e <SSD1306_Clear>
	SSD1306_GotoXY (0, 0); 							// go to 0, 0
 8001da4:	2100      	movs	r1, #0
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff feb6 	bl	8001b18 <SSD1306_GotoXY>
	SSD1306_Puts ("Music Synth", &Font_11x18, 1); 	// print Music Synth
 8001dac:	2201      	movs	r2, #1
 8001dae:	4916      	ldr	r1, [pc, #88]	; (8001e08 <SSD1306_Menu+0x70>)
 8001db0:	4816      	ldr	r0, [pc, #88]	; (8001e0c <SSD1306_Menu+0x74>)
 8001db2:	f7ff ff47 	bl	8001c44 <SSD1306_Puts>
	SSD1306_GotoXY (0, 20); 						// go to 0, 20
 8001db6:	2114      	movs	r1, #20
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7ff fead 	bl	8001b18 <SSD1306_GotoXY>
	SSD1306_Puts ("By:", &Font_7x10, 1); 			// print by
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4913      	ldr	r1, [pc, #76]	; (8001e10 <SSD1306_Menu+0x78>)
 8001dc2:	4814      	ldr	r0, [pc, #80]	; (8001e14 <SSD1306_Menu+0x7c>)
 8001dc4:	f7ff ff3e 	bl	8001c44 <SSD1306_Puts>
	SSD1306_GotoXY (0, 30);							// go to 0, 30
 8001dc8:	211e      	movs	r1, #30
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7ff fea4 	bl	8001b18 <SSD1306_GotoXY>
	SSD1306_Puts ("Joshua Mendoza", &Font_7x10, 1);	// print group member 1
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	490f      	ldr	r1, [pc, #60]	; (8001e10 <SSD1306_Menu+0x78>)
 8001dd4:	4810      	ldr	r0, [pc, #64]	; (8001e18 <SSD1306_Menu+0x80>)
 8001dd6:	f7ff ff35 	bl	8001c44 <SSD1306_Puts>
	SSD1306_GotoXY (0, 40);							// go to 0, 40
 8001dda:	2128      	movs	r1, #40	; 0x28
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff fe9b 	bl	8001b18 <SSD1306_GotoXY>
	SSD1306_Puts ("Megan Abundo", &Font_7x10, 1);	// print group member 2
 8001de2:	2201      	movs	r2, #1
 8001de4:	490a      	ldr	r1, [pc, #40]	; (8001e10 <SSD1306_Menu+0x78>)
 8001de6:	480d      	ldr	r0, [pc, #52]	; (8001e1c <SSD1306_Menu+0x84>)
 8001de8:	f7ff ff2c 	bl	8001c44 <SSD1306_Puts>
	SSD1306_GotoXY (0, 50);							// go to 0,50
 8001dec:	2132      	movs	r1, #50	; 0x32
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff fe92 	bl	8001b18 <SSD1306_GotoXY>
	SSD1306_Puts ("Paris Villarrial", &Font_7x10, 1);// print group member 3
 8001df4:	2201      	movs	r2, #1
 8001df6:	4906      	ldr	r1, [pc, #24]	; (8001e10 <SSD1306_Menu+0x78>)
 8001df8:	4809      	ldr	r0, [pc, #36]	; (8001e20 <SSD1306_Menu+0x88>)
 8001dfa:	f7ff ff23 	bl	8001c44 <SSD1306_Puts>
	SSD1306_UpdateScreen(); 						// update screen with new input information
 8001dfe:	f7ff fde5 	bl	80019cc <SSD1306_UpdateScreen>

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	08006754 	.word	0x08006754
 8001e10:	20000000 	.word	0x20000000
 8001e14:	08006760 	.word	0x08006760
 8001e18:	08006764 	.word	0x08006764
 8001e1c:	08006774 	.word	0x08006774
 8001e20:	08006784 	.word	0x08006784

08001e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_MspInit+0x44>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <HAL_MspInit+0x44>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_MspInit+0x44>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_MspInit+0x44>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <HAL_MspInit+0x44>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_MspInit+0x44>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a17      	ldr	r2, [pc, #92]	; (8001ee8 <HAL_I2C_MspInit+0x7c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d127      	bne.n	8001ede <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_I2C_MspInit+0x80>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a16      	ldr	r2, [pc, #88]	; (8001eec <HAL_I2C_MspInit+0x80>)
 8001e94:	f043 0320 	orr.w	r3, r3, #32
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_I2C_MspInit+0x80>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eaa:	2312      	movs	r3, #18
 8001eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <HAL_I2C_MspInit+0x84>)
 8001ec2:	f000 fefb 	bl	8002cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_I2C_MspInit+0x80>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_I2C_MspInit+0x80>)
 8001ecc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_I2C_MspInit+0x80>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ede:	bf00      	nop
 8001ee0:	3728      	adds	r7, #40	; 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40005800 	.word	0x40005800
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40021400 	.word	0x40021400

08001ef4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <HAL_I2S_MspInit+0x7c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d127      	bne.n	8001f66 <HAL_I2S_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_I2S_MspInit+0x80>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <HAL_I2S_MspInit+0x80>)
 8001f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f20:	6453      	str	r3, [r2, #68]	; 0x44
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_I2S_MspInit+0x80>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_I2S_MspInit+0x80>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <HAL_I2S_MspInit+0x80>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_I2S_MspInit+0x80>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001f46:	23b0      	movs	r3, #176	; 0xb0
 8001f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f56:	2305      	movs	r3, #5
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4805      	ldr	r0, [pc, #20]	; (8001f78 <HAL_I2S_MspInit+0x84>)
 8001f62:	f000 feab 	bl	8002cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	; 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40013000 	.word	0x40013000
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020000 	.word	0x40020000

08001f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a3d      	ldr	r2, [pc, #244]	; (8002090 <HAL_UART_MspInit+0x114>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d173      	bne.n	8002086 <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_UART_MspInit+0x118>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a3c      	ldr	r2, [pc, #240]	; (8002094 <HAL_UART_MspInit+0x118>)
 8001fa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <HAL_UART_MspInit+0x118>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	4b37      	ldr	r3, [pc, #220]	; (8002094 <HAL_UART_MspInit+0x118>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a36      	ldr	r2, [pc, #216]	; (8002094 <HAL_UART_MspInit+0x118>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b34      	ldr	r3, [pc, #208]	; (8002094 <HAL_UART_MspInit+0x118>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_UART_MspInit+0x118>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a30      	ldr	r2, [pc, #192]	; (8002094 <HAL_UART_MspInit+0x118>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <HAL_UART_MspInit+0x118>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ff6:	2308      	movs	r3, #8
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	4825      	ldr	r0, [pc, #148]	; (8002098 <HAL_UART_MspInit+0x11c>)
 8002002:	f000 fe5b 	bl	8002cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002006:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002018:	2308      	movs	r3, #8
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	481e      	ldr	r0, [pc, #120]	; (800209c <HAL_UART_MspInit+0x120>)
 8002024:	f000 fe4a 	bl	8002cbc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_UART_MspInit+0x124>)
 800202a:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <HAL_UART_MspInit+0x128>)
 800202c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_UART_MspInit+0x124>)
 8002030:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002034:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002036:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <HAL_UART_MspInit+0x124>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_UART_MspInit+0x124>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_UART_MspInit+0x124>)
 8002044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002048:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_UART_MspInit+0x124>)
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_UART_MspInit+0x124>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_UART_MspInit+0x124>)
 8002058:	f44f 7280 	mov.w	r2, #256	; 0x100
 800205c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_UART_MspInit+0x124>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_UART_MspInit+0x124>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800206a:	480d      	ldr	r0, [pc, #52]	; (80020a0 <HAL_UART_MspInit+0x124>)
 800206c:	f000 faae 	bl	80025cc <HAL_DMA_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8002076:	f7ff fbdf 	bl	8001838 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_UART_MspInit+0x124>)
 800207e:	671a      	str	r2, [r3, #112]	; 0x70
 8002080:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <HAL_UART_MspInit+0x124>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	; 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40004c00 	.word	0x40004c00
 8002094:	40023800 	.word	0x40023800
 8002098:	40020000 	.word	0x40020000
 800209c:	40020800 	.word	0x40020800
 80020a0:	20004524 	.word	0x20004524
 80020a4:	40026040 	.word	0x40026040

080020a8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a30      	ldr	r2, [pc, #192]	; (8002178 <HAL_SAI_MspInit+0xd0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d15a      	bne.n	8002170 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80020ba:	4b30      	ldr	r3, [pc, #192]	; (800217c <HAL_SAI_MspInit+0xd4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10b      	bne.n	80020da <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_SAI_MspInit+0xd8>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4a2e      	ldr	r2, [pc, #184]	; (8002180 <HAL_SAI_MspInit+0xd8>)
 80020c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020cc:	6453      	str	r3, [r2, #68]	; 0x44
 80020ce:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <HAL_SAI_MspInit+0xd8>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 80020da:	4b28      	ldr	r3, [pc, #160]	; (800217c <HAL_SAI_MspInit+0xd4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	4a26      	ldr	r2, [pc, #152]	; (800217c <HAL_SAI_MspInit+0xd4>)
 80020e2:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80020e4:	2370      	movs	r3, #112	; 0x70
 80020e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80020f4:	2306      	movs	r3, #6
 80020f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	4619      	mov	r1, r3
 80020fe:	4821      	ldr	r0, [pc, #132]	; (8002184 <HAL_SAI_MspInit+0xdc>)
 8002100:	f000 fddc 	bl	8002cbc <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 8002106:	4a21      	ldr	r2, [pc, #132]	; (800218c <HAL_SAI_MspInit+0xe4>)
 8002108:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 8002112:	2240      	movs	r2, #64	; 0x40
 8002114:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002116:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 8002118:	2200      	movs	r2, #0
 800211a:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 800211e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002122:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 8002126:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800212a:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 800212e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002132:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 8002136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800213a:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 800213e:	2200      	movs	r2, #0
 8002140:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 8002144:	2200      	movs	r2, #0
 8002146:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002148:	480f      	ldr	r0, [pc, #60]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 800214a:	f000 fa3f 	bl	80025cc <HAL_DMA_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_SAI_MspInit+0xb0>
    {
      Error_Handler();
 8002154:	f7ff fb70 	bl	8001838 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 800215c:	671a      	str	r2, [r3, #112]	; 0x70
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a08      	ldr	r2, [pc, #32]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 8002168:	66da      	str	r2, [r3, #108]	; 0x6c
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_SAI_MspInit+0xe0>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8002170:	bf00      	nop
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40015804 	.word	0x40015804
 800217c:	20004514 	.word	0x20004514
 8002180:	40023800 	.word	0x40023800
 8002184:	40021000 	.word	0x40021000
 8002188:	200045e4 	.word	0x200045e4
 800218c:	40026428 	.word	0x40026428

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <NMI_Handler+0x4>

08002196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <HardFault_Handler+0x4>

0800219c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <MemManage_Handler+0x4>

080021a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <BusFault_Handler+0x4>

080021a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <UsageFault_Handler+0x4>

080021ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021dc:	f000 f8c4 	bl	8002368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <DMA1_Stream2_IRQHandler+0x10>)
 80021ea:	f000 fafd 	bl	80027e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20004524 	.word	0x20004524

080021f8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <DMA2_Stream1_IRQHandler+0x10>)
 80021fe:	f000 faf3 	bl	80027e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200045e4 	.word	0x200045e4

0800220c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <_sbrk+0x5c>)
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <_sbrk+0x60>)
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <_sbrk+0x64>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <_sbrk+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d207      	bcs.n	800224c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800223c:	f004 f974 	bl	8006528 <__errno>
 8002240:	4603      	mov	r3, r0
 8002242:	220c      	movs	r2, #12
 8002244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	e009      	b.n	8002260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <_sbrk+0x64>)
 800225c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20080000 	.word	0x20080000
 800226c:	00000400 	.word	0x00000400
 8002270:	20004518 	.word	0x20004518
 8002274:	200047d8 	.word	0x200047d8

08002278 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <SystemInit+0x20>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <SystemInit+0x20>)
 8002284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800229c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a0:	480d      	ldr	r0, [pc, #52]	; (80022d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022a2:	490e      	ldr	r1, [pc, #56]	; (80022dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022a4:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a8:	e002      	b.n	80022b0 <LoopCopyDataInit>

080022aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ae:	3304      	adds	r3, #4

080022b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b4:	d3f9      	bcc.n	80022aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b6:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022b8:	4c0b      	ldr	r4, [pc, #44]	; (80022e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022bc:	e001      	b.n	80022c2 <LoopFillZerobss>

080022be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c0:	3204      	adds	r2, #4

080022c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c4:	d3fb      	bcc.n	80022be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022c6:	f7ff ffd7 	bl	8002278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ca:	f004 f933 	bl	8006534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ce:	f7fe f9a3 	bl	8000618 <main>
  bx  lr    
 80022d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022d4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80022d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022dc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80022e0:	0800cf5c 	.word	0x0800cf5c
  ldr r2, =_sbss
 80022e4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80022e8:	200047d8 	.word	0x200047d8

080022ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022ec:	e7fe      	b.n	80022ec <ADC_IRQHandler>

080022ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f2:	2003      	movs	r0, #3
 80022f4:	f000 f928 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f8:	200f      	movs	r0, #15
 80022fa:	f000 f805 	bl	8002308 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80022fe:	f7ff fd91 	bl	8001e24 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_InitTick+0x54>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_InitTick+0x58>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f943 	bl	80025b2 <HAL_SYSTICK_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e00e      	b.n	8002354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d80a      	bhi.n	8002352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800233c:	2200      	movs	r2, #0
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f000 f90b 	bl	800255e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002348:	4a06      	ldr	r2, [pc, #24]	; (8002364 <HAL_InitTick+0x5c>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e000      	b.n	8002354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	2000002c 	.word	0x2000002c
 8002360:	20000034 	.word	0x20000034
 8002364:	20000030 	.word	0x20000030

08002368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x20>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x24>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_IncTick+0x24>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000034 	.word	0x20000034
 800238c:	200047c4 	.word	0x200047c4

08002390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return uwTick;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_GetTick+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	200047c4 	.word	0x200047c4

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <__NVIC_SetPriorityGrouping+0x40>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d6:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <__NVIC_SetPriorityGrouping+0x40>)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	60d3      	str	r3, [r2, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00
 80023ec:	05fa0000 	.word	0x05fa0000

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	db0b      	blt.n	8002436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4907      	ldr	r1, [pc, #28]	; (8002444 <__NVIC_EnableIRQ+0x38>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2001      	movs	r0, #1
 800242e:	fa00 f202 	lsl.w	r2, r0, r2
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	db0a      	blt.n	8002472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	490c      	ldr	r1, [pc, #48]	; (8002494 <__NVIC_SetPriority+0x4c>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	0112      	lsls	r2, r2, #4
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	440b      	add	r3, r1
 800246c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002470:	e00a      	b.n	8002488 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4908      	ldr	r1, [pc, #32]	; (8002498 <__NVIC_SetPriority+0x50>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3b04      	subs	r3, #4
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	440b      	add	r3, r1
 8002486:	761a      	strb	r2, [r3, #24]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000e100 	.word	0xe000e100
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f1c3 0307 	rsb	r3, r3, #7
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	bf28      	it	cs
 80024ba:	2304      	movcs	r3, #4
 80024bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d902      	bls.n	80024cc <NVIC_EncodePriority+0x30>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3b03      	subs	r3, #3
 80024ca:	e000      	b.n	80024ce <NVIC_EncodePriority+0x32>
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	401a      	ands	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	4313      	orrs	r3, r2
         );
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002514:	d301      	bcc.n	800251a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2301      	movs	r3, #1
 8002518:	e00f      	b.n	800253a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <SysTick_Config+0x40>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002522:	210f      	movs	r1, #15
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f7ff ff8e 	bl	8002448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <SysTick_Config+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <SysTick_Config+0x40>)
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff29 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff3e 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ff8e 	bl	800249c <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff5d 	bl	8002448 <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff31 	bl	800240c <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffa2 	bl	8002504 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff feda 	bl	8002390 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e099      	b.n	800271c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002608:	e00f      	b.n	800262a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260a:	f7ff fec1 	bl	8002390 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b05      	cmp	r3, #5
 8002616:	d908      	bls.n	800262a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e078      	b.n	800271c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e8      	bne.n	800260a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4b38      	ldr	r3, [pc, #224]	; (8002724 <HAL_DMA_Init+0x158>)
 8002644:	4013      	ands	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	4313      	orrs	r3, r2
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f023 0307 	bic.w	r3, r3, #7
 80026aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d117      	bne.n	80026ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00e      	beq.n	80026ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fa77 	bl	8002bc4 <DMA_CheckFifoParam>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2240      	movs	r2, #64	; 0x40
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026ea:	2301      	movs	r3, #1
 80026ec:	e016      	b.n	800271c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fa2e 	bl	8002b58 <DMA_CalcBaseAndBitshift>
 80026fc:	4603      	mov	r3, r0
 80026fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	223f      	movs	r2, #63	; 0x3f
 8002706:	409a      	lsls	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	e010803f 	.word	0xe010803f

08002728 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_DMA_Start_IT+0x26>
 800274a:	2302      	movs	r3, #2
 800274c:	e048      	b.n	80027e0 <HAL_DMA_Start_IT+0xb8>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d137      	bne.n	80027d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2202      	movs	r2, #2
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f9c0 	bl	8002afc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	223f      	movs	r2, #63	; 0x3f
 8002782:	409a      	lsls	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0216 	orr.w	r2, r2, #22
 8002796:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027a6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0208 	orr.w	r2, r2, #8
 80027be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	e005      	b.n	80027de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027da:	2302      	movs	r3, #2
 80027dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027de:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80027f4:	4b92      	ldr	r3, [pc, #584]	; (8002a40 <HAL_DMA_IRQHandler+0x258>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a92      	ldr	r2, [pc, #584]	; (8002a44 <HAL_DMA_IRQHandler+0x25c>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0a9b      	lsrs	r3, r3, #10
 8002800:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	2208      	movs	r2, #8
 8002814:	409a      	lsls	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01a      	beq.n	8002854 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d013      	beq.n	8002854 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0204 	bic.w	r2, r2, #4
 800283a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	2208      	movs	r2, #8
 8002842:	409a      	lsls	r2, r3
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	f043 0201 	orr.w	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	2201      	movs	r2, #1
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d012      	beq.n	800288a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	2201      	movs	r2, #1
 8002878:	409a      	lsls	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	f043 0202 	orr.w	r2, r3, #2
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	2204      	movs	r2, #4
 8002890:	409a      	lsls	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d012      	beq.n	80028c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00b      	beq.n	80028c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	2204      	movs	r2, #4
 80028ae:	409a      	lsls	r2, r3
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b8:	f043 0204 	orr.w	r2, r3, #4
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	2210      	movs	r2, #16
 80028c6:	409a      	lsls	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d043      	beq.n	8002958 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d03c      	beq.n	8002958 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	2210      	movs	r2, #16
 80028e4:	409a      	lsls	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d018      	beq.n	800292a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d108      	bne.n	8002918 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d024      	beq.n	8002958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
 8002916:	e01f      	b.n	8002958 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01b      	beq.n	8002958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
 8002928:	e016      	b.n	8002958 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d107      	bne.n	8002948 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0208 	bic.w	r2, r2, #8
 8002946:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	2220      	movs	r2, #32
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 808e 	beq.w	8002a86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8086 	beq.w	8002a86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297e:	2220      	movs	r2, #32
 8002980:	409a      	lsls	r2, r3
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b05      	cmp	r3, #5
 8002990:	d136      	bne.n	8002a00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0216 	bic.w	r2, r2, #22
 80029a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d103      	bne.n	80029c2 <HAL_DMA_IRQHandler+0x1da>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0208 	bic.w	r2, r2, #8
 80029d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	223f      	movs	r2, #63	; 0x3f
 80029d8:	409a      	lsls	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d07d      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
        }
        return;
 80029fe:	e078      	b.n	8002af2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01c      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d108      	bne.n	8002a2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d030      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
 8002a2c:	e02b      	b.n	8002a86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d027      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
 8002a3e:	e022      	b.n	8002a86 <HAL_DMA_IRQHandler+0x29e>
 8002a40:	2000002c 	.word	0x2000002c
 8002a44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10f      	bne.n	8002a76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0210 	bic.w	r2, r2, #16
 8002a64:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d032      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d022      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2205      	movs	r2, #5
 8002a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0201 	bic.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d307      	bcc.n	8002ace <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f2      	bne.n	8002ab2 <HAL_DMA_IRQHandler+0x2ca>
 8002acc:	e000      	b.n	8002ad0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002ace:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
 8002af0:	e000      	b.n	8002af4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002af2:	bf00      	nop
    }
  }
}
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop

08002afc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d108      	bne.n	8002b3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b3a:	e007      	b.n	8002b4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	3b10      	subs	r3, #16
 8002b68:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x60>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <DMA_CalcBaseAndBitshift+0x64>)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d908      	bls.n	8002b98 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	1d1a      	adds	r2, r3, #4
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	659a      	str	r2, [r3, #88]	; 0x58
 8002b96:	e006      	b.n	8002ba6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <DMA_CalcBaseAndBitshift+0x68>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	aaaaaaab 	.word	0xaaaaaaab
 8002bbc:	0800cee4 	.word	0x0800cee4
 8002bc0:	fffffc00 	.word	0xfffffc00

08002bc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d11f      	bne.n	8002c1e <DMA_CheckFifoParam+0x5a>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d856      	bhi.n	8002c92 <DMA_CheckFifoParam+0xce>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <DMA_CheckFifoParam+0x28>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c0f 	.word	0x08002c0f
 8002bf4:	08002bfd 	.word	0x08002bfd
 8002bf8:	08002c93 	.word	0x08002c93
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d046      	beq.n	8002c96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0c:	e043      	b.n	8002c96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c16:	d140      	bne.n	8002c9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1c:	e03d      	b.n	8002c9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c26:	d121      	bne.n	8002c6c <DMA_CheckFifoParam+0xa8>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d837      	bhi.n	8002c9e <DMA_CheckFifoParam+0xda>
 8002c2e:	a201      	add	r2, pc, #4	; (adr r2, 8002c34 <DMA_CheckFifoParam+0x70>)
 8002c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c34:	08002c45 	.word	0x08002c45
 8002c38:	08002c4b 	.word	0x08002c4b
 8002c3c:	08002c45 	.word	0x08002c45
 8002c40:	08002c5d 	.word	0x08002c5d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      break;
 8002c48:	e030      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d025      	beq.n	8002ca2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c5a:	e022      	b.n	8002ca2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c64:	d11f      	bne.n	8002ca6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c6a:	e01c      	b.n	8002ca6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d903      	bls.n	8002c7a <DMA_CheckFifoParam+0xb6>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d003      	beq.n	8002c80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c78:	e018      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7e:	e015      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00e      	beq.n	8002caa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c90:	e00b      	b.n	8002caa <DMA_CheckFifoParam+0xe6>
      break;
 8002c92:	bf00      	nop
 8002c94:	e00a      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      break;
 8002c96:	bf00      	nop
 8002c98:	e008      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e006      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e004      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e002      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      break;   
 8002ca6:	bf00      	nop
 8002ca8:	e000      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      break;
 8002caa:	bf00      	nop
    }
  } 
  
  return status; 
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop

08002cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	e175      	b.n	8002fc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	f040 8164 	bne.w	8002fc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d00b      	beq.n	8002d1a <HAL_GPIO_Init+0x5e>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d007      	beq.n	8002d1a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d0e:	2b11      	cmp	r3, #17
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b12      	cmp	r3, #18
 8002d18:	d130      	bne.n	8002d7c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	2203      	movs	r2, #3
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d50:	2201      	movs	r2, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 0201 	and.w	r2, r3, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	2203      	movs	r2, #3
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x100>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b12      	cmp	r3, #18
 8002dba:	d123      	bne.n	8002e04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	08da      	lsrs	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3208      	adds	r2, #8
 8002dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	08da      	lsrs	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3208      	adds	r2, #8
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0203 	and.w	r2, r3, #3
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80be 	beq.w	8002fc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e46:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <HAL_GPIO_Init+0x324>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	4a65      	ldr	r2, [pc, #404]	; (8002fe0 <HAL_GPIO_Init+0x324>)
 8002e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e50:	6453      	str	r3, [r2, #68]	; 0x44
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_GPIO_Init+0x324>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e5e:	4a61      	ldr	r2, [pc, #388]	; (8002fe4 <HAL_GPIO_Init+0x328>)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	3302      	adds	r3, #2
 8002e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	220f      	movs	r2, #15
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a58      	ldr	r2, [pc, #352]	; (8002fe8 <HAL_GPIO_Init+0x32c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d037      	beq.n	8002efa <HAL_GPIO_Init+0x23e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a57      	ldr	r2, [pc, #348]	; (8002fec <HAL_GPIO_Init+0x330>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d031      	beq.n	8002ef6 <HAL_GPIO_Init+0x23a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a56      	ldr	r2, [pc, #344]	; (8002ff0 <HAL_GPIO_Init+0x334>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02b      	beq.n	8002ef2 <HAL_GPIO_Init+0x236>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a55      	ldr	r2, [pc, #340]	; (8002ff4 <HAL_GPIO_Init+0x338>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d025      	beq.n	8002eee <HAL_GPIO_Init+0x232>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a54      	ldr	r2, [pc, #336]	; (8002ff8 <HAL_GPIO_Init+0x33c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01f      	beq.n	8002eea <HAL_GPIO_Init+0x22e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a53      	ldr	r2, [pc, #332]	; (8002ffc <HAL_GPIO_Init+0x340>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d019      	beq.n	8002ee6 <HAL_GPIO_Init+0x22a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a52      	ldr	r2, [pc, #328]	; (8003000 <HAL_GPIO_Init+0x344>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0x226>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a51      	ldr	r2, [pc, #324]	; (8003004 <HAL_GPIO_Init+0x348>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00d      	beq.n	8002ede <HAL_GPIO_Init+0x222>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a50      	ldr	r2, [pc, #320]	; (8003008 <HAL_GPIO_Init+0x34c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <HAL_GPIO_Init+0x21e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4f      	ldr	r2, [pc, #316]	; (800300c <HAL_GPIO_Init+0x350>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_GPIO_Init+0x21a>
 8002ed2:	2309      	movs	r3, #9
 8002ed4:	e012      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ed6:	230a      	movs	r3, #10
 8002ed8:	e010      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002eda:	2308      	movs	r3, #8
 8002edc:	e00e      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ede:	2307      	movs	r3, #7
 8002ee0:	e00c      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ee2:	2306      	movs	r3, #6
 8002ee4:	e00a      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	e008      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002eea:	2304      	movs	r3, #4
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e004      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e002      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002efa:	2300      	movs	r3, #0
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	f002 0203 	and.w	r2, r2, #3
 8002f02:	0092      	lsls	r2, r2, #2
 8002f04:	4093      	lsls	r3, r2
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f0c:	4935      	ldr	r1, [pc, #212]	; (8002fe4 <HAL_GPIO_Init+0x328>)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	3302      	adds	r3, #2
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f3e:	4a34      	ldr	r2, [pc, #208]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f44:	4b32      	ldr	r3, [pc, #200]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f68:	4a29      	ldr	r2, [pc, #164]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6e:	4b28      	ldr	r3, [pc, #160]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f92:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f98:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	f67f ae86 	bls.w	8002cdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	; 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40013800 	.word	0x40013800
 8002fe8:	40020000 	.word	0x40020000
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	40020800 	.word	0x40020800
 8002ff4:	40020c00 	.word	0x40020c00
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40021400 	.word	0x40021400
 8003000:	40021800 	.word	0x40021800
 8003004:	40021c00 	.word	0x40021c00
 8003008:	40022000 	.word	0x40022000
 800300c:	40022400 	.word	0x40022400
 8003010:	40013c00 	.word	0x40013c00

08003014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003024:	787b      	ldrb	r3, [r7, #1]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003030:	e003      	b.n	800303a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	041a      	lsls	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	619a      	str	r2, [r3, #24]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e07f      	b.n	800315a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fe fefc 	bl	8001e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2224      	movs	r2, #36	; 0x24
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	e006      	b.n	80030d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d104      	bne.n	80030e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <HAL_I2C_Init+0x11c>)
 80030ee:	430b      	orrs	r3, r1
 80030f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003100:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	ea42 0103 	orr.w	r1, r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	021a      	lsls	r2, r3, #8
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69d9      	ldr	r1, [r3, #28]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	02008000 	.word	0x02008000

08003168 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	461a      	mov	r2, r3
 8003174:	460b      	mov	r3, r1
 8003176:	817b      	strh	r3, [r7, #10]
 8003178:	4613      	mov	r3, r2
 800317a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b20      	cmp	r3, #32
 8003186:	f040 80da 	bne.w	800333e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_I2C_Master_Transmit+0x30>
 8003194:	2302      	movs	r3, #2
 8003196:	e0d3      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1d8>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031a0:	f7ff f8f6 	bl	8002390 <HAL_GetTick>
 80031a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2319      	movs	r3, #25
 80031ac:	2201      	movs	r2, #1
 80031ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f9f8 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e0be      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2221      	movs	r2, #33	; 0x21
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2210      	movs	r2, #16
 80031ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	893a      	ldrh	r2, [r7, #8]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2bff      	cmp	r3, #255	; 0xff
 80031f2:	d90e      	bls.n	8003212 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	22ff      	movs	r2, #255	; 0xff
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	8979      	ldrh	r1, [r7, #10]
 8003202:	4b51      	ldr	r3, [pc, #324]	; (8003348 <HAL_I2C_Master_Transmit+0x1e0>)
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 faee 	bl	80037ec <I2C_TransferConfig>
 8003210:	e06c      	b.n	80032ec <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	b2da      	uxtb	r2, r3
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	4b48      	ldr	r3, [pc, #288]	; (8003348 <HAL_I2C_Master_Transmit+0x1e0>)
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fadd 	bl	80037ec <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003232:	e05b      	b.n	80032ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	6a39      	ldr	r1, [r7, #32]
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f9f5 	bl	8003628 <I2C_WaitOnTXISFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e07b      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	781a      	ldrb	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d034      	beq.n	80032ec <HAL_I2C_Master_Transmit+0x184>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003286:	2b00      	cmp	r3, #0
 8003288:	d130      	bne.n	80032ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	2200      	movs	r2, #0
 8003292:	2180      	movs	r1, #128	; 0x80
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f987 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e04d      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2bff      	cmp	r3, #255	; 0xff
 80032ac:	d90e      	bls.n	80032cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	22ff      	movs	r2, #255	; 0xff
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	8979      	ldrh	r1, [r7, #10]
 80032bc:	2300      	movs	r3, #0
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fa91 	bl	80037ec <I2C_TransferConfig>
 80032ca:	e00f      	b.n	80032ec <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	8979      	ldrh	r1, [r7, #10]
 80032de:	2300      	movs	r3, #0
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fa80 	bl	80037ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d19e      	bne.n	8003234 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	6a39      	ldr	r1, [r7, #32]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f9d4 	bl	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e01a      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2220      	movs	r2, #32
 8003310:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_I2C_Master_Transmit+0x1e4>)
 800331e:	400b      	ands	r3, r1
 8003320:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800333e:	2302      	movs	r3, #2
  }
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	80002000 	.word	0x80002000
 800334c:	fe00e800 	.word	0xfe00e800

08003350 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	460b      	mov	r3, r1
 800335e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b20      	cmp	r3, #32
 800336e:	f040 80ef 	bne.w	8003550 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003380:	d101      	bne.n	8003386 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003382:	2302      	movs	r3, #2
 8003384:	e0e5      	b.n	8003552 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_I2C_IsDeviceReady+0x44>
 8003390:	2302      	movs	r3, #2
 8003392:	e0de      	b.n	8003552 <HAL_I2C_IsDeviceReady+0x202>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2224      	movs	r2, #36	; 0x24
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d105      	bne.n	80033be <HAL_I2C_IsDeviceReady+0x6e>
 80033b2:	897b      	ldrh	r3, [r7, #10]
 80033b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033b8:	4b68      	ldr	r3, [pc, #416]	; (800355c <HAL_I2C_IsDeviceReady+0x20c>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	e004      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x78>
 80033be:	897b      	ldrh	r3, [r7, #10]
 80033c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80033ce:	f7fe ffdf 	bl	8002390 <HAL_GetTick>
 80033d2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b20      	cmp	r3, #32
 80033e0:	bf0c      	ite	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	2300      	movne	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003400:	e034      	b.n	800346c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d01a      	beq.n	8003440 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fe ffc1 	bl	8002390 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <HAL_I2C_IsDeviceReady+0xd0>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10f      	bne.n	8003440 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e088      	b.n	8003552 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b20      	cmp	r3, #32
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b10      	cmp	r3, #16
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800346c:	7ffb      	ldrb	r3, [r7, #31]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <HAL_I2C_IsDeviceReady+0x128>
 8003472:	7fbb      	ldrb	r3, [r7, #30]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0c4      	beq.n	8003402 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b10      	cmp	r3, #16
 8003484:	d01a      	beq.n	80034bc <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2200      	movs	r2, #0
 800348e:	2120      	movs	r1, #32
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f889 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e058      	b.n	8003552 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2220      	movs	r2, #32
 80034a6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e04a      	b.n	8003552 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	2120      	movs	r1, #32
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f86e 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e03d      	b.n	8003552 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2210      	movs	r2, #16
 80034dc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2220      	movs	r2, #32
 80034e4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d118      	bne.n	8003520 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034fc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2200      	movs	r2, #0
 8003506:	2120      	movs	r1, #32
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f84d 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e01c      	b.n	8003552 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2220      	movs	r2, #32
 800351e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3301      	adds	r3, #1
 8003524:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	429a      	cmp	r2, r3
 800352c:	f63f af3d 	bhi.w	80033aa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003550:	2302      	movs	r3, #2
  }
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	02002000 	.word	0x02002000

08003560 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d103      	bne.n	800357e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2200      	movs	r2, #0
 800357c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d007      	beq.n	800359c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	619a      	str	r2, [r3, #24]
  }
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b8:	e022      	b.n	8003600 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d01e      	beq.n	8003600 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fe fee5 	bl	8002390 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d113      	bne.n	8003600 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	f043 0220 	orr.w	r2, r3, #32
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e00f      	b.n	8003620 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	429a      	cmp	r2, r3
 800361c:	d0cd      	beq.n	80035ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003634:	e02c      	b.n	8003690 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f870 	bl	8003720 <I2C_IsAcknowledgeFailed>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e02a      	b.n	80036a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d01e      	beq.n	8003690 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fe fe9d 	bl	8002390 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d113      	bne.n	8003690 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e007      	b.n	80036a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d1cb      	bne.n	8003636 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b4:	e028      	b.n	8003708 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f830 	bl	8003720 <I2C_IsAcknowledgeFailed>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e026      	b.n	8003718 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ca:	f7fe fe61 	bl	8002390 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d302      	bcc.n	80036e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d113      	bne.n	8003708 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e007      	b.n	8003718 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b20      	cmp	r3, #32
 8003714:	d1cf      	bne.n	80036b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b10      	cmp	r3, #16
 8003738:	d151      	bne.n	80037de <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800373a:	e022      	b.n	8003782 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003742:	d01e      	beq.n	8003782 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003744:	f7fe fe24 	bl	8002390 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	429a      	cmp	r2, r3
 8003752:	d302      	bcc.n	800375a <I2C_IsAcknowledgeFailed+0x3a>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d113      	bne.n	8003782 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f043 0220 	orr.w	r2, r3, #32
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e02e      	b.n	80037e0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b20      	cmp	r3, #32
 800378e:	d1d5      	bne.n	800373c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2210      	movs	r2, #16
 8003796:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2220      	movs	r2, #32
 800379e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f7ff fedd 	bl	8003560 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <I2C_IsAcknowledgeFailed+0xc8>)
 80037b2:	400b      	ands	r3, r1
 80037b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f043 0204 	orr.w	r2, r3, #4
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	fe00e800 	.word	0xfe00e800

080037ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	460b      	mov	r3, r1
 80037f8:	817b      	strh	r3, [r7, #10]
 80037fa:	4613      	mov	r3, r2
 80037fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	0d5b      	lsrs	r3, r3, #21
 8003808:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <I2C_TransferConfig+0x58>)
 800380e:	430b      	orrs	r3, r1
 8003810:	43db      	mvns	r3, r3
 8003812:	ea02 0103 	and.w	r1, r2, r3
 8003816:	897b      	ldrh	r3, [r7, #10]
 8003818:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800381c:	7a7b      	ldrb	r3, [r7, #9]
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	431a      	orrs	r2, r3
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	431a      	orrs	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	03ff63ff 	.word	0x03ff63ff

08003848 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b20      	cmp	r3, #32
 800385c:	d138      	bne.n	80038d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003868:	2302      	movs	r3, #2
 800386a:	e032      	b.n	80038d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	; 0x24
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800389a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d139      	bne.n	8003968 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038fe:	2302      	movs	r3, #2
 8003900:	e033      	b.n	800396a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2224      	movs	r2, #36	; 0x24
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003930:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0d2      	b.n	8003b30 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fe faa8 	bl	8001ef4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69d9      	ldr	r1, [r3, #28]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4b60      	ldr	r3, [pc, #384]	; (8003b38 <HAL_I2S_Init+0x1c0>)
 80039b8:	400b      	ands	r3, r1
 80039ba:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2202      	movs	r2, #2
 80039c2:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d067      	beq.n	8003a9c <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039d4:	2310      	movs	r3, #16
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e001      	b.n	80039de <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039da:	2320      	movs	r3, #32
 80039dc:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d802      	bhi.n	80039ec <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d102      	bne.n	80039fa <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 80039f4:	4b51      	ldr	r3, [pc, #324]	; (8003b3c <HAL_I2S_Init+0x1c4>)
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e003      	b.n	8003a02 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f8a2 	bl	8003b44 <I2S_GetClockFreq>
 8003a00:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a0a:	d125      	bne.n	8003a58 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d010      	beq.n	8003a36 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	461a      	mov	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	3305      	adds	r3, #5
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e01f      	b.n	8003a76 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	461a      	mov	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	3305      	adds	r3, #5
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	e00e      	b.n	8003a76 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	461a      	mov	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a72:	3305      	adds	r3, #5
 8003a74:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4a31      	ldr	r2, [pc, #196]	; (8003b40 <HAL_I2S_Init+0x1c8>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	08db      	lsrs	r3, r3, #3
 8003a80:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	e003      	b.n	8003aa4 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d902      	bls.n	8003ab0 <HAL_I2S_Init+0x138>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	2bff      	cmp	r3, #255	; 0xff
 8003aae:	d907      	bls.n	8003ac0 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	f043 0210 	orr.w	r2, r3, #16
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e037      	b.n	8003b30 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	ea42 0103 	orr.w	r1, r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <HAL_I2S_Init+0x1c0>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6851      	ldr	r1, [r2, #4]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6892      	ldr	r2, [r2, #8]
 8003ae6:	4311      	orrs	r1, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68d2      	ldr	r2, [r2, #12]
 8003aec:	4311      	orrs	r1, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6992      	ldr	r2, [r2, #24]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003afe:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b30      	cmp	r3, #48	; 0x30
 8003b06:	d003      	beq.n	8003b10 <HAL_I2S_Init+0x198>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2bb0      	cmp	r3, #176	; 0xb0
 8003b0e:	d107      	bne.n	8003b20 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69da      	ldr	r2, [r3, #28]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b1e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	fffff040 	.word	0xfffff040
 8003b3c:	00bb8000 	.word	0x00bb8000
 8003b40:	cccccccd 	.word	0xcccccccd

08003b44 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d02d      	beq.n	8003bb0 <I2S_GetClockFreq+0x6c>
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d12e      	bne.n	8003bb6 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003b58:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <I2S_GetClockFreq+0x88>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d108      	bne.n	8003b76 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b64:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <I2S_GetClockFreq+0x88>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b6c:	4a18      	ldr	r2, [pc, #96]	; (8003bd0 <I2S_GetClockFreq+0x8c>)
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e007      	b.n	8003b86 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003b76:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <I2S_GetClockFreq+0x88>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b7e:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <I2S_GetClockFreq+0x90>)
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <I2S_GetClockFreq+0x88>)
 8003b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8c:	0f1b      	lsrs	r3, r3, #28
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8003b94:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <I2S_GetClockFreq+0x88>)
 8003b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9a:	099b      	lsrs	r3, r3, #6
 8003b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	fb02 f203 	mul.w	r2, r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	613b      	str	r3, [r7, #16]

      break;
 8003bae:	e005      	b.n	8003bbc <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <I2S_GetClockFreq+0x94>)
 8003bb2:	613b      	str	r3, [r7, #16]
      break;
 8003bb4:	e002      	b.n	8003bbc <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
      break;
 8003bba:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8003bbc:	693b      	ldr	r3, [r7, #16]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	00f42400 	.word	0x00f42400
 8003bd4:	017d7840 	.word	0x017d7840
 8003bd8:	00bb8000 	.word	0x00bb8000

08003bdc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	4a22      	ldr	r2, [pc, #136]	; (8003c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1d      	ldr	r2, [pc, #116]	; (8003c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c0a:	f7fe fbc1 	bl	8002390 <HAL_GetTick>
 8003c0e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c10:	e009      	b.n	8003c26 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c12:	f7fe fbbd 	bl	8002390 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c20:	d901      	bls.n	8003c26 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e022      	b.n	8003c6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c32:	d1ee      	bne.n	8003c12 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c34:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a0f      	ldr	r2, [pc, #60]	; (8003c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c40:	f7fe fba6 	bl	8002390 <HAL_GetTick>
 8003c44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c46:	e009      	b.n	8003c5c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c48:	f7fe fba2 	bl	8002390 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c56:	d901      	bls.n	8003c5c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e007      	b.n	8003c6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c68:	d1ee      	bne.n	8003c48 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40007000 	.word	0x40007000

08003c7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c84:	2300      	movs	r3, #0
 8003c86:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e29b      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8087 	beq.w	8003dae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ca0:	4b96      	ldr	r3, [pc, #600]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d00c      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cac:	4b93      	ldr	r3, [pc, #588]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d112      	bne.n	8003cde <HAL_RCC_OscConfig+0x62>
 8003cb8:	4b90      	ldr	r3, [pc, #576]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc4:	d10b      	bne.n	8003cde <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc6:	4b8d      	ldr	r3, [pc, #564]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d06c      	beq.n	8003dac <HAL_RCC_OscConfig+0x130>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d168      	bne.n	8003dac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e275      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce6:	d106      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x7a>
 8003ce8:	4b84      	ldr	r3, [pc, #528]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a83      	ldr	r2, [pc, #524]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	e02e      	b.n	8003d54 <HAL_RCC_OscConfig+0xd8>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x9c>
 8003cfe:	4b7f      	ldr	r3, [pc, #508]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a7e      	ldr	r2, [pc, #504]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	4b7c      	ldr	r3, [pc, #496]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a7b      	ldr	r2, [pc, #492]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e01d      	b.n	8003d54 <HAL_RCC_OscConfig+0xd8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0xc0>
 8003d22:	4b76      	ldr	r3, [pc, #472]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a75      	ldr	r2, [pc, #468]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b73      	ldr	r3, [pc, #460]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a72      	ldr	r2, [pc, #456]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0xd8>
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a6e      	ldr	r2, [pc, #440]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4b6c      	ldr	r3, [pc, #432]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a6b      	ldr	r2, [pc, #428]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fb18 	bl	8002390 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fe fb14 	bl	8002390 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e229      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	4b61      	ldr	r3, [pc, #388]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0xe8>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe fb04 	bl	8002390 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fe fb00 	bl	8002390 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e215      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9e:	4b57      	ldr	r3, [pc, #348]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x110>
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d069      	beq.n	8003e8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dba:	4b50      	ldr	r3, [pc, #320]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc6:	4b4d      	ldr	r3, [pc, #308]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d11c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x190>
 8003dd2:	4b4a      	ldr	r3, [pc, #296]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d116      	bne.n	8003e0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dde:	4b47      	ldr	r3, [pc, #284]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_RCC_OscConfig+0x17a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e1e9      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df6:	4b41      	ldr	r3, [pc, #260]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	493d      	ldr	r1, [pc, #244]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0a:	e040      	b.n	8003e8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d023      	beq.n	8003e5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e14:	4b39      	ldr	r3, [pc, #228]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a38      	ldr	r2, [pc, #224]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fe fab6 	bl	8002390 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e28:	f7fe fab2 	bl	8002390 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e1c7      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3a:	4b30      	ldr	r3, [pc, #192]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e46:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4929      	ldr	r1, [pc, #164]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
 8003e5a:	e018      	b.n	8003e8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e5c:	4b27      	ldr	r3, [pc, #156]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a26      	ldr	r2, [pc, #152]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fe fa92 	bl	8002390 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e70:	f7fe fa8e 	bl	8002390 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e1a3      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d038      	beq.n	8003f0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d019      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea2:	4b16      	ldr	r3, [pc, #88]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea6:	4a15      	ldr	r2, [pc, #84]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eae:	f7fe fa6f 	bl	8002390 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb6:	f7fe fa6b 	bl	8002390 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e180      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x23a>
 8003ed4:	e01a      	b.n	8003f0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eda:	4a08      	ldr	r2, [pc, #32]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fa55 	bl	8002390 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eea:	f7fe fa51 	bl	8002390 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d903      	bls.n	8003f00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e166      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
 8003efc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	4b92      	ldr	r3, [pc, #584]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1ee      	bne.n	8003eea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80a4 	beq.w	8004062 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1a:	4b8c      	ldr	r3, [pc, #560]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10d      	bne.n	8003f42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f26:	4b89      	ldr	r3, [pc, #548]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	4a88      	ldr	r2, [pc, #544]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6413      	str	r3, [r2, #64]	; 0x40
 8003f32:	4b86      	ldr	r3, [pc, #536]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f42:	4b83      	ldr	r3, [pc, #524]	; (8004150 <HAL_RCC_OscConfig+0x4d4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d118      	bne.n	8003f80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f4e:	4b80      	ldr	r3, [pc, #512]	; (8004150 <HAL_RCC_OscConfig+0x4d4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a7f      	ldr	r2, [pc, #508]	; (8004150 <HAL_RCC_OscConfig+0x4d4>)
 8003f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f5a:	f7fe fa19 	bl	8002390 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f62:	f7fe fa15 	bl	8002390 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b64      	cmp	r3, #100	; 0x64
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e12a      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f74:	4b76      	ldr	r3, [pc, #472]	; (8004150 <HAL_RCC_OscConfig+0x4d4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d106      	bne.n	8003f96 <HAL_RCC_OscConfig+0x31a>
 8003f88:	4b70      	ldr	r3, [pc, #448]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	4a6f      	ldr	r2, [pc, #444]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	6713      	str	r3, [r2, #112]	; 0x70
 8003f94:	e02d      	b.n	8003ff2 <HAL_RCC_OscConfig+0x376>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x33c>
 8003f9e:	4b6b      	ldr	r3, [pc, #428]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	4a6a      	ldr	r2, [pc, #424]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8003faa:	4b68      	ldr	r3, [pc, #416]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fae:	4a67      	ldr	r2, [pc, #412]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fb0:	f023 0304 	bic.w	r3, r3, #4
 8003fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb6:	e01c      	b.n	8003ff2 <HAL_RCC_OscConfig+0x376>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b05      	cmp	r3, #5
 8003fbe:	d10c      	bne.n	8003fda <HAL_RCC_OscConfig+0x35e>
 8003fc0:	4b62      	ldr	r3, [pc, #392]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	4a61      	ldr	r2, [pc, #388]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fc6:	f043 0304 	orr.w	r3, r3, #4
 8003fca:	6713      	str	r3, [r2, #112]	; 0x70
 8003fcc:	4b5f      	ldr	r3, [pc, #380]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a5e      	ldr	r2, [pc, #376]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd8:	e00b      	b.n	8003ff2 <HAL_RCC_OscConfig+0x376>
 8003fda:	4b5c      	ldr	r3, [pc, #368]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a5b      	ldr	r2, [pc, #364]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe6:	4b59      	ldr	r3, [pc, #356]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	4a58      	ldr	r2, [pc, #352]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d015      	beq.n	8004026 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffa:	f7fe f9c9 	bl	8002390 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004000:	e00a      	b.n	8004018 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004002:	f7fe f9c5 	bl	8002390 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e0d8      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004018:	4b4c      	ldr	r3, [pc, #304]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0ee      	beq.n	8004002 <HAL_RCC_OscConfig+0x386>
 8004024:	e014      	b.n	8004050 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7fe f9b3 	bl	8002390 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402c:	e00a      	b.n	8004044 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402e:	f7fe f9af 	bl	8002390 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f241 3288 	movw	r2, #5000	; 0x1388
 800403c:	4293      	cmp	r3, r2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e0c2      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004044:	4b41      	ldr	r3, [pc, #260]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1ee      	bne.n	800402e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004050:	7dfb      	ldrb	r3, [r7, #23]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d105      	bne.n	8004062 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004056:	4b3d      	ldr	r3, [pc, #244]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a3c      	ldr	r2, [pc, #240]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 800405c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004060:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80ae 	beq.w	80041c8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800406c:	4b37      	ldr	r3, [pc, #220]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 030c 	and.w	r3, r3, #12
 8004074:	2b08      	cmp	r3, #8
 8004076:	d06d      	beq.n	8004154 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d14b      	bne.n	8004118 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004080:	4b32      	ldr	r3, [pc, #200]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a31      	ldr	r2, [pc, #196]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8004086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fe f980 	bl	8002390 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004094:	f7fe f97c 	bl	8002390 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e091      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	4b29      	ldr	r3, [pc, #164]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	019b      	lsls	r3, r3, #6
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	3b01      	subs	r3, #1
 80040cc:	041b      	lsls	r3, r3, #16
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	071b      	lsls	r3, r3, #28
 80040de:	491b      	ldr	r1, [pc, #108]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e4:	4b19      	ldr	r3, [pc, #100]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a18      	ldr	r2, [pc, #96]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 80040ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fe f94e 	bl	8002390 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fe f94a 	bl	8002390 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e05f      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0x47c>
 8004116:	e057      	b.n	80041c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a0b      	ldr	r2, [pc, #44]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 800411e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fe f934 	bl	8002390 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412c:	f7fe f930 	bl	8002390 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e045      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x4b0>
 800414a:	e03d      	b.n	80041c8 <HAL_RCC_OscConfig+0x54c>
 800414c:	40023800 	.word	0x40023800
 8004150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004154:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <HAL_RCC_OscConfig+0x558>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d030      	beq.n	80041c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d129      	bne.n	80041c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417a:	429a      	cmp	r2, r3
 800417c:	d122      	bne.n	80041c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004184:	4013      	ands	r3, r2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800418a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800418c:	4293      	cmp	r3, r2
 800418e:	d119      	bne.n	80041c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	3b01      	subs	r3, #1
 800419e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d10f      	bne.n	80041c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800

080041d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0d0      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f0:	4b6a      	ldr	r3, [pc, #424]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d910      	bls.n	8004220 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b67      	ldr	r3, [pc, #412]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 020f 	bic.w	r2, r3, #15
 8004206:	4965      	ldr	r1, [pc, #404]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b63      	ldr	r3, [pc, #396]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0b8      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d020      	beq.n	800426e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004238:	4b59      	ldr	r3, [pc, #356]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a58      	ldr	r2, [pc, #352]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800423e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004242:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004250:	4b53      	ldr	r3, [pc, #332]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a52      	ldr	r2, [pc, #328]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800425a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800425c:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	494d      	ldr	r1, [pc, #308]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d040      	beq.n	80042fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d115      	bne.n	80042ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e07f      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429a:	4b41      	ldr	r3, [pc, #260]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e073      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042aa:	4b3d      	ldr	r3, [pc, #244]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e06b      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ba:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f023 0203 	bic.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	4936      	ldr	r1, [pc, #216]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042cc:	f7fe f860 	bl	8002390 <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d4:	f7fe f85c 	bl	8002390 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e053      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	4b2d      	ldr	r3, [pc, #180]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 020c 	and.w	r2, r3, #12
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d1eb      	bne.n	80042d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042fc:	4b27      	ldr	r3, [pc, #156]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d210      	bcs.n	800432c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 020f 	bic.w	r2, r3, #15
 8004312:	4922      	ldr	r1, [pc, #136]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b20      	ldr	r3, [pc, #128]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e032      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4916      	ldr	r1, [pc, #88]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004356:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	490e      	ldr	r1, [pc, #56]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004366:	4313      	orrs	r3, r2
 8004368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800436a:	f000 f821 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800436e:	4602      	mov	r2, r0
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	490a      	ldr	r1, [pc, #40]	; (80043a4 <HAL_RCC_ClockConfig+0x1cc>)
 800437c:	5ccb      	ldrb	r3, [r1, r3]
 800437e:	fa22 f303 	lsr.w	r3, r2, r3
 8004382:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <HAL_RCC_ClockConfig+0x1d0>)
 8004384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_RCC_ClockConfig+0x1d4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd ffbc 	bl	8002308 <HAL_InitTick>

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023c00 	.word	0x40023c00
 80043a0:	40023800 	.word	0x40023800
 80043a4:	0800cecc 	.word	0x0800cecc
 80043a8:	2000002c 	.word	0x2000002c
 80043ac:	20000030 	.word	0x20000030

080043b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	b5b0      	push	{r4, r5, r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043b6:	2100      	movs	r1, #0
 80043b8:	6079      	str	r1, [r7, #4]
 80043ba:	2100      	movs	r1, #0
 80043bc:	60f9      	str	r1, [r7, #12]
 80043be:	2100      	movs	r1, #0
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80043c2:	2100      	movs	r1, #0
 80043c4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c6:	4952      	ldr	r1, [pc, #328]	; (8004510 <HAL_RCC_GetSysClockFreq+0x160>)
 80043c8:	6889      	ldr	r1, [r1, #8]
 80043ca:	f001 010c 	and.w	r1, r1, #12
 80043ce:	2908      	cmp	r1, #8
 80043d0:	d00d      	beq.n	80043ee <HAL_RCC_GetSysClockFreq+0x3e>
 80043d2:	2908      	cmp	r1, #8
 80043d4:	f200 8094 	bhi.w	8004500 <HAL_RCC_GetSysClockFreq+0x150>
 80043d8:	2900      	cmp	r1, #0
 80043da:	d002      	beq.n	80043e2 <HAL_RCC_GetSysClockFreq+0x32>
 80043dc:	2904      	cmp	r1, #4
 80043de:	d003      	beq.n	80043e8 <HAL_RCC_GetSysClockFreq+0x38>
 80043e0:	e08e      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e2:	4b4c      	ldr	r3, [pc, #304]	; (8004514 <HAL_RCC_GetSysClockFreq+0x164>)
 80043e4:	60bb      	str	r3, [r7, #8]
      break;
 80043e6:	e08e      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043e8:	4b4b      	ldr	r3, [pc, #300]	; (8004518 <HAL_RCC_GetSysClockFreq+0x168>)
 80043ea:	60bb      	str	r3, [r7, #8]
      break;
 80043ec:	e08b      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043ee:	4948      	ldr	r1, [pc, #288]	; (8004510 <HAL_RCC_GetSysClockFreq+0x160>)
 80043f0:	6849      	ldr	r1, [r1, #4]
 80043f2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80043f6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043f8:	4945      	ldr	r1, [pc, #276]	; (8004510 <HAL_RCC_GetSysClockFreq+0x160>)
 80043fa:	6849      	ldr	r1, [r1, #4]
 80043fc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004400:	2900      	cmp	r1, #0
 8004402:	d024      	beq.n	800444e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004404:	4942      	ldr	r1, [pc, #264]	; (8004510 <HAL_RCC_GetSysClockFreq+0x160>)
 8004406:	6849      	ldr	r1, [r1, #4]
 8004408:	0989      	lsrs	r1, r1, #6
 800440a:	4608      	mov	r0, r1
 800440c:	f04f 0100 	mov.w	r1, #0
 8004410:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004414:	f04f 0500 	mov.w	r5, #0
 8004418:	ea00 0204 	and.w	r2, r0, r4
 800441c:	ea01 0305 	and.w	r3, r1, r5
 8004420:	493d      	ldr	r1, [pc, #244]	; (8004518 <HAL_RCC_GetSysClockFreq+0x168>)
 8004422:	fb01 f003 	mul.w	r0, r1, r3
 8004426:	2100      	movs	r1, #0
 8004428:	fb01 f102 	mul.w	r1, r1, r2
 800442c:	1844      	adds	r4, r0, r1
 800442e:	493a      	ldr	r1, [pc, #232]	; (8004518 <HAL_RCC_GetSysClockFreq+0x168>)
 8004430:	fba2 0101 	umull	r0, r1, r2, r1
 8004434:	1863      	adds	r3, r4, r1
 8004436:	4619      	mov	r1, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	461a      	mov	r2, r3
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	f7fb fefa 	bl	8000238 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	e04a      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444e:	4b30      	ldr	r3, [pc, #192]	; (8004510 <HAL_RCC_GetSysClockFreq+0x160>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	099b      	lsrs	r3, r3, #6
 8004454:	461a      	mov	r2, r3
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800445e:	f04f 0100 	mov.w	r1, #0
 8004462:	ea02 0400 	and.w	r4, r2, r0
 8004466:	ea03 0501 	and.w	r5, r3, r1
 800446a:	4620      	mov	r0, r4
 800446c:	4629      	mov	r1, r5
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	014b      	lsls	r3, r1, #5
 8004478:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800447c:	0142      	lsls	r2, r0, #5
 800447e:	4610      	mov	r0, r2
 8004480:	4619      	mov	r1, r3
 8004482:	1b00      	subs	r0, r0, r4
 8004484:	eb61 0105 	sbc.w	r1, r1, r5
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	018b      	lsls	r3, r1, #6
 8004492:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004496:	0182      	lsls	r2, r0, #6
 8004498:	1a12      	subs	r2, r2, r0
 800449a:	eb63 0301 	sbc.w	r3, r3, r1
 800449e:	f04f 0000 	mov.w	r0, #0
 80044a2:	f04f 0100 	mov.w	r1, #0
 80044a6:	00d9      	lsls	r1, r3, #3
 80044a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044ac:	00d0      	lsls	r0, r2, #3
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	1912      	adds	r2, r2, r4
 80044b4:	eb45 0303 	adc.w	r3, r5, r3
 80044b8:	f04f 0000 	mov.w	r0, #0
 80044bc:	f04f 0100 	mov.w	r1, #0
 80044c0:	0299      	lsls	r1, r3, #10
 80044c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044c6:	0290      	lsls	r0, r2, #10
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	f7fb feae 	bl	8000238 <__aeabi_uldivmod>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4613      	mov	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044e4:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <HAL_RCC_GetSysClockFreq+0x160>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	0c1b      	lsrs	r3, r3, #16
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	3301      	adds	r3, #1
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fc:	60bb      	str	r3, [r7, #8]
      break;
 80044fe:	e002      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004500:	4b04      	ldr	r3, [pc, #16]	; (8004514 <HAL_RCC_GetSysClockFreq+0x164>)
 8004502:	60bb      	str	r3, [r7, #8]
      break;
 8004504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004506:	68bb      	ldr	r3, [r7, #8]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bdb0      	pop	{r4, r5, r7, pc}
 8004510:	40023800 	.word	0x40023800
 8004514:	00f42400 	.word	0x00f42400
 8004518:	017d7840 	.word	0x017d7840

0800451c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004520:	4b03      	ldr	r3, [pc, #12]	; (8004530 <HAL_RCC_GetHCLKFreq+0x14>)
 8004522:	681b      	ldr	r3, [r3, #0]
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	2000002c 	.word	0x2000002c

08004534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004538:	f7ff fff0 	bl	800451c <HAL_RCC_GetHCLKFreq>
 800453c:	4602      	mov	r2, r0
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	0a9b      	lsrs	r3, r3, #10
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4903      	ldr	r1, [pc, #12]	; (8004558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40023800 	.word	0x40023800
 8004558:	0800cedc 	.word	0x0800cedc

0800455c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004560:	f7ff ffdc 	bl	800451c <HAL_RCC_GetHCLKFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	0b5b      	lsrs	r3, r3, #13
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4903      	ldr	r1, [pc, #12]	; (8004580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40023800 	.word	0x40023800
 8004580:	0800cedc 	.word	0x0800cedc

08004584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d012      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045ac:	4b69      	ldr	r3, [pc, #420]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a68      	ldr	r2, [pc, #416]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80045b6:	6093      	str	r3, [r2, #8]
 80045b8:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c0:	4964      	ldr	r1, [pc, #400]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045ce:	2301      	movs	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d017      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045de:	4b5d      	ldr	r3, [pc, #372]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	4959      	ldr	r1, [pc, #356]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045fc:	d101      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045fe:	2301      	movs	r3, #1
 8004600:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800460a:	2301      	movs	r3, #1
 800460c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d017      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800461a:	4b4e      	ldr	r3, [pc, #312]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004620:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	494a      	ldr	r1, [pc, #296]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004638:	d101      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800463a:	2301      	movs	r3, #1
 800463c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004646:	2301      	movs	r3, #1
 8004648:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004656:	2301      	movs	r3, #1
 8004658:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 808b 	beq.w	800477e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004668:	4b3a      	ldr	r3, [pc, #232]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	4a39      	ldr	r2, [pc, #228]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004672:	6413      	str	r3, [r2, #64]	; 0x40
 8004674:	4b37      	ldr	r3, [pc, #220]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004680:	4b35      	ldr	r3, [pc, #212]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a34      	ldr	r2, [pc, #208]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800468c:	f7fd fe80 	bl	8002390 <HAL_GetTick>
 8004690:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004694:	f7fd fe7c 	bl	8002390 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	; 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e38f      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046a6:	4b2c      	ldr	r3, [pc, #176]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b2:	4b28      	ldr	r3, [pc, #160]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d035      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d02e      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d0:	4b20      	ldr	r3, [pc, #128]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046da:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	4a1d      	ldr	r2, [pc, #116]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a1a      	ldr	r2, [pc, #104]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046f8:	4b16      	ldr	r3, [pc, #88]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b01      	cmp	r3, #1
 8004702:	d114      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fd fe44 	bl	8002390 <HAL_GetTick>
 8004708:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470a:	e00a      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800470c:	f7fd fe40 	bl	8002390 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	f241 3288 	movw	r2, #5000	; 0x1388
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e351      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0ee      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800473a:	d111      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800474a:	400b      	ands	r3, r1
 800474c:	4901      	ldr	r1, [pc, #4]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
 8004752:	e00b      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004754:	40023800 	.word	0x40023800
 8004758:	40007000 	.word	0x40007000
 800475c:	0ffffcff 	.word	0x0ffffcff
 8004760:	4bb3      	ldr	r3, [pc, #716]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4ab2      	ldr	r2, [pc, #712]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004766:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800476a:	6093      	str	r3, [r2, #8]
 800476c:	4bb0      	ldr	r3, [pc, #704]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004778:	49ad      	ldr	r1, [pc, #692]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477a:	4313      	orrs	r3, r2
 800477c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	2b00      	cmp	r3, #0
 8004788:	d010      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800478a:	4ba9      	ldr	r3, [pc, #676]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800478c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004790:	4aa7      	ldr	r2, [pc, #668]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004796:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800479a:	4ba5      	ldr	r3, [pc, #660]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800479c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	49a2      	ldr	r1, [pc, #648]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047b8:	4b9d      	ldr	r3, [pc, #628]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c6:	499a      	ldr	r1, [pc, #616]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047da:	4b95      	ldr	r3, [pc, #596]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047e8:	4991      	ldr	r1, [pc, #580]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047fc:	4b8c      	ldr	r3, [pc, #560]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800480a:	4989      	ldr	r1, [pc, #548]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800481e:	4b84      	ldr	r3, [pc, #528]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004824:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	4980      	ldr	r1, [pc, #512]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004840:	4b7b      	ldr	r3, [pc, #492]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	f023 0203 	bic.w	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	4978      	ldr	r1, [pc, #480]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004862:	4b73      	ldr	r3, [pc, #460]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004868:	f023 020c 	bic.w	r2, r3, #12
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004870:	496f      	ldr	r1, [pc, #444]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004884:	4b6a      	ldr	r3, [pc, #424]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004892:	4967      	ldr	r1, [pc, #412]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048a6:	4b62      	ldr	r3, [pc, #392]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b4:	495e      	ldr	r1, [pc, #376]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048c8:	4b59      	ldr	r3, [pc, #356]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	4956      	ldr	r1, [pc, #344]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048ea:	4b51      	ldr	r3, [pc, #324]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	494d      	ldr	r1, [pc, #308]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800490c:	4b48      	ldr	r3, [pc, #288]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004912:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491a:	4945      	ldr	r1, [pc, #276]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800492e:	4b40      	ldr	r3, [pc, #256]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004934:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493c:	493c      	ldr	r1, [pc, #240]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004950:	4b37      	ldr	r3, [pc, #220]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004956:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800495e:	4934      	ldr	r1, [pc, #208]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d011      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004972:	4b2f      	ldr	r3, [pc, #188]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004978:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004980:	492b      	ldr	r1, [pc, #172]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800498c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004990:	d101      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004992:	2301      	movs	r3, #1
 8004994:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049a2:	2301      	movs	r3, #1
 80049a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049b2:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c0:	491b      	ldr	r1, [pc, #108]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00b      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049d4:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049e4:	4912      	ldr	r1, [pc, #72]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00b      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80049f8:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a08:	4909      	ldr	r1, [pc, #36]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00f      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a1c:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	e002      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	4986      	ldr	r1, [pc, #536]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00b      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a48:	4b81      	ldr	r3, [pc, #516]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a58:	497d      	ldr	r1, [pc, #500]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d006      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 80d6 	beq.w	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a74:	4b76      	ldr	r3, [pc, #472]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a75      	ldr	r2, [pc, #468]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a80:	f7fd fc86 	bl	8002390 <HAL_GetTick>
 8004a84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a88:	f7fd fc82 	bl	8002390 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b64      	cmp	r3, #100	; 0x64
 8004a94:	d901      	bls.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e195      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a9a:	4b6d      	ldr	r3, [pc, #436]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d021      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d11d      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004aba:	4b65      	ldr	r3, [pc, #404]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ac8:	4b61      	ldr	r3, [pc, #388]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ace:	0e1b      	lsrs	r3, r3, #24
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	019a      	lsls	r2, r3, #6
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	061b      	lsls	r3, r3, #24
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	071b      	lsls	r3, r3, #28
 8004aee:	4958      	ldr	r1, [pc, #352]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d004      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b0a:	d00a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d02e      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b20:	d129      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b22:	4b4b      	ldr	r3, [pc, #300]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b30:	4b47      	ldr	r3, [pc, #284]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b36:	0f1b      	lsrs	r3, r3, #28
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	019a      	lsls	r2, r3, #6
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	061b      	lsls	r3, r3, #24
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	071b      	lsls	r3, r3, #28
 8004b56:	493e      	ldr	r1, [pc, #248]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b5e:	4b3c      	ldr	r3, [pc, #240]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b64:	f023 021f 	bic.w	r2, r3, #31
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	4938      	ldr	r1, [pc, #224]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01d      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b82:	4b33      	ldr	r3, [pc, #204]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b88:	0e1b      	lsrs	r3, r3, #24
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b90:	4b2f      	ldr	r3, [pc, #188]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b96:	0f1b      	lsrs	r3, r3, #28
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	019a      	lsls	r2, r3, #6
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	041b      	lsls	r3, r3, #16
 8004baa:	431a      	orrs	r2, r3
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	061b      	lsls	r3, r3, #24
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	071b      	lsls	r3, r3, #28
 8004bb6:	4926      	ldr	r1, [pc, #152]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d011      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	019a      	lsls	r2, r3, #6
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	041b      	lsls	r3, r3, #16
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	071b      	lsls	r3, r3, #28
 8004be6:	491a      	ldr	r1, [pc, #104]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bee:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a17      	ldr	r2, [pc, #92]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfa:	f7fd fbc9 	bl	8002390 <HAL_GetTick>
 8004bfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c02:	f7fd fbc5 	bl	8002390 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b64      	cmp	r3, #100	; 0x64
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0d8      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c14:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	f040 80ce 	bne.w	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c34:	f7fd fbac 	bl	8002390 <HAL_GetTick>
 8004c38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c3a:	e00b      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c3c:	f7fd fba8 	bl	8002390 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	; 0x64
 8004c48:	d904      	bls.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e0bb      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c4e:	bf00      	nop
 8004c50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c54:	4b5e      	ldr	r3, [pc, #376]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c60:	d0ec      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d02e      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d12a      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c8a:	4b51      	ldr	r3, [pc, #324]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c90:	0c1b      	lsrs	r3, r3, #16
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c98:	4b4d      	ldr	r3, [pc, #308]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	0f1b      	lsrs	r3, r3, #28
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	019a      	lsls	r2, r3, #6
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	071b      	lsls	r3, r3, #28
 8004cbe:	4944      	ldr	r1, [pc, #272]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cc6:	4b42      	ldr	r3, [pc, #264]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ccc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	493d      	ldr	r1, [pc, #244]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d022      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf4:	d11d      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cf6:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfc:	0e1b      	lsrs	r3, r3, #24
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d04:	4b32      	ldr	r3, [pc, #200]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	0f1b      	lsrs	r3, r3, #28
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	019a      	lsls	r2, r3, #6
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	061b      	lsls	r3, r3, #24
 8004d24:	431a      	orrs	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	071b      	lsls	r3, r3, #28
 8004d2a:	4929      	ldr	r1, [pc, #164]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d028      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d3e:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d44:	0e1b      	lsrs	r3, r3, #24
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d4c:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	0c1b      	lsrs	r3, r3, #16
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	019a      	lsls	r2, r3, #6
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	041b      	lsls	r3, r3, #16
 8004d64:	431a      	orrs	r2, r3
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	071b      	lsls	r3, r3, #28
 8004d72:	4917      	ldr	r1, [pc, #92]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	4911      	ldr	r1, [pc, #68]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d90:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a0e      	ldr	r2, [pc, #56]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d9c:	f7fd faf8 	bl	8002390 <HAL_GetTick>
 8004da0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004da4:	f7fd faf4 	bl	8002390 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	; 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e007      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dc2:	d1ef      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3720      	adds	r7, #32
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800

08004dd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004df2:	f040 80a3 	bne.w	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004df6:	4bac      	ldr	r3, [pc, #688]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dfc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e04:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e0c:	f000 808a 	beq.w	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e16:	f200 8093 	bhi.w	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e20:	d07d      	beq.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e28:	f200 808a 	bhi.w	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d004      	beq.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e38:	d039      	beq.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004e3a:	e081      	b.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004e3c:	4b9a      	ldr	r3, [pc, #616]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d108      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e48:	4b97      	ldr	r3, [pc, #604]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e50:	4a96      	ldr	r2, [pc, #600]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	e007      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004e5a:	4b93      	ldr	r3, [pc, #588]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e62:	4a93      	ldr	r2, [pc, #588]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e68:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004e6a:	4b8f      	ldr	r3, [pc, #572]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e70:	0e1b      	lsrs	r3, r3, #24
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004e78:	4b8b      	ldr	r3, [pc, #556]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7e:	099b      	lsrs	r3, r3, #6
 8004e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	fb02 f203 	mul.w	r2, r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004e92:	4b85      	ldr	r3, [pc, #532]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e98:	0a1b      	lsrs	r3, r3, #8
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eaa:	617b      	str	r3, [r7, #20]
        break;
 8004eac:	e049      	b.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004eae:	4b7e      	ldr	r3, [pc, #504]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d108      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004eba:	4b7b      	ldr	r3, [pc, #492]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ec2:	4a7a      	ldr	r2, [pc, #488]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	e007      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004ecc:	4b76      	ldr	r3, [pc, #472]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ed4:	4a76      	ldr	r2, [pc, #472]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004edc:	4b72      	ldr	r3, [pc, #456]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee2:	0e1b      	lsrs	r3, r3, #24
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004eea:	4b6f      	ldr	r3, [pc, #444]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef0:	099b      	lsrs	r3, r3, #6
 8004ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	fb02 f203 	mul.w	r2, r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f02:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004f04:	4b68      	ldr	r3, [pc, #416]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f0a:	f003 031f 	and.w	r3, r3, #31
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1a:	617b      	str	r3, [r7, #20]
        break;
 8004f1c:	e011      	b.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f1e:	4b65      	ldr	r3, [pc, #404]	; (80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004f20:	617b      	str	r3, [r7, #20]
        break;
 8004f22:	e00e      	b.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004f24:	4b60      	ldr	r3, [pc, #384]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d102      	bne.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8004f30:	4b5e      	ldr	r3, [pc, #376]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004f32:	617b      	str	r3, [r7, #20]
        break;
 8004f34:	e005      	b.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8004f36:	4b5e      	ldr	r3, [pc, #376]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004f38:	617b      	str	r3, [r7, #20]
        break;
 8004f3a:	e002      	b.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8004f3c:	bf00      	nop
 8004f3e:	e000      	b.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8004f40:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f48:	f040 80a3 	bne.w	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004f4c:	4b56      	ldr	r3, [pc, #344]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f52:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004f5a:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f62:	f000 808a 	beq.w	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f6c:	f200 8093 	bhi.w	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f76:	d07d      	beq.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f7e:	f200 808a 	bhi.w	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d004      	beq.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f8e:	d039      	beq.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004f90:	e081      	b.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004f92:	4b45      	ldr	r3, [pc, #276]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d108      	bne.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f9e:	4b42      	ldr	r3, [pc, #264]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fa6:	4a41      	ldr	r2, [pc, #260]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	e007      	b.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004fb0:	4b3d      	ldr	r3, [pc, #244]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fb8:	4a3d      	ldr	r2, [pc, #244]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbe:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004fc0:	4b39      	ldr	r3, [pc, #228]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc6:	0e1b      	lsrs	r3, r3, #24
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004fce:	4b36      	ldr	r3, [pc, #216]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	099b      	lsrs	r3, r3, #6
 8004fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	fb02 f203 	mul.w	r2, r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004fe8:	4b2f      	ldr	r3, [pc, #188]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fee:	0a1b      	lsrs	r3, r3, #8
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	617b      	str	r3, [r7, #20]
        break;
 8005002:	e049      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005004:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d108      	bne.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005010:	4b25      	ldr	r3, [pc, #148]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005018:	4a24      	ldr	r2, [pc, #144]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800501a:	fbb2 f3f3 	udiv	r3, r2, r3
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	e007      	b.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005022:	4b21      	ldr	r3, [pc, #132]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800502a:	4a21      	ldr	r2, [pc, #132]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005032:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005038:	0e1b      	lsrs	r3, r3, #24
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005040:	4b19      	ldr	r3, [pc, #100]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005046:	099b      	lsrs	r3, r3, #6
 8005048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	fb02 f203 	mul.w	r2, r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	fbb2 f3f3 	udiv	r3, r2, r3
 8005058:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800505a:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800505c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	3301      	adds	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	617b      	str	r3, [r7, #20]
        break;
 8005072:	e011      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005074:	4b0f      	ldr	r3, [pc, #60]	; (80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005076:	617b      	str	r3, [r7, #20]
        break;
 8005078:	e00e      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800507a:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8005086:	4b09      	ldr	r3, [pc, #36]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005088:	617b      	str	r3, [r7, #20]
        break;
 800508a:	e005      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 800508c:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800508e:	617b      	str	r3, [r7, #20]
        break;
 8005090:	e002      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 8005092:	bf00      	nop
 8005094:	e000      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 8005096:	bf00      	nop

  return frequency;
 8005098:	697b      	ldr	r3, [r7, #20]
}
 800509a:	4618      	mov	r0, r3
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40023800 	.word	0x40023800
 80050ac:	00f42400 	.word	0x00f42400
 80050b0:	017d7840 	.word	0x017d7840
 80050b4:	00bb8000 	.word	0x00bb8000

080050b8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d904      	bls.n	80050da <HAL_SAI_InitProtocol+0x22>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	3b03      	subs	r3, #3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d812      	bhi.n	80050fe <HAL_SAI_InitProtocol+0x46>
 80050d8:	e008      	b.n	80050ec <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fa55 	bl	8005590 <SAI_InitI2S>
 80050e6:	4603      	mov	r3, r0
 80050e8:	75fb      	strb	r3, [r7, #23]
      break;
 80050ea:	e00b      	b.n	8005104 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fafa 	bl	80056ec <SAI_InitPCM>
 80050f8:	4603      	mov	r3, r0
 80050fa:	75fb      	strb	r3, [r7, #23]
      break;
 80050fc:	e002      	b.n	8005104 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	75fb      	strb	r3, [r7, #23]
      break;
 8005102:	bf00      	nop
  }

  if (status == HAL_OK)
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f808 	bl	8005120 <HAL_SAI_Init>
 8005110:	4603      	mov	r3, r0
 8005112:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005114:	7dfb      	ldrb	r3, [r7, #23]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e156      	b.n	80053ec <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fc ffa8 	bl	80020a8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fb79 	bl	8005858 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d00c      	beq.n	8005188 <HAL_SAI_Init+0x68>
 800516e:	2b02      	cmp	r3, #2
 8005170:	d80d      	bhi.n	800518e <HAL_SAI_Init+0x6e>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_SAI_Init+0x5c>
 8005176:	2b01      	cmp	r3, #1
 8005178:	d003      	beq.n	8005182 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800517a:	e008      	b.n	800518e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	61fb      	str	r3, [r7, #28]
      break;
 8005180:	e006      	b.n	8005190 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005182:	2310      	movs	r3, #16
 8005184:	61fb      	str	r3, [r7, #28]
      break;
 8005186:	e003      	b.n	8005190 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005188:	2320      	movs	r3, #32
 800518a:	61fb      	str	r3, [r7, #28]
      break;
 800518c:	e000      	b.n	8005190 <HAL_SAI_Init+0x70>
      break;
 800518e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b03      	cmp	r3, #3
 8005196:	d81e      	bhi.n	80051d6 <HAL_SAI_Init+0xb6>
 8005198:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <HAL_SAI_Init+0x80>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	080051b1 	.word	0x080051b1
 80051a4:	080051b7 	.word	0x080051b7
 80051a8:	080051bf 	.word	0x080051bf
 80051ac:	080051c7 	.word	0x080051c7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
    }
    break;
 80051b4:	e010      	b.n	80051d8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80051b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ba:	617b      	str	r3, [r7, #20]
    }
    break;
 80051bc:	e00c      	b.n	80051d8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80051be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051c2:	617b      	str	r3, [r7, #20]
    }
    break;
 80051c4:	e008      	b.n	80051d8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80051c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051ca:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	61fb      	str	r3, [r7, #28]
    }
    break;
 80051d4:	e000      	b.n	80051d8 <HAL_SAI_Init+0xb8>
    default:
      break;
 80051d6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a85      	ldr	r2, [pc, #532]	; (80053f4 <HAL_SAI_Init+0x2d4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d004      	beq.n	80051ec <HAL_SAI_Init+0xcc>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a84      	ldr	r2, [pc, #528]	; (80053f8 <HAL_SAI_Init+0x2d8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80051ec:	4a83      	ldr	r2, [pc, #524]	; (80053fc <HAL_SAI_Init+0x2dc>)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e002      	b.n	80051fa <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80051f4:	4a82      	ldr	r2, [pc, #520]	; (8005400 <HAL_SAI_Init+0x2e0>)
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d04c      	beq.n	800529c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a7a      	ldr	r2, [pc, #488]	; (80053f4 <HAL_SAI_Init+0x2d4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d004      	beq.n	800521a <HAL_SAI_Init+0xfa>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a78      	ldr	r2, [pc, #480]	; (80053f8 <HAL_SAI_Init+0x2d8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d104      	bne.n	8005224 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800521a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800521e:	f7ff fdd9 	bl	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005222:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a76      	ldr	r2, [pc, #472]	; (8005404 <HAL_SAI_Init+0x2e4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <HAL_SAI_Init+0x118>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a75      	ldr	r2, [pc, #468]	; (8005408 <HAL_SAI_Init+0x2e8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d104      	bne.n	8005242 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005238:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800523c:	f7ff fdca 	bl	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005240:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	461a      	mov	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	025b      	lsls	r3, r3, #9
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4a6b      	ldr	r2, [pc, #428]	; (800540c <HAL_SAI_Init+0x2ec>)
 800525e:	fba2 2303 	umull	r2, r3, r2, r3
 8005262:	08da      	lsrs	r2, r3, #3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005268:	68f9      	ldr	r1, [r7, #12]
 800526a:	4b68      	ldr	r3, [pc, #416]	; (800540c <HAL_SAI_Init+0x2ec>)
 800526c:	fba3 2301 	umull	r2, r3, r3, r1
 8005270:	08da      	lsrs	r2, r3, #3
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	1aca      	subs	r2, r1, r3
 800527c:	2a08      	cmp	r2, #8
 800527e:	d904      	bls.n	800528a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	2b04      	cmp	r3, #4
 8005290:	d104      	bne.n	800529c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	085a      	lsrs	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_SAI_Init+0x18c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d109      	bne.n	80052c0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_SAI_Init+0x198>
 80052b4:	2300      	movs	r3, #0
 80052b6:	e001      	b.n	80052bc <HAL_SAI_Init+0x19c>
 80052b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	e008      	b.n	80052d2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d102      	bne.n	80052ce <HAL_SAI_Init+0x1ae>
 80052c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052cc:	e000      	b.n	80052d0 <HAL_SAI_Init+0x1b0>
 80052ce:	2300      	movs	r3, #0
 80052d0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6819      	ldr	r1, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b4c      	ldr	r3, [pc, #304]	; (8005410 <HAL_SAI_Init+0x2f0>)
 80052de:	400b      	ands	r3, r1
 80052e0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6819      	ldr	r1, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052f6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	431a      	orrs	r2, r3
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800530a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005316:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	051b      	lsls	r3, r3, #20
 800531e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6859      	ldr	r1, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b38      	ldr	r3, [pc, #224]	; (8005414 <HAL_SAI_Init+0x2f4>)
 8005334:	400b      	ands	r3, r1
 8005336:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6899      	ldr	r1, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	4b2d      	ldr	r3, [pc, #180]	; (8005418 <HAL_SAI_Init+0x2f8>)
 8005362:	400b      	ands	r3, r1
 8005364:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6899      	ldr	r1, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005376:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800537c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005382:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	3b01      	subs	r3, #1
 800538a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800538c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68d9      	ldr	r1, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	f24f 0320 	movw	r3, #61472	; 0xf020
 80053a4:	400b      	ands	r3, r1
 80053a6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68d9      	ldr	r1, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c4:	3b01      	subs	r3, #1
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40015804 	.word	0x40015804
 80053f8:	40015824 	.word	0x40015824
 80053fc:	40015800 	.word	0x40015800
 8005400:	40015c00 	.word	0x40015c00
 8005404:	40015c04 	.word	0x40015c04
 8005408:	40015c24 	.word	0x40015c24
 800540c:	cccccccd 	.word	0xcccccccd
 8005410:	ff05c010 	.word	0xff05c010
 8005414:	ffff1ff0 	.word	0xffff1ff0
 8005418:	fff88000 	.word	0xfff88000

0800541c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800542a:	f7fc ffb1 	bl	8002390 <HAL_GetTick>
 800542e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_SAI_Transmit_DMA+0x20>
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e093      	b.n	8005568 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	f040 808c 	bne.w	8005566 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_SAI_Transmit_DMA+0x40>
 8005458:	2302      	movs	r3, #2
 800545a:	e085      	b.n	8005568 <HAL_SAI_Transmit_DMA+0x14c>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	88fa      	ldrh	r2, [r7, #6]
 800546e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	88fa      	ldrh	r2, [r7, #6]
 8005476:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2212      	movs	r2, #18
 8005486:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548e:	4a38      	ldr	r2, [pc, #224]	; (8005570 <HAL_SAI_Transmit_DMA+0x154>)
 8005490:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005496:	4a37      	ldr	r2, [pc, #220]	; (8005574 <HAL_SAI_Transmit_DMA+0x158>)
 8005498:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549e:	4a36      	ldr	r2, [pc, #216]	; (8005578 <HAL_SAI_Transmit_DMA+0x15c>)
 80054a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a6:	2200      	movs	r2, #0
 80054a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b2:	4619      	mov	r1, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	331c      	adds	r3, #28
 80054ba:	461a      	mov	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80054c2:	f7fd f931 	bl	8002728 <HAL_DMA_Start_IT>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e047      	b.n	8005568 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80054d8:	2100      	movs	r1, #0
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f986 	bl	80057ec <SAI_InterruptFlag>
 80054e0:	4601      	mov	r1, r0
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80054fe:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005500:	e015      	b.n	800552e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005502:	f7fc ff45 	bl	8002390 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005510:	d90d      	bls.n	800552e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005518:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e01c      	b.n	8005568 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0e2      	beq.n	8005502 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d107      	bne.n	800555a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005558:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	e000      	b.n	8005568 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8005566:	2302      	movs	r3, #2
  }
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	08005929 	.word	0x08005929
 8005574:	080058c9 	.word	0x080058c9
 8005578:	08005945 	.word	0x08005945

0800557c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <SAI_InitI2S+0x2a>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d103      	bne.n	80055c2 <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	63da      	str	r2, [r3, #60]	; 0x3c
 80055c0:	e002      	b.n	80055c8 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80055ce:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055d6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e076      	b.n	80056e0 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d107      	bne.n	8005608 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005604:	651a      	str	r2, [r3, #80]	; 0x50
 8005606:	e006      	b.n	8005616 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800560e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	651a      	str	r2, [r3, #80]	; 0x50
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d84f      	bhi.n	80056bc <SAI_InitI2S+0x12c>
 800561c:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <SAI_InitI2S+0x94>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005635 	.word	0x08005635
 8005628:	08005657 	.word	0x08005657
 800562c:	08005679 	.word	0x08005679
 8005630:	0800569b 	.word	0x0800569b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2280      	movs	r2, #128	; 0x80
 8005638:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	011a      	lsls	r2, r3, #4
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2240      	movs	r2, #64	; 0x40
 8005652:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005654:	e034      	b.n	80056c0 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2280      	movs	r2, #128	; 0x80
 800565a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	019a      	lsls	r2, r3, #6
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	085b      	lsrs	r3, r3, #1
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2280      	movs	r2, #128	; 0x80
 8005674:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005676:	e023      	b.n	80056c0 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	22c0      	movs	r2, #192	; 0xc0
 800567c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	085b      	lsrs	r3, r3, #1
 8005682:	019a      	lsls	r2, r3, #6
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005698:	e012      	b.n	80056c0 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	22e0      	movs	r2, #224	; 0xe0
 800569e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	085b      	lsrs	r3, r3, #1
 80056a4:	019a      	lsls	r2, r3, #6
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2280      	movs	r2, #128	; 0x80
 80056b8:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80056ba:	e001      	b.n	80056c0 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e00f      	b.n	80056e0 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d10b      	bne.n	80056de <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d102      	bne.n	80056d2 <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2210      	movs	r2, #16
 80056d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d102      	bne.n	80056de <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2208      	movs	r2, #8
 80056dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <SAI_InitPCM+0x2a>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d103      	bne.n	800571e <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	63da      	str	r2, [r3, #60]	; 0x3c
 800571c:	e002      	b.n	8005724 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005730:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005738:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800574c:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b04      	cmp	r3, #4
 8005752:	d103      	bne.n	800575c <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	645a      	str	r2, [r3, #68]	; 0x44
 800575a:	e002      	b.n	8005762 <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	220d      	movs	r2, #13
 8005760:	645a      	str	r2, [r3, #68]	; 0x44
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d837      	bhi.n	80057d8 <SAI_InitPCM+0xec>
 8005768:	a201      	add	r2, pc, #4	; (adr r2, 8005770 <SAI_InitPCM+0x84>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	08005781 	.word	0x08005781
 8005774:	08005797 	.word	0x08005797
 8005778:	080057ad 	.word	0x080057ad
 800577c:	080057c3 	.word	0x080057c3
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2280      	movs	r2, #128	; 0x80
 8005784:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	011a      	lsls	r2, r3, #4
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2240      	movs	r2, #64	; 0x40
 8005792:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005794:	e022      	b.n	80057dc <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2280      	movs	r2, #128	; 0x80
 800579a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2280      	movs	r2, #128	; 0x80
 80057a8:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80057aa:	e017      	b.n	80057dc <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	22c0      	movs	r2, #192	; 0xc0
 80057b0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2280      	movs	r2, #128	; 0x80
 80057be:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80057c0:	e00c      	b.n	80057dc <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	22e0      	movs	r2, #224	; 0xe0
 80057c6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2280      	movs	r2, #128	; 0x80
 80057d4:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80057d6:	e001      	b.n	80057dc <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop

080057ec <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d103      	bne.n	8005808 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f043 0308 	orr.w	r3, r3, #8
 8005806:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	2b08      	cmp	r3, #8
 800580e:	d10b      	bne.n	8005828 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005814:	2b03      	cmp	r3, #3
 8005816:	d003      	beq.n	8005820 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d103      	bne.n	8005828 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f043 0310 	orr.w	r3, r3, #16
 8005826:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d003      	beq.n	8005838 <SAI_InterruptFlag+0x4c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d104      	bne.n	8005842 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	e003      	b.n	800584a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f043 0304 	orr.w	r3, r3, #4
 8005848:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800584a:	68fb      	ldr	r3, [r7, #12]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005860:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <SAI_Disable+0x68>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a17      	ldr	r2, [pc, #92]	; (80058c4 <SAI_Disable+0x6c>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	0b1b      	lsrs	r3, r3, #12
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005882:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	1e5a      	subs	r2, r3, #1
 8005888:	60fa      	str	r2, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005894:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	72fb      	strb	r3, [r7, #11]
      break;
 80058a2:	e006      	b.n	80058b2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e8      	bne.n	8005884 <SAI_Disable+0x2c>

  return status;
 80058b2:	7afb      	ldrb	r3, [r7, #11]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	2000002c 	.word	0x2000002c
 80058c4:	95cbec1b 	.word	0x95cbec1b

080058c8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058de:	d01c      	beq.n	800591a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80058f6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80058f8:	2100      	movs	r1, #0
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7ff ff76 	bl	80057ec <SAI_InterruptFlag>
 8005900:	4603      	mov	r3, r0
 8005902:	43d9      	mvns	r1, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	400a      	ands	r2, r1
 8005910:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7fb f933 	bl	8000b86 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f7fb f91a 	bl	8000b70 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800593c:	bf00      	nop
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005958:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005968:	2b01      	cmp	r3, #1
 800596a:	d004      	beq.n	8005976 <SAI_DMAError+0x32>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	2b01      	cmp	r3, #1
 8005974:	d112      	bne.n	800599c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005984:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff ff66 	bl	8005858 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff fded 	bl	800557c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80059a2:	bf00      	nop
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e040      	b.n	8005a3e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d106      	bne.n	80059d2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fc fad5 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2224      	movs	r2, #36	; 0x24
 80059d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0201 	bic.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f87f 	bl	8005aec <UART_SetConfig>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e022      	b.n	8005a3e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fad5 	bl	8005fb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0201 	orr.w	r2, r2, #1
 8005a34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fb5c 	bl	80060f4 <UART_CheckIdleState>
 8005a3c:	4603      	mov	r3, r0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	4613      	mov	r3, r2
 8005a52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	d12c      	bne.n	8005ab6 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <HAL_UART_Receive_DMA+0x22>
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e025      	b.n	8005ab8 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_UART_Receive_DMA+0x34>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e01e      	b.n	8005ab8 <HAL_UART_Receive_DMA+0x72>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005aa4:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fbe7 	bl	8006280 <UART_Start_Receive_DMA>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	e000      	b.n	8005ab8 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005ab6:	2302      	movs	r3, #2
  }
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	431a      	orrs	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4ba7      	ldr	r3, [pc, #668]	; (8005db4 <UART_SetConfig+0x2c8>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6812      	ldr	r2, [r2, #0]
 8005b1e:	6979      	ldr	r1, [r7, #20]
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a95      	ldr	r2, [pc, #596]	; (8005db8 <UART_SetConfig+0x2cc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d120      	bne.n	8005baa <UART_SetConfig+0xbe>
 8005b68:	4b94      	ldr	r3, [pc, #592]	; (8005dbc <UART_SetConfig+0x2d0>)
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	d816      	bhi.n	8005ba4 <UART_SetConfig+0xb8>
 8005b76:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <UART_SetConfig+0x90>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005b8d 	.word	0x08005b8d
 8005b80:	08005b99 	.word	0x08005b99
 8005b84:	08005b93 	.word	0x08005b93
 8005b88:	08005b9f 	.word	0x08005b9f
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	77fb      	strb	r3, [r7, #31]
 8005b90:	e14f      	b.n	8005e32 <UART_SetConfig+0x346>
 8005b92:	2302      	movs	r3, #2
 8005b94:	77fb      	strb	r3, [r7, #31]
 8005b96:	e14c      	b.n	8005e32 <UART_SetConfig+0x346>
 8005b98:	2304      	movs	r3, #4
 8005b9a:	77fb      	strb	r3, [r7, #31]
 8005b9c:	e149      	b.n	8005e32 <UART_SetConfig+0x346>
 8005b9e:	2308      	movs	r3, #8
 8005ba0:	77fb      	strb	r3, [r7, #31]
 8005ba2:	e146      	b.n	8005e32 <UART_SetConfig+0x346>
 8005ba4:	2310      	movs	r3, #16
 8005ba6:	77fb      	strb	r3, [r7, #31]
 8005ba8:	e143      	b.n	8005e32 <UART_SetConfig+0x346>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a84      	ldr	r2, [pc, #528]	; (8005dc0 <UART_SetConfig+0x2d4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d132      	bne.n	8005c1a <UART_SetConfig+0x12e>
 8005bb4:	4b81      	ldr	r3, [pc, #516]	; (8005dbc <UART_SetConfig+0x2d0>)
 8005bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bba:	f003 030c 	and.w	r3, r3, #12
 8005bbe:	2b0c      	cmp	r3, #12
 8005bc0:	d828      	bhi.n	8005c14 <UART_SetConfig+0x128>
 8005bc2:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <UART_SetConfig+0xdc>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005bfd 	.word	0x08005bfd
 8005bcc:	08005c15 	.word	0x08005c15
 8005bd0:	08005c15 	.word	0x08005c15
 8005bd4:	08005c15 	.word	0x08005c15
 8005bd8:	08005c09 	.word	0x08005c09
 8005bdc:	08005c15 	.word	0x08005c15
 8005be0:	08005c15 	.word	0x08005c15
 8005be4:	08005c15 	.word	0x08005c15
 8005be8:	08005c03 	.word	0x08005c03
 8005bec:	08005c15 	.word	0x08005c15
 8005bf0:	08005c15 	.word	0x08005c15
 8005bf4:	08005c15 	.word	0x08005c15
 8005bf8:	08005c0f 	.word	0x08005c0f
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	e117      	b.n	8005e32 <UART_SetConfig+0x346>
 8005c02:	2302      	movs	r3, #2
 8005c04:	77fb      	strb	r3, [r7, #31]
 8005c06:	e114      	b.n	8005e32 <UART_SetConfig+0x346>
 8005c08:	2304      	movs	r3, #4
 8005c0a:	77fb      	strb	r3, [r7, #31]
 8005c0c:	e111      	b.n	8005e32 <UART_SetConfig+0x346>
 8005c0e:	2308      	movs	r3, #8
 8005c10:	77fb      	strb	r3, [r7, #31]
 8005c12:	e10e      	b.n	8005e32 <UART_SetConfig+0x346>
 8005c14:	2310      	movs	r3, #16
 8005c16:	77fb      	strb	r3, [r7, #31]
 8005c18:	e10b      	b.n	8005e32 <UART_SetConfig+0x346>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a69      	ldr	r2, [pc, #420]	; (8005dc4 <UART_SetConfig+0x2d8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d120      	bne.n	8005c66 <UART_SetConfig+0x17a>
 8005c24:	4b65      	ldr	r3, [pc, #404]	; (8005dbc <UART_SetConfig+0x2d0>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c2e:	2b30      	cmp	r3, #48	; 0x30
 8005c30:	d013      	beq.n	8005c5a <UART_SetConfig+0x16e>
 8005c32:	2b30      	cmp	r3, #48	; 0x30
 8005c34:	d814      	bhi.n	8005c60 <UART_SetConfig+0x174>
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d009      	beq.n	8005c4e <UART_SetConfig+0x162>
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d810      	bhi.n	8005c60 <UART_SetConfig+0x174>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <UART_SetConfig+0x15c>
 8005c42:	2b10      	cmp	r3, #16
 8005c44:	d006      	beq.n	8005c54 <UART_SetConfig+0x168>
 8005c46:	e00b      	b.n	8005c60 <UART_SetConfig+0x174>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	77fb      	strb	r3, [r7, #31]
 8005c4c:	e0f1      	b.n	8005e32 <UART_SetConfig+0x346>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	77fb      	strb	r3, [r7, #31]
 8005c52:	e0ee      	b.n	8005e32 <UART_SetConfig+0x346>
 8005c54:	2304      	movs	r3, #4
 8005c56:	77fb      	strb	r3, [r7, #31]
 8005c58:	e0eb      	b.n	8005e32 <UART_SetConfig+0x346>
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	77fb      	strb	r3, [r7, #31]
 8005c5e:	e0e8      	b.n	8005e32 <UART_SetConfig+0x346>
 8005c60:	2310      	movs	r3, #16
 8005c62:	77fb      	strb	r3, [r7, #31]
 8005c64:	e0e5      	b.n	8005e32 <UART_SetConfig+0x346>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a57      	ldr	r2, [pc, #348]	; (8005dc8 <UART_SetConfig+0x2dc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d120      	bne.n	8005cb2 <UART_SetConfig+0x1c6>
 8005c70:	4b52      	ldr	r3, [pc, #328]	; (8005dbc <UART_SetConfig+0x2d0>)
 8005c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c7c:	d013      	beq.n	8005ca6 <UART_SetConfig+0x1ba>
 8005c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c80:	d814      	bhi.n	8005cac <UART_SetConfig+0x1c0>
 8005c82:	2b80      	cmp	r3, #128	; 0x80
 8005c84:	d009      	beq.n	8005c9a <UART_SetConfig+0x1ae>
 8005c86:	2b80      	cmp	r3, #128	; 0x80
 8005c88:	d810      	bhi.n	8005cac <UART_SetConfig+0x1c0>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <UART_SetConfig+0x1a8>
 8005c8e:	2b40      	cmp	r3, #64	; 0x40
 8005c90:	d006      	beq.n	8005ca0 <UART_SetConfig+0x1b4>
 8005c92:	e00b      	b.n	8005cac <UART_SetConfig+0x1c0>
 8005c94:	2300      	movs	r3, #0
 8005c96:	77fb      	strb	r3, [r7, #31]
 8005c98:	e0cb      	b.n	8005e32 <UART_SetConfig+0x346>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	77fb      	strb	r3, [r7, #31]
 8005c9e:	e0c8      	b.n	8005e32 <UART_SetConfig+0x346>
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e0c5      	b.n	8005e32 <UART_SetConfig+0x346>
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e0c2      	b.n	8005e32 <UART_SetConfig+0x346>
 8005cac:	2310      	movs	r3, #16
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e0bf      	b.n	8005e32 <UART_SetConfig+0x346>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a45      	ldr	r2, [pc, #276]	; (8005dcc <UART_SetConfig+0x2e0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d125      	bne.n	8005d08 <UART_SetConfig+0x21c>
 8005cbc:	4b3f      	ldr	r3, [pc, #252]	; (8005dbc <UART_SetConfig+0x2d0>)
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cca:	d017      	beq.n	8005cfc <UART_SetConfig+0x210>
 8005ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd0:	d817      	bhi.n	8005d02 <UART_SetConfig+0x216>
 8005cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd6:	d00b      	beq.n	8005cf0 <UART_SetConfig+0x204>
 8005cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cdc:	d811      	bhi.n	8005d02 <UART_SetConfig+0x216>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <UART_SetConfig+0x1fe>
 8005ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce6:	d006      	beq.n	8005cf6 <UART_SetConfig+0x20a>
 8005ce8:	e00b      	b.n	8005d02 <UART_SetConfig+0x216>
 8005cea:	2300      	movs	r3, #0
 8005cec:	77fb      	strb	r3, [r7, #31]
 8005cee:	e0a0      	b.n	8005e32 <UART_SetConfig+0x346>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	e09d      	b.n	8005e32 <UART_SetConfig+0x346>
 8005cf6:	2304      	movs	r3, #4
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e09a      	b.n	8005e32 <UART_SetConfig+0x346>
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e097      	b.n	8005e32 <UART_SetConfig+0x346>
 8005d02:	2310      	movs	r3, #16
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e094      	b.n	8005e32 <UART_SetConfig+0x346>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a30      	ldr	r2, [pc, #192]	; (8005dd0 <UART_SetConfig+0x2e4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d125      	bne.n	8005d5e <UART_SetConfig+0x272>
 8005d12:	4b2a      	ldr	r3, [pc, #168]	; (8005dbc <UART_SetConfig+0x2d0>)
 8005d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d20:	d017      	beq.n	8005d52 <UART_SetConfig+0x266>
 8005d22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d26:	d817      	bhi.n	8005d58 <UART_SetConfig+0x26c>
 8005d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d2c:	d00b      	beq.n	8005d46 <UART_SetConfig+0x25a>
 8005d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d32:	d811      	bhi.n	8005d58 <UART_SetConfig+0x26c>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <UART_SetConfig+0x254>
 8005d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3c:	d006      	beq.n	8005d4c <UART_SetConfig+0x260>
 8005d3e:	e00b      	b.n	8005d58 <UART_SetConfig+0x26c>
 8005d40:	2301      	movs	r3, #1
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e075      	b.n	8005e32 <UART_SetConfig+0x346>
 8005d46:	2302      	movs	r3, #2
 8005d48:	77fb      	strb	r3, [r7, #31]
 8005d4a:	e072      	b.n	8005e32 <UART_SetConfig+0x346>
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e06f      	b.n	8005e32 <UART_SetConfig+0x346>
 8005d52:	2308      	movs	r3, #8
 8005d54:	77fb      	strb	r3, [r7, #31]
 8005d56:	e06c      	b.n	8005e32 <UART_SetConfig+0x346>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	77fb      	strb	r3, [r7, #31]
 8005d5c:	e069      	b.n	8005e32 <UART_SetConfig+0x346>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1c      	ldr	r2, [pc, #112]	; (8005dd4 <UART_SetConfig+0x2e8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d137      	bne.n	8005dd8 <UART_SetConfig+0x2ec>
 8005d68:	4b14      	ldr	r3, [pc, #80]	; (8005dbc <UART_SetConfig+0x2d0>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d76:	d017      	beq.n	8005da8 <UART_SetConfig+0x2bc>
 8005d78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d7c:	d817      	bhi.n	8005dae <UART_SetConfig+0x2c2>
 8005d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d82:	d00b      	beq.n	8005d9c <UART_SetConfig+0x2b0>
 8005d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d88:	d811      	bhi.n	8005dae <UART_SetConfig+0x2c2>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <UART_SetConfig+0x2aa>
 8005d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d92:	d006      	beq.n	8005da2 <UART_SetConfig+0x2b6>
 8005d94:	e00b      	b.n	8005dae <UART_SetConfig+0x2c2>
 8005d96:	2300      	movs	r3, #0
 8005d98:	77fb      	strb	r3, [r7, #31]
 8005d9a:	e04a      	b.n	8005e32 <UART_SetConfig+0x346>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e047      	b.n	8005e32 <UART_SetConfig+0x346>
 8005da2:	2304      	movs	r3, #4
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e044      	b.n	8005e32 <UART_SetConfig+0x346>
 8005da8:	2308      	movs	r3, #8
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e041      	b.n	8005e32 <UART_SetConfig+0x346>
 8005dae:	2310      	movs	r3, #16
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e03e      	b.n	8005e32 <UART_SetConfig+0x346>
 8005db4:	efff69f3 	.word	0xefff69f3
 8005db8:	40011000 	.word	0x40011000
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	40004400 	.word	0x40004400
 8005dc4:	40004800 	.word	0x40004800
 8005dc8:	40004c00 	.word	0x40004c00
 8005dcc:	40005000 	.word	0x40005000
 8005dd0:	40011400 	.word	0x40011400
 8005dd4:	40007800 	.word	0x40007800
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a71      	ldr	r2, [pc, #452]	; (8005fa4 <UART_SetConfig+0x4b8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d125      	bne.n	8005e2e <UART_SetConfig+0x342>
 8005de2:	4b71      	ldr	r3, [pc, #452]	; (8005fa8 <UART_SetConfig+0x4bc>)
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005dec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005df0:	d017      	beq.n	8005e22 <UART_SetConfig+0x336>
 8005df2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005df6:	d817      	bhi.n	8005e28 <UART_SetConfig+0x33c>
 8005df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dfc:	d00b      	beq.n	8005e16 <UART_SetConfig+0x32a>
 8005dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e02:	d811      	bhi.n	8005e28 <UART_SetConfig+0x33c>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <UART_SetConfig+0x324>
 8005e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e0c:	d006      	beq.n	8005e1c <UART_SetConfig+0x330>
 8005e0e:	e00b      	b.n	8005e28 <UART_SetConfig+0x33c>
 8005e10:	2300      	movs	r3, #0
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e00d      	b.n	8005e32 <UART_SetConfig+0x346>
 8005e16:	2302      	movs	r3, #2
 8005e18:	77fb      	strb	r3, [r7, #31]
 8005e1a:	e00a      	b.n	8005e32 <UART_SetConfig+0x346>
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	77fb      	strb	r3, [r7, #31]
 8005e20:	e007      	b.n	8005e32 <UART_SetConfig+0x346>
 8005e22:	2308      	movs	r3, #8
 8005e24:	77fb      	strb	r3, [r7, #31]
 8005e26:	e004      	b.n	8005e32 <UART_SetConfig+0x346>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	77fb      	strb	r3, [r7, #31]
 8005e2c:	e001      	b.n	8005e32 <UART_SetConfig+0x346>
 8005e2e:	2310      	movs	r3, #16
 8005e30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3a:	d15b      	bne.n	8005ef4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005e3c:	7ffb      	ldrb	r3, [r7, #31]
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d827      	bhi.n	8005e92 <UART_SetConfig+0x3a6>
 8005e42:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <UART_SetConfig+0x35c>)
 8005e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e48:	08005e6d 	.word	0x08005e6d
 8005e4c:	08005e75 	.word	0x08005e75
 8005e50:	08005e7d 	.word	0x08005e7d
 8005e54:	08005e93 	.word	0x08005e93
 8005e58:	08005e83 	.word	0x08005e83
 8005e5c:	08005e93 	.word	0x08005e93
 8005e60:	08005e93 	.word	0x08005e93
 8005e64:	08005e93 	.word	0x08005e93
 8005e68:	08005e8b 	.word	0x08005e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e6c:	f7fe fb62 	bl	8004534 <HAL_RCC_GetPCLK1Freq>
 8005e70:	61b8      	str	r0, [r7, #24]
        break;
 8005e72:	e013      	b.n	8005e9c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e74:	f7fe fb72 	bl	800455c <HAL_RCC_GetPCLK2Freq>
 8005e78:	61b8      	str	r0, [r7, #24]
        break;
 8005e7a:	e00f      	b.n	8005e9c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e7c:	4b4b      	ldr	r3, [pc, #300]	; (8005fac <UART_SetConfig+0x4c0>)
 8005e7e:	61bb      	str	r3, [r7, #24]
        break;
 8005e80:	e00c      	b.n	8005e9c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e82:	f7fe fa95 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8005e86:	61b8      	str	r0, [r7, #24]
        break;
 8005e88:	e008      	b.n	8005e9c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e8e:	61bb      	str	r3, [r7, #24]
        break;
 8005e90:	e004      	b.n	8005e9c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	77bb      	strb	r3, [r7, #30]
        break;
 8005e9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d074      	beq.n	8005f8c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	005a      	lsls	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	085b      	lsrs	r3, r3, #1
 8005eac:	441a      	add	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2b0f      	cmp	r3, #15
 8005ebe:	d916      	bls.n	8005eee <UART_SetConfig+0x402>
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec6:	d212      	bcs.n	8005eee <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f023 030f 	bic.w	r3, r3, #15
 8005ed0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	085b      	lsrs	r3, r3, #1
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	89fb      	ldrh	r3, [r7, #14]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	89fa      	ldrh	r2, [r7, #14]
 8005eea:	60da      	str	r2, [r3, #12]
 8005eec:	e04e      	b.n	8005f8c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	77bb      	strb	r3, [r7, #30]
 8005ef2:	e04b      	b.n	8005f8c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ef4:	7ffb      	ldrb	r3, [r7, #31]
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d827      	bhi.n	8005f4a <UART_SetConfig+0x45e>
 8005efa:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <UART_SetConfig+0x414>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f25 	.word	0x08005f25
 8005f04:	08005f2d 	.word	0x08005f2d
 8005f08:	08005f35 	.word	0x08005f35
 8005f0c:	08005f4b 	.word	0x08005f4b
 8005f10:	08005f3b 	.word	0x08005f3b
 8005f14:	08005f4b 	.word	0x08005f4b
 8005f18:	08005f4b 	.word	0x08005f4b
 8005f1c:	08005f4b 	.word	0x08005f4b
 8005f20:	08005f43 	.word	0x08005f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f24:	f7fe fb06 	bl	8004534 <HAL_RCC_GetPCLK1Freq>
 8005f28:	61b8      	str	r0, [r7, #24]
        break;
 8005f2a:	e013      	b.n	8005f54 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f2c:	f7fe fb16 	bl	800455c <HAL_RCC_GetPCLK2Freq>
 8005f30:	61b8      	str	r0, [r7, #24]
        break;
 8005f32:	e00f      	b.n	8005f54 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f34:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <UART_SetConfig+0x4c0>)
 8005f36:	61bb      	str	r3, [r7, #24]
        break;
 8005f38:	e00c      	b.n	8005f54 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f3a:	f7fe fa39 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8005f3e:	61b8      	str	r0, [r7, #24]
        break;
 8005f40:	e008      	b.n	8005f54 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f46:	61bb      	str	r3, [r7, #24]
        break;
 8005f48:	e004      	b.n	8005f54 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	77bb      	strb	r3, [r7, #30]
        break;
 8005f52:	bf00      	nop
    }

    if (pclk != 0U)
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d018      	beq.n	8005f8c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	085a      	lsrs	r2, r3, #1
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	441a      	add	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	d908      	bls.n	8005f88 <UART_SetConfig+0x49c>
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f7c:	d204      	bcs.n	8005f88 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	60da      	str	r2, [r3, #12]
 8005f86:	e001      	b.n	8005f8c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f98:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40007c00 	.word	0x40007c00
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	00f42400 	.word	0x00f42400

08005fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	f003 0310 	and.w	r3, r3, #16
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01a      	beq.n	80060c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ae:	d10a      	bne.n	80060c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	605a      	str	r2, [r3, #4]
  }
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006104:	f7fc f944 	bl	8002390 <HAL_GetTick>
 8006108:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b08      	cmp	r3, #8
 8006116:	d10e      	bne.n	8006136 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f82d 	bl	8006186 <UART_WaitOnFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e023      	b.n	800617e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b04      	cmp	r3, #4
 8006142:	d10e      	bne.n	8006162 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f817 	bl	8006186 <UART_WaitOnFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e00d      	b.n	800617e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	603b      	str	r3, [r7, #0]
 8006192:	4613      	mov	r3, r2
 8006194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006196:	e05e      	b.n	8006256 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619e:	d05a      	beq.n	8006256 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a0:	f7fc f8f6 	bl	8002390 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d302      	bcc.n	80061b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d11b      	bne.n	80061ee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0201 	bic.w	r2, r2, #1
 80061d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2220      	movs	r2, #32
 80061da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e043      	b.n	8006276 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d02c      	beq.n	8006256 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800620a:	d124      	bne.n	8006256 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006214:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006224:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2220      	movs	r2, #32
 8006246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e00f      	b.n	8006276 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4013      	ands	r3, r2
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	bf0c      	ite	eq
 8006266:	2301      	moveq	r3, #1
 8006268:	2300      	movne	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	429a      	cmp	r2, r3
 8006272:	d091      	beq.n	8006198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2222      	movs	r2, #34	; 0x22
 80062a8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d02b      	beq.n	800630a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	4a25      	ldr	r2, [pc, #148]	; (800634c <UART_Start_Receive_DMA+0xcc>)
 80062b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062be:	4a24      	ldr	r2, [pc, #144]	; (8006350 <UART_Start_Receive_DMA+0xd0>)
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c6:	4a23      	ldr	r2, [pc, #140]	; (8006354 <UART_Start_Receive_DMA+0xd4>)
 80062c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ce:	2200      	movs	r2, #0
 80062d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3324      	adds	r3, #36	; 0x24
 80062dc:	4619      	mov	r1, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e2:	461a      	mov	r2, r3
 80062e4:	88fb      	ldrh	r3, [r7, #6]
 80062e6:	f7fc fa1f 	bl	8002728 <HAL_DMA_Start_IT>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00c      	beq.n	800630a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2210      	movs	r2, #16
 80062f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2220      	movs	r2, #32
 8006304:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e01c      	b.n	8006344 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006320:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0201 	orr.w	r2, r2, #1
 8006330:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006340:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	080063e1 	.word	0x080063e1
 8006350:	08006475 	.word	0x08006475
 8006354:	080064ad 	.word	0x080064ad

08006358 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800636e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006398:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0201 	bic.w	r2, r2, #1
 80063a8:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d107      	bne.n	80063c2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0210 	bic.w	r2, r2, #16
 80063c0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f6:	d02a      	beq.n	800644e <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800640e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0201 	bic.w	r2, r2, #1
 800641e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800642e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643a:	2b01      	cmp	r3, #1
 800643c:	d107      	bne.n	800644e <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0210 	bic.w	r2, r2, #16
 800644c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006452:	2b01      	cmp	r3, #1
 8006454:	d107      	bne.n	8006466 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800645c:	4619      	mov	r1, r3
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff fb38 	bl	8005ad4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006464:	e002      	b.n	800646c <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7fa ff7e 	bl	8001368 <HAL_UART_RxCpltCallback>
}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006486:	2b01      	cmp	r3, #1
 8006488:	d109      	bne.n	800649e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	b29b      	uxth	r3, r3
 8006494:	4619      	mov	r1, r3
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff fb1c 	bl	8005ad4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800649c:	e002      	b.n	80064a4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7fa ff58 	bl	8001354 <HAL_UART_RxHalfCpltCallback>
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d0:	2b80      	cmp	r3, #128	; 0x80
 80064d2:	d109      	bne.n	80064e8 <UART_DMAError+0x3c>
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b21      	cmp	r3, #33	; 0x21
 80064d8:	d106      	bne.n	80064e8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80064e2:	6978      	ldr	r0, [r7, #20]
 80064e4:	f7ff ff38 	bl	8006358 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b40      	cmp	r3, #64	; 0x40
 80064f4:	d109      	bne.n	800650a <UART_DMAError+0x5e>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b22      	cmp	r3, #34	; 0x22
 80064fa:	d106      	bne.n	800650a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006504:	6978      	ldr	r0, [r7, #20]
 8006506:	f7ff ff3c 	bl	8006382 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006510:	f043 0210 	orr.w	r2, r3, #16
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800651a:	6978      	ldr	r0, [r7, #20]
 800651c:	f7ff fad0 	bl	8005ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006520:	bf00      	nop
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <__errno>:
 8006528:	4b01      	ldr	r3, [pc, #4]	; (8006530 <__errno+0x8>)
 800652a:	6818      	ldr	r0, [r3, #0]
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	20000038 	.word	0x20000038

08006534 <__libc_init_array>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	4d0d      	ldr	r5, [pc, #52]	; (800656c <__libc_init_array+0x38>)
 8006538:	4c0d      	ldr	r4, [pc, #52]	; (8006570 <__libc_init_array+0x3c>)
 800653a:	1b64      	subs	r4, r4, r5
 800653c:	10a4      	asrs	r4, r4, #2
 800653e:	2600      	movs	r6, #0
 8006540:	42a6      	cmp	r6, r4
 8006542:	d109      	bne.n	8006558 <__libc_init_array+0x24>
 8006544:	4d0b      	ldr	r5, [pc, #44]	; (8006574 <__libc_init_array+0x40>)
 8006546:	4c0c      	ldr	r4, [pc, #48]	; (8006578 <__libc_init_array+0x44>)
 8006548:	f000 f8f8 	bl	800673c <_init>
 800654c:	1b64      	subs	r4, r4, r5
 800654e:	10a4      	asrs	r4, r4, #2
 8006550:	2600      	movs	r6, #0
 8006552:	42a6      	cmp	r6, r4
 8006554:	d105      	bne.n	8006562 <__libc_init_array+0x2e>
 8006556:	bd70      	pop	{r4, r5, r6, pc}
 8006558:	f855 3b04 	ldr.w	r3, [r5], #4
 800655c:	4798      	blx	r3
 800655e:	3601      	adds	r6, #1
 8006560:	e7ee      	b.n	8006540 <__libc_init_array+0xc>
 8006562:	f855 3b04 	ldr.w	r3, [r5], #4
 8006566:	4798      	blx	r3
 8006568:	3601      	adds	r6, #1
 800656a:	e7f2      	b.n	8006552 <__libc_init_array+0x1e>
 800656c:	0800cf54 	.word	0x0800cf54
 8006570:	0800cf54 	.word	0x0800cf54
 8006574:	0800cf54 	.word	0x0800cf54
 8006578:	0800cf58 	.word	0x0800cf58

0800657c <malloc>:
 800657c:	4b02      	ldr	r3, [pc, #8]	; (8006588 <malloc+0xc>)
 800657e:	4601      	mov	r1, r0
 8006580:	6818      	ldr	r0, [r3, #0]
 8006582:	f000 b863 	b.w	800664c <_malloc_r>
 8006586:	bf00      	nop
 8006588:	20000038 	.word	0x20000038

0800658c <free>:
 800658c:	4b02      	ldr	r3, [pc, #8]	; (8006598 <free+0xc>)
 800658e:	4601      	mov	r1, r0
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	f000 b80b 	b.w	80065ac <_free_r>
 8006596:	bf00      	nop
 8006598:	20000038 	.word	0x20000038

0800659c <memset>:
 800659c:	4402      	add	r2, r0
 800659e:	4603      	mov	r3, r0
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d100      	bne.n	80065a6 <memset+0xa>
 80065a4:	4770      	bx	lr
 80065a6:	f803 1b01 	strb.w	r1, [r3], #1
 80065aa:	e7f9      	b.n	80065a0 <memset+0x4>

080065ac <_free_r>:
 80065ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065ae:	2900      	cmp	r1, #0
 80065b0:	d048      	beq.n	8006644 <_free_r+0x98>
 80065b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065b6:	9001      	str	r0, [sp, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f1a1 0404 	sub.w	r4, r1, #4
 80065be:	bfb8      	it	lt
 80065c0:	18e4      	addlt	r4, r4, r3
 80065c2:	f000 f8af 	bl	8006724 <__malloc_lock>
 80065c6:	4a20      	ldr	r2, [pc, #128]	; (8006648 <_free_r+0x9c>)
 80065c8:	9801      	ldr	r0, [sp, #4]
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	4615      	mov	r5, r2
 80065ce:	b933      	cbnz	r3, 80065de <_free_r+0x32>
 80065d0:	6063      	str	r3, [r4, #4]
 80065d2:	6014      	str	r4, [r2, #0]
 80065d4:	b003      	add	sp, #12
 80065d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065da:	f000 b8a9 	b.w	8006730 <__malloc_unlock>
 80065de:	42a3      	cmp	r3, r4
 80065e0:	d90b      	bls.n	80065fa <_free_r+0x4e>
 80065e2:	6821      	ldr	r1, [r4, #0]
 80065e4:	1862      	adds	r2, r4, r1
 80065e6:	4293      	cmp	r3, r2
 80065e8:	bf04      	itt	eq
 80065ea:	681a      	ldreq	r2, [r3, #0]
 80065ec:	685b      	ldreq	r3, [r3, #4]
 80065ee:	6063      	str	r3, [r4, #4]
 80065f0:	bf04      	itt	eq
 80065f2:	1852      	addeq	r2, r2, r1
 80065f4:	6022      	streq	r2, [r4, #0]
 80065f6:	602c      	str	r4, [r5, #0]
 80065f8:	e7ec      	b.n	80065d4 <_free_r+0x28>
 80065fa:	461a      	mov	r2, r3
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	b10b      	cbz	r3, 8006604 <_free_r+0x58>
 8006600:	42a3      	cmp	r3, r4
 8006602:	d9fa      	bls.n	80065fa <_free_r+0x4e>
 8006604:	6811      	ldr	r1, [r2, #0]
 8006606:	1855      	adds	r5, r2, r1
 8006608:	42a5      	cmp	r5, r4
 800660a:	d10b      	bne.n	8006624 <_free_r+0x78>
 800660c:	6824      	ldr	r4, [r4, #0]
 800660e:	4421      	add	r1, r4
 8006610:	1854      	adds	r4, r2, r1
 8006612:	42a3      	cmp	r3, r4
 8006614:	6011      	str	r1, [r2, #0]
 8006616:	d1dd      	bne.n	80065d4 <_free_r+0x28>
 8006618:	681c      	ldr	r4, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	6053      	str	r3, [r2, #4]
 800661e:	4421      	add	r1, r4
 8006620:	6011      	str	r1, [r2, #0]
 8006622:	e7d7      	b.n	80065d4 <_free_r+0x28>
 8006624:	d902      	bls.n	800662c <_free_r+0x80>
 8006626:	230c      	movs	r3, #12
 8006628:	6003      	str	r3, [r0, #0]
 800662a:	e7d3      	b.n	80065d4 <_free_r+0x28>
 800662c:	6825      	ldr	r5, [r4, #0]
 800662e:	1961      	adds	r1, r4, r5
 8006630:	428b      	cmp	r3, r1
 8006632:	bf04      	itt	eq
 8006634:	6819      	ldreq	r1, [r3, #0]
 8006636:	685b      	ldreq	r3, [r3, #4]
 8006638:	6063      	str	r3, [r4, #4]
 800663a:	bf04      	itt	eq
 800663c:	1949      	addeq	r1, r1, r5
 800663e:	6021      	streq	r1, [r4, #0]
 8006640:	6054      	str	r4, [r2, #4]
 8006642:	e7c7      	b.n	80065d4 <_free_r+0x28>
 8006644:	b003      	add	sp, #12
 8006646:	bd30      	pop	{r4, r5, pc}
 8006648:	2000451c 	.word	0x2000451c

0800664c <_malloc_r>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	1ccd      	adds	r5, r1, #3
 8006650:	f025 0503 	bic.w	r5, r5, #3
 8006654:	3508      	adds	r5, #8
 8006656:	2d0c      	cmp	r5, #12
 8006658:	bf38      	it	cc
 800665a:	250c      	movcc	r5, #12
 800665c:	2d00      	cmp	r5, #0
 800665e:	4606      	mov	r6, r0
 8006660:	db01      	blt.n	8006666 <_malloc_r+0x1a>
 8006662:	42a9      	cmp	r1, r5
 8006664:	d903      	bls.n	800666e <_malloc_r+0x22>
 8006666:	230c      	movs	r3, #12
 8006668:	6033      	str	r3, [r6, #0]
 800666a:	2000      	movs	r0, #0
 800666c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800666e:	f000 f859 	bl	8006724 <__malloc_lock>
 8006672:	4921      	ldr	r1, [pc, #132]	; (80066f8 <_malloc_r+0xac>)
 8006674:	680a      	ldr	r2, [r1, #0]
 8006676:	4614      	mov	r4, r2
 8006678:	b99c      	cbnz	r4, 80066a2 <_malloc_r+0x56>
 800667a:	4f20      	ldr	r7, [pc, #128]	; (80066fc <_malloc_r+0xb0>)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	b923      	cbnz	r3, 800668a <_malloc_r+0x3e>
 8006680:	4621      	mov	r1, r4
 8006682:	4630      	mov	r0, r6
 8006684:	f000 f83c 	bl	8006700 <_sbrk_r>
 8006688:	6038      	str	r0, [r7, #0]
 800668a:	4629      	mov	r1, r5
 800668c:	4630      	mov	r0, r6
 800668e:	f000 f837 	bl	8006700 <_sbrk_r>
 8006692:	1c43      	adds	r3, r0, #1
 8006694:	d123      	bne.n	80066de <_malloc_r+0x92>
 8006696:	230c      	movs	r3, #12
 8006698:	6033      	str	r3, [r6, #0]
 800669a:	4630      	mov	r0, r6
 800669c:	f000 f848 	bl	8006730 <__malloc_unlock>
 80066a0:	e7e3      	b.n	800666a <_malloc_r+0x1e>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	1b5b      	subs	r3, r3, r5
 80066a6:	d417      	bmi.n	80066d8 <_malloc_r+0x8c>
 80066a8:	2b0b      	cmp	r3, #11
 80066aa:	d903      	bls.n	80066b4 <_malloc_r+0x68>
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	441c      	add	r4, r3
 80066b0:	6025      	str	r5, [r4, #0]
 80066b2:	e004      	b.n	80066be <_malloc_r+0x72>
 80066b4:	6863      	ldr	r3, [r4, #4]
 80066b6:	42a2      	cmp	r2, r4
 80066b8:	bf0c      	ite	eq
 80066ba:	600b      	streq	r3, [r1, #0]
 80066bc:	6053      	strne	r3, [r2, #4]
 80066be:	4630      	mov	r0, r6
 80066c0:	f000 f836 	bl	8006730 <__malloc_unlock>
 80066c4:	f104 000b 	add.w	r0, r4, #11
 80066c8:	1d23      	adds	r3, r4, #4
 80066ca:	f020 0007 	bic.w	r0, r0, #7
 80066ce:	1ac2      	subs	r2, r0, r3
 80066d0:	d0cc      	beq.n	800666c <_malloc_r+0x20>
 80066d2:	1a1b      	subs	r3, r3, r0
 80066d4:	50a3      	str	r3, [r4, r2]
 80066d6:	e7c9      	b.n	800666c <_malloc_r+0x20>
 80066d8:	4622      	mov	r2, r4
 80066da:	6864      	ldr	r4, [r4, #4]
 80066dc:	e7cc      	b.n	8006678 <_malloc_r+0x2c>
 80066de:	1cc4      	adds	r4, r0, #3
 80066e0:	f024 0403 	bic.w	r4, r4, #3
 80066e4:	42a0      	cmp	r0, r4
 80066e6:	d0e3      	beq.n	80066b0 <_malloc_r+0x64>
 80066e8:	1a21      	subs	r1, r4, r0
 80066ea:	4630      	mov	r0, r6
 80066ec:	f000 f808 	bl	8006700 <_sbrk_r>
 80066f0:	3001      	adds	r0, #1
 80066f2:	d1dd      	bne.n	80066b0 <_malloc_r+0x64>
 80066f4:	e7cf      	b.n	8006696 <_malloc_r+0x4a>
 80066f6:	bf00      	nop
 80066f8:	2000451c 	.word	0x2000451c
 80066fc:	20004520 	.word	0x20004520

08006700 <_sbrk_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d06      	ldr	r5, [pc, #24]	; (800671c <_sbrk_r+0x1c>)
 8006704:	2300      	movs	r3, #0
 8006706:	4604      	mov	r4, r0
 8006708:	4608      	mov	r0, r1
 800670a:	602b      	str	r3, [r5, #0]
 800670c:	f7fb fd7e 	bl	800220c <_sbrk>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_sbrk_r+0x1a>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_sbrk_r+0x1a>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	200047d4 	.word	0x200047d4

08006720 <__retarget_lock_acquire_recursive>:
 8006720:	4770      	bx	lr

08006722 <__retarget_lock_release_recursive>:
 8006722:	4770      	bx	lr

08006724 <__malloc_lock>:
 8006724:	4801      	ldr	r0, [pc, #4]	; (800672c <__malloc_lock+0x8>)
 8006726:	f7ff bffb 	b.w	8006720 <__retarget_lock_acquire_recursive>
 800672a:	bf00      	nop
 800672c:	200047cc 	.word	0x200047cc

08006730 <__malloc_unlock>:
 8006730:	4801      	ldr	r0, [pc, #4]	; (8006738 <__malloc_unlock+0x8>)
 8006732:	f7ff bff6 	b.w	8006722 <__retarget_lock_release_recursive>
 8006736:	bf00      	nop
 8006738:	200047cc 	.word	0x200047cc

0800673c <_init>:
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	bf00      	nop
 8006740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006742:	bc08      	pop	{r3}
 8006744:	469e      	mov	lr, r3
 8006746:	4770      	bx	lr

08006748 <_fini>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	bf00      	nop
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr
