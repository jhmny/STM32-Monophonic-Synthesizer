
STM32_dax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005410  0800629c  0800629c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6ac  0800b6ac  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6ac  0800b6ac  0001b6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6b4  0800b6b4  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6b4  0800b6b4  0001b6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6b8  0800b6b8  0001b6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800b6bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043a4  200000b4  0800b770  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004458  0800b770  00024458  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cc9  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002722  00000000  00000000  00031dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  000344d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  000352e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000312b  00000000  00000000  00036020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114d3  00000000  00000000  0003914b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7719  00000000  00000000  0004a61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141d37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d78  00000000  00000000  00141d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200000b4 	.word	0x200000b4
 8000214:	00000000 	.word	0x00000000
 8000218:	08006284 	.word	0x08006284

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000b8 	.word	0x200000b8
 8000234:	08006284 	.word	0x08006284

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <add_note_last>:

// Add a note at the end of the list
// ---------------------------------

llist add_note_last(llist list, uint8_t midi_note, uint8_t velocity)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
 800053c:	4613      	mov	r3, r2
 800053e:	70bb      	strb	r3, [r7, #2]
    // Add a new element in memory

    note* new_note = malloc(sizeof(note));
 8000540:	2008      	movs	r0, #8
 8000542:	f005 fdbf 	bl	80060c4 <malloc>
 8000546:	4603      	mov	r3, r0
 8000548:	60bb      	str	r3, [r7, #8]

    // Set the new element values

    new_note->midi_note = midi_note;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	701a      	strb	r2, [r3, #0]
    new_note->velocity = velocity;
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	78ba      	ldrb	r2, [r7, #2]
 8000554:	705a      	strb	r2, [r3, #1]

    // There is no next element

    new_note->nxt = NULL;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]

    // If list is empty, then simply return the newly created element

    if(list == NULL)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <add_note_last+0x36>
    {
        return new_note;
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	e00d      	b.n	8000582 <add_note_last+0x52>

    // Else, walk through the list to find the actual last element

    else
    {
    	note* temp=list;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 800056a:	e002      	b.n	8000572 <add_note_last+0x42>
        {
            temp = temp->nxt;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1f8      	bne.n	800056c <add_note_last+0x3c>
        }
        temp->nxt = new_note;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	605a      	str	r2, [r3, #4]
        return list;
 8000580:	687b      	ldr	r3, [r7, #4]
    }
}
 8000582:	4618      	mov	r0, r3
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <delete_note>:

// Delete a note based on the midi_note
// ------------------------------------

llist delete_note(llist list, uint8_t midi_note)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	70fb      	strb	r3, [r7, #3]
    // If list is empty, then just returns

    if(list == NULL)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d101      	bne.n	80005a0 <delete_note+0x16>
        return NULL;
 800059c:	2300      	movs	r3, #0
 800059e:	e01d      	b.n	80005dc <delete_note+0x52>

    // If the current element is the one to delete

    if(list->midi_note == midi_note)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	78fa      	ldrb	r2, [r7, #3]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d10d      	bne.n	80005c6 <delete_note+0x3c>
    {
        note* tmp = list->nxt;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	60fb      	str	r3, [r7, #12]
        free(list);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f005 fd8f 	bl	80060d4 <free>
        tmp = delete_note(tmp, midi_note);
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	4619      	mov	r1, r3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f7ff ffe5 	bl	800058a <delete_note>
 80005c0:	60f8      	str	r0, [r7, #12]
        return tmp;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	e00a      	b.n	80005dc <delete_note+0x52>

    // Else, the current element is not the one to delete

    else
    {
        list->nxt = delete_note(list->nxt, midi_note);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ffdb 	bl	800058a <delete_note>
 80005d4:	4602      	mov	r2, r0
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	605a      	str	r2, [r3, #4]
        return list;
 80005da:	687b      	ldr	r3, [r7, #4]
    }
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <get_last_note>:

// Get pointer to last note in the list
// ------------------------------------

note* get_last_note(llist list)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

    if(list == NULL)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <get_last_note+0x12>
    {
        return NULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e00a      	b.n	800060c <get_last_note+0x28>
    }

    else
        {
        	note* temp=list;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 80005fa:	e002      	b.n	8000602 <get_last_note+0x1e>
            {
                temp = temp->nxt;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f8      	bne.n	80005fc <get_last_note+0x18>
            }
            return temp;
 800060a:	68fb      	ldr	r3, [r7, #12]
        }
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
	int screenOn;
	note* play_note;
	//for dma counting
	//uint8_t	nb_MIDI_bytes;

	int i = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
	for (i=0; i<AUDIO_BUFFER_LENGTH; i=i+2)
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	e00d      	b.n	8000644 <main+0x2c>
		{
			sendBuff[i] = (uint16_t)((int16_t) 0.0f);			// Left Channel value
 8000628:	4a38      	ldr	r2, [pc, #224]	; (800070c <main+0xf4>)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2100      	movs	r1, #0
 800062e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			sendBuff[i+1] = (uint16_t)((int16_t) 0.0f);		// Right Channel Value
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	3301      	adds	r3, #1
 8000636:	4a35      	ldr	r2, [pc, #212]	; (800070c <main+0xf4>)
 8000638:	2100      	movs	r1, #0
 800063a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=0; i<AUDIO_BUFFER_LENGTH; i=i+2)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	3302      	adds	r3, #2
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800064a:	dbed      	blt.n	8000628 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f001 ff63 	bl	8002516 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f870 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 fa22 	bl	8000a9c <MX_GPIO_Init>
  MX_I2S1_Init();
 8000658:	f000 f95e 	bl	8000918 <MX_I2S1_Init>
  MX_DMA_Init();
 800065c:	f000 f9ec 	bl	8000a38 <MX_DMA_Init>
  MX_UART4_Init();
 8000660:	f000 f9ba 	bl	80009d8 <MX_UART4_Init>
  MX_I2C2_Init();
 8000664:	f000 f918 	bl	8000898 <MX_I2C2_Init>
  MX_SAI1_Init();
 8000668:	f000 f980 	bl	800096c <MX_SAI1_Init>


	SSD1306_UpdateScreen();
	HAL_Delay (2000);
 */
  HAL_SAI_Transmit_DMA(&hsai_BlockA1,(uint16_t *) sendBuff, AUDIO_BUFFER_LENGTH);
 800066c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000670:	4926      	ldr	r1, [pc, #152]	; (800070c <main+0xf4>)
 8000672:	4827      	ldr	r0, [pc, #156]	; (8000710 <main+0xf8>)
 8000674:	f004 fc76 	bl	8004f64 <HAL_SAI_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 8000678:	2240      	movs	r2, #64	; 0x40
 800067a:	4926      	ldr	r1, [pc, #152]	; (8000714 <main+0xfc>)
 800067c:	4826      	ldr	r0, [pc, #152]	; (8000718 <main+0x100>)
 800067e:	f004 ff86 	bl	800558e <HAL_UART_Receive_DMA>
	while (1)
	{

		// HAL_I2S_Transmit(&hi2s1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);

		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 8000682:	f000 fa91 	bl	8000ba8 <MIDI_GetNbNewBytes>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <main+0x104>)
 800068c:	701a      	strb	r2, [r3, #0]


		if(nb_MIDI_bytes){
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <main+0x104>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00f      	beq.n	80006b6 <main+0x9e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	4821      	ldr	r0, [pc, #132]	; (8000720 <main+0x108>)
 800069c:	f002 fdce 	bl	800323c <HAL_GPIO_WritePin>
			processBuffer(UART4_rxBuffer,nb_MIDI_bytes);
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <main+0x104>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	481b      	ldr	r0, [pc, #108]	; (8000714 <main+0xfc>)
 80006a8:	f000 faac 	bl	8000c04 <processBuffer>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	481b      	ldr	r0, [pc, #108]	; (8000720 <main+0x108>)
 80006b2:	f002 fdc3 	bl	800323c <HAL_GPIO_WritePin>
		}

		play_note = get_last_note(note_list);
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <main+0x10c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff92 	bl	80005e4 <get_last_note>
 80006c0:	6078      	str	r0, [r7, #4]

		if (play_note == NULL){ //no notes in the list
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d103      	bne.n	80006d0 <main+0xb8>
			//pitch = 0;
			trig = 0;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <main+0x110>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	e010      	b.n	80006f2 <main+0xda>
		}
		else {
			//set the pitch and trigger the notes
			pitch = pitch_table[(play_note->midi_note)-18];
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	3b12      	subs	r3, #18
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <main+0x114>)
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a14      	ldr	r2, [pc, #80]	; (8000730 <main+0x118>)
 80006e0:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <main+0x108>)
 80006e8:	f002 fda8 	bl	800323c <HAL_GPIO_WritePin>
			trig = 1;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <main+0x110>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
		}
		//test code
		if ( trig == 1)
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <main+0x110>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d005      	beq.n	8000706 <main+0xee>
		{
			//HAL_SAI_Transmit(&hsai_BlockA1, tone_c, sizeof(tone_c) / sizeof(tone_c[0]), 1000);
			if (screenOn == 0)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1c0      	bne.n	8000682 <main+0x6a>
			{
				//SSD1306_Note0();
				screenOn = 1;
 8000700:	2301      	movs	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	e7bd      	b.n	8000682 <main+0x6a>
			}
		}
		else
		{
			screenOn = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 800070a:	e7ba      	b.n	8000682 <main+0x6a>
 800070c:	20000140 	.word	0x20000140
 8000710:	200043b8 	.word	0x200043b8
 8000714:	20004140 	.word	0x20004140
 8000718:	20004330 	.word	0x20004330
 800071c:	2000443e 	.word	0x2000443e
 8000720:	40020400 	.word	0x40020400
 8000724:	2000013c 	.word	0x2000013c
 8000728:	20004251 	.word	0x20004251
 800072c:	0800b29c 	.word	0x0800b29c
 8000730:	200000e0 	.word	0x200000e0

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b0b8      	sub	sp, #224	; 0xe0
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800073e:	2234      	movs	r2, #52	; 0x34
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fcce 	bl	80060e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2290      	movs	r2, #144	; 0x90
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f005 fcbf 	bl	80060e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b49      	ldr	r3, [pc, #292]	; (800088c <SystemClock_Config+0x158>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	4a48      	ldr	r2, [pc, #288]	; (800088c <SystemClock_Config+0x158>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	6413      	str	r3, [r2, #64]	; 0x40
 8000772:	4b46      	ldr	r3, [pc, #280]	; (800088c <SystemClock_Config+0x158>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800077e:	4b44      	ldr	r3, [pc, #272]	; (8000890 <SystemClock_Config+0x15c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000786:	4a42      	ldr	r2, [pc, #264]	; (8000890 <SystemClock_Config+0x15c>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	4b40      	ldr	r3, [pc, #256]	; (8000890 <SystemClock_Config+0x15c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079a:	2302      	movs	r3, #2
 800079c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a6:	2310      	movs	r3, #16
 80007a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007be:	2360      	movs	r3, #96	; 0x60
 80007c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fff2 	bl	80037c4 <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007e6:	f001 fc2b 	bl	8002040 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ea:	f002 ff9b 	bl	8003724 <HAL_PWREx_EnableOverDrive>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f4:	f001 fc24 	bl	8002040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800081a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800081e:	2103      	movs	r1, #3
 8000820:	4618      	mov	r0, r3
 8000822:	f003 fa7d 	bl	8003d20 <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800082c:	f001 fc08 	bl	8002040 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SAI1
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <SystemClock_Config+0x160>)
 8000832:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000834:	2360      	movs	r3, #96	; 0x60
 8000836:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000844:	23c0      	movs	r3, #192	; 0xc0
 8000846:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 800084c:	2306      	movs	r3, #6
 800084e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000854:	2301      	movs	r3, #1
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000858:	2301      	movs	r3, #1
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800085c:	2300      	movs	r3, #0
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000860:	2300      	movs	r3, #0
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000864:	2300      	movs	r3, #0
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000868:	2300      	movs	r3, #0
 800086a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800086c:	2300      	movs	r3, #0
 800086e:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	4618      	mov	r0, r3
 8000876:	f003 fc29 	bl	80040cc <HAL_RCCEx_PeriphCLKConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8000880:	f001 fbde 	bl	8002040 <Error_Handler>
  }
}
 8000884:	bf00      	nop
 8000886:	37e0      	adds	r7, #224	; 0xe0
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000
 8000894:	00088201 	.word	0x00088201

08000898 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_I2C2_Init+0x74>)
 800089e:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <MX_I2C2_Init+0x78>)
 80008a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_I2C2_Init+0x74>)
 80008a4:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <MX_I2C2_Init+0x7c>)
 80008a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_I2C2_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_I2C2_Init+0x74>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_I2C2_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_I2C2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_I2C2_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_I2C2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_I2C2_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008d2:	480e      	ldr	r0, [pc, #56]	; (800090c <MX_I2C2_Init+0x74>)
 80008d4:	f002 fccc 	bl	8003270 <HAL_I2C_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008de:	f001 fbaf 	bl	8002040 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4809      	ldr	r0, [pc, #36]	; (800090c <MX_I2C2_Init+0x74>)
 80008e6:	f002 fd53 	bl	8003390 <HAL_I2CEx_ConfigAnalogFilter>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f0:	f001 fba6 	bl	8002040 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_I2C2_Init+0x74>)
 80008f8:	f002 fd95 	bl	8003426 <HAL_I2CEx_ConfigDigitalFilter>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000902:	f001 fb9d 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20004204 	.word	0x20004204
 8000910:	40005800 	.word	0x40005800
 8000914:	0090194b 	.word	0x0090194b

08000918 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_I2S1_Init+0x4c>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MX_I2S1_Init+0x50>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_I2S1_Init+0x4c>)
 8000924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000928:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_I2S1_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_I2S1_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_I2S1_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_I2S1_Init+0x4c>)
 800093e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000942:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_I2S1_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_I2S1_Init+0x4c>)
 800094c:	2202      	movs	r2, #2
 800094e:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_I2S1_Init+0x4c>)
 8000952:	f002 fdb5 	bl	80034c0 <HAL_I2S_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 800095c:	f001 fb70 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200042f0 	.word	0x200042f0
 8000968:	40013000 	.word	0x40013000

0800096c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_SAI1_Init+0x64>)
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <MX_SAI1_Init+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_SAI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_SAI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_SAI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_SAI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_SAI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_SAI1_Init+0x64>)
 8000996:	f64a 4244 	movw	r2, #44100	; 0xac44
 800099a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_SAI1_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_SAI1_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_SAI1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_SAI1_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80009b4:	2302      	movs	r3, #2
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_SAI1_Init+0x64>)
 80009bc:	f004 f920 	bl	8004c00 <HAL_SAI_InitProtocol>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80009c6:	f001 fb3b 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200043b8 	.word	0x200043b8
 80009d4:	40015804 	.word	0x40015804

080009d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_UART4_Init+0x58>)
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <MX_UART4_Init+0x5c>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_UART4_Init+0x58>)
 80009e4:	f647 2212 	movw	r2, #31250	; 0x7a12
 80009e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_UART4_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_UART4_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_UART4_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_UART4_Init+0x58>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_UART4_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_UART4_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_UART4_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_UART4_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_UART4_Init+0x58>)
 8000a1c:	f004 fd69 	bl	80054f2 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a26:	f001 fb0b 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20004330 	.word	0x20004330
 8000a34:	40004c00 	.word	0x40004c00

08000a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_DMA_Init+0x60>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <MX_DMA_Init+0x60>)
 8000a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_DMA_Init+0x60>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_DMA_Init+0x60>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <MX_DMA_Init+0x60>)
 8000a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_DMA_Init+0x60>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	200d      	movs	r0, #13
 8000a74:	f001 fe87 	bl	8002786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a78:	200d      	movs	r0, #13
 8000a7a:	f001 fea0 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	2039      	movs	r0, #57	; 0x39
 8000a84:	f001 fe7f 	bl	8002786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a88:	2039      	movs	r0, #57	; 0x39
 8000a8a:	f001 fe98 	bl	80027be <HAL_NVIC_EnableIRQ>

}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab2:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000ab8:	f043 0310 	orr.w	r3, r3, #16
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000ad0:	f043 0320 	orr.w	r3, r3, #32
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0320 	and.w	r3, r3, #32
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_GPIO_Init+0xbc>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	480b      	ldr	r0, [pc, #44]	; (8000b5c <MX_GPIO_Init+0xc0>)
 8000b30:	f002 fb84 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_GPIO_Init+0xc0>)
 8000b4c:	f002 f9ca 	bl	8002ee4 <HAL_GPIO_Init>

}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	; 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020400 	.word	0x40020400

08000b60 <HAL_SAI_TxHalfCpltCallback>:
	HAL_I2S_Receive(&hi2s1, sendBuff, 8, 100);
	//HAL_I2S_(hi2s1, sendBuff, 16, 100);
	HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, 8);
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	//make_sound(0);
	calcSynth(0);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f000 fd0b 	bl	8001584 <calcSynth>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
	//make_sound(AUDIO_BUFFER_LENGTH_DIV2);
	calcSynth(AUDIO_BUFFER_LENGTH_DIV2);
 8000b7e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b82:	f000 fcff 	bl	8001584 <calcSynth>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <DMA_GetCurrDataCounter>:
//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);

//}

uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	b29b      	uxth	r3, r3
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <MIDI_GetNbNewBytes>:


uint8_t MIDI_GetNbNewBytes()
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	static uint16_t dma_cpt_prev = MIDI_BUFFER_LENGTH;
	uint16_t dma_cpt, n = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	80fb      	strh	r3, [r7, #6]
	// Get current DMA counter
	dma_cpt = DMA_GetCurrDataCounter(DMA1_Stream2);
 8000bb2:	4812      	ldr	r0, [pc, #72]	; (8000bfc <MIDI_GetNbNewBytes+0x54>)
 8000bb4:	f7ff ffeb 	bl	8000b8e <DMA_GetCurrDataCounter>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	80bb      	strh	r3, [r7, #4]

	// If DMA counter has changed, compute the number of received MIDI bytes
	if (dma_cpt != dma_cpt_prev)
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MIDI_GetNbNewBytes+0x58>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	88ba      	ldrh	r2, [r7, #4]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d014      	beq.n	8000bf0 <MIDI_GetNbNewBytes+0x48>
	{
		if (dma_cpt < dma_cpt_prev)
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MIDI_GetNbNewBytes+0x58>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	88ba      	ldrh	r2, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d205      	bcs.n	8000bdc <MIDI_GetNbNewBytes+0x34>
		{
			n = dma_cpt_prev - dma_cpt;
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MIDI_GetNbNewBytes+0x58>)
 8000bd2:	881a      	ldrh	r2, [r3, #0]
 8000bd4:	88bb      	ldrh	r3, [r7, #4]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	e006      	b.n	8000bea <MIDI_GetNbNewBytes+0x42>
		}
		else
		{
			n = dma_cpt_prev - (dma_cpt - MIDI_BUFFER_LENGTH);
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MIDI_GetNbNewBytes+0x58>)
 8000bde:	881a      	ldrh	r2, [r3, #0]
 8000be0:	88bb      	ldrh	r3, [r7, #4]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	3340      	adds	r3, #64	; 0x40
 8000be8:	80fb      	strh	r3, [r7, #6]
		}
		// Store the new DMA counter
		dma_cpt_prev = dma_cpt;
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <MIDI_GetNbNewBytes+0x58>)
 8000bec:	88bb      	ldrh	r3, [r7, #4]
 8000bee:	8013      	strh	r3, [r2, #0]
	}
	return (n);
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	b2db      	uxtb	r3, r3
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40026040 	.word	0x40026040
 8000c00:	20000040 	.word	0x20000040

08000c04 <processBuffer>:

//Author: Synthol Project, Adjusted to fit projec
void processBuffer(uint8_t* MIDI_buffer, uint8_t nb_MIDI_bytes)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
	__IO uint32_t received_char;

	static uint8_t i = 0;
	static uint8_t state = 0;

	while (nb_MIDI_bytes != 0)
 8000c10:	bf00      	nop
 8000c12:	e227      	b.n	8001064 <processBuffer+0x460>
	{
		//reading a byte from the buffer
		received_char = UART4_rxBuffer[i];
 8000c14:	4ba8      	ldr	r3, [pc, #672]	; (8000eb8 <processBuffer+0x2b4>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4ba8      	ldr	r3, [pc, #672]	; (8000ebc <processBuffer+0x2b8>)
 8000c1c:	5c9b      	ldrb	r3, [r3, r2]
 8000c1e:	60fb      	str	r3, [r7, #12]
		switch (state)
 8000c20:	4ba7      	ldr	r3, [pc, #668]	; (8000ec0 <processBuffer+0x2bc>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b29      	cmp	r3, #41	; 0x29
 8000c26:	f200 821d 	bhi.w	8001064 <processBuffer+0x460>
 8000c2a:	a201      	add	r2, pc, #4	; (adr r2, 8000c30 <processBuffer+0x2c>)
 8000c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c30:	08000cd9 	.word	0x08000cd9
 8000c34:	08001065 	.word	0x08001065
 8000c38:	08001065 	.word	0x08001065
 8000c3c:	08001065 	.word	0x08001065
 8000c40:	08001065 	.word	0x08001065
 8000c44:	08001065 	.word	0x08001065
 8000c48:	08001065 	.word	0x08001065
 8000c4c:	08001065 	.word	0x08001065
 8000c50:	08001065 	.word	0x08001065
 8000c54:	08001065 	.word	0x08001065
 8000c58:	08000daf 	.word	0x08000daf
 8000c5c:	08000df7 	.word	0x08000df7
 8000c60:	08001065 	.word	0x08001065
 8000c64:	08001065 	.word	0x08001065
 8000c68:	08001065 	.word	0x08001065
 8000c6c:	08001065 	.word	0x08001065
 8000c70:	08001065 	.word	0x08001065
 8000c74:	08001065 	.word	0x08001065
 8000c78:	08001065 	.word	0x08001065
 8000c7c:	08001065 	.word	0x08001065
 8000c80:	08000e6f 	.word	0x08000e6f
 8000c84:	08000edd 	.word	0x08000edd
 8000c88:	08001065 	.word	0x08001065
 8000c8c:	08001065 	.word	0x08001065
 8000c90:	08001065 	.word	0x08001065
 8000c94:	08001065 	.word	0x08001065
 8000c98:	08001065 	.word	0x08001065
 8000c9c:	08001065 	.word	0x08001065
 8000ca0:	08001065 	.word	0x08001065
 8000ca4:	08001065 	.word	0x08001065
 8000ca8:	08000f2d 	.word	0x08000f2d
 8000cac:	08000f6d 	.word	0x08000f6d
 8000cb0:	08001065 	.word	0x08001065
 8000cb4:	08001065 	.word	0x08001065
 8000cb8:	08001065 	.word	0x08001065
 8000cbc:	08001065 	.word	0x08001065
 8000cc0:	08001065 	.word	0x08001065
 8000cc4:	08001065 	.word	0x08001065
 8000cc8:	08001065 	.word	0x08001065
 8000ccc:	08001065 	.word	0x08001065
 8000cd0:	08000fa3 	.word	0x08000fa3
 8000cd4:	08000fe3 	.word	0x08000fe3
		{
		// State 0 = Starting point for a new MIDI message
		case 0:
		{
			switch (received_char & 0xF0)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cde:	2be0      	cmp	r3, #224	; 0xe0
 8000ce0:	d048      	beq.n	8000d74 <processBuffer+0x170>
 8000ce2:	2be0      	cmp	r3, #224	; 0xe0
 8000ce4:	d85b      	bhi.n	8000d9e <processBuffer+0x19a>
 8000ce6:	2bb0      	cmp	r3, #176	; 0xb0
 8000ce8:	d02f      	beq.n	8000d4a <processBuffer+0x146>
 8000cea:	2bb0      	cmp	r3, #176	; 0xb0
 8000cec:	d857      	bhi.n	8000d9e <processBuffer+0x19a>
 8000cee:	2b80      	cmp	r3, #128	; 0x80
 8000cf0:	d016      	beq.n	8000d20 <processBuffer+0x11c>
 8000cf2:	2b90      	cmp	r3, #144	; 0x90
 8000cf4:	d153      	bne.n	8000d9e <processBuffer+0x19a>
			{
			case 0x90: // Note ON message
			{
				state = 10; // Next state is 10
 8000cf6:	4b72      	ldr	r3, [pc, #456]	; (8000ec0 <processBuffer+0x2bc>)
 8000cf8:	220a      	movs	r2, #10
 8000cfa:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000cfc:	4b6e      	ldr	r3, [pc, #440]	; (8000eb8 <processBuffer+0x2b4>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b3f      	cmp	r3, #63	; 0x3f
 8000d02:	d103      	bne.n	8000d0c <processBuffer+0x108>
					i = 0;				// Move to next MIDI byte
 8000d04:	4b6c      	ldr	r3, [pc, #432]	; (8000eb8 <processBuffer+0x2b4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	e005      	b.n	8000d18 <processBuffer+0x114>
				}
				else {
					i++;
 8000d0c:	4b6a      	ldr	r3, [pc, #424]	; (8000eb8 <processBuffer+0x2b4>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b68      	ldr	r3, [pc, #416]	; (8000eb8 <processBuffer+0x2b4>)
 8000d16:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	70fb      	strb	r3, [r7, #3]
				break;
 8000d1e:	e045      	b.n	8000dac <processBuffer+0x1a8>
			}
			case 0x80: // Note OFF message
			{
				state = 20; // Next state is 20
 8000d20:	4b67      	ldr	r3, [pc, #412]	; (8000ec0 <processBuffer+0x2bc>)
 8000d22:	2214      	movs	r2, #20
 8000d24:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d26:	4b64      	ldr	r3, [pc, #400]	; (8000eb8 <processBuffer+0x2b4>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d2c:	d103      	bne.n	8000d36 <processBuffer+0x132>
					i = 0;				// Move to next MIDI byte
 8000d2e:	4b62      	ldr	r3, [pc, #392]	; (8000eb8 <processBuffer+0x2b4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	e005      	b.n	8000d42 <processBuffer+0x13e>
				}
				else {
					i++;
 8000d36:	4b60      	ldr	r3, [pc, #384]	; (8000eb8 <processBuffer+0x2b4>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b5e      	ldr	r3, [pc, #376]	; (8000eb8 <processBuffer+0x2b4>)
 8000d40:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	70fb      	strb	r3, [r7, #3]
				break;
 8000d48:	e030      	b.n	8000dac <processBuffer+0x1a8>
			}
			case 0xB0: // CC message
			{
				state = 30; // Next state is 30
 8000d4a:	4b5d      	ldr	r3, [pc, #372]	; (8000ec0 <processBuffer+0x2bc>)
 8000d4c:	221e      	movs	r2, #30
 8000d4e:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d50:	4b59      	ldr	r3, [pc, #356]	; (8000eb8 <processBuffer+0x2b4>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b3f      	cmp	r3, #63	; 0x3f
 8000d56:	d103      	bne.n	8000d60 <processBuffer+0x15c>
					i = 0;				// Move to next MIDI byte
 8000d58:	4b57      	ldr	r3, [pc, #348]	; (8000eb8 <processBuffer+0x2b4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e005      	b.n	8000d6c <processBuffer+0x168>
				}
				else {
					i++;
 8000d60:	4b55      	ldr	r3, [pc, #340]	; (8000eb8 <processBuffer+0x2b4>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b53      	ldr	r3, [pc, #332]	; (8000eb8 <processBuffer+0x2b4>)
 8000d6a:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	70fb      	strb	r3, [r7, #3]
				break;
 8000d72:	e01b      	b.n	8000dac <processBuffer+0x1a8>
			}

			case 0xE0: // Pitch Bend message
			{
				state = 40; // Next state is 40
 8000d74:	4b52      	ldr	r3, [pc, #328]	; (8000ec0 <processBuffer+0x2bc>)
 8000d76:	2228      	movs	r2, #40	; 0x28
 8000d78:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d7a:	4b4f      	ldr	r3, [pc, #316]	; (8000eb8 <processBuffer+0x2b4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b3f      	cmp	r3, #63	; 0x3f
 8000d80:	d103      	bne.n	8000d8a <processBuffer+0x186>
					i = 0;				// Move to next MIDI byte
 8000d82:	4b4d      	ldr	r3, [pc, #308]	; (8000eb8 <processBuffer+0x2b4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e005      	b.n	8000d96 <processBuffer+0x192>
				}
				else {
					i++;
 8000d8a:	4b4b      	ldr	r3, [pc, #300]	; (8000eb8 <processBuffer+0x2b4>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b49      	ldr	r3, [pc, #292]	; (8000eb8 <processBuffer+0x2b4>)
 8000d94:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	70fb      	strb	r3, [r7, #3]
				break;
 8000d9c:	e006      	b.n	8000dac <processBuffer+0x1a8>
			}
			default: // Other type of message, move to next byte but stays in state 0
			{
				//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
				i++;
 8000d9e:	4b46      	ldr	r3, [pc, #280]	; (8000eb8 <processBuffer+0x2b4>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4b44      	ldr	r3, [pc, #272]	; (8000eb8 <processBuffer+0x2b4>)
 8000da8:	701a      	strb	r2, [r3, #0]
				break;
 8000daa:	bf00      	nop
			}
			}
			break;
 8000dac:	e15a      	b.n	8001064 <processBuffer+0x460>
		}
		// State 10 & 11 : Note ON command
		case 10:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2b7f      	cmp	r3, #127	; 0x7f
 8000db2:	d903      	bls.n	8000dbc <processBuffer+0x1b8>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000db4:	4b42      	ldr	r3, [pc, #264]	; (8000ec0 <processBuffer+0x2bc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e153      	b.n	8001064 <processBuffer+0x460>
			}
			else
			{ // Save MIDI note
				ctrl = key = received_char;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b40      	ldr	r3, [pc, #256]	; (8000ec4 <processBuffer+0x2c0>)
 8000dc2:	701a      	strb	r2, [r3, #0]
 8000dc4:	4b3f      	ldr	r3, [pc, #252]	; (8000ec4 <processBuffer+0x2c0>)
 8000dc6:	781a      	ldrb	r2, [r3, #0]
 8000dc8:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <processBuffer+0x2c4>)
 8000dca:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000dcc:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <processBuffer+0x2b4>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b3f      	cmp	r3, #63	; 0x3f
 8000dd2:	d103      	bne.n	8000ddc <processBuffer+0x1d8>
					i = 0;				// Move to next MIDI byte
 8000dd4:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <processBuffer+0x2b4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e005      	b.n	8000de8 <processBuffer+0x1e4>
				}
				else {
					i++;
 8000ddc:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <processBuffer+0x2b4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <processBuffer+0x2b4>)
 8000de6:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	70fb      	strb	r3, [r7, #3]
				state = 11; // Next state is 11
 8000dee:	4b34      	ldr	r3, [pc, #208]	; (8000ec0 <processBuffer+0x2bc>)
 8000df0:	220b      	movs	r2, #11
 8000df2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000df4:	e136      	b.n	8001064 <processBuffer+0x460>
		}
		case 11:
		{
			data = velocity = received_char; //will only ever get velocity in this section i think
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b34      	ldr	r3, [pc, #208]	; (8000ecc <processBuffer+0x2c8>)
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <processBuffer+0x2c8>)
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	4b33      	ldr	r3, [pc, #204]	; (8000ed0 <processBuffer+0x2cc>)
 8000e04:	701a      	strb	r2, [r3, #0]

			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e06:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <processBuffer+0x2b4>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e0c:	d103      	bne.n	8000e16 <processBuffer+0x212>
				i = 0;				// Move to next MIDI byte
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <processBuffer+0x2b4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	e005      	b.n	8000e22 <processBuffer+0x21e>
			}
			else {
				i++;
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <processBuffer+0x2b4>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <processBuffer+0x2b4>)
 8000e20:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	70fb      	strb	r3, [r7, #3]

			state = 10; // Next state is 10
 8000e28:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <processBuffer+0x2bc>)
 8000e2a:	220a      	movs	r2, #10
 8000e2c:	701a      	strb	r2, [r3, #0]

			if (velocity > 0)
 8000e2e:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <processBuffer+0x2c8>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00f      	beq.n	8000e56 <processBuffer+0x252>
			{

				note_list = add_note_last(note_list, key, velocity);
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <processBuffer+0x2d0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <processBuffer+0x2c0>)
 8000e3c:	7811      	ldrb	r1, [r2, #0]
 8000e3e:	4a23      	ldr	r2, [pc, #140]	; (8000ecc <processBuffer+0x2c8>)
 8000e40:	7812      	ldrb	r2, [r2, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fb74 	bl	8000530 <add_note_last>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a22      	ldr	r2, [pc, #136]	; (8000ed4 <processBuffer+0x2d0>)
 8000e4c:	6013      	str	r3, [r2, #0]

				newNote = 1;
 8000e4e:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <processBuffer+0x2d4>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e106      	b.n	8001064 <processBuffer+0x460>

			}
			else
			{
				//find the key and deletes it
				note_list = delete_note(note_list, key);
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <processBuffer+0x2d0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a1a      	ldr	r2, [pc, #104]	; (8000ec4 <processBuffer+0x2c0>)
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fb92 	bl	800058a <delete_note>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a1a      	ldr	r2, [pc, #104]	; (8000ed4 <processBuffer+0x2d0>)
 8000e6a:	6013      	str	r3, [r2, #0]
			}
			break;
 8000e6c:	e0fa      	b.n	8001064 <processBuffer+0x460>
		}
		// State 20 & 21 : Note OFF command
		case 20:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b7f      	cmp	r3, #127	; 0x7f
 8000e72:	d903      	bls.n	8000e7c <processBuffer+0x278>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <processBuffer+0x2bc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e0f3      	b.n	8001064 <processBuffer+0x460>
			}

			else
			{
				ctrl = key = received_char; // Save MIDI note
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <processBuffer+0x2c0>)
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <processBuffer+0x2c0>)
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <processBuffer+0x2c4>)
 8000e8a:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <processBuffer+0x2b4>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b3f      	cmp	r3, #63	; 0x3f
 8000e92:	d103      	bne.n	8000e9c <processBuffer+0x298>
					i = 0;				// Move to next MIDI byte
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <processBuffer+0x2b4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	e005      	b.n	8000ea8 <processBuffer+0x2a4>
				}
				else {
					i++;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <processBuffer+0x2b4>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <processBuffer+0x2b4>)
 8000ea6:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	70fb      	strb	r3, [r7, #3]

				state = 21; // Next state is 21
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <processBuffer+0x2bc>)
 8000eb0:	2215      	movs	r2, #21
 8000eb2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000eb4:	e0d6      	b.n	8001064 <processBuffer+0x460>
 8000eb6:	bf00      	nop
 8000eb8:	20004180 	.word	0x20004180
 8000ebc:	20004140 	.word	0x20004140
 8000ec0:	20004181 	.word	0x20004181
 8000ec4:	200042ea 	.word	0x200042ea
 8000ec8:	20004250 	.word	0x20004250
 8000ecc:	200042e6 	.word	0x200042e6
 8000ed0:	200042e9 	.word	0x200042e9
 8000ed4:	2000013c 	.word	0x2000013c
 8000ed8:	2000425d 	.word	0x2000425d
		}
		case 21:
		{
			velocity = data = received_char; // Save MIDI velocity
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b65      	ldr	r3, [pc, #404]	; (8001078 <processBuffer+0x474>)
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	4b64      	ldr	r3, [pc, #400]	; (8001078 <processBuffer+0x474>)
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	4b64      	ldr	r3, [pc, #400]	; (800107c <processBuffer+0x478>)
 8000eea:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000eec:	4b64      	ldr	r3, [pc, #400]	; (8001080 <processBuffer+0x47c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ef2:	d103      	bne.n	8000efc <processBuffer+0x2f8>
				i = 0;				// Move to next MIDI byte
 8000ef4:	4b62      	ldr	r3, [pc, #392]	; (8001080 <processBuffer+0x47c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	e005      	b.n	8000f08 <processBuffer+0x304>
			}
			else {
				i++;
 8000efc:	4b60      	ldr	r3, [pc, #384]	; (8001080 <processBuffer+0x47c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b5e      	ldr	r3, [pc, #376]	; (8001080 <processBuffer+0x47c>)
 8000f06:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	70fb      	strb	r3, [r7, #3]

			state = 20; // Next state is 20
 8000f0e:	4b5d      	ldr	r3, [pc, #372]	; (8001084 <processBuffer+0x480>)
 8000f10:	2214      	movs	r2, #20
 8000f12:	701a      	strb	r2, [r3, #0]

			note_list = delete_note(note_list, key);
 8000f14:	4b5c      	ldr	r3, [pc, #368]	; (8001088 <processBuffer+0x484>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a5c      	ldr	r2, [pc, #368]	; (800108c <processBuffer+0x488>)
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fb33 	bl	800058a <delete_note>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a58      	ldr	r2, [pc, #352]	; (8001088 <processBuffer+0x484>)
 8000f28:	6013      	str	r3, [r2, #0]
			break;
 8000f2a:	e09b      	b.n	8001064 <processBuffer+0x460>
		}
		// State 30 & 31 : CC command
		case 30:
		{
			if (received_char > 0x7F) // If the following byte is not a CC number
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f30:	d903      	bls.n	8000f3a <processBuffer+0x336>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000f32:	4b54      	ldr	r3, [pc, #336]	; (8001084 <processBuffer+0x480>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	e094      	b.n	8001064 <processBuffer+0x460>
			}
			else
			{
				paramNum = received_char; // Save MIDI CC number
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b54      	ldr	r3, [pc, #336]	; (8001090 <processBuffer+0x48c>)
 8000f40:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f42:	4b4f      	ldr	r3, [pc, #316]	; (8001080 <processBuffer+0x47c>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b3f      	cmp	r3, #63	; 0x3f
 8000f48:	d103      	bne.n	8000f52 <processBuffer+0x34e>
					i = 0;				// Move to next MIDI byte
 8000f4a:	4b4d      	ldr	r3, [pc, #308]	; (8001080 <processBuffer+0x47c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e005      	b.n	8000f5e <processBuffer+0x35a>
				}
				else {
					i++;
 8000f52:	4b4b      	ldr	r3, [pc, #300]	; (8001080 <processBuffer+0x47c>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b49      	ldr	r3, [pc, #292]	; (8001080 <processBuffer+0x47c>)
 8000f5c:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	70fb      	strb	r3, [r7, #3]
				state = 31; // Next state is 31
 8000f64:	4b47      	ldr	r3, [pc, #284]	; (8001084 <processBuffer+0x480>)
 8000f66:	221f      	movs	r2, #31
 8000f68:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f6a:	e07b      	b.n	8001064 <processBuffer+0x460>
		}
		case 31:
		{
			paramVal = received_char; // Save MIDI velocity
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b48      	ldr	r3, [pc, #288]	; (8001094 <processBuffer+0x490>)
 8000f72:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f74:	4b42      	ldr	r3, [pc, #264]	; (8001080 <processBuffer+0x47c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b3f      	cmp	r3, #63	; 0x3f
 8000f7a:	d103      	bne.n	8000f84 <processBuffer+0x380>
				i = 0;				// Move to next MIDI byte
 8000f7c:	4b40      	ldr	r3, [pc, #256]	; (8001080 <processBuffer+0x47c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	e005      	b.n	8000f90 <processBuffer+0x38c>
			}
			else {
				i++;
 8000f84:	4b3e      	ldr	r3, [pc, #248]	; (8001080 <processBuffer+0x47c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b3c      	ldr	r3, [pc, #240]	; (8001080 <processBuffer+0x47c>)
 8000f8e:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	70fb      	strb	r3, [r7, #3]
			state = 30;
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <processBuffer+0x480>)
 8000f98:	221e      	movs	r2, #30
 8000f9a:	701a      	strb	r2, [r3, #0]

			setParams();
 8000f9c:	f000 f88a 	bl	80010b4 <setParams>

			break;
 8000fa0:	e060      	b.n	8001064 <processBuffer+0x460>
		}
		// State 40 & 41 : Pitch Bend message
		case 40:
		{
			if (received_char > 0x7F) // If following byte is note a PB value
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa6:	d903      	bls.n	8000fb0 <processBuffer+0x3ac>
			{
				state = 0; // Return to state 0
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <processBuffer+0x480>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	e059      	b.n	8001064 <processBuffer+0x460>
			}
			else
			{
				pitchBend1 = received_char; // Save MIDI CC number
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b38      	ldr	r3, [pc, #224]	; (8001098 <processBuffer+0x494>)
 8000fb6:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <processBuffer+0x47c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b3f      	cmp	r3, #63	; 0x3f
 8000fbe:	d103      	bne.n	8000fc8 <processBuffer+0x3c4>
					i = 0;				// Move to next MIDI byte
 8000fc0:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <processBuffer+0x47c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	e005      	b.n	8000fd4 <processBuffer+0x3d0>
				}
				else {
					i++;
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <processBuffer+0x47c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <processBuffer+0x47c>)
 8000fd2:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	70fb      	strb	r3, [r7, #3]
				state = 41; // Next state is 41
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <processBuffer+0x480>)
 8000fdc:	2229      	movs	r2, #41	; 0x29
 8000fde:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000fe0:	e040      	b.n	8001064 <processBuffer+0x460>
		}
		case 41:
		{
			pitchBend2 = received_char; // Save MIDI velocity
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	; (800109c <processBuffer+0x498>)
 8000fe8:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000fea:	4b25      	ldr	r3, [pc, #148]	; (8001080 <processBuffer+0x47c>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b3f      	cmp	r3, #63	; 0x3f
 8000ff0:	d103      	bne.n	8000ffa <processBuffer+0x3f6>
				i = 0;				// Move to next MIDI byte
 8000ff2:	4b23      	ldr	r3, [pc, #140]	; (8001080 <processBuffer+0x47c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	e005      	b.n	8001006 <processBuffer+0x402>
			}
			else {
				i++;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <processBuffer+0x47c>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <processBuffer+0x47c>)
 8001004:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	3b01      	subs	r3, #1
 800100a:	70fb      	strb	r3, [r7, #3]

			pitchBendWheel = (uint8_t) pitchBend2;
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <processBuffer+0x498>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b29a      	uxth	r2, r3
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <processBuffer+0x49c>)
 8001014:	801a      	strh	r2, [r3, #0]
			pitchBendWheel <<= 7;
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <processBuffer+0x49c>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	01db      	lsls	r3, r3, #7
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <processBuffer+0x49c>)
 8001020:	801a      	strh	r2, [r3, #0]
			pitchBendWheel = (uint8_t) pitchBend1;
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <processBuffer+0x494>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <processBuffer+0x49c>)
 800102a:	801a      	strh	r2, [r3, #0]

			det = pitch * 2.0f * ( (float_t)pitchBendWheel - 8192.0f) / (4096.0f * 12.0f);
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <processBuffer+0x4a0>)
 800102e:	edd3 7a00 	vldr	s15, [r3]
 8001032:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <processBuffer+0x49c>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001042:	eddf 6a19 	vldr	s13, [pc, #100]	; 80010a8 <processBuffer+0x4a4>
 8001046:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800104a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104e:	eddf 6a17 	vldr	s13, [pc, #92]	; 80010ac <processBuffer+0x4a8>
 8001052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <processBuffer+0x4ac>)
 8001058:	edc3 7a00 	vstr	s15, [r3]
			state = 40; // Next state is 00
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <processBuffer+0x480>)
 800105e:	2228      	movs	r2, #40	; 0x28
 8001060:	701a      	strb	r2, [r3, #0]
			break;
 8001062:	bf00      	nop
	while (nb_MIDI_bytes != 0)
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f47f add4 	bne.w	8000c14 <processBuffer+0x10>
		}
	}
	}
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200042e9 	.word	0x200042e9
 800107c:	200042e6 	.word	0x200042e6
 8001080:	20004180 	.word	0x20004180
 8001084:	20004181 	.word	0x20004181
 8001088:	2000013c 	.word	0x2000013c
 800108c:	200042ea 	.word	0x200042ea
 8001090:	200042c2 	.word	0x200042c2
 8001094:	20004252 	.word	0x20004252
 8001098:	20004254 	.word	0x20004254
 800109c:	200042e7 	.word	0x200042e7
 80010a0:	20004440 	.word	0x20004440
 80010a4:	200000e0 	.word	0x200000e0
 80010a8:	46000000 	.word	0x46000000
 80010ac:	47400000 	.word	0x47400000
 80010b0:	20000118 	.word	0x20000118

080010b4 <setParams>:

void setParams(){
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	switch (paramNum){
 80010b8:	4bc9      	ldr	r3, [pc, #804]	; (80013e0 <setParams+0x32c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3b10      	subs	r3, #16
 80010be:	2b4d      	cmp	r3, #77	; 0x4d
 80010c0:	f200 822e 	bhi.w	8001520 <setParams+0x46c>
 80010c4:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <setParams+0x18>)
 80010c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ca:	bf00      	nop
 80010cc:	08001315 	.word	0x08001315
 80010d0:	0800144f 	.word	0x0800144f
 80010d4:	08001505 	.word	0x08001505
 80010d8:	08001387 	.word	0x08001387
 80010dc:	08001521 	.word	0x08001521
 80010e0:	08001521 	.word	0x08001521
 80010e4:	08001521 	.word	0x08001521
 80010e8:	08001521 	.word	0x08001521
 80010ec:	08001521 	.word	0x08001521
 80010f0:	08001521 	.word	0x08001521
 80010f4:	08001521 	.word	0x08001521
 80010f8:	08001521 	.word	0x08001521
 80010fc:	08001521 	.word	0x08001521
 8001100:	08001521 	.word	0x08001521
 8001104:	08001521 	.word	0x08001521
 8001108:	08001521 	.word	0x08001521
 800110c:	08001521 	.word	0x08001521
 8001110:	08001521 	.word	0x08001521
 8001114:	08001521 	.word	0x08001521
 8001118:	08001521 	.word	0x08001521
 800111c:	08001521 	.word	0x08001521
 8001120:	08001521 	.word	0x08001521
 8001124:	08001521 	.word	0x08001521
 8001128:	08001521 	.word	0x08001521
 800112c:	08001521 	.word	0x08001521
 8001130:	08001521 	.word	0x08001521
 8001134:	08001521 	.word	0x08001521
 8001138:	08001521 	.word	0x08001521
 800113c:	08001521 	.word	0x08001521
 8001140:	08001521 	.word	0x08001521
 8001144:	08001521 	.word	0x08001521
 8001148:	08001521 	.word	0x08001521
 800114c:	08001521 	.word	0x08001521
 8001150:	08001521 	.word	0x08001521
 8001154:	08001521 	.word	0x08001521
 8001158:	08001521 	.word	0x08001521
 800115c:	08001521 	.word	0x08001521
 8001160:	08001521 	.word	0x08001521
 8001164:	08001521 	.word	0x08001521
 8001168:	08001521 	.word	0x08001521
 800116c:	08001521 	.word	0x08001521
 8001170:	08001521 	.word	0x08001521
 8001174:	08001521 	.word	0x08001521
 8001178:	08001521 	.word	0x08001521
 800117c:	08001521 	.word	0x08001521
 8001180:	08001521 	.word	0x08001521
 8001184:	08001521 	.word	0x08001521
 8001188:	08001521 	.word	0x08001521
 800118c:	08001521 	.word	0x08001521
 8001190:	08001521 	.word	0x08001521
 8001194:	08001521 	.word	0x08001521
 8001198:	08001521 	.word	0x08001521
 800119c:	08001521 	.word	0x08001521
 80011a0:	08001521 	.word	0x08001521
 80011a4:	08001521 	.word	0x08001521
 80011a8:	0800147d 	.word	0x0800147d
 80011ac:	08001269 	.word	0x08001269
 80011b0:	08001205 	.word	0x08001205
 80011b4:	0800146b 	.word	0x0800146b
 80011b8:	08001229 	.word	0x08001229
 80011bc:	080014a1 	.word	0x080014a1
 80011c0:	080014c5 	.word	0x080014c5
 80011c4:	08001521 	.word	0x08001521
 80011c8:	0800124d 	.word	0x0800124d
 80011cc:	0800128d 	.word	0x0800128d
 80011d0:	080012b1 	.word	0x080012b1
 80011d4:	080012d5 	.word	0x080012d5
 80011d8:	080012f1 	.word	0x080012f1
 80011dc:	08001521 	.word	0x08001521
 80011e0:	08001433 	.word	0x08001433
 80011e4:	08001521 	.word	0x08001521
 80011e8:	08001521 	.word	0x08001521
 80011ec:	08001521 	.word	0x08001521
 80011f0:	08001521 	.word	0x08001521
 80011f4:	08001521 	.word	0x08001521
 80011f8:	08001521 	.word	0x08001521
 80011fc:	08001521 	.word	0x08001521
 8001200:	080014e1 	.word	0x080014e1
	case 73:								// ADRS Attack Time
		{
			adsr1Attack = 0.001f + (float_t) paramVal / 127;
 8001204:	4b77      	ldr	r3, [pc, #476]	; (80013e4 <setParams+0x330>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001210:	eddf 6a75 	vldr	s13, [pc, #468]	; 80013e8 <setParams+0x334>
 8001214:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001218:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80013ec <setParams+0x338>
 800121c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001220:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <setParams+0x33c>)
 8001222:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001226:	e17b      	b.n	8001520 <setParams+0x46c>
		}

	case 75:								// ADRS Decay Time
		{
			adsr1Decay = 0.001f + (float_t) paramVal / 127;
 8001228:	4b6e      	ldr	r3, [pc, #440]	; (80013e4 <setParams+0x330>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001234:	eddf 6a6c 	vldr	s13, [pc, #432]	; 80013e8 <setParams+0x334>
 8001238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80013ec <setParams+0x338>
 8001240:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001244:	4b6b      	ldr	r3, [pc, #428]	; (80013f4 <setParams+0x340>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
			break;
 800124a:	e169      	b.n	8001520 <setParams+0x46c>
		}

	case 79:								// ADRS Sustain Level
		{
			adsr1Sus = (float_t) paramVal / 127;
 800124c:	4b65      	ldr	r3, [pc, #404]	; (80013e4 <setParams+0x330>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001258:	eddf 6a63 	vldr	s13, [pc, #396]	; 80013e8 <setParams+0x334>
 800125c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001260:	4b65      	ldr	r3, [pc, #404]	; (80013f8 <setParams+0x344>)
 8001262:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001266:	e15b      	b.n	8001520 <setParams+0x46c>
		}

	case 72:								// ADRS Release Time
		{
			adsr1Rel = 0.001f + (float_t) paramVal / 127;
 8001268:	4b5e      	ldr	r3, [pc, #376]	; (80013e4 <setParams+0x330>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001274:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80013e8 <setParams+0x334>
 8001278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127c:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80013ec <setParams+0x338>
 8001280:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001284:	4b5d      	ldr	r3, [pc, #372]	; (80013fc <setParams+0x348>)
 8001286:	edc3 7a00 	vstr	s15, [r3]
			break;
 800128a:	e149      	b.n	8001520 <setParams+0x46c>
		}

	//second ASDR
	case 80:								// ADRS Attack Time
		{
			adsr2Attack = 0.001f + (float_t) paramVal / 127;
 800128c:	4b55      	ldr	r3, [pc, #340]	; (80013e4 <setParams+0x330>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001298:	eddf 6a53 	vldr	s13, [pc, #332]	; 80013e8 <setParams+0x334>
 800129c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a0:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80013ec <setParams+0x338>
 80012a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012a8:	4b55      	ldr	r3, [pc, #340]	; (8001400 <setParams+0x34c>)
 80012aa:	edc3 7a00 	vstr	s15, [r3]
			break;
 80012ae:	e137      	b.n	8001520 <setParams+0x46c>
		}

	case 81:								// ADRS Decay Time
		{
			adsr2Decay = 0.001f + (float_t) paramVal / 127;
 80012b0:	4b4c      	ldr	r3, [pc, #304]	; (80013e4 <setParams+0x330>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012bc:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80013e8 <setParams+0x334>
 80012c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80013ec <setParams+0x338>
 80012c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012cc:	4b4d      	ldr	r3, [pc, #308]	; (8001404 <setParams+0x350>)
 80012ce:	edc3 7a00 	vstr	s15, [r3]
			break;
 80012d2:	e125      	b.n	8001520 <setParams+0x46c>
		}

	case 82:								// ADRS Sustain Level
		{
			adsr2Sus = (float_t) paramVal / 127;
 80012d4:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <setParams+0x330>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012e0:	eddf 6a41 	vldr	s13, [pc, #260]	; 80013e8 <setParams+0x334>
 80012e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e8:	4b47      	ldr	r3, [pc, #284]	; (8001408 <setParams+0x354>)
 80012ea:	edc3 7a00 	vstr	s15, [r3]
			break;
 80012ee:	e117      	b.n	8001520 <setParams+0x46c>
		}

	case 83:								// ADRS Release Time
		{
			adsr2Rel = 0.001f + (float_t) paramVal / 127;
 80012f0:	4b3c      	ldr	r3, [pc, #240]	; (80013e4 <setParams+0x330>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012fc:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80013e8 <setParams+0x334>
 8001300:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001304:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80013ec <setParams+0x338>
 8001308:	ee77 7a87 	vadd.f32	s15, s15, s14
 800130c:	4b3f      	ldr	r3, [pc, #252]	; (800140c <setParams+0x358>)
 800130e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001312:	e105      	b.n	8001520 <setParams+0x46c>
		}
	//Waveform Select OSC2
	case 16:
		{
			if (paramVal >= 0 && paramVal < 32)	{
 8001314:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <setParams+0x330>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b1f      	cmp	r3, #31
 800131a:	d803      	bhi.n	8001324 <setParams+0x270>
				osc2Waveform = 0;
 800131c:	4b3c      	ldr	r3, [pc, #240]	; (8001410 <setParams+0x35c>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
				osc2Waveform = 4;
			}
			else {
				osc2Waveform = 0;
			}
			break;
 8001322:	e0fd      	b.n	8001520 <setParams+0x46c>
			else if (paramVal >= 32 && paramVal < 64)	{
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <setParams+0x330>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b1f      	cmp	r3, #31
 800132a:	d907      	bls.n	800133c <setParams+0x288>
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <setParams+0x330>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b3f      	cmp	r3, #63	; 0x3f
 8001332:	d803      	bhi.n	800133c <setParams+0x288>
				osc2Waveform = 1;
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <setParams+0x35c>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	e023      	b.n	8001384 <setParams+0x2d0>
			else if (paramVal >= 64 && paramVal < 96)	{
 800133c:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <setParams+0x330>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b3f      	cmp	r3, #63	; 0x3f
 8001342:	d907      	bls.n	8001354 <setParams+0x2a0>
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <setParams+0x330>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b5f      	cmp	r3, #95	; 0x5f
 800134a:	d803      	bhi.n	8001354 <setParams+0x2a0>
				osc2Waveform = 2;
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <setParams+0x35c>)
 800134e:	2202      	movs	r2, #2
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e017      	b.n	8001384 <setParams+0x2d0>
			else if (paramVal >= 96 && paramVal < 125){
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <setParams+0x330>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b5f      	cmp	r3, #95	; 0x5f
 800135a:	d907      	bls.n	800136c <setParams+0x2b8>
 800135c:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <setParams+0x330>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b7c      	cmp	r3, #124	; 0x7c
 8001362:	d803      	bhi.n	800136c <setParams+0x2b8>
				osc2Waveform = 3;
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <setParams+0x35c>)
 8001366:	2203      	movs	r2, #3
 8001368:	701a      	strb	r2, [r3, #0]
 800136a:	e00b      	b.n	8001384 <setParams+0x2d0>
			else if (paramVal >= 125 ){
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <setParams+0x330>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b7c      	cmp	r3, #124	; 0x7c
 8001372:	d903      	bls.n	800137c <setParams+0x2c8>
				osc2Waveform = 4;
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <setParams+0x35c>)
 8001376:	2204      	movs	r2, #4
 8001378:	701a      	strb	r2, [r3, #0]
			break;
 800137a:	e0d1      	b.n	8001520 <setParams+0x46c>
				osc2Waveform = 0;
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <setParams+0x35c>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
			break;
 8001382:	e0cd      	b.n	8001520 <setParams+0x46c>
 8001384:	e0cc      	b.n	8001520 <setParams+0x46c>
		}
	//Waveform Select OSC1
	case 19:
		{
			if (paramVal >= 0 && paramVal < 32)	{
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <setParams+0x330>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b1f      	cmp	r3, #31
 800138c:	d803      	bhi.n	8001396 <setParams+0x2e2>
				osc1Waveform = 0;
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <setParams+0x360>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
				osc1Waveform = 4;
			}
			else {
				osc1Waveform = 0;
			}
			break;
 8001394:	e0c4      	b.n	8001520 <setParams+0x46c>
			else if (paramVal >= 32 && paramVal < 64)	{
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <setParams+0x330>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b1f      	cmp	r3, #31
 800139c:	d907      	bls.n	80013ae <setParams+0x2fa>
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <setParams+0x330>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b3f      	cmp	r3, #63	; 0x3f
 80013a4:	d803      	bhi.n	80013ae <setParams+0x2fa>
				osc1Waveform = 1;
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <setParams+0x360>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	e040      	b.n	8001430 <setParams+0x37c>
			else if (paramVal >= 64 && paramVal < 96)	{
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <setParams+0x330>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b3f      	cmp	r3, #63	; 0x3f
 80013b4:	d907      	bls.n	80013c6 <setParams+0x312>
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <setParams+0x330>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b5f      	cmp	r3, #95	; 0x5f
 80013bc:	d803      	bhi.n	80013c6 <setParams+0x312>
				osc1Waveform = 2;
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <setParams+0x360>)
 80013c0:	2202      	movs	r2, #2
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e034      	b.n	8001430 <setParams+0x37c>
			else if (paramVal >= 96 && paramVal < 125){
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <setParams+0x330>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b5f      	cmp	r3, #95	; 0x5f
 80013cc:	d924      	bls.n	8001418 <setParams+0x364>
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <setParams+0x330>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b7c      	cmp	r3, #124	; 0x7c
 80013d4:	d820      	bhi.n	8001418 <setParams+0x364>
				osc1Waveform = 3;
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <setParams+0x360>)
 80013d8:	2203      	movs	r2, #3
 80013da:	701a      	strb	r2, [r3, #0]
 80013dc:	e028      	b.n	8001430 <setParams+0x37c>
 80013de:	bf00      	nop
 80013e0:	200042c2 	.word	0x200042c2
 80013e4:	20004252 	.word	0x20004252
 80013e8:	42fe0000 	.word	0x42fe0000
 80013ec:	3a83126f 	.word	0x3a83126f
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004
 80013f8:	20000008 	.word	0x20000008
 80013fc:	2000000c 	.word	0x2000000c
 8001400:	20000010 	.word	0x20000010
 8001404:	20000014 	.word	0x20000014
 8001408:	20000018 	.word	0x20000018
 800140c:	2000001c 	.word	0x2000001c
 8001410:	200042e4 	.word	0x200042e4
 8001414:	200041f9 	.word	0x200041f9
			else if (paramVal >= 125 ){
 8001418:	4b44      	ldr	r3, [pc, #272]	; (800152c <setParams+0x478>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b7c      	cmp	r3, #124	; 0x7c
 800141e:	d903      	bls.n	8001428 <setParams+0x374>
				osc1Waveform = 4;
 8001420:	4b43      	ldr	r3, [pc, #268]	; (8001530 <setParams+0x47c>)
 8001422:	2204      	movs	r2, #4
 8001424:	701a      	strb	r2, [r3, #0]
			break;
 8001426:	e07b      	b.n	8001520 <setParams+0x46c>
				osc1Waveform = 0;
 8001428:	4b41      	ldr	r3, [pc, #260]	; (8001530 <setParams+0x47c>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
			break;
 800142e:	e077      	b.n	8001520 <setParams+0x46c>
 8001430:	e076      	b.n	8001520 <setParams+0x46c>
		}
	case 85 :								// OSC1 mix level
		{
			osc1mix = (float_t) paramVal / 127;
 8001432:	4b3e      	ldr	r3, [pc, #248]	; (800152c <setParams+0x478>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800143e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001534 <setParams+0x480>
 8001442:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001446:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <setParams+0x484>)
 8001448:	edc3 7a00 	vstr	s15, [r3]
			break;
 800144c:	e068      	b.n	8001520 <setParams+0x46c>
		}

	case 17 :								// OSC2 mix level
		{
			osc2mix = (float_t) paramVal / 127;
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <setParams+0x478>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	ee07 3a90 	vmov	s15, r3
 8001456:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800145a:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001534 <setParams+0x480>
 800145e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001462:	4b36      	ldr	r3, [pc, #216]	; (800153c <setParams+0x488>)
 8001464:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001468:	e05a      	b.n	8001520 <setParams+0x46c>
		}

	case 74 :								// low pass
		{
			loPass = cutoff_CC[paramVal];
 800146a:	4b30      	ldr	r3, [pc, #192]	; (800152c <setParams+0x478>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4a34      	ldr	r2, [pc, #208]	; (8001540 <setParams+0x48c>)
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <setParams+0x490>)
 8001478:	6013      	str	r3, [r2, #0]
			break;
 800147a:	e051      	b.n	8001520 <setParams+0x46c>
		}

	case 71 :								// Resonance
		{
			reso = 4.0f * (float_t) paramVal / 127;
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <setParams+0x478>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001488:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800148c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001490:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001534 <setParams+0x480>
 8001494:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <setParams+0x494>)
 800149a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800149e:	e03f      	b.n	8001520 <setParams+0x46c>
		}
	case 76 :								// ADRS Release Time
		{
			lfo1Freq = 10.0f * (float_t) paramVal / 127;
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <setParams+0x478>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014b4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001534 <setParams+0x480>
 80014b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <setParams+0x498>)
 80014be:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014c2:	e02d      	b.n	8001520 <setParams+0x46c>
		}

	case 77 :								// ADRS Release Time
		{
			lfo1Depth = 1.0f * (float_t) paramVal / 127;
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <setParams+0x478>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014d0:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001534 <setParams+0x480>
 80014d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <setParams+0x49c>)
 80014da:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014de:	e01f      	b.n	8001520 <setParams+0x46c>
		}
	case 93 :								// ADRS Release Time
		{
			lfo2Freq = 10.0f * (float_t) paramVal / 127;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <setParams+0x478>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014f4:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001534 <setParams+0x480>
 80014f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <setParams+0x4a0>)
 80014fe:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001502:	e00d      	b.n	8001520 <setParams+0x46c>
		}

	case 18 :								// ADRS Release Time
		{
			lfo2Depth = 1.0f * (float_t) paramVal / 127;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <setParams+0x478>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001510:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001534 <setParams+0x480>
 8001514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <setParams+0x4a4>)
 800151a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800151e:	bf00      	nop
		}
	}
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20004252 	.word	0x20004252
 8001530:	200041f9 	.word	0x200041f9
 8001534:	42fe0000 	.word	0x42fe0000
 8001538:	20000038 	.word	0x20000038
 800153c:	2000003c 	.word	0x2000003c
 8001540:	0800b42c 	.word	0x0800b42c
 8001544:	20000030 	.word	0x20000030
 8001548:	20000034 	.word	0x20000034
 800154c:	20000020 	.word	0x20000020
 8001550:	20000024 	.word	0x20000024
 8001554:	20000028 	.word	0x20000028
 8001558:	2000002c 	.word	0x2000002c

0800155c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	//HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
	//new version dose not call here
		//processBuffer();
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	//HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
	//once MIDI buffer is full we send to the process buffer function
	//new version dose not call here
	//processBuffer();
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <calcSynth>:

void calcSynth(uint16_t startIndex){
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	uint16_t a,b;
	float da, db;

	if (newNote)	{
 800158e:	4bc4      	ldr	r3, [pc, #784]	; (80018a0 <calcSynth+0x31c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d02e      	beq.n	80015f4 <calcSynth+0x70>
		newNote = 0;
 8001596:	4bc2      	ldr	r3, [pc, #776]	; (80018a0 <calcSynth+0x31c>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
		adsr1State = 1; //first attck
 800159c:	4bc1      	ldr	r3, [pc, #772]	; (80018a4 <calcSynth+0x320>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
		adsr2State = 1; //first attck
 80015a2:	4bc1      	ldr	r3, [pc, #772]	; (80018a8 <calcSynth+0x324>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]

		attack1Inc = (1 - adsr1Output)/(adsr1Attack * SAMPLE_RATE);
 80015a8:	4bc0      	ldr	r3, [pc, #768]	; (80018ac <calcSynth+0x328>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015b6:	4bbe      	ldr	r3, [pc, #760]	; (80018b0 <calcSynth+0x32c>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ed9f 7abd 	vldr	s14, [pc, #756]	; 80018b4 <calcSynth+0x330>
 80015c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c8:	4bbb      	ldr	r3, [pc, #748]	; (80018b8 <calcSynth+0x334>)
 80015ca:	edc3 7a00 	vstr	s15, [r3]
		attack2Inc = (1 - adsr2Output)/(adsr2Attack * SAMPLE_RATE);
 80015ce:	4bbb      	ldr	r3, [pc, #748]	; (80018bc <calcSynth+0x338>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015d8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015dc:	4bb8      	ldr	r3, [pc, #736]	; (80018c0 <calcSynth+0x33c>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80018b4 <calcSynth+0x330>
 80015e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ee:	4bb5      	ldr	r3, [pc, #724]	; (80018c4 <calcSynth+0x340>)
 80015f0:	edc3 7a00 	vstr	s15, [r3]
	}

	if (trig == 0)	{ //note is complete, set the release time
 80015f4:	4bb4      	ldr	r3, [pc, #720]	; (80018c8 <calcSynth+0x344>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	f083 0301 	eor.w	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d02b      	beq.n	800165a <calcSynth+0xd6>
			if (adsr1State != 4)	{
 8001602:	4ba8      	ldr	r3, [pc, #672]	; (80018a4 <calcSynth+0x320>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b04      	cmp	r3, #4
 8001608:	d011      	beq.n	800162e <calcSynth+0xaa>
				adsr1State = 4;
 800160a:	4ba6      	ldr	r3, [pc, #664]	; (80018a4 <calcSynth+0x320>)
 800160c:	2204      	movs	r2, #4
 800160e:	701a      	strb	r2, [r3, #0]
				release1Inc = adsr1Output /(adsr1Rel * SAMPLE_RATE);
 8001610:	4ba6      	ldr	r3, [pc, #664]	; (80018ac <calcSynth+0x328>)
 8001612:	edd3 6a00 	vldr	s13, [r3]
 8001616:	4bad      	ldr	r3, [pc, #692]	; (80018cc <calcSynth+0x348>)
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80018b4 <calcSynth+0x330>
 8001620:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001628:	4ba9      	ldr	r3, [pc, #676]	; (80018d0 <calcSynth+0x34c>)
 800162a:	edc3 7a00 	vstr	s15, [r3]
			}
			if (adsr2State != 4)	{
 800162e:	4b9e      	ldr	r3, [pc, #632]	; (80018a8 <calcSynth+0x324>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b04      	cmp	r3, #4
 8001634:	d011      	beq.n	800165a <calcSynth+0xd6>
				adsr2State = 4;
 8001636:	4b9c      	ldr	r3, [pc, #624]	; (80018a8 <calcSynth+0x324>)
 8001638:	2204      	movs	r2, #4
 800163a:	701a      	strb	r2, [r3, #0]
				release2Inc = adsr2Output /(adsr2Rel * SAMPLE_RATE);
 800163c:	4b9f      	ldr	r3, [pc, #636]	; (80018bc <calcSynth+0x338>)
 800163e:	edd3 6a00 	vldr	s13, [r3]
 8001642:	4ba4      	ldr	r3, [pc, #656]	; (80018d4 <calcSynth+0x350>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80018b4 <calcSynth+0x330>
 800164c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001654:	4ba0      	ldr	r3, [pc, #640]	; (80018d8 <calcSynth+0x354>)
 8001656:	edc3 7a00 	vstr	s15, [r3]
			}
	}

	decay1Inc = (1-adsr1Sus) / (adsr1Decay * SAMPLE_RATE);
 800165a:	4ba0      	ldr	r3, [pc, #640]	; (80018dc <calcSynth+0x358>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001664:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001668:	4b9d      	ldr	r3, [pc, #628]	; (80018e0 <calcSynth+0x35c>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80018b4 <calcSynth+0x330>
 8001672:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167a:	4b9a      	ldr	r3, [pc, #616]	; (80018e4 <calcSynth+0x360>)
 800167c:	edc3 7a00 	vstr	s15, [r3]
	decay2Inc = (1-adsr2Sus) / (adsr2Decay * SAMPLE_RATE);
 8001680:	4b99      	ldr	r3, [pc, #612]	; (80018e8 <calcSynth+0x364>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800168a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800168e:	4b97      	ldr	r3, [pc, #604]	; (80018ec <calcSynth+0x368>)
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80018b4 <calcSynth+0x330>
 8001698:	ee27 7a87 	vmul.f32	s14, s15, s14
 800169c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a0:	4b93      	ldr	r3, [pc, #588]	; (80018f0 <calcSynth+0x36c>)
 80016a2:	edc3 7a00 	vstr	s15, [r3]

	//BEGIN FILLING BUFFER

	uint16_t i; //keep track of audio buffer
	i = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	83bb      	strh	r3, [r7, #28]

	while (i < AUDIO_BUFFER_LENGTH_DIV2){
 80016aa:	f000 bca2 	b.w	8001ff2 <calcSynth+0xa6e>

		//LFO 1

		lfo1WavePointer = WAVETABLE_LENGTH * lfo1Freq / SAMPLE_RATE;		// Increment value of the LFO wavetable pointer
 80016ae:	4b91      	ldr	r3, [pc, #580]	; (80018f4 <calcSynth+0x370>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80018f8 <calcSynth+0x374>
 80016b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016bc:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80018b4 <calcSynth+0x330>
 80016c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c4:	4b8d      	ldr	r3, [pc, #564]	; (80018fc <calcSynth+0x378>)
 80016c6:	edc3 7a00 	vstr	s15, [r3]

		lfo1WavePointer = lfo1WavePointer + lfo1WaveInc;
 80016ca:	4b8c      	ldr	r3, [pc, #560]	; (80018fc <calcSynth+0x378>)
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	4b8b      	ldr	r3, [pc, #556]	; (8001900 <calcSynth+0x37c>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016da:	4b88      	ldr	r3, [pc, #544]	; (80018fc <calcSynth+0x378>)
 80016dc:	edc3 7a00 	vstr	s15, [r3]

		if (lfo1WavePointer > WAVETABLE_LENGTH)
 80016e0:	4b86      	ldr	r3, [pc, #536]	; (80018fc <calcSynth+0x378>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80018f8 <calcSynth+0x374>
 80016ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	dd09      	ble.n	8001708 <calcSynth+0x184>
		{
			lfo1WavePointer = lfo1WavePointer - WAVETABLE_LENGTH;
 80016f4:	4b81      	ldr	r3, [pc, #516]	; (80018fc <calcSynth+0x378>)
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80018f8 <calcSynth+0x374>
 80016fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001702:	4b7e      	ldr	r3, [pc, #504]	; (80018fc <calcSynth+0x378>)
 8001704:	edc3 7a00 	vstr	s15, [r3]
		}

		lfo1Output = lfo1Depth * sinewave[(uint16_t)lfo1WavePointer];
 8001708:	4b7c      	ldr	r3, [pc, #496]	; (80018fc <calcSynth+0x378>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001712:	ee17 3a90 	vmov	r3, s15
 8001716:	b29b      	uxth	r3, r3
 8001718:	4a7a      	ldr	r2, [pc, #488]	; (8001904 <calcSynth+0x380>)
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	4b79      	ldr	r3, [pc, #484]	; (8001908 <calcSynth+0x384>)
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	4b77      	ldr	r3, [pc, #476]	; (800190c <calcSynth+0x388>)
 800172e:	edc3 7a00 	vstr	s15, [r3]

		if (lfo1Depth==0)	{
 8001732:	4b75      	ldr	r3, [pc, #468]	; (8001908 <calcSynth+0x384>)
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	eef5 7a40 	vcmp.f32	s15, #0.0
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	d103      	bne.n	800174a <calcSynth+0x1c6>
			lfo1Output = 0;
 8001742:	4b72      	ldr	r3, [pc, #456]	; (800190c <calcSynth+0x388>)
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	601a      	str	r2, [r3, #0]

		//pitch = pitch * (1 + lfo2Output) + det;

		//pitch = pitch * det;

		float osc1WaveIncr = WAVETABLE_LENGTH * (pitch) / SAMPLE_RATE;
 800174a:	4b71      	ldr	r3, [pc, #452]	; (8001910 <calcSynth+0x38c>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80018f8 <calcSynth+0x374>
 8001754:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001758:	eddf 6a56 	vldr	s13, [pc, #344]	; 80018b4 <calcSynth+0x330>
 800175c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001760:	edc7 7a06 	vstr	s15, [r7, #24]
		osc1WavePointer = osc1WavePointer + osc1WaveIncr;
 8001764:	4b6b      	ldr	r3, [pc, #428]	; (8001914 <calcSynth+0x390>)
 8001766:	ed93 7a00 	vldr	s14, [r3]
 800176a:	edd7 7a06 	vldr	s15, [r7, #24]
 800176e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001772:	4b68      	ldr	r3, [pc, #416]	; (8001914 <calcSynth+0x390>)
 8001774:	edc3 7a00 	vstr	s15, [r3]

		if(osc1WavePointer > WAVETABLE_LENGTH){
 8001778:	4b66      	ldr	r3, [pc, #408]	; (8001914 <calcSynth+0x390>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80018f8 <calcSynth+0x374>
 8001782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178a:	dd09      	ble.n	80017a0 <calcSynth+0x21c>
			osc1WavePointer = osc1WavePointer - WAVETABLE_LENGTH;
 800178c:	4b61      	ldr	r3, [pc, #388]	; (8001914 <calcSynth+0x390>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80018f8 <calcSynth+0x374>
 8001796:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800179a:	4b5e      	ldr	r3, [pc, #376]	; (8001914 <calcSynth+0x390>)
 800179c:	edc3 7a00 	vstr	s15, [r3]
		}

		float osc2WaveIncr = WAVETABLE_LENGTH * (pitch) / SAMPLE_RATE;
 80017a0:	4b5b      	ldr	r3, [pc, #364]	; (8001910 <calcSynth+0x38c>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80018f8 <calcSynth+0x374>
 80017aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017ae:	eddf 6a41 	vldr	s13, [pc, #260]	; 80018b4 <calcSynth+0x330>
 80017b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b6:	edc7 7a05 	vstr	s15, [r7, #20]
		osc2WavePointer = osc2WavePointer + osc2WaveIncr;
 80017ba:	4b57      	ldr	r3, [pc, #348]	; (8001918 <calcSynth+0x394>)
 80017bc:	ed93 7a00 	vldr	s14, [r3]
 80017c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <calcSynth+0x394>)
 80017ca:	edc3 7a00 	vstr	s15, [r3]

		if(osc2WavePointer > WAVETABLE_LENGTH){
 80017ce:	4b52      	ldr	r3, [pc, #328]	; (8001918 <calcSynth+0x394>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80018f8 <calcSynth+0x374>
 80017d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e0:	dd09      	ble.n	80017f6 <calcSynth+0x272>
			osc2WavePointer = osc2WavePointer - WAVETABLE_LENGTH;
 80017e2:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <calcSynth+0x394>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80018f8 <calcSynth+0x374>
 80017ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017f0:	4b49      	ldr	r3, [pc, #292]	; (8001918 <calcSynth+0x394>)
 80017f2:	edc3 7a00 	vstr	s15, [r3]
		}

		a = (int)osc1WavePointer;
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <calcSynth+0x390>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001800:	ee17 3a90 	vmov	r3, s15
 8001804:	827b      	strh	r3, [r7, #18]
		da = osc1WavePointer -a;
 8001806:	4b43      	ldr	r3, [pc, #268]	; (8001914 <calcSynth+0x390>)
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	8a7b      	ldrh	r3, [r7, #18]
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181a:	edc7 7a03 	vstr	s15, [r7, #12]
		b= a+1;
 800181e:	8a7b      	ldrh	r3, [r7, #18]
 8001820:	3301      	adds	r3, #1
 8001822:	83fb      	strh	r3, [r7, #30]
		db = b - osc1WavePointer;
 8001824:	8bfb      	ldrh	r3, [r7, #30]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <calcSynth+0x390>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001838:	edc7 7a02 	vstr	s15, [r7, #8]

		if (b>= WAVETABLE_LENGTH){
 800183c:	8bfb      	ldrh	r3, [r7, #30]
 800183e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001842:	d301      	bcc.n	8001848 <calcSynth+0x2c4>
			b = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	83fb      	strh	r3, [r7, #30]
		}

		switch (osc1Waveform)
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <calcSynth+0x398>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b04      	cmp	r3, #4
 800184e:	f200 80d3 	bhi.w	80019f8 <calcSynth+0x474>
 8001852:	a201      	add	r2, pc, #4	; (adr r2, 8001858 <calcSynth+0x2d4>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	0800186d 	.word	0x0800186d
 800185c:	08001929 	.word	0x08001929
 8001860:	0800195d 	.word	0x0800195d
 8001864:	08001991 	.word	0x08001991
 8001868:	080019c5 	.word	0x080019c5
		{
			case 0 :
			{
				osc1 = db*square[a] + da*square[b];					// Linear interpolation (same as weighted average)
 800186c:	8a7b      	ldrh	r3, [r7, #18]
 800186e:	4a2c      	ldr	r2, [pc, #176]	; (8001920 <calcSynth+0x39c>)
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	ed93 7a00 	vldr	s14, [r3]
 8001878:	edd7 7a02 	vldr	s15, [r7, #8]
 800187c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001880:	8bfb      	ldrh	r3, [r7, #30]
 8001882:	4a27      	ldr	r2, [pc, #156]	; (8001920 <calcSynth+0x39c>)
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	edd3 6a00 	vldr	s13, [r3]
 800188c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <calcSynth+0x3a0>)
 800189a:	edc3 7a00 	vstr	s15, [r3]
				break;
 800189e:	e0c5      	b.n	8001a2c <calcSynth+0x4a8>
 80018a0:	2000425d 	.word	0x2000425d
 80018a4:	200000e8 	.word	0x200000e8
 80018a8:	200000fc 	.word	0x200000fc
 80018ac:	200000e4 	.word	0x200000e4
 80018b0:	20000000 	.word	0x20000000
 80018b4:	472c4400 	.word	0x472c4400
 80018b8:	200000ec 	.word	0x200000ec
 80018bc:	200000f8 	.word	0x200000f8
 80018c0:	20000010 	.word	0x20000010
 80018c4:	20000100 	.word	0x20000100
 80018c8:	20004251 	.word	0x20004251
 80018cc:	2000000c 	.word	0x2000000c
 80018d0:	200000f4 	.word	0x200000f4
 80018d4:	2000001c 	.word	0x2000001c
 80018d8:	20000108 	.word	0x20000108
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000004 	.word	0x20000004
 80018e4:	200000f0 	.word	0x200000f0
 80018e8:	20000018 	.word	0x20000018
 80018ec:	20000014 	.word	0x20000014
 80018f0:	20000104 	.word	0x20000104
 80018f4:	20000020 	.word	0x20000020
 80018f8:	44800000 	.word	0x44800000
 80018fc:	2000010c 	.word	0x2000010c
 8001900:	20000110 	.word	0x20000110
 8001904:	0800a29c 	.word	0x0800a29c
 8001908:	20000024 	.word	0x20000024
 800190c:	20000114 	.word	0x20000114
 8001910:	200000e0 	.word	0x200000e0
 8001914:	200000d0 	.word	0x200000d0
 8001918:	200000d4 	.word	0x200000d4
 800191c:	200041f9 	.word	0x200041f9
 8001920:	0800629c 	.word	0x0800629c
 8001924:	200041f4 	.word	0x200041f4
			}

			case 1 :
			{
				osc1 = db*triangle[a] + da*triangle[b];
 8001928:	8a7b      	ldrh	r3, [r7, #18]
 800192a:	4a8a      	ldr	r2, [pc, #552]	; (8001b54 <calcSynth+0x5d0>)
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	ed93 7a00 	vldr	s14, [r3]
 8001934:	edd7 7a02 	vldr	s15, [r7, #8]
 8001938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193c:	8bfb      	ldrh	r3, [r7, #30]
 800193e:	4a85      	ldr	r2, [pc, #532]	; (8001b54 <calcSynth+0x5d0>)
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	edd3 6a00 	vldr	s13, [r3]
 8001948:	edd7 7a03 	vldr	s15, [r7, #12]
 800194c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001954:	4b80      	ldr	r3, [pc, #512]	; (8001b58 <calcSynth+0x5d4>)
 8001956:	edc3 7a00 	vstr	s15, [r3]
				break;
 800195a:	e067      	b.n	8001a2c <calcSynth+0x4a8>
			}

			case 2 :
			{
				osc1 = db*sawtooth[a] + da*sawtooth[b];
 800195c:	8a7b      	ldrh	r3, [r7, #18]
 800195e:	4a7f      	ldr	r2, [pc, #508]	; (8001b5c <calcSynth+0x5d8>)
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	ed93 7a00 	vldr	s14, [r3]
 8001968:	edd7 7a02 	vldr	s15, [r7, #8]
 800196c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001970:	8bfb      	ldrh	r3, [r7, #30]
 8001972:	4a7a      	ldr	r2, [pc, #488]	; (8001b5c <calcSynth+0x5d8>)
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	edd3 6a00 	vldr	s13, [r3]
 800197c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001988:	4b73      	ldr	r3, [pc, #460]	; (8001b58 <calcSynth+0x5d4>)
 800198a:	edc3 7a00 	vstr	s15, [r3]
				break;
 800198e:	e04d      	b.n	8001a2c <calcSynth+0x4a8>
			}

			case 3 :
			{
				osc1 = db*distosine[a] + da*distosine[b];
 8001990:	8a7b      	ldrh	r3, [r7, #18]
 8001992:	4a73      	ldr	r2, [pc, #460]	; (8001b60 <calcSynth+0x5dc>)
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	ed93 7a00 	vldr	s14, [r3]
 800199c:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a4:	8bfb      	ldrh	r3, [r7, #30]
 80019a6:	4a6e      	ldr	r2, [pc, #440]	; (8001b60 <calcSynth+0x5dc>)
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	edd3 6a00 	vldr	s13, [r3]
 80019b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019bc:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <calcSynth+0x5d4>)
 80019be:	edc3 7a00 	vstr	s15, [r3]
				break;
 80019c2:	e033      	b.n	8001a2c <calcSynth+0x4a8>
			}
			case 4 :
			{
				osc1 = db*sinewave[a] + da*sinewave[b];
 80019c4:	8a7b      	ldrh	r3, [r7, #18]
 80019c6:	4a67      	ldr	r2, [pc, #412]	; (8001b64 <calcSynth+0x5e0>)
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	ed93 7a00 	vldr	s14, [r3]
 80019d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d8:	8bfb      	ldrh	r3, [r7, #30]
 80019da:	4a62      	ldr	r2, [pc, #392]	; (8001b64 <calcSynth+0x5e0>)
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	edd3 6a00 	vldr	s13, [r3]
 80019e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f0:	4b59      	ldr	r3, [pc, #356]	; (8001b58 <calcSynth+0x5d4>)
 80019f2:	edc3 7a00 	vstr	s15, [r3]
				break;
 80019f6:	e019      	b.n	8001a2c <calcSynth+0x4a8>
			}

			default :
			{
				osc1 = db*sinewave[a] + da*sinewave[b];
 80019f8:	8a7b      	ldrh	r3, [r7, #18]
 80019fa:	4a5a      	ldr	r2, [pc, #360]	; (8001b64 <calcSynth+0x5e0>)
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	ed93 7a00 	vldr	s14, [r3]
 8001a04:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a0c:	8bfb      	ldrh	r3, [r7, #30]
 8001a0e:	4a55      	ldr	r2, [pc, #340]	; (8001b64 <calcSynth+0x5e0>)
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	edd3 6a00 	vldr	s13, [r3]
 8001a18:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a24:	4b4c      	ldr	r3, [pc, #304]	; (8001b58 <calcSynth+0x5d4>)
 8001a26:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001a2a:	bf00      	nop
		da = osc2WavePointer - a;
		b  = a + 1;
		db = b - osc2WavePointer;
		*/

		switch (osc2Waveform)
 8001a2c:	4b4e      	ldr	r3, [pc, #312]	; (8001b68 <calcSynth+0x5e4>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	f200 809f 	bhi.w	8001b74 <calcSynth+0x5f0>
 8001a36:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <calcSynth+0x4b8>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001a51 	.word	0x08001a51
 8001a40:	08001a85 	.word	0x08001a85
 8001a44:	08001ab9 	.word	0x08001ab9
 8001a48:	08001aed 	.word	0x08001aed
 8001a4c:	08001b21 	.word	0x08001b21
		{
			case 0 :
			{
				osc2 = db*square[a] + da*square[b];
 8001a50:	8a7b      	ldrh	r3, [r7, #18]
 8001a52:	4a46      	ldr	r2, [pc, #280]	; (8001b6c <calcSynth+0x5e8>)
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	ed93 7a00 	vldr	s14, [r3]
 8001a5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a64:	8bfb      	ldrh	r3, [r7, #30]
 8001a66:	4a41      	ldr	r2, [pc, #260]	; (8001b6c <calcSynth+0x5e8>)
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	edd3 6a00 	vldr	s13, [r3]
 8001a70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <calcSynth+0x5ec>)
 8001a7e:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001a82:	e091      	b.n	8001ba8 <calcSynth+0x624>
			}

			case 1 :
			{
				osc2 = db*triangle[a] + da*triangle[b];
 8001a84:	8a7b      	ldrh	r3, [r7, #18]
 8001a86:	4a33      	ldr	r2, [pc, #204]	; (8001b54 <calcSynth+0x5d0>)
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	ed93 7a00 	vldr	s14, [r3]
 8001a90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a98:	8bfb      	ldrh	r3, [r7, #30]
 8001a9a:	4a2e      	ldr	r2, [pc, #184]	; (8001b54 <calcSynth+0x5d0>)
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	edd3 6a00 	vldr	s13, [r3]
 8001aa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <calcSynth+0x5ec>)
 8001ab2:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001ab6:	e077      	b.n	8001ba8 <calcSynth+0x624>
			}

			case 2 :
			{
				osc2 = db*sawtooth[a] + da*sawtooth[b];
 8001ab8:	8a7b      	ldrh	r3, [r7, #18]
 8001aba:	4a28      	ldr	r2, [pc, #160]	; (8001b5c <calcSynth+0x5d8>)
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	ed93 7a00 	vldr	s14, [r3]
 8001ac4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001acc:	8bfb      	ldrh	r3, [r7, #30]
 8001ace:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <calcSynth+0x5d8>)
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	edd3 6a00 	vldr	s13, [r3]
 8001ad8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <calcSynth+0x5ec>)
 8001ae6:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001aea:	e05d      	b.n	8001ba8 <calcSynth+0x624>
			}

			case 3 :
			{
				osc2 = db*distosine[a] + da*distosine[b];
 8001aec:	8a7b      	ldrh	r3, [r7, #18]
 8001aee:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <calcSynth+0x5dc>)
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	ed93 7a00 	vldr	s14, [r3]
 8001af8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001afc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b00:	8bfb      	ldrh	r3, [r7, #30]
 8001b02:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <calcSynth+0x5dc>)
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	edd3 6a00 	vldr	s13, [r3]
 8001b0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <calcSynth+0x5ec>)
 8001b1a:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001b1e:	e043      	b.n	8001ba8 <calcSynth+0x624>
			}
			case 4 :
			{
				osc2 = db*sinewave[a] + da*sinewave[b];
 8001b20:	8a7b      	ldrh	r3, [r7, #18]
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <calcSynth+0x5e0>)
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	ed93 7a00 	vldr	s14, [r3]
 8001b2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b34:	8bfb      	ldrh	r3, [r7, #30]
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <calcSynth+0x5e0>)
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	edd3 6a00 	vldr	s13, [r3]
 8001b40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <calcSynth+0x5ec>)
 8001b4e:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001b52:	e029      	b.n	8001ba8 <calcSynth+0x624>
 8001b54:	0800729c 	.word	0x0800729c
 8001b58:	200041f4 	.word	0x200041f4
 8001b5c:	0800829c 	.word	0x0800829c
 8001b60:	0800929c 	.word	0x0800929c
 8001b64:	0800a29c 	.word	0x0800a29c
 8001b68:	200042e4 	.word	0x200042e4
 8001b6c:	0800629c 	.word	0x0800629c
 8001b70:	200042ec 	.word	0x200042ec
			}

			default :
			{
				osc2 = db*sinewave[a] + da*sinewave[b];
 8001b74:	8a7b      	ldrh	r3, [r7, #18]
 8001b76:	4abc      	ldr	r2, [pc, #752]	; (8001e68 <calcSynth+0x8e4>)
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	ed93 7a00 	vldr	s14, [r3]
 8001b80:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b88:	8bfb      	ldrh	r3, [r7, #30]
 8001b8a:	4ab7      	ldr	r2, [pc, #732]	; (8001e68 <calcSynth+0x8e4>)
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	edd3 6a00 	vldr	s13, [r3]
 8001b94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba0:	4bb2      	ldr	r3, [pc, #712]	; (8001e6c <calcSynth+0x8e8>)
 8001ba2:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001ba6:	bf00      	nop
			}
		}


		//mixing of singals
		signal = (osc1mix * osc1) + (osc2mix * osc2);
 8001ba8:	4bb1      	ldr	r3, [pc, #708]	; (8001e70 <calcSynth+0x8ec>)
 8001baa:	ed93 7a00 	vldr	s14, [r3]
 8001bae:	4bb1      	ldr	r3, [pc, #708]	; (8001e74 <calcSynth+0x8f0>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb8:	4baf      	ldr	r3, [pc, #700]	; (8001e78 <calcSynth+0x8f4>)
 8001bba:	edd3 6a00 	vldr	s13, [r3]
 8001bbe:	4bab      	ldr	r3, [pc, #684]	; (8001e6c <calcSynth+0x8e8>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bcc:	4bab      	ldr	r3, [pc, #684]	; (8001e7c <calcSynth+0x8f8>)
 8001bce:	edc3 7a00 	vstr	s15, [r3]
		//f =  (float_t) loPass * (1.0f+ lfo1Output) * (1.0f + adsr2Output) * pitch * 1.16f / (SAMPLE_RATE/2) ;
		//f =  (float_t) loPass * pitch * 1.16f / (SAMPLE_RATE/2) ;

		//if (f>1.0f) f=1.0f;

		fb = (float_t) reso * (1.0f - 0.15f * f*f);
 8001bd2:	4bab      	ldr	r3, [pc, #684]	; (8001e80 <calcSynth+0x8fc>)
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001e84 <calcSynth+0x900>
 8001bdc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001be0:	4ba7      	ldr	r3, [pc, #668]	; (8001e80 <calcSynth+0x8fc>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bf2:	4ba5      	ldr	r3, [pc, #660]	; (8001e88 <calcSynth+0x904>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfc:	4ba3      	ldr	r3, [pc, #652]	; (8001e8c <calcSynth+0x908>)
 8001bfe:	edc3 7a00 	vstr	s15, [r3]

		//these things break the code
		//signal -= out4 * fb;
		//signal *= 0.35013f * (f*f) * (f*f);

		out1 = signal + 0.3f * in1 + (1-f) * out1; 				// Pole 1
 8001c02:	4ba3      	ldr	r3, [pc, #652]	; (8001e90 <calcSynth+0x90c>)
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001e94 <calcSynth+0x910>
 8001c0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c10:	4b9a      	ldr	r3, [pc, #616]	; (8001e7c <calcSynth+0x8f8>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1a:	4b99      	ldr	r3, [pc, #612]	; (8001e80 <calcSynth+0x8fc>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c28:	4b9b      	ldr	r3, [pc, #620]	; (8001e98 <calcSynth+0x914>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c36:	4b98      	ldr	r3, [pc, #608]	; (8001e98 <calcSynth+0x914>)
 8001c38:	edc3 7a00 	vstr	s15, [r3]
		in1 = signal;
 8001c3c:	4b8f      	ldr	r3, [pc, #572]	; (8001e7c <calcSynth+0x8f8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a93      	ldr	r2, [pc, #588]	; (8001e90 <calcSynth+0x90c>)
 8001c42:	6013      	str	r3, [r2, #0]
		out2 = out1 + 0.3f * in2 + (1-f) * out2; 				// Pole 2
 8001c44:	4b95      	ldr	r3, [pc, #596]	; (8001e9c <calcSynth+0x918>)
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001e94 <calcSynth+0x910>
 8001c4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c52:	4b91      	ldr	r3, [pc, #580]	; (8001e98 <calcSynth+0x914>)
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c5c:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <calcSynth+0x8fc>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c66:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c6a:	4b8d      	ldr	r3, [pc, #564]	; (8001ea0 <calcSynth+0x91c>)
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	4b89      	ldr	r3, [pc, #548]	; (8001ea0 <calcSynth+0x91c>)
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
		in2 = out1;
 8001c7e:	4b86      	ldr	r3, [pc, #536]	; (8001e98 <calcSynth+0x914>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a86      	ldr	r2, [pc, #536]	; (8001e9c <calcSynth+0x918>)
 8001c84:	6013      	str	r3, [r2, #0]
		out3 = out2 + 0.3f * in3 + (1-f) * out3; 				// Pole 3
 8001c86:	4b87      	ldr	r3, [pc, #540]	; (8001ea4 <calcSynth+0x920>)
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001e94 <calcSynth+0x910>
 8001c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c94:	4b82      	ldr	r3, [pc, #520]	; (8001ea0 <calcSynth+0x91c>)
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c9e:	4b78      	ldr	r3, [pc, #480]	; (8001e80 <calcSynth+0x8fc>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ca8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cac:	4b7e      	ldr	r3, [pc, #504]	; (8001ea8 <calcSynth+0x924>)
 8001cae:	edd3 7a00 	vldr	s15, [r3]
 8001cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cba:	4b7b      	ldr	r3, [pc, #492]	; (8001ea8 <calcSynth+0x924>)
 8001cbc:	edc3 7a00 	vstr	s15, [r3]
		in3 = out2;
 8001cc0:	4b77      	ldr	r3, [pc, #476]	; (8001ea0 <calcSynth+0x91c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a77      	ldr	r2, [pc, #476]	; (8001ea4 <calcSynth+0x920>)
 8001cc6:	6013      	str	r3, [r2, #0]
		out4 = out3 + 0.3f * in4 + (1-f) * out4; 				// Pole 4
 8001cc8:	4b78      	ldr	r3, [pc, #480]	; (8001eac <calcSynth+0x928>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001e94 <calcSynth+0x910>
 8001cd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cd6:	4b74      	ldr	r3, [pc, #464]	; (8001ea8 <calcSynth+0x924>)
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce0:	4b67      	ldr	r3, [pc, #412]	; (8001e80 <calcSynth+0x8fc>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cee:	4b70      	ldr	r3, [pc, #448]	; (8001eb0 <calcSynth+0x92c>)
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	4b6c      	ldr	r3, [pc, #432]	; (8001eb0 <calcSynth+0x92c>)
 8001cfe:	edc3 7a00 	vstr	s15, [r3]
		in4 = out3;
 8001d02:	4b69      	ldr	r3, [pc, #420]	; (8001ea8 <calcSynth+0x924>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a69      	ldr	r2, [pc, #420]	; (8001eac <calcSynth+0x928>)
 8001d08:	6013      	str	r3, [r2, #0]

		signalPost = out4;
 8001d0a:	4b69      	ldr	r3, [pc, #420]	; (8001eb0 <calcSynth+0x92c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a69      	ldr	r2, [pc, #420]	; (8001eb4 <calcSynth+0x930>)
 8001d10:	6013      	str	r3, [r2, #0]

		//ADSR SECTION

		switch (adsr1State)
 8001d12:	4b69      	ldr	r3, [pc, #420]	; (8001eb8 <calcSynth+0x934>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d86f      	bhi.n	8001dfa <calcSynth+0x876>
 8001d1a:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <calcSynth+0x79c>)
 8001d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d20:	08001d35 	.word	0x08001d35
 8001d24:	08001d3f 	.word	0x08001d3f
 8001d28:	08001d7b 	.word	0x08001d7b
 8001d2c:	08001db9 	.word	0x08001db9
 8001d30:	08001dc3 	.word	0x08001dc3
		{
			case 0 :
			{
				adsr1Output = 0;
 8001d34:	4b61      	ldr	r3, [pc, #388]	; (8001ebc <calcSynth+0x938>)
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
				break;
 8001d3c:	e05d      	b.n	8001dfa <calcSynth+0x876>
			}

			case 1 :
			{
				adsr1Output = adsr1Output + attack1Inc;
 8001d3e:	4b5f      	ldr	r3, [pc, #380]	; (8001ebc <calcSynth+0x938>)
 8001d40:	ed93 7a00 	vldr	s14, [r3]
 8001d44:	4b5e      	ldr	r3, [pc, #376]	; (8001ec0 <calcSynth+0x93c>)
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4e:	4b5b      	ldr	r3, [pc, #364]	; (8001ebc <calcSynth+0x938>)
 8001d50:	edc3 7a00 	vstr	s15, [r3]

				if (adsr1Output > 1)
 8001d54:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <calcSynth+0x938>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	dc00      	bgt.n	8001d6a <calcSynth+0x7e6>
				{
					adsr1Output = 1;
					adsr1State = 2;
				}
				break;
 8001d68:	e047      	b.n	8001dfa <calcSynth+0x876>
					adsr1Output = 1;
 8001d6a:	4b54      	ldr	r3, [pc, #336]	; (8001ebc <calcSynth+0x938>)
 8001d6c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d70:	601a      	str	r2, [r3, #0]
					adsr1State = 2;
 8001d72:	4b51      	ldr	r3, [pc, #324]	; (8001eb8 <calcSynth+0x934>)
 8001d74:	2202      	movs	r2, #2
 8001d76:	701a      	strb	r2, [r3, #0]
				break;
 8001d78:	e03f      	b.n	8001dfa <calcSynth+0x876>
			}
			case 2 :
			{
				adsr1Output = adsr1Output - decay1Inc;
 8001d7a:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <calcSynth+0x938>)
 8001d7c:	ed93 7a00 	vldr	s14, [r3]
 8001d80:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <calcSynth+0x940>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8a:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <calcSynth+0x938>)
 8001d8c:	edc3 7a00 	vstr	s15, [r3]

				if (adsr1Output < adsr1Sus)
 8001d90:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <calcSynth+0x938>)
 8001d92:	ed93 7a00 	vldr	s14, [r3]
 8001d96:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <calcSynth+0x944>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	d400      	bmi.n	8001da8 <calcSynth+0x824>
				{
					adsr1Output = adsr1Sus;
					adsr1State = 3;
				}
				break;
 8001da6:	e028      	b.n	8001dfa <calcSynth+0x876>
					adsr1Output = adsr1Sus;
 8001da8:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <calcSynth+0x944>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a43      	ldr	r2, [pc, #268]	; (8001ebc <calcSynth+0x938>)
 8001dae:	6013      	str	r3, [r2, #0]
					adsr1State = 3;
 8001db0:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <calcSynth+0x934>)
 8001db2:	2203      	movs	r2, #3
 8001db4:	701a      	strb	r2, [r3, #0]
				break;
 8001db6:	e020      	b.n	8001dfa <calcSynth+0x876>
			}

			case 3 :
			{
				adsr1Output = adsr1Sus;
 8001db8:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <calcSynth+0x944>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a3f      	ldr	r2, [pc, #252]	; (8001ebc <calcSynth+0x938>)
 8001dbe:	6013      	str	r3, [r2, #0]
				break;
 8001dc0:	e01b      	b.n	8001dfa <calcSynth+0x876>
			}
			case 4 :
			{
				adsr1Output = adsr1Output - release1Inc;
 8001dc2:	4b3e      	ldr	r3, [pc, #248]	; (8001ebc <calcSynth+0x938>)
 8001dc4:	ed93 7a00 	vldr	s14, [r3]
 8001dc8:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <calcSynth+0x948>)
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd2:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <calcSynth+0x938>)
 8001dd4:	edc3 7a00 	vstr	s15, [r3]
				if (adsr1Output < 0)
 8001dd8:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <calcSynth+0x938>)
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	d400      	bmi.n	8001dea <calcSynth+0x866>
				{
					adsr1Output = 0;
					adsr1State = 0;
				}
				break;
 8001de8:	e006      	b.n	8001df8 <calcSynth+0x874>
					adsr1Output = 0;
 8001dea:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <calcSynth+0x938>)
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
					adsr1State = 0;
 8001df2:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <calcSynth+0x934>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
				break;
 8001df8:	bf00      	nop
			}
		}

		switch (adsr2State)
 8001dfa:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <calcSynth+0x94c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	f200 80ac 	bhi.w	8001f5c <calcSynth+0x9d8>
 8001e04:	a201      	add	r2, pc, #4	; (adr r2, 8001e0c <calcSynth+0x888>)
 8001e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0a:	bf00      	nop
 8001e0c:	08001e21 	.word	0x08001e21
 8001e10:	08001e2b 	.word	0x08001e2b
 8001e14:	08001edd 	.word	0x08001edd
 8001e18:	08001f1b 	.word	0x08001f1b
 8001e1c:	08001f25 	.word	0x08001f25
		{
			case 0 :
			{
				adsr2Output = 0;
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <calcSynth+0x950>)
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
				break;
 8001e28:	e098      	b.n	8001f5c <calcSynth+0x9d8>
			}

			case 1 :
			{
				adsr2Output = adsr2Output + attack2Inc;
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <calcSynth+0x950>)
 8001e2c:	ed93 7a00 	vldr	s14, [r3]
 8001e30:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <calcSynth+0x954>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3a:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <calcSynth+0x950>)
 8001e3c:	edc3 7a00 	vstr	s15, [r3]

				if (adsr2Output > 1)
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <calcSynth+0x950>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	dc00      	bgt.n	8001e56 <calcSynth+0x8d2>
				{
					adsr2Output = 1;
					adsr2State = 2;
				}
				break;
 8001e54:	e082      	b.n	8001f5c <calcSynth+0x9d8>
					adsr2Output = 1;
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <calcSynth+0x950>)
 8001e58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e5c:	601a      	str	r2, [r3, #0]
					adsr2State = 2;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <calcSynth+0x94c>)
 8001e60:	2202      	movs	r2, #2
 8001e62:	701a      	strb	r2, [r3, #0]
				break;
 8001e64:	e07a      	b.n	8001f5c <calcSynth+0x9d8>
 8001e66:	bf00      	nop
 8001e68:	0800a29c 	.word	0x0800a29c
 8001e6c:	200042ec 	.word	0x200042ec
 8001e70:	20000038 	.word	0x20000038
 8001e74:	200041f4 	.word	0x200041f4
 8001e78:	2000003c 	.word	0x2000003c
 8001e7c:	200000d8 	.word	0x200000d8
 8001e80:	200041fc 	.word	0x200041fc
 8001e84:	3e19999a 	.word	0x3e19999a
 8001e88:	20000034 	.word	0x20000034
 8001e8c:	20004258 	.word	0x20004258
 8001e90:	2000011c 	.word	0x2000011c
 8001e94:	3e99999a 	.word	0x3e99999a
 8001e98:	2000012c 	.word	0x2000012c
 8001e9c:	20000120 	.word	0x20000120
 8001ea0:	20000130 	.word	0x20000130
 8001ea4:	20000124 	.word	0x20000124
 8001ea8:	20000134 	.word	0x20000134
 8001eac:	20000128 	.word	0x20000128
 8001eb0:	20000138 	.word	0x20000138
 8001eb4:	200000dc 	.word	0x200000dc
 8001eb8:	200000e8 	.word	0x200000e8
 8001ebc:	200000e4 	.word	0x200000e4
 8001ec0:	200000ec 	.word	0x200000ec
 8001ec4:	200000f0 	.word	0x200000f0
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	200000f4 	.word	0x200000f4
 8001ed0:	200000fc 	.word	0x200000fc
 8001ed4:	200000f8 	.word	0x200000f8
 8001ed8:	20000100 	.word	0x20000100
			}
			case 2 :
			{
				adsr2Output = adsr2Output - decay2Inc;
 8001edc:	4b4b      	ldr	r3, [pc, #300]	; (800200c <calcSynth+0xa88>)
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <calcSynth+0xa8c>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eec:	4b47      	ldr	r3, [pc, #284]	; (800200c <calcSynth+0xa88>)
 8001eee:	edc3 7a00 	vstr	s15, [r3]

				if (adsr2Output < adsr1Sus)
 8001ef2:	4b46      	ldr	r3, [pc, #280]	; (800200c <calcSynth+0xa88>)
 8001ef4:	ed93 7a00 	vldr	s14, [r3]
 8001ef8:	4b46      	ldr	r3, [pc, #280]	; (8002014 <calcSynth+0xa90>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f06:	d400      	bmi.n	8001f0a <calcSynth+0x986>
				{
					adsr2Output = adsr1Sus;
					adsr2State = 3;
				}
				break;
 8001f08:	e028      	b.n	8001f5c <calcSynth+0x9d8>
					adsr2Output = adsr1Sus;
 8001f0a:	4b42      	ldr	r3, [pc, #264]	; (8002014 <calcSynth+0xa90>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a3f      	ldr	r2, [pc, #252]	; (800200c <calcSynth+0xa88>)
 8001f10:	6013      	str	r3, [r2, #0]
					adsr2State = 3;
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <calcSynth+0xa94>)
 8001f14:	2203      	movs	r2, #3
 8001f16:	701a      	strb	r2, [r3, #0]
				break;
 8001f18:	e020      	b.n	8001f5c <calcSynth+0x9d8>
			}

			case 3 :
			{
				adsr2Output = adsr2Sus;
 8001f1a:	4b40      	ldr	r3, [pc, #256]	; (800201c <calcSynth+0xa98>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a3b      	ldr	r2, [pc, #236]	; (800200c <calcSynth+0xa88>)
 8001f20:	6013      	str	r3, [r2, #0]
				break;
 8001f22:	e01b      	b.n	8001f5c <calcSynth+0x9d8>
			}
			case 4 :
			{
				adsr2Output = adsr2Output - release2Inc;
 8001f24:	4b39      	ldr	r3, [pc, #228]	; (800200c <calcSynth+0xa88>)
 8001f26:	ed93 7a00 	vldr	s14, [r3]
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <calcSynth+0xa9c>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f34:	4b35      	ldr	r3, [pc, #212]	; (800200c <calcSynth+0xa88>)
 8001f36:	edc3 7a00 	vstr	s15, [r3]
				if (adsr1Output < 0)
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <calcSynth+0xaa0>)
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f48:	d400      	bmi.n	8001f4c <calcSynth+0x9c8>
				{
					adsr2Output = 0;
					adsr2State = 0;
				}
				break;
 8001f4a:	e006      	b.n	8001f5a <calcSynth+0x9d6>
					adsr2Output = 0;
 8001f4c:	4b2f      	ldr	r3, [pc, #188]	; (800200c <calcSynth+0xa88>)
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
					adsr2State = 0;
 8001f54:	4b30      	ldr	r3, [pc, #192]	; (8002018 <calcSynth+0xa94>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
				break;
 8001f5a:	bf00      	nop
			}
		}

		//signal =  signal * 32767.0f * signalPost;
		signal =  adsr1Output * signal * 32767.0f;
 8001f5c:	4b31      	ldr	r3, [pc, #196]	; (8002024 <calcSynth+0xaa0>)
 8001f5e:	ed93 7a00 	vldr	s14, [r3]
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <calcSynth+0xaa4>)
 8001f64:	edd3 7a00 	vldr	s15, [r3]
 8001f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800202c <calcSynth+0xaa8>
 8001f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f74:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <calcSynth+0xaa4>)
 8001f76:	edc3 7a00 	vstr	s15, [r3]
		//signal = adsr1Output * 32767.0f * signalPost;

		if (signal > 32767.0f){
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <calcSynth+0xaa4>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800202c <calcSynth+0xaa8>
 8001f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8c:	dd02      	ble.n	8001f94 <calcSynth+0xa10>
			signal = 32767.0f;
 8001f8e:	4b26      	ldr	r3, [pc, #152]	; (8002028 <calcSynth+0xaa4>)
 8001f90:	4a27      	ldr	r2, [pc, #156]	; (8002030 <calcSynth+0xaac>)
 8001f92:	601a      	str	r2, [r3, #0]
		}
		if (signal < -32767.0f){
 8001f94:	4b24      	ldr	r3, [pc, #144]	; (8002028 <calcSynth+0xaa4>)
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002034 <calcSynth+0xab0>
 8001f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa6:	d502      	bpl.n	8001fae <calcSynth+0xa2a>
			signal = -32767.0f;
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <calcSynth+0xaa4>)
 8001faa:	4a23      	ldr	r2, [pc, #140]	; (8002038 <calcSynth+0xab4>)
 8001fac:	601a      	str	r2, [r3, #0]
		}

		//FILL BUFFER
		sendBuff[startIndex+i] =   (uint16_t)((int16_t) signal);		// Left Channel value
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <calcSynth+0xaa4>)
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb8:	ee17 3a90 	vmov	r3, s15
 8001fbc:	b219      	sxth	r1, r3
 8001fbe:	88fa      	ldrh	r2, [r7, #6]
 8001fc0:	8bbb      	ldrh	r3, [r7, #28]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	b289      	uxth	r1, r1
 8001fc6:	4a1d      	ldr	r2, [pc, #116]	; (800203c <calcSynth+0xab8>)
 8001fc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sendBuff[startIndex+i+1] = (uint16_t)((int16_t) signal);		// Right Channel Value
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <calcSynth+0xaa4>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd6:	ee17 3a90 	vmov	r3, s15
 8001fda:	b219      	sxth	r1, r3
 8001fdc:	88fa      	ldrh	r2, [r7, #6]
 8001fde:	8bbb      	ldrh	r3, [r7, #28]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b289      	uxth	r1, r1
 8001fe6:	4a15      	ldr	r2, [pc, #84]	; (800203c <calcSynth+0xab8>)
 8001fe8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		i = i+2;
 8001fec:	8bbb      	ldrh	r3, [r7, #28]
 8001fee:	3302      	adds	r3, #2
 8001ff0:	83bb      	strh	r3, [r7, #28]
	while (i < AUDIO_BUFFER_LENGTH_DIV2){
 8001ff2:	8bbb      	ldrh	r3, [r7, #28]
 8001ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff8:	f4ff ab59 	bcc.w	80016ae <calcSynth+0x12a>
	}
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	200000f8 	.word	0x200000f8
 8002010:	20000104 	.word	0x20000104
 8002014:	20000008 	.word	0x20000008
 8002018:	200000fc 	.word	0x200000fc
 800201c:	20000018 	.word	0x20000018
 8002020:	20000108 	.word	0x20000108
 8002024:	200000e4 	.word	0x200000e4
 8002028:	200000d8 	.word	0x200000d8
 800202c:	46fffe00 	.word	0x46fffe00
 8002030:	46fffe00 	.word	0x46fffe00
 8002034:	c6fffe00 	.word	0xc6fffe00
 8002038:	c6fffe00 	.word	0xc6fffe00
 800203c:	20000140 	.word	0x20000140

08002040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002044:	b672      	cpsid	i
}
 8002046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002048:	e7fe      	b.n	8002048 <Error_Handler+0x8>
	...

0800204c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_MspInit+0x44>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <HAL_MspInit+0x44>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_MspInit+0x44>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_MspInit+0x44>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	4a08      	ldr	r2, [pc, #32]	; (8002090 <HAL_MspInit+0x44>)
 8002070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002074:	6453      	str	r3, [r2, #68]	; 0x44
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_MspInit+0x44>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800

08002094 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HAL_I2C_MspInit+0x7c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d127      	bne.n	8002106 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <HAL_I2C_MspInit+0x80>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a16      	ldr	r2, [pc, #88]	; (8002114 <HAL_I2C_MspInit+0x80>)
 80020bc:	f043 0320 	orr.w	r3, r3, #32
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_I2C_MspInit+0x80>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020ce:	2303      	movs	r3, #3
 80020d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d2:	2312      	movs	r3, #18
 80020d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020da:	2303      	movs	r3, #3
 80020dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020de:	2304      	movs	r3, #4
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	480b      	ldr	r0, [pc, #44]	; (8002118 <HAL_I2C_MspInit+0x84>)
 80020ea:	f000 fefb 	bl	8002ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_I2C_MspInit+0x80>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a08      	ldr	r2, [pc, #32]	; (8002114 <HAL_I2C_MspInit+0x80>)
 80020f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_I2C_MspInit+0x80>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002106:	bf00      	nop
 8002108:	3728      	adds	r7, #40	; 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40005800 	.word	0x40005800
 8002114:	40023800 	.word	0x40023800
 8002118:	40021400 	.word	0x40021400

0800211c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_I2S_MspInit+0x7c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d127      	bne.n	800218e <HAL_I2S_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800213e:	4b17      	ldr	r3, [pc, #92]	; (800219c <HAL_I2S_MspInit+0x80>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	4a16      	ldr	r2, [pc, #88]	; (800219c <HAL_I2S_MspInit+0x80>)
 8002144:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002148:	6453      	str	r3, [r2, #68]	; 0x44
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_I2S_MspInit+0x80>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_I2S_MspInit+0x80>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a10      	ldr	r2, [pc, #64]	; (800219c <HAL_I2S_MspInit+0x80>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <HAL_I2S_MspInit+0x80>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800216e:	23b0      	movs	r3, #176	; 0xb0
 8002170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	2302      	movs	r3, #2
 8002174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800217e:	2305      	movs	r3, #5
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	4805      	ldr	r0, [pc, #20]	; (80021a0 <HAL_I2S_MspInit+0x84>)
 800218a:	f000 feab 	bl	8002ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800218e:	bf00      	nop
 8002190:	3728      	adds	r7, #40	; 0x28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40013000 	.word	0x40013000
 800219c:	40023800 	.word	0x40023800
 80021a0:	40020000 	.word	0x40020000

080021a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a3d      	ldr	r2, [pc, #244]	; (80022b8 <HAL_UART_MspInit+0x114>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d173      	bne.n	80022ae <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_UART_MspInit+0x118>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a3c      	ldr	r2, [pc, #240]	; (80022bc <HAL_UART_MspInit+0x118>)
 80021cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <HAL_UART_MspInit+0x118>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b37      	ldr	r3, [pc, #220]	; (80022bc <HAL_UART_MspInit+0x118>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a36      	ldr	r2, [pc, #216]	; (80022bc <HAL_UART_MspInit+0x118>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HAL_UART_MspInit+0x118>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f6:	4b31      	ldr	r3, [pc, #196]	; (80022bc <HAL_UART_MspInit+0x118>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a30      	ldr	r2, [pc, #192]	; (80022bc <HAL_UART_MspInit+0x118>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <HAL_UART_MspInit+0x118>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800220e:	2301      	movs	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800221e:	2308      	movs	r3, #8
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4619      	mov	r1, r3
 8002228:	4825      	ldr	r0, [pc, #148]	; (80022c0 <HAL_UART_MspInit+0x11c>)
 800222a:	f000 fe5b 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800222e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002240:	2308      	movs	r3, #8
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	481e      	ldr	r0, [pc, #120]	; (80022c4 <HAL_UART_MspInit+0x120>)
 800224c:	f000 fe4a 	bl	8002ee4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_UART_MspInit+0x124>)
 8002252:	4a1e      	ldr	r2, [pc, #120]	; (80022cc <HAL_UART_MspInit+0x128>)
 8002254:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <HAL_UART_MspInit+0x124>)
 8002258:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800225c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_UART_MspInit+0x124>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_UART_MspInit+0x124>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <HAL_UART_MspInit+0x124>)
 800226c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002270:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_UART_MspInit+0x124>)
 8002274:	2200      	movs	r2, #0
 8002276:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_UART_MspInit+0x124>)
 800227a:	2200      	movs	r2, #0
 800227c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_UART_MspInit+0x124>)
 8002280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002284:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_UART_MspInit+0x124>)
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_UART_MspInit+0x124>)
 800228e:	2200      	movs	r2, #0
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002292:	480d      	ldr	r0, [pc, #52]	; (80022c8 <HAL_UART_MspInit+0x124>)
 8002294:	f000 faae 	bl	80027f4 <HAL_DMA_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 800229e:	f7ff fecf 	bl	8002040 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <HAL_UART_MspInit+0x124>)
 80022a6:	671a      	str	r2, [r3, #112]	; 0x70
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <HAL_UART_MspInit+0x124>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	; 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40004c00 	.word	0x40004c00
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40020800 	.word	0x40020800
 80022c8:	20004194 	.word	0x20004194
 80022cc:	40026040 	.word	0x40026040

080022d0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a30      	ldr	r2, [pc, #192]	; (80023a0 <HAL_SAI_MspInit+0xd0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d15a      	bne.n	8002398 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80022e2:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <HAL_SAI_MspInit+0xd4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10b      	bne.n	8002302 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80022ea:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <HAL_SAI_MspInit+0xd8>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	4a2e      	ldr	r2, [pc, #184]	; (80023a8 <HAL_SAI_MspInit+0xd8>)
 80022f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_SAI_MspInit+0xd8>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8002302:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_SAI_MspInit+0xd4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	4a26      	ldr	r2, [pc, #152]	; (80023a4 <HAL_SAI_MspInit+0xd4>)
 800230a:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800230c:	2370      	movs	r3, #112	; 0x70
 800230e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800231c:	2306      	movs	r3, #6
 800231e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	4619      	mov	r1, r3
 8002326:	4821      	ldr	r0, [pc, #132]	; (80023ac <HAL_SAI_MspInit+0xdc>)
 8002328:	f000 fddc 	bl	8002ee4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 800232c:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 800232e:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <HAL_SAI_MspInit+0xe4>)
 8002330:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 8002346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800234a:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 800234e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002352:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 8002356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235a:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 800235e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002362:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 8002366:	2200      	movs	r2, #0
 8002368:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 800236c:	2200      	movs	r2, #0
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002370:	480f      	ldr	r0, [pc, #60]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 8002372:	f000 fa3f 	bl	80027f4 <HAL_DMA_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_SAI_MspInit+0xb0>
    {
      Error_Handler();
 800237c:	f7ff fe60 	bl	8002040 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 8002384:	671a      	str	r2, [r3, #112]	; 0x70
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 8002390:	66da      	str	r2, [r3, #108]	; 0x6c
 8002392:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <HAL_SAI_MspInit+0xe0>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8002398:	bf00      	nop
 800239a:	3720      	adds	r7, #32
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40015804 	.word	0x40015804
 80023a4:	20004184 	.word	0x20004184
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40021000 	.word	0x40021000
 80023b0:	20004260 	.word	0x20004260
 80023b4:	40026428 	.word	0x40026428

080023b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <NMI_Handler+0x4>

080023be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <HardFault_Handler+0x4>

080023c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <MemManage_Handler+0x4>

080023ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <BusFault_Handler+0x4>

080023d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <UsageFault_Handler+0x4>

080023d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002404:	f000 f8c4 	bl	8002590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}

0800240c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <DMA1_Stream2_IRQHandler+0x10>)
 8002412:	f000 fafd 	bl	8002a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20004194 	.word	0x20004194

08002420 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <DMA2_Stream1_IRQHandler+0x10>)
 8002426:	f000 faf3 	bl	8002a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20004260 	.word	0x20004260

08002434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <_sbrk+0x5c>)
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <_sbrk+0x60>)
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <_sbrk+0x64>)
 8002452:	4a12      	ldr	r2, [pc, #72]	; (800249c <_sbrk+0x68>)
 8002454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <_sbrk+0x64>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	429a      	cmp	r2, r3
 8002462:	d207      	bcs.n	8002474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002464:	f003 fe04 	bl	8006070 <__errno>
 8002468:	4603      	mov	r3, r0
 800246a:	220c      	movs	r2, #12
 800246c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246e:	f04f 33ff 	mov.w	r3, #4294967295
 8002472:	e009      	b.n	8002488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <_sbrk+0x64>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <_sbrk+0x64>)
 8002484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20080000 	.word	0x20080000
 8002494:	00000400 	.word	0x00000400
 8002498:	20004188 	.word	0x20004188
 800249c:	20004458 	.word	0x20004458

080024a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <SystemInit+0x20>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <SystemInit+0x20>)
 80024ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c8:	480d      	ldr	r0, [pc, #52]	; (8002500 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ca:	490e      	ldr	r1, [pc, #56]	; (8002504 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024cc:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d0:	e002      	b.n	80024d8 <LoopCopyDataInit>

080024d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d6:	3304      	adds	r3, #4

080024d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024dc:	d3f9      	bcc.n	80024d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024e0:	4c0b      	ldr	r4, [pc, #44]	; (8002510 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e4:	e001      	b.n	80024ea <LoopFillZerobss>

080024e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e8:	3204      	adds	r2, #4

080024ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ec:	d3fb      	bcc.n	80024e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024ee:	f7ff ffd7 	bl	80024a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f2:	f003 fdc3 	bl	800607c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f6:	f7fe f88f 	bl	8000618 <main>
  bx  lr    
 80024fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024fc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002504:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002508:	0800b6bc 	.word	0x0800b6bc
  ldr r2, =_sbss
 800250c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002510:	20004458 	.word	0x20004458

08002514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002514:	e7fe      	b.n	8002514 <ADC_IRQHandler>

08002516 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251a:	2003      	movs	r0, #3
 800251c:	f000 f928 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002520:	200f      	movs	r0, #15
 8002522:	f000 f805 	bl	8002530 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002526:	f7ff fd91 	bl	800204c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_InitTick+0x54>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x58>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002546:	fbb3 f3f1 	udiv	r3, r3, r1
 800254a:	fbb2 f3f3 	udiv	r3, r2, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f943 	bl	80027da <HAL_SYSTICK_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e00e      	b.n	800257c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d80a      	bhi.n	800257a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002564:	2200      	movs	r2, #0
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f000 f90b 	bl	8002786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <HAL_InitTick+0x5c>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000044 	.word	0x20000044
 8002588:	2000004c 	.word	0x2000004c
 800258c:	20000048 	.word	0x20000048

08002590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x20>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_IncTick+0x24>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <HAL_IncTick+0x24>)
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	2000004c 	.word	0x2000004c
 80025b4:	20004444 	.word	0x20004444

080025b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_GetTick+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20004444 	.word	0x20004444

080025d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <__NVIC_SetPriorityGrouping+0x40>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <__NVIC_SetPriorityGrouping+0x40>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00
 8002614:	05fa0000 	.word	0x05fa0000

08002618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	; (800266c <__NVIC_EnableIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	; (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	; (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273c:	d301      	bcc.n	8002742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <SysTick_Config+0x40>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274a:	210f      	movs	r1, #15
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f7ff ff8e 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <SysTick_Config+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <SysTick_Config+0x40>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff29 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002798:	f7ff ff3e 	bl	8002618 <__NVIC_GetPriorityGrouping>
 800279c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff8e 	bl	80026c4 <NVIC_EncodePriority>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff31 	bl	8002634 <__NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffa2 	bl	800272c <SysTick_Config>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7ff feda 	bl	80025b8 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e099      	b.n	8002944 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002830:	e00f      	b.n	8002852 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002832:	f7ff fec1 	bl	80025b8 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b05      	cmp	r3, #5
 800283e:	d908      	bls.n	8002852 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2203      	movs	r2, #3
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e078      	b.n	8002944 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e8      	bne.n	8002832 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4b38      	ldr	r3, [pc, #224]	; (800294c <HAL_DMA_Init+0x158>)
 800286c:	4013      	ands	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800287e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002896:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d107      	bne.n	80028bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4313      	orrs	r3, r2
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f023 0307 	bic.w	r3, r3, #7
 80028d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d117      	bne.n	8002916 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00e      	beq.n	8002916 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fa77 	bl	8002dec <DMA_CheckFifoParam>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2240      	movs	r2, #64	; 0x40
 8002908:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002912:	2301      	movs	r3, #1
 8002914:	e016      	b.n	8002944 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fa2e 	bl	8002d80 <DMA_CalcBaseAndBitshift>
 8002924:	4603      	mov	r3, r0
 8002926:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	223f      	movs	r2, #63	; 0x3f
 800292e:	409a      	lsls	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	e010803f 	.word	0xe010803f

08002950 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_DMA_Start_IT+0x26>
 8002972:	2302      	movs	r3, #2
 8002974:	e048      	b.n	8002a08 <HAL_DMA_Start_IT+0xb8>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d137      	bne.n	80029fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2202      	movs	r2, #2
 800298e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f9c0 	bl	8002d24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	223f      	movs	r2, #63	; 0x3f
 80029aa:	409a      	lsls	r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0216 	orr.w	r2, r2, #22
 80029be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029ce:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0208 	orr.w	r2, r2, #8
 80029e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e005      	b.n	8002a06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
 8002a04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002a1c:	4b92      	ldr	r3, [pc, #584]	; (8002c68 <HAL_DMA_IRQHandler+0x258>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a92      	ldr	r2, [pc, #584]	; (8002c6c <HAL_DMA_IRQHandler+0x25c>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0a9b      	lsrs	r3, r3, #10
 8002a28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d01a      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	2208      	movs	r2, #8
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	f043 0201 	orr.w	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	2201      	movs	r2, #1
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d012      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f043 0202 	orr.w	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d012      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f043 0204 	orr.w	r2, r3, #4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	2210      	movs	r2, #16
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d043      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d03c      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d018      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d024      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
 8002b3e:	e01f      	b.n	8002b80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01b      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
 8002b50:	e016      	b.n	8002b80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0208 	bic.w	r2, r2, #8
 8002b6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	2220      	movs	r2, #32
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 808e 	beq.w	8002cae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8086 	beq.w	8002cae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d136      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0216 	bic.w	r2, r2, #22
 8002bc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_DMA_IRQHandler+0x1da>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0208 	bic.w	r2, r2, #8
 8002bf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	223f      	movs	r2, #63	; 0x3f
 8002c00:	409a      	lsls	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d07d      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
        }
        return;
 8002c26:	e078      	b.n	8002d1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d01c      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d108      	bne.n	8002c56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d030      	beq.n	8002cae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
 8002c54:	e02b      	b.n	8002cae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d027      	beq.n	8002cae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
 8002c66:	e022      	b.n	8002cae <HAL_DMA_IRQHandler+0x29e>
 8002c68:	20000044 	.word	0x20000044
 8002c6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0210 	bic.w	r2, r2, #16
 8002c8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d032      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d022      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2205      	movs	r2, #5
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d307      	bcc.n	8002cf6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f2      	bne.n	8002cda <HAL_DMA_IRQHandler+0x2ca>
 8002cf4:	e000      	b.n	8002cf8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002cf6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
 8002d18:	e000      	b.n	8002d1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d1a:	bf00      	nop
    }
  }
}
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop

08002d24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d108      	bne.n	8002d64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d62:	e007      	b.n	8002d74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	60da      	str	r2, [r3, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	3b10      	subs	r3, #16
 8002d90:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <DMA_CalcBaseAndBitshift+0x60>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <DMA_CalcBaseAndBitshift+0x64>)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4413      	add	r3, r2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d908      	bls.n	8002dc0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <DMA_CalcBaseAndBitshift+0x68>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	1d1a      	adds	r2, r3, #4
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	659a      	str	r2, [r3, #88]	; 0x58
 8002dbe:	e006      	b.n	8002dce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <DMA_CalcBaseAndBitshift+0x68>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	aaaaaaab 	.word	0xaaaaaaab
 8002de4:	0800b644 	.word	0x0800b644
 8002de8:	fffffc00 	.word	0xfffffc00

08002dec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d11f      	bne.n	8002e46 <DMA_CheckFifoParam+0x5a>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d856      	bhi.n	8002eba <DMA_CheckFifoParam+0xce>
 8002e0c:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <DMA_CheckFifoParam+0x28>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e37 	.word	0x08002e37
 8002e1c:	08002e25 	.word	0x08002e25
 8002e20:	08002ebb 	.word	0x08002ebb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d046      	beq.n	8002ebe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e34:	e043      	b.n	8002ebe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e3e:	d140      	bne.n	8002ec2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e44:	e03d      	b.n	8002ec2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4e:	d121      	bne.n	8002e94 <DMA_CheckFifoParam+0xa8>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d837      	bhi.n	8002ec6 <DMA_CheckFifoParam+0xda>
 8002e56:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <DMA_CheckFifoParam+0x70>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002e6d 	.word	0x08002e6d
 8002e60:	08002e73 	.word	0x08002e73
 8002e64:	08002e6d 	.word	0x08002e6d
 8002e68:	08002e85 	.word	0x08002e85
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e70:	e030      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d025      	beq.n	8002eca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e82:	e022      	b.n	8002eca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e8c:	d11f      	bne.n	8002ece <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e92:	e01c      	b.n	8002ece <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d903      	bls.n	8002ea2 <DMA_CheckFifoParam+0xb6>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d003      	beq.n	8002ea8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ea0:	e018      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea6:	e015      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00e      	beq.n	8002ed2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb8:	e00b      	b.n	8002ed2 <DMA_CheckFifoParam+0xe6>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e00a      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e008      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e006      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e004      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e002      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ece:	bf00      	nop
 8002ed0:	e000      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop

08002ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e175      	b.n	80031f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f04:	2201      	movs	r2, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	f040 8164 	bne.w	80031ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d00b      	beq.n	8002f42 <HAL_GPIO_Init+0x5e>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d007      	beq.n	8002f42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f36:	2b11      	cmp	r3, #17
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b12      	cmp	r3, #18
 8002f40:	d130      	bne.n	8002fa4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0201 	and.w	r2, r3, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	2203      	movs	r2, #3
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x100>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b12      	cmp	r3, #18
 8002fe2:	d123      	bne.n	800302c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	08da      	lsrs	r2, r3, #3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3208      	adds	r2, #8
 8002fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	08da      	lsrs	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3208      	adds	r2, #8
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80be 	beq.w	80031ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306e:	4b66      	ldr	r3, [pc, #408]	; (8003208 <HAL_GPIO_Init+0x324>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	4a65      	ldr	r2, [pc, #404]	; (8003208 <HAL_GPIO_Init+0x324>)
 8003074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003078:	6453      	str	r3, [r2, #68]	; 0x44
 800307a:	4b63      	ldr	r3, [pc, #396]	; (8003208 <HAL_GPIO_Init+0x324>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003086:	4a61      	ldr	r2, [pc, #388]	; (800320c <HAL_GPIO_Init+0x328>)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	3302      	adds	r3, #2
 800308e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	220f      	movs	r2, #15
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a58      	ldr	r2, [pc, #352]	; (8003210 <HAL_GPIO_Init+0x32c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d037      	beq.n	8003122 <HAL_GPIO_Init+0x23e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a57      	ldr	r2, [pc, #348]	; (8003214 <HAL_GPIO_Init+0x330>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_GPIO_Init+0x23a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a56      	ldr	r2, [pc, #344]	; (8003218 <HAL_GPIO_Init+0x334>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02b      	beq.n	800311a <HAL_GPIO_Init+0x236>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a55      	ldr	r2, [pc, #340]	; (800321c <HAL_GPIO_Init+0x338>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d025      	beq.n	8003116 <HAL_GPIO_Init+0x232>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a54      	ldr	r2, [pc, #336]	; (8003220 <HAL_GPIO_Init+0x33c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01f      	beq.n	8003112 <HAL_GPIO_Init+0x22e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a53      	ldr	r2, [pc, #332]	; (8003224 <HAL_GPIO_Init+0x340>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d019      	beq.n	800310e <HAL_GPIO_Init+0x22a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a52      	ldr	r2, [pc, #328]	; (8003228 <HAL_GPIO_Init+0x344>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_GPIO_Init+0x226>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a51      	ldr	r2, [pc, #324]	; (800322c <HAL_GPIO_Init+0x348>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00d      	beq.n	8003106 <HAL_GPIO_Init+0x222>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a50      	ldr	r2, [pc, #320]	; (8003230 <HAL_GPIO_Init+0x34c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d007      	beq.n	8003102 <HAL_GPIO_Init+0x21e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4f      	ldr	r2, [pc, #316]	; (8003234 <HAL_GPIO_Init+0x350>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_GPIO_Init+0x21a>
 80030fa:	2309      	movs	r3, #9
 80030fc:	e012      	b.n	8003124 <HAL_GPIO_Init+0x240>
 80030fe:	230a      	movs	r3, #10
 8003100:	e010      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003102:	2308      	movs	r3, #8
 8003104:	e00e      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003106:	2307      	movs	r3, #7
 8003108:	e00c      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800310a:	2306      	movs	r3, #6
 800310c:	e00a      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800310e:	2305      	movs	r3, #5
 8003110:	e008      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003112:	2304      	movs	r3, #4
 8003114:	e006      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003116:	2303      	movs	r3, #3
 8003118:	e004      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800311a:	2302      	movs	r3, #2
 800311c:	e002      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003122:	2300      	movs	r3, #0
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	f002 0203 	and.w	r2, r2, #3
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	4093      	lsls	r3, r2
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003134:	4935      	ldr	r1, [pc, #212]	; (800320c <HAL_GPIO_Init+0x328>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003142:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <HAL_GPIO_Init+0x354>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003166:	4a34      	ldr	r2, [pc, #208]	; (8003238 <HAL_GPIO_Init+0x354>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800316c:	4b32      	ldr	r3, [pc, #200]	; (8003238 <HAL_GPIO_Init+0x354>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003190:	4a29      	ldr	r2, [pc, #164]	; (8003238 <HAL_GPIO_Init+0x354>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003196:	4b28      	ldr	r3, [pc, #160]	; (8003238 <HAL_GPIO_Init+0x354>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ba:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <HAL_GPIO_Init+0x354>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_GPIO_Init+0x354>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e4:	4a14      	ldr	r2, [pc, #80]	; (8003238 <HAL_GPIO_Init+0x354>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b0f      	cmp	r3, #15
 80031f4:	f67f ae86 	bls.w	8002f04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3724      	adds	r7, #36	; 0x24
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	40013800 	.word	0x40013800
 8003210:	40020000 	.word	0x40020000
 8003214:	40020400 	.word	0x40020400
 8003218:	40020800 	.word	0x40020800
 800321c:	40020c00 	.word	0x40020c00
 8003220:	40021000 	.word	0x40021000
 8003224:	40021400 	.word	0x40021400
 8003228:	40021800 	.word	0x40021800
 800322c:	40021c00 	.word	0x40021c00
 8003230:	40022000 	.word	0x40022000
 8003234:	40022400 	.word	0x40022400
 8003238:	40013c00 	.word	0x40013c00

0800323c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]
 8003248:	4613      	mov	r3, r2
 800324a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800324c:	787b      	ldrb	r3, [r7, #1]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003252:	887a      	ldrh	r2, [r7, #2]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003258:	e003      	b.n	8003262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	041a      	lsls	r2, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	619a      	str	r2, [r3, #24]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e07f      	b.n	8003382 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe fefc 	bl	8002094 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2224      	movs	r2, #36	; 0x24
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d107      	bne.n	80032ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	e006      	b.n	80032f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d104      	bne.n	800330a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003308:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_I2C_Init+0x11c>)
 8003316:	430b      	orrs	r3, r1
 8003318:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003328:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	ea42 0103 	orr.w	r1, r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	021a      	lsls	r2, r3, #8
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69d9      	ldr	r1, [r3, #28]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1a      	ldr	r2, [r3, #32]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	02008000 	.word	0x02008000

08003390 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d138      	bne.n	8003418 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e032      	b.n	800341a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2224      	movs	r2, #36	; 0x24
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0201 	bic.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6819      	ldr	r1, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b20      	cmp	r3, #32
 800343a:	d139      	bne.n	80034b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003446:	2302      	movs	r3, #2
 8003448:	e033      	b.n	80034b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2224      	movs	r2, #36	; 0x24
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003478:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	e000      	b.n	80034b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034b0:	2302      	movs	r3, #2
  }
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0d2      	b.n	8003678 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fe fe18 	bl	800211c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69d9      	ldr	r1, [r3, #28]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b60      	ldr	r3, [pc, #384]	; (8003680 <HAL_I2S_Init+0x1c0>)
 8003500:	400b      	ands	r3, r1
 8003502:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2202      	movs	r2, #2
 800350a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d067      	beq.n	80035e4 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800351c:	2310      	movs	r3, #16
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	e001      	b.n	8003526 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003522:	2320      	movs	r3, #32
 8003524:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b20      	cmp	r3, #32
 800352c:	d802      	bhi.n	8003534 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d102      	bne.n	8003542 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 800353c:	4b51      	ldr	r3, [pc, #324]	; (8003684 <HAL_I2S_Init+0x1c4>)
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e003      	b.n	800354a <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8a2 	bl	800368c <I2S_GetClockFreq>
 8003548:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003552:	d125      	bne.n	80035a0 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d010      	beq.n	800357e <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	fbb2 f2f3 	udiv	r2, r2, r3
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	461a      	mov	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	3305      	adds	r3, #5
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	e01f      	b.n	80035be <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	fbb2 f2f3 	udiv	r2, r2, r3
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	461a      	mov	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	fbb2 f3f3 	udiv	r3, r2, r3
 800359a:	3305      	adds	r3, #5
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	e00e      	b.n	80035be <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	3305      	adds	r3, #5
 80035bc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4a31      	ldr	r2, [pc, #196]	; (8003688 <HAL_I2S_Init+0x1c8>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	08db      	lsrs	r3, r3, #3
 80035c8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	085b      	lsrs	r3, r3, #1
 80035da:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	e003      	b.n	80035ec <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80035e4:	2302      	movs	r3, #2
 80035e6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d902      	bls.n	80035f8 <HAL_I2S_Init+0x138>
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	2bff      	cmp	r3, #255	; 0xff
 80035f6:	d907      	bls.n	8003608 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	f043 0210 	orr.w	r2, r3, #16
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e037      	b.n	8003678 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	ea42 0103 	orr.w	r1, r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	430a      	orrs	r2, r1
 800361a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69da      	ldr	r2, [r3, #28]
 8003622:	4b17      	ldr	r3, [pc, #92]	; (8003680 <HAL_I2S_Init+0x1c0>)
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6851      	ldr	r1, [r2, #4]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6892      	ldr	r2, [r2, #8]
 800362e:	4311      	orrs	r1, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	68d2      	ldr	r2, [r2, #12]
 8003634:	4311      	orrs	r1, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6992      	ldr	r2, [r2, #24]
 800363a:	430a      	orrs	r2, r1
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003646:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b30      	cmp	r3, #48	; 0x30
 800364e:	d003      	beq.n	8003658 <HAL_I2S_Init+0x198>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2bb0      	cmp	r3, #176	; 0xb0
 8003656:	d107      	bne.n	8003668 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003666:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3720      	adds	r7, #32
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	fffff040 	.word	0xfffff040
 8003684:	00bb8000 	.word	0x00bb8000
 8003688:	cccccccd 	.word	0xcccccccd

0800368c <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d02d      	beq.n	80036f8 <I2S_GetClockFreq+0x6c>
 800369c:	2b02      	cmp	r3, #2
 800369e:	d12e      	bne.n	80036fe <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80036a0:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <I2S_GetClockFreq+0x88>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d108      	bne.n	80036be <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <I2S_GetClockFreq+0x88>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b4:	4a18      	ldr	r2, [pc, #96]	; (8003718 <I2S_GetClockFreq+0x8c>)
 80036b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	e007      	b.n	80036ce <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80036be:	4b15      	ldr	r3, [pc, #84]	; (8003714 <I2S_GetClockFreq+0x88>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c6:	4a15      	ldr	r2, [pc, #84]	; (800371c <I2S_GetClockFreq+0x90>)
 80036c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036cc:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <I2S_GetClockFreq+0x88>)
 80036d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d4:	0f1b      	lsrs	r3, r3, #28
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <I2S_GetClockFreq+0x88>)
 80036de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e2:	099b      	lsrs	r3, r3, #6
 80036e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	fb02 f203 	mul.w	r2, r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	613b      	str	r3, [r7, #16]

      break;
 80036f6:	e005      	b.n	8003704 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <I2S_GetClockFreq+0x94>)
 80036fa:	613b      	str	r3, [r7, #16]
      break;
 80036fc:	e002      	b.n	8003704 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
      break;
 8003702:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8003704:	693b      	ldr	r3, [r7, #16]
}
 8003706:	4618      	mov	r0, r3
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800
 8003718:	00f42400 	.word	0x00f42400
 800371c:	017d7840 	.word	0x017d7840
 8003720:	00bb8000 	.word	0x00bb8000

08003724 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	4b23      	ldr	r3, [pc, #140]	; (80037bc <HAL_PWREx_EnableOverDrive+0x98>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	4a22      	ldr	r2, [pc, #136]	; (80037bc <HAL_PWREx_EnableOverDrive+0x98>)
 8003734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003738:	6413      	str	r3, [r2, #64]	; 0x40
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_PWREx_EnableOverDrive+0x98>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003746:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800374c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003750:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003752:	f7fe ff31 	bl	80025b8 <HAL_GetTick>
 8003756:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003758:	e009      	b.n	800376e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800375a:	f7fe ff2d 	bl	80025b8 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003768:	d901      	bls.n	800376e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e022      	b.n	80037b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377a:	d1ee      	bne.n	800375a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a0f      	ldr	r2, [pc, #60]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003786:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003788:	f7fe ff16 	bl	80025b8 <HAL_GetTick>
 800378c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800378e:	e009      	b.n	80037a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003790:	f7fe ff12 	bl	80025b8 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800379e:	d901      	bls.n	80037a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e007      	b.n	80037b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037b0:	d1ee      	bne.n	8003790 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40007000 	.word	0x40007000

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037cc:	2300      	movs	r3, #0
 80037ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e29b      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 8087 	beq.w	80038f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e8:	4b96      	ldr	r3, [pc, #600]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d00c      	beq.n	800380e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f4:	4b93      	ldr	r3, [pc, #588]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 030c 	and.w	r3, r3, #12
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d112      	bne.n	8003826 <HAL_RCC_OscConfig+0x62>
 8003800:	4b90      	ldr	r3, [pc, #576]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380c:	d10b      	bne.n	8003826 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380e:	4b8d      	ldr	r3, [pc, #564]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d06c      	beq.n	80038f4 <HAL_RCC_OscConfig+0x130>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d168      	bne.n	80038f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e275      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382e:	d106      	bne.n	800383e <HAL_RCC_OscConfig+0x7a>
 8003830:	4b84      	ldr	r3, [pc, #528]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a83      	ldr	r2, [pc, #524]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	e02e      	b.n	800389c <HAL_RCC_OscConfig+0xd8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x9c>
 8003846:	4b7f      	ldr	r3, [pc, #508]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a7e      	ldr	r2, [pc, #504]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800384c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b7c      	ldr	r3, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a7b      	ldr	r2, [pc, #492]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e01d      	b.n	800389c <HAL_RCC_OscConfig+0xd8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0xc0>
 800386a:	4b76      	ldr	r3, [pc, #472]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a75      	ldr	r2, [pc, #468]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	4b73      	ldr	r3, [pc, #460]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a72      	ldr	r2, [pc, #456]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e00b      	b.n	800389c <HAL_RCC_OscConfig+0xd8>
 8003884:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6e      	ldr	r2, [pc, #440]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800388a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b6c      	ldr	r3, [pc, #432]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a6b      	ldr	r2, [pc, #428]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fe fe88 	bl	80025b8 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fe fe84 	bl	80025b8 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	; 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e229      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0xe8>
 80038ca:	e014      	b.n	80038f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fe fe74 	bl	80025b8 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d4:	f7fe fe70 	bl	80025b8 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e215      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x110>
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d069      	beq.n	80039d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003902:	4b50      	ldr	r3, [pc, #320]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00b      	beq.n	8003926 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390e:	4b4d      	ldr	r3, [pc, #308]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b08      	cmp	r3, #8
 8003918:	d11c      	bne.n	8003954 <HAL_RCC_OscConfig+0x190>
 800391a:	4b4a      	ldr	r3, [pc, #296]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d116      	bne.n	8003954 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d005      	beq.n	800393e <HAL_RCC_OscConfig+0x17a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d001      	beq.n	800393e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e1e9      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393e:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	493d      	ldr	r1, [pc, #244]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003952:	e040      	b.n	80039d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d023      	beq.n	80039a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800395c:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a38      	ldr	r2, [pc, #224]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fe fe26 	bl	80025b8 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003970:	f7fe fe22 	bl	80025b8 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e1c7      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b30      	ldr	r3, [pc, #192]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398e:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4929      	ldr	r1, [pc, #164]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
 80039a2:	e018      	b.n	80039d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a4:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a26      	ldr	r2, [pc, #152]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fe02 	bl	80025b8 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b8:	f7fe fdfe 	bl	80025b8 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e1a3      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d038      	beq.n	8003a54 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d019      	beq.n	8003a1e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ea:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80039ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f6:	f7fe fddf 	bl	80025b8 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fe:	f7fe fddb 	bl	80025b8 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e180      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <HAL_RCC_OscConfig+0x23a>
 8003a1c:	e01a      	b.n	8003a54 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a22:	4a08      	ldr	r2, [pc, #32]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fe fdc5 	bl	80025b8 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a32:	f7fe fdc1 	bl	80025b8 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d903      	bls.n	8003a48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e166      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
 8003a44:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a48:	4b92      	ldr	r3, [pc, #584]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1ee      	bne.n	8003a32 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80a4 	beq.w	8003baa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a62:	4b8c      	ldr	r3, [pc, #560]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10d      	bne.n	8003a8a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	4b89      	ldr	r3, [pc, #548]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	4a88      	ldr	r2, [pc, #544]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a78:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7a:	4b86      	ldr	r3, [pc, #536]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a86:	2301      	movs	r3, #1
 8003a88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a8a:	4b83      	ldr	r3, [pc, #524]	; (8003c98 <HAL_RCC_OscConfig+0x4d4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d118      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a96:	4b80      	ldr	r3, [pc, #512]	; (8003c98 <HAL_RCC_OscConfig+0x4d4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a7f      	ldr	r2, [pc, #508]	; (8003c98 <HAL_RCC_OscConfig+0x4d4>)
 8003a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa2:	f7fe fd89 	bl	80025b8 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aaa:	f7fe fd85 	bl	80025b8 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b64      	cmp	r3, #100	; 0x64
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e12a      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abc:	4b76      	ldr	r3, [pc, #472]	; (8003c98 <HAL_RCC_OscConfig+0x4d4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d106      	bne.n	8003ade <HAL_RCC_OscConfig+0x31a>
 8003ad0:	4b70      	ldr	r3, [pc, #448]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	4a6f      	ldr	r2, [pc, #444]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6713      	str	r3, [r2, #112]	; 0x70
 8003adc:	e02d      	b.n	8003b3a <HAL_RCC_OscConfig+0x376>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x33c>
 8003ae6:	4b6b      	ldr	r3, [pc, #428]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	4a6a      	ldr	r2, [pc, #424]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	6713      	str	r3, [r2, #112]	; 0x70
 8003af2:	4b68      	ldr	r3, [pc, #416]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	4a67      	ldr	r2, [pc, #412]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003af8:	f023 0304 	bic.w	r3, r3, #4
 8003afc:	6713      	str	r3, [r2, #112]	; 0x70
 8003afe:	e01c      	b.n	8003b3a <HAL_RCC_OscConfig+0x376>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d10c      	bne.n	8003b22 <HAL_RCC_OscConfig+0x35e>
 8003b08:	4b62      	ldr	r3, [pc, #392]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a61      	ldr	r2, [pc, #388]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	4b5f      	ldr	r3, [pc, #380]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4a5e      	ldr	r2, [pc, #376]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b20:	e00b      	b.n	8003b3a <HAL_RCC_OscConfig+0x376>
 8003b22:	4b5c      	ldr	r3, [pc, #368]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a5b      	ldr	r2, [pc, #364]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	4b59      	ldr	r3, [pc, #356]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a58      	ldr	r2, [pc, #352]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b42:	f7fe fd39 	bl	80025b8 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fe fd35 	bl	80025b8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e0d8      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ee      	beq.n	8003b4a <HAL_RCC_OscConfig+0x386>
 8003b6c:	e014      	b.n	8003b98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fe fd23 	bl	80025b8 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe fd1f 	bl	80025b8 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e0c2      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8c:	4b41      	ldr	r3, [pc, #260]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ee      	bne.n	8003b76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9e:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a3c      	ldr	r2, [pc, #240]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80ae 	beq.w	8003d10 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bb4:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d06d      	beq.n	8003c9c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d14b      	bne.n	8003c60 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc8:	4b32      	ldr	r3, [pc, #200]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a31      	ldr	r2, [pc, #196]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fcf0 	bl	80025b8 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fe fcec 	bl	80025b8 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e091      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bee:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	019b      	lsls	r3, r3, #6
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	3b01      	subs	r3, #1
 8003c14:	041b      	lsls	r3, r3, #16
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	061b      	lsls	r3, r3, #24
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	071b      	lsls	r3, r3, #28
 8003c26:	491b      	ldr	r1, [pc, #108]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c2c:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fe fcbe 	bl	80025b8 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fe fcba 	bl	80025b8 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e05f      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c52:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0x47c>
 8003c5e:	e057      	b.n	8003d10 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0b      	ldr	r2, [pc, #44]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fca4 	bl	80025b8 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fe fca0 	bl	80025b8 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e045      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x4b0>
 8003c92:	e03d      	b.n	8003d10 <HAL_RCC_OscConfig+0x54c>
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c9c:	4b1f      	ldr	r3, [pc, #124]	; (8003d1c <HAL_RCC_OscConfig+0x558>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d030      	beq.n	8003d0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d129      	bne.n	8003d0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d122      	bne.n	8003d0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cd2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d119      	bne.n	8003d0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d10f      	bne.n	8003d0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800

08003d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0d0      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d38:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d910      	bls.n	8003d68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	4b67      	ldr	r3, [pc, #412]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 020f 	bic.w	r2, r3, #15
 8003d4e:	4965      	ldr	r1, [pc, #404]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d56:	4b63      	ldr	r3, [pc, #396]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0b8      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d80:	4b59      	ldr	r3, [pc, #356]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a58      	ldr	r2, [pc, #352]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d98:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4a52      	ldr	r2, [pc, #328]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003da2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da4:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	494d      	ldr	r1, [pc, #308]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d040      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d115      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e07f      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de2:	4b41      	ldr	r3, [pc, #260]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e073      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df2:	4b3d      	ldr	r3, [pc, #244]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e06b      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e02:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f023 0203 	bic.w	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4936      	ldr	r1, [pc, #216]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e14:	f7fe fbd0 	bl	80025b8 <HAL_GetTick>
 8003e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7fe fbcc 	bl	80025b8 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e053      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e32:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 020c 	and.w	r2, r3, #12
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d1eb      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e44:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d210      	bcs.n	8003e74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 020f 	bic.w	r2, r3, #15
 8003e5a:	4922      	ldr	r1, [pc, #136]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e032      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4916      	ldr	r1, [pc, #88]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e9e:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	490e      	ldr	r1, [pc, #56]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eb2:	f000 f821 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	490a      	ldr	r1, [pc, #40]	; (8003eec <HAL_RCC_ClockConfig+0x1cc>)
 8003ec4:	5ccb      	ldrb	r3, [r1, r3]
 8003ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eca:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <HAL_RCC_ClockConfig+0x1d0>)
 8003ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ece:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <HAL_RCC_ClockConfig+0x1d4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fb2c 	bl	8002530 <HAL_InitTick>

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023c00 	.word	0x40023c00
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	0800b62c 	.word	0x0800b62c
 8003ef0:	20000044 	.word	0x20000044
 8003ef4:	20000048 	.word	0x20000048

08003ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef8:	b5b0      	push	{r4, r5, r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003efe:	2100      	movs	r1, #0
 8003f00:	6079      	str	r1, [r7, #4]
 8003f02:	2100      	movs	r1, #0
 8003f04:	60f9      	str	r1, [r7, #12]
 8003f06:	2100      	movs	r1, #0
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f0e:	4952      	ldr	r1, [pc, #328]	; (8004058 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f10:	6889      	ldr	r1, [r1, #8]
 8003f12:	f001 010c 	and.w	r1, r1, #12
 8003f16:	2908      	cmp	r1, #8
 8003f18:	d00d      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0x3e>
 8003f1a:	2908      	cmp	r1, #8
 8003f1c:	f200 8094 	bhi.w	8004048 <HAL_RCC_GetSysClockFreq+0x150>
 8003f20:	2900      	cmp	r1, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_RCC_GetSysClockFreq+0x32>
 8003f24:	2904      	cmp	r1, #4
 8003f26:	d003      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x38>
 8003f28:	e08e      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f2a:	4b4c      	ldr	r3, [pc, #304]	; (800405c <HAL_RCC_GetSysClockFreq+0x164>)
 8003f2c:	60bb      	str	r3, [r7, #8]
      break;
 8003f2e:	e08e      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f30:	4b4b      	ldr	r3, [pc, #300]	; (8004060 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f32:	60bb      	str	r3, [r7, #8]
      break;
 8003f34:	e08b      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f36:	4948      	ldr	r1, [pc, #288]	; (8004058 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f38:	6849      	ldr	r1, [r1, #4]
 8003f3a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003f3e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f40:	4945      	ldr	r1, [pc, #276]	; (8004058 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f42:	6849      	ldr	r1, [r1, #4]
 8003f44:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003f48:	2900      	cmp	r1, #0
 8003f4a:	d024      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4c:	4942      	ldr	r1, [pc, #264]	; (8004058 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f4e:	6849      	ldr	r1, [r1, #4]
 8003f50:	0989      	lsrs	r1, r1, #6
 8003f52:	4608      	mov	r0, r1
 8003f54:	f04f 0100 	mov.w	r1, #0
 8003f58:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003f5c:	f04f 0500 	mov.w	r5, #0
 8003f60:	ea00 0204 	and.w	r2, r0, r4
 8003f64:	ea01 0305 	and.w	r3, r1, r5
 8003f68:	493d      	ldr	r1, [pc, #244]	; (8004060 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f6a:	fb01 f003 	mul.w	r0, r1, r3
 8003f6e:	2100      	movs	r1, #0
 8003f70:	fb01 f102 	mul.w	r1, r1, r2
 8003f74:	1844      	adds	r4, r0, r1
 8003f76:	493a      	ldr	r1, [pc, #232]	; (8004060 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f78:	fba2 0101 	umull	r0, r1, r2, r1
 8003f7c:	1863      	adds	r3, r4, r1
 8003f7e:	4619      	mov	r1, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	f7fc f956 	bl	8000238 <__aeabi_uldivmod>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4613      	mov	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	e04a      	b.n	800402c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f96:	4b30      	ldr	r3, [pc, #192]	; (8004058 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	099b      	lsrs	r3, r3, #6
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fa6:	f04f 0100 	mov.w	r1, #0
 8003faa:	ea02 0400 	and.w	r4, r2, r0
 8003fae:	ea03 0501 	and.w	r5, r3, r1
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	014b      	lsls	r3, r1, #5
 8003fc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003fc4:	0142      	lsls	r2, r0, #5
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	4619      	mov	r1, r3
 8003fca:	1b00      	subs	r0, r0, r4
 8003fcc:	eb61 0105 	sbc.w	r1, r1, r5
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	018b      	lsls	r3, r1, #6
 8003fda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fde:	0182      	lsls	r2, r0, #6
 8003fe0:	1a12      	subs	r2, r2, r0
 8003fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fe6:	f04f 0000 	mov.w	r0, #0
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	00d9      	lsls	r1, r3, #3
 8003ff0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ff4:	00d0      	lsls	r0, r2, #3
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	1912      	adds	r2, r2, r4
 8003ffc:	eb45 0303 	adc.w	r3, r5, r3
 8004000:	f04f 0000 	mov.w	r0, #0
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	0299      	lsls	r1, r3, #10
 800400a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800400e:	0290      	lsls	r0, r2, #10
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4610      	mov	r0, r2
 8004016:	4619      	mov	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	461a      	mov	r2, r3
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	f7fc f90a 	bl	8000238 <__aeabi_uldivmod>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4613      	mov	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <HAL_RCC_GetSysClockFreq+0x160>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	3301      	adds	r3, #1
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	60bb      	str	r3, [r7, #8]
      break;
 8004046:	e002      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <HAL_RCC_GetSysClockFreq+0x164>)
 800404a:	60bb      	str	r3, [r7, #8]
      break;
 800404c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800404e:	68bb      	ldr	r3, [r7, #8]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bdb0      	pop	{r4, r5, r7, pc}
 8004058:	40023800 	.word	0x40023800
 800405c:	00f42400 	.word	0x00f42400
 8004060:	017d7840 	.word	0x017d7840

08004064 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_RCC_GetHCLKFreq+0x14>)
 800406a:	681b      	ldr	r3, [r3, #0]
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000044 	.word	0x20000044

0800407c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004080:	f7ff fff0 	bl	8004064 <HAL_RCC_GetHCLKFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	0a9b      	lsrs	r3, r3, #10
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	4903      	ldr	r1, [pc, #12]	; (80040a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004098:	4618      	mov	r0, r3
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40023800 	.word	0x40023800
 80040a0:	0800b63c 	.word	0x0800b63c

080040a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040a8:	f7ff ffdc 	bl	8004064 <HAL_RCC_GetHCLKFreq>
 80040ac:	4602      	mov	r2, r0
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	0b5b      	lsrs	r3, r3, #13
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	4903      	ldr	r1, [pc, #12]	; (80040c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ba:	5ccb      	ldrb	r3, [r1, r3]
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	0800b63c 	.word	0x0800b63c

080040cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d012      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040f4:	4b69      	ldr	r3, [pc, #420]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4a68      	ldr	r2, [pc, #416]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040fe:	6093      	str	r3, [r2, #8]
 8004100:	4b66      	ldr	r3, [pc, #408]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	4964      	ldr	r1, [pc, #400]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004116:	2301      	movs	r3, #1
 8004118:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d017      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004126:	4b5d      	ldr	r3, [pc, #372]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800412c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004134:	4959      	ldr	r1, [pc, #356]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004144:	d101      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004146:	2301      	movs	r3, #1
 8004148:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004152:	2301      	movs	r3, #1
 8004154:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d017      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004162:	4b4e      	ldr	r3, [pc, #312]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004168:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	494a      	ldr	r1, [pc, #296]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004180:	d101      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004182:	2301      	movs	r3, #1
 8004184:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800418e:	2301      	movs	r3, #1
 8004190:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800419e:	2301      	movs	r3, #1
 80041a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 808b 	beq.w	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041b0:	4b3a      	ldr	r3, [pc, #232]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	4a39      	ldr	r2, [pc, #228]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ba:	6413      	str	r3, [r2, #64]	; 0x40
 80041bc:	4b37      	ldr	r3, [pc, #220]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041c8:	4b35      	ldr	r3, [pc, #212]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a34      	ldr	r2, [pc, #208]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d4:	f7fe f9f0 	bl	80025b8 <HAL_GetTick>
 80041d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041dc:	f7fe f9ec 	bl	80025b8 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e38f      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041ee:	4b2c      	ldr	r3, [pc, #176]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041fa:	4b28      	ldr	r3, [pc, #160]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d035      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	429a      	cmp	r2, r3
 8004216:	d02e      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004218:	4b20      	ldr	r3, [pc, #128]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004220:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004222:	4b1e      	ldr	r3, [pc, #120]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	4a1d      	ldr	r2, [pc, #116]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800422e:	4b1b      	ldr	r3, [pc, #108]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	4a1a      	ldr	r2, [pc, #104]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004238:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800423a:	4a18      	ldr	r2, [pc, #96]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004240:	4b16      	ldr	r3, [pc, #88]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	d114      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fe f9b4 	bl	80025b8 <HAL_GetTick>
 8004250:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004252:	e00a      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004254:	f7fe f9b0 	bl	80025b8 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e351      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426a:	4b0c      	ldr	r3, [pc, #48]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0ee      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004282:	d111      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004292:	400b      	ands	r3, r1
 8004294:	4901      	ldr	r1, [pc, #4]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
 800429a:	e00b      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800429c:	40023800 	.word	0x40023800
 80042a0:	40007000 	.word	0x40007000
 80042a4:	0ffffcff 	.word	0x0ffffcff
 80042a8:	4bb3      	ldr	r3, [pc, #716]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	4ab2      	ldr	r2, [pc, #712]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042b2:	6093      	str	r3, [r2, #8]
 80042b4:	4bb0      	ldr	r3, [pc, #704]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c0:	49ad      	ldr	r1, [pc, #692]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d010      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042d2:	4ba9      	ldr	r3, [pc, #676]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d8:	4aa7      	ldr	r2, [pc, #668]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042e2:	4ba5      	ldr	r3, [pc, #660]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	49a2      	ldr	r1, [pc, #648]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004300:	4b9d      	ldr	r3, [pc, #628]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800430e:	499a      	ldr	r1, [pc, #616]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004322:	4b95      	ldr	r3, [pc, #596]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004330:	4991      	ldr	r1, [pc, #580]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004344:	4b8c      	ldr	r3, [pc, #560]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004352:	4989      	ldr	r1, [pc, #548]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004366:	4b84      	ldr	r3, [pc, #528]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	4980      	ldr	r1, [pc, #512]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004388:	4b7b      	ldr	r3, [pc, #492]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f023 0203 	bic.w	r2, r3, #3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	4978      	ldr	r1, [pc, #480]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043aa:	4b73      	ldr	r3, [pc, #460]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f023 020c 	bic.w	r2, r3, #12
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b8:	496f      	ldr	r1, [pc, #444]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043cc:	4b6a      	ldr	r3, [pc, #424]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043da:	4967      	ldr	r1, [pc, #412]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043ee:	4b62      	ldr	r3, [pc, #392]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fc:	495e      	ldr	r1, [pc, #376]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004410:	4b59      	ldr	r3, [pc, #356]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441e:	4956      	ldr	r1, [pc, #344]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004432:	4b51      	ldr	r3, [pc, #324]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	494d      	ldr	r1, [pc, #308]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004454:	4b48      	ldr	r3, [pc, #288]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004462:	4945      	ldr	r1, [pc, #276]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004476:	4b40      	ldr	r3, [pc, #256]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004484:	493c      	ldr	r1, [pc, #240]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004498:	4b37      	ldr	r3, [pc, #220]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a6:	4934      	ldr	r1, [pc, #208]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d011      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044ba:	4b2f      	ldr	r3, [pc, #188]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c8:	492b      	ldr	r1, [pc, #172]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d8:	d101      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044da:	2301      	movs	r3, #1
 80044dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044ea:	2301      	movs	r3, #1
 80044ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044fa:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004508:	491b      	ldr	r1, [pc, #108]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00b      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800451c:	4b16      	ldr	r3, [pc, #88]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800452c:	4912      	ldr	r1, [pc, #72]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004550:	4909      	ldr	r1, [pc, #36]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00f      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004574:	e002      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004576:	bf00      	nop
 8004578:	40023800 	.word	0x40023800
 800457c:	4986      	ldr	r1, [pc, #536]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004590:	4b81      	ldr	r3, [pc, #516]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004596:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a0:	497d      	ldr	r1, [pc, #500]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d006      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80d6 	beq.w	8004768 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045bc:	4b76      	ldr	r3, [pc, #472]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a75      	ldr	r2, [pc, #468]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c8:	f7fd fff6 	bl	80025b8 <HAL_GetTick>
 80045cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045d0:	f7fd fff2 	bl	80025b8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	; 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e195      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045e2:	4b6d      	ldr	r3, [pc, #436]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d021      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d11d      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004602:	4b65      	ldr	r3, [pc, #404]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004608:	0c1b      	lsrs	r3, r3, #16
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004610:	4b61      	ldr	r3, [pc, #388]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004616:	0e1b      	lsrs	r3, r3, #24
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	019a      	lsls	r2, r3, #6
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	071b      	lsls	r3, r3, #28
 8004636:	4958      	ldr	r1, [pc, #352]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d004      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004652:	d00a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800465c:	2b00      	cmp	r3, #0
 800465e:	d02e      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004668:	d129      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800466a:	4b4b      	ldr	r3, [pc, #300]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800466c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004678:	4b47      	ldr	r3, [pc, #284]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467e:	0f1b      	lsrs	r3, r3, #28
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	019a      	lsls	r2, r3, #6
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	041b      	lsls	r3, r3, #16
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	061b      	lsls	r3, r3, #24
 8004698:	431a      	orrs	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	071b      	lsls	r3, r3, #28
 800469e:	493e      	ldr	r1, [pc, #248]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046a6:	4b3c      	ldr	r3, [pc, #240]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ac:	f023 021f 	bic.w	r2, r3, #31
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	3b01      	subs	r3, #1
 80046b6:	4938      	ldr	r1, [pc, #224]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01d      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046ca:	4b33      	ldr	r3, [pc, #204]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d0:	0e1b      	lsrs	r3, r3, #24
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046d8:	4b2f      	ldr	r3, [pc, #188]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046de:	0f1b      	lsrs	r3, r3, #28
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	019a      	lsls	r2, r3, #6
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	041b      	lsls	r3, r3, #16
 80046f2:	431a      	orrs	r2, r3
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	061b      	lsls	r3, r3, #24
 80046f8:	431a      	orrs	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	071b      	lsls	r3, r3, #28
 80046fe:	4926      	ldr	r1, [pc, #152]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d011      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	019a      	lsls	r2, r3, #6
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	061b      	lsls	r3, r3, #24
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	071b      	lsls	r3, r3, #28
 800472e:	491a      	ldr	r1, [pc, #104]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004736:	4b18      	ldr	r3, [pc, #96]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a17      	ldr	r2, [pc, #92]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800473c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004742:	f7fd ff39 	bl	80025b8 <HAL_GetTick>
 8004746:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004748:	e008      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800474a:	f7fd ff35 	bl	80025b8 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b64      	cmp	r3, #100	; 0x64
 8004756:	d901      	bls.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e0d8      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b01      	cmp	r3, #1
 800476c:	f040 80ce 	bne.w	800490c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004770:	4b09      	ldr	r3, [pc, #36]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a08      	ldr	r2, [pc, #32]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800477a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800477c:	f7fd ff1c 	bl	80025b8 <HAL_GetTick>
 8004780:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004782:	e00b      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004784:	f7fd ff18 	bl	80025b8 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	d904      	bls.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e0bb      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800479c:	4b5e      	ldr	r3, [pc, #376]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a8:	d0ec      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d02e      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d12a      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047d2:	4b51      	ldr	r3, [pc, #324]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d8:	0c1b      	lsrs	r3, r3, #16
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047e0:	4b4d      	ldr	r3, [pc, #308]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	0f1b      	lsrs	r3, r3, #28
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	019a      	lsls	r2, r3, #6
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	041b      	lsls	r3, r3, #16
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	061b      	lsls	r3, r3, #24
 8004800:	431a      	orrs	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	071b      	lsls	r3, r3, #28
 8004806:	4944      	ldr	r1, [pc, #272]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800480e:	4b42      	ldr	r3, [pc, #264]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004814:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	3b01      	subs	r3, #1
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	493d      	ldr	r1, [pc, #244]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d022      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800483c:	d11d      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800483e:	4b36      	ldr	r3, [pc, #216]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004844:	0e1b      	lsrs	r3, r3, #24
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800484c:	4b32      	ldr	r3, [pc, #200]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004852:	0f1b      	lsrs	r3, r3, #28
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	019a      	lsls	r2, r3, #6
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	041b      	lsls	r3, r3, #16
 8004866:	431a      	orrs	r2, r3
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	061b      	lsls	r3, r3, #24
 800486c:	431a      	orrs	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	071b      	lsls	r3, r3, #28
 8004872:	4929      	ldr	r1, [pc, #164]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d028      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004886:	4b24      	ldr	r3, [pc, #144]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	0e1b      	lsrs	r3, r3, #24
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004894:	4b20      	ldr	r3, [pc, #128]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	0c1b      	lsrs	r3, r3, #16
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	019a      	lsls	r2, r3, #6
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	041b      	lsls	r3, r3, #16
 80048ac:	431a      	orrs	r2, r3
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	061b      	lsls	r3, r3, #24
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	071b      	lsls	r3, r3, #28
 80048ba:	4917      	ldr	r1, [pc, #92]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048c2:	4b15      	ldr	r3, [pc, #84]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	4911      	ldr	r1, [pc, #68]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0e      	ldr	r2, [pc, #56]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e4:	f7fd fe68 	bl	80025b8 <HAL_GetTick>
 80048e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048ec:	f7fd fe64 	bl	80025b8 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	; 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e007      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048fe:	4b06      	ldr	r3, [pc, #24]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800490a:	d1ef      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3720      	adds	r7, #32
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800

0800491c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800493a:	f040 80a3 	bne.w	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 800493e:	4bac      	ldr	r3, [pc, #688]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004944:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800494c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004954:	f000 808a 	beq.w	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800495e:	f200 8093 	bhi.w	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004968:	d07d      	beq.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004970:	f200 808a 	bhi.w	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d004      	beq.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004980:	d039      	beq.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004982:	e081      	b.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004984:	4b9a      	ldr	r3, [pc, #616]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d108      	bne.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004990:	4b97      	ldr	r3, [pc, #604]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004998:	4a96      	ldr	r2, [pc, #600]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	e007      	b.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80049a2:	4b93      	ldr	r3, [pc, #588]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049aa:	4a93      	ldr	r2, [pc, #588]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80049b2:	4b8f      	ldr	r3, [pc, #572]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	0e1b      	lsrs	r3, r3, #24
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80049c0:	4b8b      	ldr	r3, [pc, #556]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	fb02 f203 	mul.w	r2, r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80049da:	4b85      	ldr	r3, [pc, #532]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80049dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e0:	0a1b      	lsrs	r3, r3, #8
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	3301      	adds	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f2:	617b      	str	r3, [r7, #20]
        break;
 80049f4:	e049      	b.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80049f6:	4b7e      	ldr	r3, [pc, #504]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d108      	bne.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a02:	4b7b      	ldr	r3, [pc, #492]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a0a:	4a7a      	ldr	r2, [pc, #488]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	e007      	b.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004a14:	4b76      	ldr	r3, [pc, #472]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a1c:	4a76      	ldr	r2, [pc, #472]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a22:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004a24:	4b72      	ldr	r3, [pc, #456]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a2a:	0e1b      	lsrs	r3, r3, #24
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004a32:	4b6f      	ldr	r3, [pc, #444]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a38:	099b      	lsrs	r3, r3, #6
 8004a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	fb02 f203 	mul.w	r2, r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004a4c:	4b68      	ldr	r3, [pc, #416]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	3301      	adds	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a62:	617b      	str	r3, [r7, #20]
        break;
 8004a64:	e011      	b.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004a66:	4b65      	ldr	r3, [pc, #404]	; (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a68:	617b      	str	r3, [r7, #20]
        break;
 8004a6a:	e00e      	b.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004a6c:	4b60      	ldr	r3, [pc, #384]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8004a78:	4b5e      	ldr	r3, [pc, #376]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004a7a:	617b      	str	r3, [r7, #20]
        break;
 8004a7c:	e005      	b.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8004a7e:	4b5e      	ldr	r3, [pc, #376]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004a80:	617b      	str	r3, [r7, #20]
        break;
 8004a82:	e002      	b.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8004a84:	bf00      	nop
 8004a86:	e000      	b.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8004a88:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a90:	f040 80a3 	bne.w	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004a94:	4b56      	ldr	r3, [pc, #344]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a9a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004aa2:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004aaa:	f000 808a 	beq.w	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ab4:	f200 8093 	bhi.w	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004abe:	d07d      	beq.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ac6:	f200 808a 	bhi.w	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d004      	beq.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ad6:	d039      	beq.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004ad8:	e081      	b.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004ada:	4b45      	ldr	r3, [pc, #276]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d108      	bne.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ae6:	4b42      	ldr	r3, [pc, #264]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aee:	4a41      	ldr	r2, [pc, #260]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	e007      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004af8:	4b3d      	ldr	r3, [pc, #244]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b00:	4a3d      	ldr	r2, [pc, #244]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004b08:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	0e1b      	lsrs	r3, r3, #24
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004b16:	4b36      	ldr	r3, [pc, #216]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1c:	099b      	lsrs	r3, r3, #6
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	fb02 f203 	mul.w	r2, r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004b30:	4b2f      	ldr	r3, [pc, #188]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b36:	0a1b      	lsrs	r3, r3, #8
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]
        break;
 8004b4a:	e049      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004b4c:	4b28      	ldr	r3, [pc, #160]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d108      	bne.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b58:	4b25      	ldr	r3, [pc, #148]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b60:	4a24      	ldr	r2, [pc, #144]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	e007      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004b6a:	4b21      	ldr	r3, [pc, #132]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b72:	4a21      	ldr	r2, [pc, #132]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004b7a:	4b1d      	ldr	r3, [pc, #116]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b80:	0e1b      	lsrs	r3, r3, #24
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004b88:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b8e:	099b      	lsrs	r3, r3, #6
 8004b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	fb02 f203 	mul.w	r2, r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004ba2:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	3301      	adds	r3, #1
 8004bae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	617b      	str	r3, [r7, #20]
        break;
 8004bba:	e011      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004bbe:	617b      	str	r3, [r7, #20]
        break;
 8004bc0:	e00e      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8004bce:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004bd0:	617b      	str	r3, [r7, #20]
        break;
 8004bd2:	e005      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 8004bd4:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004bd6:	617b      	str	r3, [r7, #20]
        break;
 8004bd8:	e002      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 8004bda:	bf00      	nop
 8004bdc:	e000      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 8004bde:	bf00      	nop

  return frequency;
 8004be0:	697b      	ldr	r3, [r7, #20]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	00f42400 	.word	0x00f42400
 8004bf8:	017d7840 	.word	0x017d7840
 8004bfc:	00bb8000 	.word	0x00bb8000

08004c00 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d904      	bls.n	8004c22 <HAL_SAI_InitProtocol+0x22>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	3b03      	subs	r3, #3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d812      	bhi.n	8004c46 <HAL_SAI_InitProtocol+0x46>
 8004c20:	e008      	b.n	8004c34 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fa55 	bl	80050d8 <SAI_InitI2S>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	75fb      	strb	r3, [r7, #23]
      break;
 8004c32:	e00b      	b.n	8004c4c <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fafa 	bl	8005234 <SAI_InitPCM>
 8004c40:	4603      	mov	r3, r0
 8004c42:	75fb      	strb	r3, [r7, #23]
      break;
 8004c44:	e002      	b.n	8004c4c <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4a:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f808 	bl	8004c68 <HAL_SAI_Init>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e156      	b.n	8004f34 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fd fb18 	bl	80022d0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fb79 	bl	80053a0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_SAI_Init+0x68>
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d80d      	bhi.n	8004cd6 <HAL_SAI_Init+0x6e>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_SAI_Init+0x5c>
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d003      	beq.n	8004cca <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004cc2:	e008      	b.n	8004cd6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
      break;
 8004cc8:	e006      	b.n	8004cd8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004cca:	2310      	movs	r3, #16
 8004ccc:	61fb      	str	r3, [r7, #28]
      break;
 8004cce:	e003      	b.n	8004cd8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004cd0:	2320      	movs	r3, #32
 8004cd2:	61fb      	str	r3, [r7, #28]
      break;
 8004cd4:	e000      	b.n	8004cd8 <HAL_SAI_Init+0x70>
      break;
 8004cd6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d81e      	bhi.n	8004d1e <HAL_SAI_Init+0xb6>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <HAL_SAI_Init+0x80>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004cf9 	.word	0x08004cf9
 8004cec:	08004cff 	.word	0x08004cff
 8004cf0:	08004d07 	.word	0x08004d07
 8004cf4:	08004d0f 	.word	0x08004d0f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
    }
    break;
 8004cfc:	e010      	b.n	8004d20 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d02:	617b      	str	r3, [r7, #20]
    }
    break;
 8004d04:	e00c      	b.n	8004d20 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004d06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d0a:	617b      	str	r3, [r7, #20]
    }
    break;
 8004d0c:	e008      	b.n	8004d20 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004d0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d12:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004d1c:	e000      	b.n	8004d20 <HAL_SAI_Init+0xb8>
    default:
      break;
 8004d1e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a85      	ldr	r2, [pc, #532]	; (8004f3c <HAL_SAI_Init+0x2d4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_SAI_Init+0xcc>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a84      	ldr	r2, [pc, #528]	; (8004f40 <HAL_SAI_Init+0x2d8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d103      	bne.n	8004d3c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004d34:	4a83      	ldr	r2, [pc, #524]	; (8004f44 <HAL_SAI_Init+0x2dc>)
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e002      	b.n	8004d42 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004d3c:	4a82      	ldr	r2, [pc, #520]	; (8004f48 <HAL_SAI_Init+0x2e0>)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d04c      	beq.n	8004de4 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a7a      	ldr	r2, [pc, #488]	; (8004f3c <HAL_SAI_Init+0x2d4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_SAI_Init+0xfa>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a78      	ldr	r2, [pc, #480]	; (8004f40 <HAL_SAI_Init+0x2d8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d104      	bne.n	8004d6c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004d62:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004d66:	f7ff fdd9 	bl	800491c <HAL_RCCEx_GetPeriphCLKFreq>
 8004d6a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a76      	ldr	r2, [pc, #472]	; (8004f4c <HAL_SAI_Init+0x2e4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <HAL_SAI_Init+0x118>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a75      	ldr	r2, [pc, #468]	; (8004f50 <HAL_SAI_Init+0x2e8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d104      	bne.n	8004d8a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004d80:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004d84:	f7ff fdca 	bl	800491c <HAL_RCCEx_GetPeriphCLKFreq>
 8004d88:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	461a      	mov	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	025b      	lsls	r3, r3, #9
 8004d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4a6b      	ldr	r2, [pc, #428]	; (8004f54 <HAL_SAI_Init+0x2ec>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	08da      	lsrs	r2, r3, #3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004db0:	68f9      	ldr	r1, [r7, #12]
 8004db2:	4b68      	ldr	r3, [pc, #416]	; (8004f54 <HAL_SAI_Init+0x2ec>)
 8004db4:	fba3 2301 	umull	r2, r3, r3, r1
 8004db8:	08da      	lsrs	r2, r3, #3
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	1aca      	subs	r2, r1, r3
 8004dc4:	2a08      	cmp	r2, #8
 8004dc6:	d904      	bls.n	8004dd2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d104      	bne.n	8004de4 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	085a      	lsrs	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_SAI_Init+0x18c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d109      	bne.n	8004e08 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_SAI_Init+0x198>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e001      	b.n	8004e04 <HAL_SAI_Init+0x19c>
 8004e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	e008      	b.n	8004e1a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d102      	bne.n	8004e16 <HAL_SAI_Init+0x1ae>
 8004e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e14:	e000      	b.n	8004e18 <HAL_SAI_Init+0x1b0>
 8004e16:	2300      	movs	r3, #0
 8004e18:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6819      	ldr	r1, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4b4c      	ldr	r3, [pc, #304]	; (8004f58 <HAL_SAI_Init+0x2f0>)
 8004e26:	400b      	ands	r3, r1
 8004e28:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6819      	ldr	r1, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e38:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e3e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	431a      	orrs	r2, r3
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8004e52:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e5e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	051b      	lsls	r3, r3, #20
 8004e66:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6859      	ldr	r1, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b38      	ldr	r3, [pc, #224]	; (8004f5c <HAL_SAI_Init+0x2f4>)
 8004e7c:	400b      	ands	r3, r1
 8004e7e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6899      	ldr	r1, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <HAL_SAI_Init+0x2f8>)
 8004eaa:	400b      	ands	r3, r1
 8004eac:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6899      	ldr	r1, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004ebe:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004ec4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004eca:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004ed4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68d9      	ldr	r1, [r3, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004eec:	400b      	ands	r3, r1
 8004eee:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68d9      	ldr	r1, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efe:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40015804 	.word	0x40015804
 8004f40:	40015824 	.word	0x40015824
 8004f44:	40015800 	.word	0x40015800
 8004f48:	40015c00 	.word	0x40015c00
 8004f4c:	40015c04 	.word	0x40015c04
 8004f50:	40015c24 	.word	0x40015c24
 8004f54:	cccccccd 	.word	0xcccccccd
 8004f58:	ff05c010 	.word	0xff05c010
 8004f5c:	ffff1ff0 	.word	0xffff1ff0
 8004f60:	fff88000 	.word	0xfff88000

08004f64 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8004f72:	f7fd fb21 	bl	80025b8 <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <HAL_SAI_Transmit_DMA+0x20>
 8004f7e:	88fb      	ldrh	r3, [r7, #6]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e093      	b.n	80050b0 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	f040 808c 	bne.w	80050ae <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_SAI_Transmit_DMA+0x40>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e085      	b.n	80050b0 <HAL_SAI_Transmit_DMA+0x14c>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	88fa      	ldrh	r2, [r7, #6]
 8004fb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	88fa      	ldrh	r2, [r7, #6]
 8004fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2212      	movs	r2, #18
 8004fce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd6:	4a38      	ldr	r2, [pc, #224]	; (80050b8 <HAL_SAI_Transmit_DMA+0x154>)
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fde:	4a37      	ldr	r2, [pc, #220]	; (80050bc <HAL_SAI_Transmit_DMA+0x158>)
 8004fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe6:	4a36      	ldr	r2, [pc, #216]	; (80050c0 <HAL_SAI_Transmit_DMA+0x15c>)
 8004fe8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fee:	2200      	movs	r2, #0
 8004ff0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	331c      	adds	r3, #28
 8005002:	461a      	mov	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800500a:	f7fd fca1 	bl	8002950 <HAL_DMA_Start_IT>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e047      	b.n	80050b0 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005020:	2100      	movs	r1, #0
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f986 	bl	8005334 <SAI_InterruptFlag>
 8005028:	4601      	mov	r1, r0
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005046:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005048:	e015      	b.n	8005076 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800504a:	f7fd fab5 	bl	80025b8 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005058:	d90d      	bls.n	8005076 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005060:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e01c      	b.n	80050b0 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0e2      	beq.n	800504a <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d107      	bne.n	80050a2 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80050a0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	e000      	b.n	80050b0 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80050ae:	2302      	movs	r3, #2
  }
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	08005471 	.word	0x08005471
 80050bc:	08005411 	.word	0x08005411
 80050c0:	0800548d 	.word	0x0800548d

080050c4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <SAI_InitI2S+0x2a>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d103      	bne.n	800510a <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	63da      	str	r2, [r3, #60]	; 0x3c
 8005108:	e002      	b.n	8005110 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005116:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800511e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e076      	b.n	8005228 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d107      	bne.n	8005150 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800514c:	651a      	str	r2, [r3, #80]	; 0x50
 800514e:	e006      	b.n	800515e <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005156:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	651a      	str	r2, [r3, #80]	; 0x50
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d84f      	bhi.n	8005204 <SAI_InitI2S+0x12c>
 8005164:	a201      	add	r2, pc, #4	; (adr r2, 800516c <SAI_InitI2S+0x94>)
 8005166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516a:	bf00      	nop
 800516c:	0800517d 	.word	0x0800517d
 8005170:	0800519f 	.word	0x0800519f
 8005174:	080051c1 	.word	0x080051c1
 8005178:	080051e3 	.word	0x080051e3

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2280      	movs	r2, #128	; 0x80
 8005180:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	011a      	lsls	r2, r3, #4
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2240      	movs	r2, #64	; 0x40
 800519a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800519c:	e034      	b.n	8005208 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2280      	movs	r2, #128	; 0x80
 80051a2:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	085b      	lsrs	r3, r3, #1
 80051a8:	019a      	lsls	r2, r3, #6
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2280      	movs	r2, #128	; 0x80
 80051bc:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80051be:	e023      	b.n	8005208 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	22c0      	movs	r2, #192	; 0xc0
 80051c4:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	019a      	lsls	r2, r3, #6
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2280      	movs	r2, #128	; 0x80
 80051de:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80051e0:	e012      	b.n	8005208 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	22e0      	movs	r2, #224	; 0xe0
 80051e6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	019a      	lsls	r2, r3, #6
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	085b      	lsrs	r3, r3, #1
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2280      	movs	r2, #128	; 0x80
 8005200:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005202:	e001      	b.n	8005208 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e00f      	b.n	8005228 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d10b      	bne.n	8005226 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d102      	bne.n	800521a <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2210      	movs	r2, #16
 8005218:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d102      	bne.n	8005226 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2208      	movs	r2, #8
 8005224:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <SAI_InitPCM+0x2a>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d103      	bne.n	8005266 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	63da      	str	r2, [r3, #60]	; 0x3c
 8005264:	e002      	b.n	800526c <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005278:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005280:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005294:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d103      	bne.n	80052a4 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	645a      	str	r2, [r3, #68]	; 0x44
 80052a2:	e002      	b.n	80052aa <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	220d      	movs	r2, #13
 80052a8:	645a      	str	r2, [r3, #68]	; 0x44
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d837      	bhi.n	8005320 <SAI_InitPCM+0xec>
 80052b0:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <SAI_InitPCM+0x84>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052c9 	.word	0x080052c9
 80052bc:	080052df 	.word	0x080052df
 80052c0:	080052f5 	.word	0x080052f5
 80052c4:	0800530b 	.word	0x0800530b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2280      	movs	r2, #128	; 0x80
 80052cc:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	011a      	lsls	r2, r3, #4
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2240      	movs	r2, #64	; 0x40
 80052da:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80052dc:	e022      	b.n	8005324 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2280      	movs	r2, #128	; 0x80
 80052e2:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2280      	movs	r2, #128	; 0x80
 80052f0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80052f2:	e017      	b.n	8005324 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	22c0      	movs	r2, #192	; 0xc0
 80052f8:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2280      	movs	r2, #128	; 0x80
 8005306:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005308:	e00c      	b.n	8005324 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	22e0      	movs	r2, #224	; 0xe0
 800530e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2280      	movs	r2, #128	; 0x80
 800531c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800531e:	e001      	b.n	8005324 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop

08005334 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800533e:	2301      	movs	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d103      	bne.n	8005350 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f043 0308 	orr.w	r3, r3, #8
 800534e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	2b08      	cmp	r3, #8
 8005356:	d10b      	bne.n	8005370 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800535c:	2b03      	cmp	r3, #3
 800535e:	d003      	beq.n	8005368 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d103      	bne.n	8005370 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f043 0310 	orr.w	r3, r3, #16
 800536e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b03      	cmp	r3, #3
 8005376:	d003      	beq.n	8005380 <SAI_InterruptFlag+0x4c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b02      	cmp	r3, #2
 800537e:	d104      	bne.n	800538a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	e003      	b.n	8005392 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f043 0304 	orr.w	r3, r3, #4
 8005390:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005392:	68fb      	ldr	r3, [r7, #12]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80053a8:	4b17      	ldr	r3, [pc, #92]	; (8005408 <SAI_Disable+0x68>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a17      	ldr	r2, [pc, #92]	; (800540c <SAI_Disable+0x6c>)
 80053ae:	fba2 2303 	umull	r2, r3, r2, r3
 80053b2:	0b1b      	lsrs	r3, r3, #12
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80053ca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	1e5a      	subs	r2, r3, #1
 80053d0:	60fa      	str	r2, [r7, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	72fb      	strb	r3, [r7, #11]
      break;
 80053ea:	e006      	b.n	80053fa <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e8      	bne.n	80053cc <SAI_Disable+0x2c>

  return status;
 80053fa:	7afb      	ldrb	r3, [r7, #11]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	20000044 	.word	0x20000044
 800540c:	95cbec1b 	.word	0x95cbec1b

08005410 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005426:	d01c      	beq.n	8005462 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800543e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005440:	2100      	movs	r1, #0
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff ff76 	bl	8005334 <SAI_InterruptFlag>
 8005448:	4603      	mov	r3, r0
 800544a:	43d9      	mvns	r1, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	400a      	ands	r2, r1
 8005458:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7fb fb87 	bl	8000b76 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005468:	bf00      	nop
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f7fb fb6e 	bl	8000b60 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d004      	beq.n	80054be <SAI_DMAError+0x32>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d112      	bne.n	80054e4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80054cc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f7ff ff66 	bl	80053a0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7ff fded 	bl	80050c4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e040      	b.n	8005586 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7fc fe45 	bl	80021a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2224      	movs	r2, #36	; 0x24
 800551e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0201 	bic.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f87f 	bl	8005634 <UART_SetConfig>
 8005536:	4603      	mov	r3, r0
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e022      	b.n	8005586 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fad5 	bl	8005af8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800555c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800556c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0201 	orr.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fb5c 	bl	8005c3c <UART_CheckIdleState>
 8005584:	4603      	mov	r3, r0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	4613      	mov	r3, r2
 800559a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d12c      	bne.n	80055fe <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_UART_Receive_DMA+0x22>
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e025      	b.n	8005600 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_UART_Receive_DMA+0x34>
 80055be:	2302      	movs	r3, #2
 80055c0:	e01e      	b.n	8005600 <HAL_UART_Receive_DMA+0x72>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d007      	beq.n	80055ee <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80055ec:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	461a      	mov	r2, r3
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 fbe7 	bl	8005dc8 <UART_Start_Receive_DMA>
 80055fa:	4603      	mov	r3, r0
 80055fc:	e000      	b.n	8005600 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 80055fe:	2302      	movs	r3, #2
  }
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4ba7      	ldr	r3, [pc, #668]	; (80058fc <UART_SetConfig+0x2c8>)
 8005660:	4013      	ands	r3, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	6979      	ldr	r1, [r7, #20]
 8005668:	430b      	orrs	r3, r1
 800566a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a95      	ldr	r2, [pc, #596]	; (8005900 <UART_SetConfig+0x2cc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d120      	bne.n	80056f2 <UART_SetConfig+0xbe>
 80056b0:	4b94      	ldr	r3, [pc, #592]	; (8005904 <UART_SetConfig+0x2d0>)
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d816      	bhi.n	80056ec <UART_SetConfig+0xb8>
 80056be:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <UART_SetConfig+0x90>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056d5 	.word	0x080056d5
 80056c8:	080056e1 	.word	0x080056e1
 80056cc:	080056db 	.word	0x080056db
 80056d0:	080056e7 	.word	0x080056e7
 80056d4:	2301      	movs	r3, #1
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	e14f      	b.n	800597a <UART_SetConfig+0x346>
 80056da:	2302      	movs	r3, #2
 80056dc:	77fb      	strb	r3, [r7, #31]
 80056de:	e14c      	b.n	800597a <UART_SetConfig+0x346>
 80056e0:	2304      	movs	r3, #4
 80056e2:	77fb      	strb	r3, [r7, #31]
 80056e4:	e149      	b.n	800597a <UART_SetConfig+0x346>
 80056e6:	2308      	movs	r3, #8
 80056e8:	77fb      	strb	r3, [r7, #31]
 80056ea:	e146      	b.n	800597a <UART_SetConfig+0x346>
 80056ec:	2310      	movs	r3, #16
 80056ee:	77fb      	strb	r3, [r7, #31]
 80056f0:	e143      	b.n	800597a <UART_SetConfig+0x346>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a84      	ldr	r2, [pc, #528]	; (8005908 <UART_SetConfig+0x2d4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d132      	bne.n	8005762 <UART_SetConfig+0x12e>
 80056fc:	4b81      	ldr	r3, [pc, #516]	; (8005904 <UART_SetConfig+0x2d0>)
 80056fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b0c      	cmp	r3, #12
 8005708:	d828      	bhi.n	800575c <UART_SetConfig+0x128>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <UART_SetConfig+0xdc>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005745 	.word	0x08005745
 8005714:	0800575d 	.word	0x0800575d
 8005718:	0800575d 	.word	0x0800575d
 800571c:	0800575d 	.word	0x0800575d
 8005720:	08005751 	.word	0x08005751
 8005724:	0800575d 	.word	0x0800575d
 8005728:	0800575d 	.word	0x0800575d
 800572c:	0800575d 	.word	0x0800575d
 8005730:	0800574b 	.word	0x0800574b
 8005734:	0800575d 	.word	0x0800575d
 8005738:	0800575d 	.word	0x0800575d
 800573c:	0800575d 	.word	0x0800575d
 8005740:	08005757 	.word	0x08005757
 8005744:	2300      	movs	r3, #0
 8005746:	77fb      	strb	r3, [r7, #31]
 8005748:	e117      	b.n	800597a <UART_SetConfig+0x346>
 800574a:	2302      	movs	r3, #2
 800574c:	77fb      	strb	r3, [r7, #31]
 800574e:	e114      	b.n	800597a <UART_SetConfig+0x346>
 8005750:	2304      	movs	r3, #4
 8005752:	77fb      	strb	r3, [r7, #31]
 8005754:	e111      	b.n	800597a <UART_SetConfig+0x346>
 8005756:	2308      	movs	r3, #8
 8005758:	77fb      	strb	r3, [r7, #31]
 800575a:	e10e      	b.n	800597a <UART_SetConfig+0x346>
 800575c:	2310      	movs	r3, #16
 800575e:	77fb      	strb	r3, [r7, #31]
 8005760:	e10b      	b.n	800597a <UART_SetConfig+0x346>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a69      	ldr	r2, [pc, #420]	; (800590c <UART_SetConfig+0x2d8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d120      	bne.n	80057ae <UART_SetConfig+0x17a>
 800576c:	4b65      	ldr	r3, [pc, #404]	; (8005904 <UART_SetConfig+0x2d0>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005776:	2b30      	cmp	r3, #48	; 0x30
 8005778:	d013      	beq.n	80057a2 <UART_SetConfig+0x16e>
 800577a:	2b30      	cmp	r3, #48	; 0x30
 800577c:	d814      	bhi.n	80057a8 <UART_SetConfig+0x174>
 800577e:	2b20      	cmp	r3, #32
 8005780:	d009      	beq.n	8005796 <UART_SetConfig+0x162>
 8005782:	2b20      	cmp	r3, #32
 8005784:	d810      	bhi.n	80057a8 <UART_SetConfig+0x174>
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <UART_SetConfig+0x15c>
 800578a:	2b10      	cmp	r3, #16
 800578c:	d006      	beq.n	800579c <UART_SetConfig+0x168>
 800578e:	e00b      	b.n	80057a8 <UART_SetConfig+0x174>
 8005790:	2300      	movs	r3, #0
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e0f1      	b.n	800597a <UART_SetConfig+0x346>
 8005796:	2302      	movs	r3, #2
 8005798:	77fb      	strb	r3, [r7, #31]
 800579a:	e0ee      	b.n	800597a <UART_SetConfig+0x346>
 800579c:	2304      	movs	r3, #4
 800579e:	77fb      	strb	r3, [r7, #31]
 80057a0:	e0eb      	b.n	800597a <UART_SetConfig+0x346>
 80057a2:	2308      	movs	r3, #8
 80057a4:	77fb      	strb	r3, [r7, #31]
 80057a6:	e0e8      	b.n	800597a <UART_SetConfig+0x346>
 80057a8:	2310      	movs	r3, #16
 80057aa:	77fb      	strb	r3, [r7, #31]
 80057ac:	e0e5      	b.n	800597a <UART_SetConfig+0x346>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a57      	ldr	r2, [pc, #348]	; (8005910 <UART_SetConfig+0x2dc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d120      	bne.n	80057fa <UART_SetConfig+0x1c6>
 80057b8:	4b52      	ldr	r3, [pc, #328]	; (8005904 <UART_SetConfig+0x2d0>)
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057c2:	2bc0      	cmp	r3, #192	; 0xc0
 80057c4:	d013      	beq.n	80057ee <UART_SetConfig+0x1ba>
 80057c6:	2bc0      	cmp	r3, #192	; 0xc0
 80057c8:	d814      	bhi.n	80057f4 <UART_SetConfig+0x1c0>
 80057ca:	2b80      	cmp	r3, #128	; 0x80
 80057cc:	d009      	beq.n	80057e2 <UART_SetConfig+0x1ae>
 80057ce:	2b80      	cmp	r3, #128	; 0x80
 80057d0:	d810      	bhi.n	80057f4 <UART_SetConfig+0x1c0>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <UART_SetConfig+0x1a8>
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d006      	beq.n	80057e8 <UART_SetConfig+0x1b4>
 80057da:	e00b      	b.n	80057f4 <UART_SetConfig+0x1c0>
 80057dc:	2300      	movs	r3, #0
 80057de:	77fb      	strb	r3, [r7, #31]
 80057e0:	e0cb      	b.n	800597a <UART_SetConfig+0x346>
 80057e2:	2302      	movs	r3, #2
 80057e4:	77fb      	strb	r3, [r7, #31]
 80057e6:	e0c8      	b.n	800597a <UART_SetConfig+0x346>
 80057e8:	2304      	movs	r3, #4
 80057ea:	77fb      	strb	r3, [r7, #31]
 80057ec:	e0c5      	b.n	800597a <UART_SetConfig+0x346>
 80057ee:	2308      	movs	r3, #8
 80057f0:	77fb      	strb	r3, [r7, #31]
 80057f2:	e0c2      	b.n	800597a <UART_SetConfig+0x346>
 80057f4:	2310      	movs	r3, #16
 80057f6:	77fb      	strb	r3, [r7, #31]
 80057f8:	e0bf      	b.n	800597a <UART_SetConfig+0x346>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a45      	ldr	r2, [pc, #276]	; (8005914 <UART_SetConfig+0x2e0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d125      	bne.n	8005850 <UART_SetConfig+0x21c>
 8005804:	4b3f      	ldr	r3, [pc, #252]	; (8005904 <UART_SetConfig+0x2d0>)
 8005806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005812:	d017      	beq.n	8005844 <UART_SetConfig+0x210>
 8005814:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005818:	d817      	bhi.n	800584a <UART_SetConfig+0x216>
 800581a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800581e:	d00b      	beq.n	8005838 <UART_SetConfig+0x204>
 8005820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005824:	d811      	bhi.n	800584a <UART_SetConfig+0x216>
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <UART_SetConfig+0x1fe>
 800582a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582e:	d006      	beq.n	800583e <UART_SetConfig+0x20a>
 8005830:	e00b      	b.n	800584a <UART_SetConfig+0x216>
 8005832:	2300      	movs	r3, #0
 8005834:	77fb      	strb	r3, [r7, #31]
 8005836:	e0a0      	b.n	800597a <UART_SetConfig+0x346>
 8005838:	2302      	movs	r3, #2
 800583a:	77fb      	strb	r3, [r7, #31]
 800583c:	e09d      	b.n	800597a <UART_SetConfig+0x346>
 800583e:	2304      	movs	r3, #4
 8005840:	77fb      	strb	r3, [r7, #31]
 8005842:	e09a      	b.n	800597a <UART_SetConfig+0x346>
 8005844:	2308      	movs	r3, #8
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e097      	b.n	800597a <UART_SetConfig+0x346>
 800584a:	2310      	movs	r3, #16
 800584c:	77fb      	strb	r3, [r7, #31]
 800584e:	e094      	b.n	800597a <UART_SetConfig+0x346>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a30      	ldr	r2, [pc, #192]	; (8005918 <UART_SetConfig+0x2e4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d125      	bne.n	80058a6 <UART_SetConfig+0x272>
 800585a:	4b2a      	ldr	r3, [pc, #168]	; (8005904 <UART_SetConfig+0x2d0>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005864:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005868:	d017      	beq.n	800589a <UART_SetConfig+0x266>
 800586a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800586e:	d817      	bhi.n	80058a0 <UART_SetConfig+0x26c>
 8005870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005874:	d00b      	beq.n	800588e <UART_SetConfig+0x25a>
 8005876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800587a:	d811      	bhi.n	80058a0 <UART_SetConfig+0x26c>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <UART_SetConfig+0x254>
 8005880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005884:	d006      	beq.n	8005894 <UART_SetConfig+0x260>
 8005886:	e00b      	b.n	80058a0 <UART_SetConfig+0x26c>
 8005888:	2301      	movs	r3, #1
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e075      	b.n	800597a <UART_SetConfig+0x346>
 800588e:	2302      	movs	r3, #2
 8005890:	77fb      	strb	r3, [r7, #31]
 8005892:	e072      	b.n	800597a <UART_SetConfig+0x346>
 8005894:	2304      	movs	r3, #4
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e06f      	b.n	800597a <UART_SetConfig+0x346>
 800589a:	2308      	movs	r3, #8
 800589c:	77fb      	strb	r3, [r7, #31]
 800589e:	e06c      	b.n	800597a <UART_SetConfig+0x346>
 80058a0:	2310      	movs	r3, #16
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e069      	b.n	800597a <UART_SetConfig+0x346>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	; (800591c <UART_SetConfig+0x2e8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d137      	bne.n	8005920 <UART_SetConfig+0x2ec>
 80058b0:	4b14      	ldr	r3, [pc, #80]	; (8005904 <UART_SetConfig+0x2d0>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80058ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058be:	d017      	beq.n	80058f0 <UART_SetConfig+0x2bc>
 80058c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058c4:	d817      	bhi.n	80058f6 <UART_SetConfig+0x2c2>
 80058c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ca:	d00b      	beq.n	80058e4 <UART_SetConfig+0x2b0>
 80058cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d0:	d811      	bhi.n	80058f6 <UART_SetConfig+0x2c2>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <UART_SetConfig+0x2aa>
 80058d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058da:	d006      	beq.n	80058ea <UART_SetConfig+0x2b6>
 80058dc:	e00b      	b.n	80058f6 <UART_SetConfig+0x2c2>
 80058de:	2300      	movs	r3, #0
 80058e0:	77fb      	strb	r3, [r7, #31]
 80058e2:	e04a      	b.n	800597a <UART_SetConfig+0x346>
 80058e4:	2302      	movs	r3, #2
 80058e6:	77fb      	strb	r3, [r7, #31]
 80058e8:	e047      	b.n	800597a <UART_SetConfig+0x346>
 80058ea:	2304      	movs	r3, #4
 80058ec:	77fb      	strb	r3, [r7, #31]
 80058ee:	e044      	b.n	800597a <UART_SetConfig+0x346>
 80058f0:	2308      	movs	r3, #8
 80058f2:	77fb      	strb	r3, [r7, #31]
 80058f4:	e041      	b.n	800597a <UART_SetConfig+0x346>
 80058f6:	2310      	movs	r3, #16
 80058f8:	77fb      	strb	r3, [r7, #31]
 80058fa:	e03e      	b.n	800597a <UART_SetConfig+0x346>
 80058fc:	efff69f3 	.word	0xefff69f3
 8005900:	40011000 	.word	0x40011000
 8005904:	40023800 	.word	0x40023800
 8005908:	40004400 	.word	0x40004400
 800590c:	40004800 	.word	0x40004800
 8005910:	40004c00 	.word	0x40004c00
 8005914:	40005000 	.word	0x40005000
 8005918:	40011400 	.word	0x40011400
 800591c:	40007800 	.word	0x40007800
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a71      	ldr	r2, [pc, #452]	; (8005aec <UART_SetConfig+0x4b8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d125      	bne.n	8005976 <UART_SetConfig+0x342>
 800592a:	4b71      	ldr	r3, [pc, #452]	; (8005af0 <UART_SetConfig+0x4bc>)
 800592c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005934:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005938:	d017      	beq.n	800596a <UART_SetConfig+0x336>
 800593a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800593e:	d817      	bhi.n	8005970 <UART_SetConfig+0x33c>
 8005940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005944:	d00b      	beq.n	800595e <UART_SetConfig+0x32a>
 8005946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800594a:	d811      	bhi.n	8005970 <UART_SetConfig+0x33c>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <UART_SetConfig+0x324>
 8005950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005954:	d006      	beq.n	8005964 <UART_SetConfig+0x330>
 8005956:	e00b      	b.n	8005970 <UART_SetConfig+0x33c>
 8005958:	2300      	movs	r3, #0
 800595a:	77fb      	strb	r3, [r7, #31]
 800595c:	e00d      	b.n	800597a <UART_SetConfig+0x346>
 800595e:	2302      	movs	r3, #2
 8005960:	77fb      	strb	r3, [r7, #31]
 8005962:	e00a      	b.n	800597a <UART_SetConfig+0x346>
 8005964:	2304      	movs	r3, #4
 8005966:	77fb      	strb	r3, [r7, #31]
 8005968:	e007      	b.n	800597a <UART_SetConfig+0x346>
 800596a:	2308      	movs	r3, #8
 800596c:	77fb      	strb	r3, [r7, #31]
 800596e:	e004      	b.n	800597a <UART_SetConfig+0x346>
 8005970:	2310      	movs	r3, #16
 8005972:	77fb      	strb	r3, [r7, #31]
 8005974:	e001      	b.n	800597a <UART_SetConfig+0x346>
 8005976:	2310      	movs	r3, #16
 8005978:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005982:	d15b      	bne.n	8005a3c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005984:	7ffb      	ldrb	r3, [r7, #31]
 8005986:	2b08      	cmp	r3, #8
 8005988:	d827      	bhi.n	80059da <UART_SetConfig+0x3a6>
 800598a:	a201      	add	r2, pc, #4	; (adr r2, 8005990 <UART_SetConfig+0x35c>)
 800598c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005990:	080059b5 	.word	0x080059b5
 8005994:	080059bd 	.word	0x080059bd
 8005998:	080059c5 	.word	0x080059c5
 800599c:	080059db 	.word	0x080059db
 80059a0:	080059cb 	.word	0x080059cb
 80059a4:	080059db 	.word	0x080059db
 80059a8:	080059db 	.word	0x080059db
 80059ac:	080059db 	.word	0x080059db
 80059b0:	080059d3 	.word	0x080059d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b4:	f7fe fb62 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 80059b8:	61b8      	str	r0, [r7, #24]
        break;
 80059ba:	e013      	b.n	80059e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059bc:	f7fe fb72 	bl	80040a4 <HAL_RCC_GetPCLK2Freq>
 80059c0:	61b8      	str	r0, [r7, #24]
        break;
 80059c2:	e00f      	b.n	80059e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c4:	4b4b      	ldr	r3, [pc, #300]	; (8005af4 <UART_SetConfig+0x4c0>)
 80059c6:	61bb      	str	r3, [r7, #24]
        break;
 80059c8:	e00c      	b.n	80059e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ca:	f7fe fa95 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 80059ce:	61b8      	str	r0, [r7, #24]
        break;
 80059d0:	e008      	b.n	80059e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059d6:	61bb      	str	r3, [r7, #24]
        break;
 80059d8:	e004      	b.n	80059e4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	77bb      	strb	r3, [r7, #30]
        break;
 80059e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d074      	beq.n	8005ad4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	005a      	lsls	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	085b      	lsrs	r3, r3, #1
 80059f4:	441a      	add	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2b0f      	cmp	r3, #15
 8005a06:	d916      	bls.n	8005a36 <UART_SetConfig+0x402>
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a0e:	d212      	bcs.n	8005a36 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	f023 030f 	bic.w	r3, r3, #15
 8005a18:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	89fb      	ldrh	r3, [r7, #14]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	89fa      	ldrh	r2, [r7, #14]
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	e04e      	b.n	8005ad4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	77bb      	strb	r3, [r7, #30]
 8005a3a:	e04b      	b.n	8005ad4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a3c:	7ffb      	ldrb	r3, [r7, #31]
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d827      	bhi.n	8005a92 <UART_SetConfig+0x45e>
 8005a42:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <UART_SetConfig+0x414>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005a6d 	.word	0x08005a6d
 8005a4c:	08005a75 	.word	0x08005a75
 8005a50:	08005a7d 	.word	0x08005a7d
 8005a54:	08005a93 	.word	0x08005a93
 8005a58:	08005a83 	.word	0x08005a83
 8005a5c:	08005a93 	.word	0x08005a93
 8005a60:	08005a93 	.word	0x08005a93
 8005a64:	08005a93 	.word	0x08005a93
 8005a68:	08005a8b 	.word	0x08005a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a6c:	f7fe fb06 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 8005a70:	61b8      	str	r0, [r7, #24]
        break;
 8005a72:	e013      	b.n	8005a9c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a74:	f7fe fb16 	bl	80040a4 <HAL_RCC_GetPCLK2Freq>
 8005a78:	61b8      	str	r0, [r7, #24]
        break;
 8005a7a:	e00f      	b.n	8005a9c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a7c:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <UART_SetConfig+0x4c0>)
 8005a7e:	61bb      	str	r3, [r7, #24]
        break;
 8005a80:	e00c      	b.n	8005a9c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a82:	f7fe fa39 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8005a86:	61b8      	str	r0, [r7, #24]
        break;
 8005a88:	e008      	b.n	8005a9c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a8e:	61bb      	str	r3, [r7, #24]
        break;
 8005a90:	e004      	b.n	8005a9c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	77bb      	strb	r3, [r7, #30]
        break;
 8005a9a:	bf00      	nop
    }

    if (pclk != 0U)
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d018      	beq.n	8005ad4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	085a      	lsrs	r2, r3, #1
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	441a      	add	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b0f      	cmp	r3, #15
 8005abc:	d908      	bls.n	8005ad0 <UART_SetConfig+0x49c>
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac4:	d204      	bcs.n	8005ad0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	60da      	str	r2, [r3, #12]
 8005ace:	e001      	b.n	8005ad4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ae0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40007c00 	.word	0x40007c00
 8005af0:	40023800 	.word	0x40023800
 8005af4:	00f42400 	.word	0x00f42400

08005af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01a      	beq.n	8005c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf6:	d10a      	bne.n	8005c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c4c:	f7fc fcb4 	bl	80025b8 <HAL_GetTick>
 8005c50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d10e      	bne.n	8005c7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f82d 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e023      	b.n	8005cc6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d10e      	bne.n	8005caa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f817 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e00d      	b.n	8005cc6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cde:	e05e      	b.n	8005d9e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d05a      	beq.n	8005d9e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce8:	f7fc fc66 	bl	80025b8 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d302      	bcc.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d11b      	bne.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e043      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d02c      	beq.n	8005d9e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d52:	d124      	bne.n	8005d9e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0201 	bic.w	r2, r2, #1
 8005d7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2220      	movs	r2, #32
 8005d82:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e00f      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69da      	ldr	r2, [r3, #28]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4013      	ands	r3, r2
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	bf0c      	ite	eq
 8005dae:	2301      	moveq	r3, #1
 8005db0:	2300      	movne	r3, #0
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d091      	beq.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	88fa      	ldrh	r2, [r7, #6]
 8005de0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2222      	movs	r2, #34	; 0x22
 8005df0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d02b      	beq.n	8005e52 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfe:	4a25      	ldr	r2, [pc, #148]	; (8005e94 <UART_Start_Receive_DMA+0xcc>)
 8005e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	4a24      	ldr	r2, [pc, #144]	; (8005e98 <UART_Start_Receive_DMA+0xd0>)
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0e:	4a23      	ldr	r2, [pc, #140]	; (8005e9c <UART_Start_Receive_DMA+0xd4>)
 8005e10:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e16:	2200      	movs	r2, #0
 8005e18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3324      	adds	r3, #36	; 0x24
 8005e24:	4619      	mov	r1, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	88fb      	ldrh	r3, [r7, #6]
 8005e2e:	f7fc fd8f 	bl	8002950 <HAL_DMA_Start_IT>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00c      	beq.n	8005e52 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2210      	movs	r2, #16
 8005e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e01c      	b.n	8005e8c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e68:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0201 	orr.w	r2, r2, #1
 8005e78:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e88:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	08005f29 	.word	0x08005f29
 8005e98:	08005fbd 	.word	0x08005fbd
 8005e9c:	08005ff5 	.word	0x08005ff5

08005ea0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005eb6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ee0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d107      	bne.n	8005f0a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0210 	bic.w	r2, r2, #16
 8005f08:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3e:	d02a      	beq.n	8005f96 <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f56:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f76:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d107      	bne.n	8005f96 <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0210 	bic.w	r2, r2, #16
 8005f94:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d107      	bne.n	8005fae <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f7ff fb38 	bl	800561c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fac:	e002      	b.n	8005fb4 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7fb fade 	bl	8001570 <HAL_UART_RxCpltCallback>
}
 8005fb4:	bf00      	nop
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d109      	bne.n	8005fe6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fd8:	085b      	lsrs	r3, r3, #1
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f7ff fb1c 	bl	800561c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fe4:	e002      	b.n	8005fec <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7fb fab8 	bl	800155c <HAL_UART_RxHalfCpltCallback>
}
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006006:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800600c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006018:	2b80      	cmp	r3, #128	; 0x80
 800601a:	d109      	bne.n	8006030 <UART_DMAError+0x3c>
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b21      	cmp	r3, #33	; 0x21
 8006020:	d106      	bne.n	8006030 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2200      	movs	r2, #0
 8006026:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800602a:	6978      	ldr	r0, [r7, #20]
 800602c:	f7ff ff38 	bl	8005ea0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d109      	bne.n	8006052 <UART_DMAError+0x5e>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b22      	cmp	r3, #34	; 0x22
 8006042:	d106      	bne.n	8006052 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2200      	movs	r2, #0
 8006048:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800604c:	6978      	ldr	r0, [r7, #20]
 800604e:	f7ff ff3c 	bl	8005eca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006058:	f043 0210 	orr.w	r2, r3, #16
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006062:	6978      	ldr	r0, [r7, #20]
 8006064:	f7ff fad0 	bl	8005608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006068:	bf00      	nop
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <__errno>:
 8006070:	4b01      	ldr	r3, [pc, #4]	; (8006078 <__errno+0x8>)
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000050 	.word	0x20000050

0800607c <__libc_init_array>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4d0d      	ldr	r5, [pc, #52]	; (80060b4 <__libc_init_array+0x38>)
 8006080:	4c0d      	ldr	r4, [pc, #52]	; (80060b8 <__libc_init_array+0x3c>)
 8006082:	1b64      	subs	r4, r4, r5
 8006084:	10a4      	asrs	r4, r4, #2
 8006086:	2600      	movs	r6, #0
 8006088:	42a6      	cmp	r6, r4
 800608a:	d109      	bne.n	80060a0 <__libc_init_array+0x24>
 800608c:	4d0b      	ldr	r5, [pc, #44]	; (80060bc <__libc_init_array+0x40>)
 800608e:	4c0c      	ldr	r4, [pc, #48]	; (80060c0 <__libc_init_array+0x44>)
 8006090:	f000 f8f8 	bl	8006284 <_init>
 8006094:	1b64      	subs	r4, r4, r5
 8006096:	10a4      	asrs	r4, r4, #2
 8006098:	2600      	movs	r6, #0
 800609a:	42a6      	cmp	r6, r4
 800609c:	d105      	bne.n	80060aa <__libc_init_array+0x2e>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a4:	4798      	blx	r3
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7ee      	b.n	8006088 <__libc_init_array+0xc>
 80060aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ae:	4798      	blx	r3
 80060b0:	3601      	adds	r6, #1
 80060b2:	e7f2      	b.n	800609a <__libc_init_array+0x1e>
 80060b4:	0800b6b4 	.word	0x0800b6b4
 80060b8:	0800b6b4 	.word	0x0800b6b4
 80060bc:	0800b6b4 	.word	0x0800b6b4
 80060c0:	0800b6b8 	.word	0x0800b6b8

080060c4 <malloc>:
 80060c4:	4b02      	ldr	r3, [pc, #8]	; (80060d0 <malloc+0xc>)
 80060c6:	4601      	mov	r1, r0
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	f000 b863 	b.w	8006194 <_malloc_r>
 80060ce:	bf00      	nop
 80060d0:	20000050 	.word	0x20000050

080060d4 <free>:
 80060d4:	4b02      	ldr	r3, [pc, #8]	; (80060e0 <free+0xc>)
 80060d6:	4601      	mov	r1, r0
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	f000 b80b 	b.w	80060f4 <_free_r>
 80060de:	bf00      	nop
 80060e0:	20000050 	.word	0x20000050

080060e4 <memset>:
 80060e4:	4402      	add	r2, r0
 80060e6:	4603      	mov	r3, r0
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d100      	bne.n	80060ee <memset+0xa>
 80060ec:	4770      	bx	lr
 80060ee:	f803 1b01 	strb.w	r1, [r3], #1
 80060f2:	e7f9      	b.n	80060e8 <memset+0x4>

080060f4 <_free_r>:
 80060f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060f6:	2900      	cmp	r1, #0
 80060f8:	d048      	beq.n	800618c <_free_r+0x98>
 80060fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060fe:	9001      	str	r0, [sp, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f1a1 0404 	sub.w	r4, r1, #4
 8006106:	bfb8      	it	lt
 8006108:	18e4      	addlt	r4, r4, r3
 800610a:	f000 f8af 	bl	800626c <__malloc_lock>
 800610e:	4a20      	ldr	r2, [pc, #128]	; (8006190 <_free_r+0x9c>)
 8006110:	9801      	ldr	r0, [sp, #4]
 8006112:	6813      	ldr	r3, [r2, #0]
 8006114:	4615      	mov	r5, r2
 8006116:	b933      	cbnz	r3, 8006126 <_free_r+0x32>
 8006118:	6063      	str	r3, [r4, #4]
 800611a:	6014      	str	r4, [r2, #0]
 800611c:	b003      	add	sp, #12
 800611e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006122:	f000 b8a9 	b.w	8006278 <__malloc_unlock>
 8006126:	42a3      	cmp	r3, r4
 8006128:	d90b      	bls.n	8006142 <_free_r+0x4e>
 800612a:	6821      	ldr	r1, [r4, #0]
 800612c:	1862      	adds	r2, r4, r1
 800612e:	4293      	cmp	r3, r2
 8006130:	bf04      	itt	eq
 8006132:	681a      	ldreq	r2, [r3, #0]
 8006134:	685b      	ldreq	r3, [r3, #4]
 8006136:	6063      	str	r3, [r4, #4]
 8006138:	bf04      	itt	eq
 800613a:	1852      	addeq	r2, r2, r1
 800613c:	6022      	streq	r2, [r4, #0]
 800613e:	602c      	str	r4, [r5, #0]
 8006140:	e7ec      	b.n	800611c <_free_r+0x28>
 8006142:	461a      	mov	r2, r3
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	b10b      	cbz	r3, 800614c <_free_r+0x58>
 8006148:	42a3      	cmp	r3, r4
 800614a:	d9fa      	bls.n	8006142 <_free_r+0x4e>
 800614c:	6811      	ldr	r1, [r2, #0]
 800614e:	1855      	adds	r5, r2, r1
 8006150:	42a5      	cmp	r5, r4
 8006152:	d10b      	bne.n	800616c <_free_r+0x78>
 8006154:	6824      	ldr	r4, [r4, #0]
 8006156:	4421      	add	r1, r4
 8006158:	1854      	adds	r4, r2, r1
 800615a:	42a3      	cmp	r3, r4
 800615c:	6011      	str	r1, [r2, #0]
 800615e:	d1dd      	bne.n	800611c <_free_r+0x28>
 8006160:	681c      	ldr	r4, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	6053      	str	r3, [r2, #4]
 8006166:	4421      	add	r1, r4
 8006168:	6011      	str	r1, [r2, #0]
 800616a:	e7d7      	b.n	800611c <_free_r+0x28>
 800616c:	d902      	bls.n	8006174 <_free_r+0x80>
 800616e:	230c      	movs	r3, #12
 8006170:	6003      	str	r3, [r0, #0]
 8006172:	e7d3      	b.n	800611c <_free_r+0x28>
 8006174:	6825      	ldr	r5, [r4, #0]
 8006176:	1961      	adds	r1, r4, r5
 8006178:	428b      	cmp	r3, r1
 800617a:	bf04      	itt	eq
 800617c:	6819      	ldreq	r1, [r3, #0]
 800617e:	685b      	ldreq	r3, [r3, #4]
 8006180:	6063      	str	r3, [r4, #4]
 8006182:	bf04      	itt	eq
 8006184:	1949      	addeq	r1, r1, r5
 8006186:	6021      	streq	r1, [r4, #0]
 8006188:	6054      	str	r4, [r2, #4]
 800618a:	e7c7      	b.n	800611c <_free_r+0x28>
 800618c:	b003      	add	sp, #12
 800618e:	bd30      	pop	{r4, r5, pc}
 8006190:	2000418c 	.word	0x2000418c

08006194 <_malloc_r>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	1ccd      	adds	r5, r1, #3
 8006198:	f025 0503 	bic.w	r5, r5, #3
 800619c:	3508      	adds	r5, #8
 800619e:	2d0c      	cmp	r5, #12
 80061a0:	bf38      	it	cc
 80061a2:	250c      	movcc	r5, #12
 80061a4:	2d00      	cmp	r5, #0
 80061a6:	4606      	mov	r6, r0
 80061a8:	db01      	blt.n	80061ae <_malloc_r+0x1a>
 80061aa:	42a9      	cmp	r1, r5
 80061ac:	d903      	bls.n	80061b6 <_malloc_r+0x22>
 80061ae:	230c      	movs	r3, #12
 80061b0:	6033      	str	r3, [r6, #0]
 80061b2:	2000      	movs	r0, #0
 80061b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061b6:	f000 f859 	bl	800626c <__malloc_lock>
 80061ba:	4921      	ldr	r1, [pc, #132]	; (8006240 <_malloc_r+0xac>)
 80061bc:	680a      	ldr	r2, [r1, #0]
 80061be:	4614      	mov	r4, r2
 80061c0:	b99c      	cbnz	r4, 80061ea <_malloc_r+0x56>
 80061c2:	4f20      	ldr	r7, [pc, #128]	; (8006244 <_malloc_r+0xb0>)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	b923      	cbnz	r3, 80061d2 <_malloc_r+0x3e>
 80061c8:	4621      	mov	r1, r4
 80061ca:	4630      	mov	r0, r6
 80061cc:	f000 f83c 	bl	8006248 <_sbrk_r>
 80061d0:	6038      	str	r0, [r7, #0]
 80061d2:	4629      	mov	r1, r5
 80061d4:	4630      	mov	r0, r6
 80061d6:	f000 f837 	bl	8006248 <_sbrk_r>
 80061da:	1c43      	adds	r3, r0, #1
 80061dc:	d123      	bne.n	8006226 <_malloc_r+0x92>
 80061de:	230c      	movs	r3, #12
 80061e0:	6033      	str	r3, [r6, #0]
 80061e2:	4630      	mov	r0, r6
 80061e4:	f000 f848 	bl	8006278 <__malloc_unlock>
 80061e8:	e7e3      	b.n	80061b2 <_malloc_r+0x1e>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	1b5b      	subs	r3, r3, r5
 80061ee:	d417      	bmi.n	8006220 <_malloc_r+0x8c>
 80061f0:	2b0b      	cmp	r3, #11
 80061f2:	d903      	bls.n	80061fc <_malloc_r+0x68>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	441c      	add	r4, r3
 80061f8:	6025      	str	r5, [r4, #0]
 80061fa:	e004      	b.n	8006206 <_malloc_r+0x72>
 80061fc:	6863      	ldr	r3, [r4, #4]
 80061fe:	42a2      	cmp	r2, r4
 8006200:	bf0c      	ite	eq
 8006202:	600b      	streq	r3, [r1, #0]
 8006204:	6053      	strne	r3, [r2, #4]
 8006206:	4630      	mov	r0, r6
 8006208:	f000 f836 	bl	8006278 <__malloc_unlock>
 800620c:	f104 000b 	add.w	r0, r4, #11
 8006210:	1d23      	adds	r3, r4, #4
 8006212:	f020 0007 	bic.w	r0, r0, #7
 8006216:	1ac2      	subs	r2, r0, r3
 8006218:	d0cc      	beq.n	80061b4 <_malloc_r+0x20>
 800621a:	1a1b      	subs	r3, r3, r0
 800621c:	50a3      	str	r3, [r4, r2]
 800621e:	e7c9      	b.n	80061b4 <_malloc_r+0x20>
 8006220:	4622      	mov	r2, r4
 8006222:	6864      	ldr	r4, [r4, #4]
 8006224:	e7cc      	b.n	80061c0 <_malloc_r+0x2c>
 8006226:	1cc4      	adds	r4, r0, #3
 8006228:	f024 0403 	bic.w	r4, r4, #3
 800622c:	42a0      	cmp	r0, r4
 800622e:	d0e3      	beq.n	80061f8 <_malloc_r+0x64>
 8006230:	1a21      	subs	r1, r4, r0
 8006232:	4630      	mov	r0, r6
 8006234:	f000 f808 	bl	8006248 <_sbrk_r>
 8006238:	3001      	adds	r0, #1
 800623a:	d1dd      	bne.n	80061f8 <_malloc_r+0x64>
 800623c:	e7cf      	b.n	80061de <_malloc_r+0x4a>
 800623e:	bf00      	nop
 8006240:	2000418c 	.word	0x2000418c
 8006244:	20004190 	.word	0x20004190

08006248 <_sbrk_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4d06      	ldr	r5, [pc, #24]	; (8006264 <_sbrk_r+0x1c>)
 800624c:	2300      	movs	r3, #0
 800624e:	4604      	mov	r4, r0
 8006250:	4608      	mov	r0, r1
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	f7fc f8ee 	bl	8002434 <_sbrk>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_sbrk_r+0x1a>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b103      	cbz	r3, 8006262 <_sbrk_r+0x1a>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	20004454 	.word	0x20004454

08006268 <__retarget_lock_acquire_recursive>:
 8006268:	4770      	bx	lr

0800626a <__retarget_lock_release_recursive>:
 800626a:	4770      	bx	lr

0800626c <__malloc_lock>:
 800626c:	4801      	ldr	r0, [pc, #4]	; (8006274 <__malloc_lock+0x8>)
 800626e:	f7ff bffb 	b.w	8006268 <__retarget_lock_acquire_recursive>
 8006272:	bf00      	nop
 8006274:	2000444c 	.word	0x2000444c

08006278 <__malloc_unlock>:
 8006278:	4801      	ldr	r0, [pc, #4]	; (8006280 <__malloc_unlock+0x8>)
 800627a:	f7ff bff6 	b.w	800626a <__retarget_lock_release_recursive>
 800627e:	bf00      	nop
 8006280:	2000444c 	.word	0x2000444c

08006284 <_init>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	bf00      	nop
 8006288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628a:	bc08      	pop	{r3}
 800628c:	469e      	mov	lr, r3
 800628e:	4770      	bx	lr

08006290 <_fini>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	bf00      	nop
 8006294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006296:	bc08      	pop	{r3}
 8006298:	469e      	mov	lr, r3
 800629a:	4770      	bx	lr
