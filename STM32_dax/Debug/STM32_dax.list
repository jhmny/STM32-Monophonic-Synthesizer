
STM32_dax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004078  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004390  08004390  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004398  08004398  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000000c  080043ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  080043ac  00020304  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aae3  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a08  00000000  00000000  0002ab1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002cdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270b4  00000000  00000000  0002d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f68  00000000  00000000  00054674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2e0b  00000000  00000000  0005e5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001513e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002274  00000000  00000000  0015143c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004258 	.word	0x08004258

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004258 	.word	0x08004258

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fe37 	bl	80011a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f81c 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f92c 	bl	8000798 <MX_GPIO_Init>
  MX_I2S1_Init();
 8000540:	f000 f8b2 	bl	80006a8 <MX_I2S1_Init>
  MX_DMA_Init();
 8000544:	f000 f90a 	bl	800075c <MX_DMA_Init>
  MX_UART4_Init();
 8000548:	f000 f8d8 	bl	80006fc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  //HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, 8);
  HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, 8);
 800054c:	2208      	movs	r2, #8
 800054e:	4905      	ldr	r1, [pc, #20]	; (8000564 <main+0x34>)
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <main+0x38>)
 8000552:	f003 f8da 	bl	800370a <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  HAL_I2S_Transmit(&hi2s1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);
 8000556:	230a      	movs	r3, #10
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	4904      	ldr	r1, [pc, #16]	; (800056c <main+0x3c>)
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <main+0x40>)
 800055e:	f001 fdcf 	bl	8002100 <HAL_I2S_Transmit>
 8000562:	e7f8      	b.n	8000556 <main+0x26>
 8000564:	2000002c 	.word	0x2000002c
 8000568:	2000023c 	.word	0x2000023c
 800056c:	08004270 	.word	0x08004270
 8000570:	200001fc 	.word	0x200001fc

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b0b8      	sub	sp, #224	; 0xe0
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800057e:	2234      	movs	r2, #52	; 0x34
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fe60 	bl	8004248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	2290      	movs	r2, #144	; 0x90
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 fe51 	bl	8004248 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 80005a6:	4b3e      	ldr	r3, [pc, #248]	; (80006a0 <SystemClock_Config+0x12c>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005ae:	4a3c      	ldr	r2, [pc, #240]	; (80006a0 <SystemClock_Config+0x12c>)
 80005b0:	f043 0310 	orr.w	r3, r3, #16
 80005b4:	6053      	str	r3, [r2, #4]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80005b6:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <SystemClock_Config+0x12c>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	4a39      	ldr	r2, [pc, #228]	; (80006a0 <SystemClock_Config+0x12c>)
 80005bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80005c0:	6053      	str	r3, [r2, #4]
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b37      	ldr	r3, [pc, #220]	; (80006a0 <SystemClock_Config+0x12c>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a36      	ldr	r2, [pc, #216]	; (80006a0 <SystemClock_Config+0x12c>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
 80005ce:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <SystemClock_Config+0x12c>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005da:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <SystemClock_Config+0x130>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e2:	4a30      	ldr	r2, [pc, #192]	; (80006a4 <SystemClock_Config+0x130>)
 80005e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <SystemClock_Config+0x130>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000602:	2310      	movs	r3, #16
 8000604:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060e:	2300      	movs	r3, #0
 8000610:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000614:	2310      	movs	r3, #16
 8000616:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fee6 	bl	80023f0 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800062a:	f000 fc49 	bl	8000ec0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 f97a 	bl	800294c <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800065e:	f000 fc2f 	bl	8000ec0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2S;
 8000662:	f240 2301 	movw	r3, #513	; 0x201
 8000666:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000668:	23c0      	movs	r3, #192	; 0xc0
 800066a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000674:	2302      	movs	r3, #2
 8000676:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000680:	2300      	movs	r3, #0
 8000682:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fb35 	bl	8002cf8 <HAL_RCCEx_PeriphCLKConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8000694:	f000 fc14 	bl	8000ec0 <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	37e0      	adds	r7, #224	; 0xe0
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2S1_Init+0x4c>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_I2S1_Init+0x50>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_I2S1_Init+0x4c>)
 80006b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b8:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_I2S1_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_I2S1_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_I2S1_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_I2S1_Init+0x4c>)
 80006ce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006d2:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_I2S1_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_I2S1_Init+0x4c>)
 80006dc:	2202      	movs	r2, #2
 80006de:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2S1_Init+0x4c>)
 80006e2:	f001 fc27 	bl	8001f34 <HAL_I2S_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 80006ec:	f000 fbe8 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200001fc 	.word	0x200001fc
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_UART4_Init+0x58>)
 8000702:	4a15      	ldr	r2, [pc, #84]	; (8000758 <MX_UART4_Init+0x5c>)
 8000704:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_UART4_Init+0x58>)
 8000708:	f647 2212 	movw	r2, #31250	; 0x7a12
 800070c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_UART4_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_UART4_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_UART4_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_UART4_Init+0x58>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_UART4_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_UART4_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_UART4_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_UART4_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_UART4_Init+0x58>)
 8000740:	f002 ff02 	bl	8003548 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 fbb9 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000023c 	.word	0x2000023c
 8000758:	40004c00 	.word	0x40004c00

0800075c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_DMA_Init+0x38>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <MX_DMA_Init+0x38>)
 8000768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_DMA_Init+0x38>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	200d      	movs	r0, #13
 8000780:	f000 fe49 	bl	8001416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000784:	200d      	movs	r0, #13
 8000786:	f000 fe62 	bl	800144e <HAL_NVIC_EnableIRQ>

}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a16      	ldr	r2, [pc, #88]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <MX_GPIO_Init+0x90>)
 80007fc:	f001 fb66 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0x90>)
 8000818:	f001 f9ac 	bl	8001b74 <HAL_GPIO_Init>

}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40020400 	.word	0x40020400

0800082c <HAL_UART_RxCpltCallback>:

}

//buffer is full here, do something when full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, UART4_rxBuffer, 8, 1000);
 8000834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000838:	2208      	movs	r2, #8
 800083a:	496e      	ldr	r1, [pc, #440]	; (80009f4 <HAL_UART_RxCpltCallback+0x1c8>)
 800083c:	486e      	ldr	r0, [pc, #440]	; (80009f8 <HAL_UART_RxCpltCallback+0x1cc>)
 800083e:	f002 fed1 	bl	80035e4 <HAL_UART_Transmit>
    HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, 8);
 8000842:	2208      	movs	r2, #8
 8000844:	496b      	ldr	r1, [pc, #428]	; (80009f4 <HAL_UART_RxCpltCallback+0x1c8>)
 8000846:	486c      	ldr	r0, [pc, #432]	; (80009f8 <HAL_UART_RxCpltCallback+0x1cc>)
 8000848:	f002 ff5f 	bl	800370a <HAL_UART_Receive_DMA>

    __IO uint32_t received_char;

    received_char = UART4_rxBuffer[msgnum];
 800084c:	4b6b      	ldr	r3, [pc, #428]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <HAL_UART_RxCpltCallback+0x1c8>)
 8000854:	5c9b      	ldrb	r3, [r3, r2]
 8000856:	60fb      	str	r3, [r7, #12]

    if(received_char == 0xF & msgnum)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b0f      	cmp	r3, #15
 800085c:	bf0c      	ite	eq
 800085e:	2301      	moveq	r3, #1
 8000860:	2300      	movne	r3, #0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	461a      	mov	r2, r3
 8000866:	4b65      	ldr	r3, [pc, #404]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4013      	ands	r3, r2
 800086c:	2b00      	cmp	r3, #0
 800086e:	d003      	beq.n	8000878 <HAL_UART_RxCpltCallback+0x4c>
      {
    	  vhbtn = 1;
 8000870:	4b63      	ldr	r3, [pc, #396]	; (8000a00 <HAL_UART_RxCpltCallback+0x1d4>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
    	  return;
 8000876:	e0ba      	b.n	80009ee <HAL_UART_RxCpltCallback+0x1c2>
      }

    if(!vhbtn)
 8000878:	4b61      	ldr	r3, [pc, #388]	; (8000a00 <HAL_UART_RxCpltCallback+0x1d4>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d152      	bne.n	8000926 <HAL_UART_RxCpltCallback+0xfa>
      {
    	  if((received_char == 0xF7)  & msgnum == 0)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2bf7      	cmp	r3, #247	; 0xf7
 8000884:	bf0c      	ite	eq
 8000886:	2301      	moveq	r3, #1
 8000888:	2300      	movne	r3, #0
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b5b      	ldr	r3, [pc, #364]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf0c      	ite	eq
 8000894:	2301      	moveq	r3, #1
 8000896:	2300      	movne	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4013      	ands	r3, r2
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f040 809e 	bne.w	80009e0 <HAL_UART_RxCpltCallback+0x1b4>
    		  return;
    	  }


    	  //no note message
    	  if(received_char < 0x80 & msgnum == 0)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b7f      	cmp	r3, #127	; 0x7f
 80008a8:	bf94      	ite	ls
 80008aa:	2301      	movls	r3, #1
 80008ac:	2300      	movhi	r3, #0
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b52      	ldr	r3, [pc, #328]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf0c      	ite	eq
 80008b8:	2301      	moveq	r3, #1
 80008ba:	2300      	movne	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4013      	ands	r3, r2
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 808e 	bne.w	80009e4 <HAL_UART_RxCpltCallback+0x1b8>
    		  return;

    	  if(msgnum == 0)
 80008c8:	4b4c      	ldr	r3, [pc, #304]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d103      	bne.n	80008d8 <HAL_UART_RxCpltCallback+0xac>
    	  {
    		  midimsg = received_char;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b4b      	ldr	r3, [pc, #300]	; (8000a04 <HAL_UART_RxCpltCallback+0x1d8>)
 80008d6:	701a      	strb	r2, [r3, #0]
    	  }
    	  if(msgnum == 1)
 80008d8:	4b48      	ldr	r3, [pc, #288]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d107      	bne.n	80008f0 <HAL_UART_RxCpltCallback+0xc4>
    	  {
    		  key = received_char;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b48      	ldr	r3, [pc, #288]	; (8000a08 <HAL_UART_RxCpltCallback+0x1dc>)
 80008e6:	701a      	strb	r2, [r3, #0]
    		  ctrl = received_char;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <HAL_UART_RxCpltCallback+0x1e0>)
 80008ee:	701a      	strb	r2, [r3, #0]
    	  }
    	  if(msgnum == 2)
 80008f0:	4b42      	ldr	r3, [pc, #264]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d107      	bne.n	8000908 <HAL_UART_RxCpltCallback+0xdc>
    	  {

    		  velocity = received_char;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b44      	ldr	r3, [pc, #272]	; (8000a10 <HAL_UART_RxCpltCallback+0x1e4>)
 80008fe:	701a      	strb	r2, [r3, #0]
    		  data = received_char;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b43      	ldr	r3, [pc, #268]	; (8000a14 <HAL_UART_RxCpltCallback+0x1e8>)
 8000906:	701a      	strb	r2, [r3, #0]
    	  }

    	  msgnum++;
 8000908:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b3a      	ldr	r3, [pc, #232]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 8000912:	701a      	strb	r2, [r3, #0]

    	  if(msgnum == 3)
 8000914:	4b39      	ldr	r3, [pc, #228]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d104      	bne.n	8000926 <HAL_UART_RxCpltCallback+0xfa>
    	  {
    		  msgnum = 0;
 800091c:	4b37      	ldr	r3, [pc, #220]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
    		  ProcessReceivedMidiDatas();
 8000922:	f000 f87b 	bl	8000a1c <ProcessReceivedMidiDatas>
    	  }
      }

    if(vhbtn)
 8000926:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <HAL_UART_RxCpltCallback+0x1d4>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d05f      	beq.n	80009ee <HAL_UART_RxCpltCallback+0x1c2>
        {
      	  if((received_char == 0xF7)  & msgnum == 0)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2bf7      	cmp	r3, #247	; 0xf7
 8000932:	bf0c      	ite	eq
 8000934:	2301      	moveq	r3, #1
 8000936:	2300      	movne	r3, #0
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b30      	ldr	r3, [pc, #192]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	bf0c      	ite	eq
 8000942:	2301      	moveq	r3, #1
 8000944:	2300      	movne	r3, #0
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4013      	ands	r3, r2
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d14b      	bne.n	80009e8 <HAL_UART_RxCpltCallback+0x1bc>
      	  {
      		  return;
      	  }

      	  if(received_char < 0x80 & msgnum == 0)return;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2b7f      	cmp	r3, #127	; 0x7f
 8000954:	bf94      	ite	ls
 8000956:	2301      	movls	r3, #1
 8000958:	2300      	movhi	r3, #0
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	bf0c      	ite	eq
 8000964:	2301      	moveq	r3, #1
 8000966:	2300      	movne	r3, #0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4013      	ands	r3, r2
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d13c      	bne.n	80009ec <HAL_UART_RxCpltCallback+0x1c0>

      	  if(msgnum == 0)
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d103      	bne.n	8000982 <HAL_UART_RxCpltCallback+0x156>
      	  {
      		  midimsg = received_char;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <HAL_UART_RxCpltCallback+0x1d8>)
 8000980:	701a      	strb	r2, [r3, #0]
      	  }
      	  if(msgnum == 1)
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d107      	bne.n	800099a <HAL_UART_RxCpltCallback+0x16e>
      	  {
      		  key = received_char;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <HAL_UART_RxCpltCallback+0x1dc>)
 8000990:	701a      	strb	r2, [r3, #0]
      		  ctrl = received_char;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <HAL_UART_RxCpltCallback+0x1e0>)
 8000998:	701a      	strb	r2, [r3, #0]
      	  }
      	  if(msgnum == 2)
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d107      	bne.n	80009b2 <HAL_UART_RxCpltCallback+0x186>
      	  {
      		  velocity = received_char;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <HAL_UART_RxCpltCallback+0x1e4>)
 80009a8:	701a      	strb	r2, [r3, #0]
      		  data = received_char;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_UART_RxCpltCallback+0x1e8>)
 80009b0:	701a      	strb	r2, [r3, #0]
      	  }

      	  msgnum++;
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 80009bc:	701a      	strb	r2, [r3, #0]

      	  if(msgnum == 3)
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d113      	bne.n	80009ee <HAL_UART_RxCpltCallback+0x1c2>
      	  {
      		  msgnum = 0;
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_UART_RxCpltCallback+0x1d0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
      		  param = key - 0x24;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_UART_RxCpltCallback+0x1dc>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	3b24      	subs	r3, #36	; 0x24
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_UART_RxCpltCallback+0x1ec>)
 80009d6:	701a      	strb	r2, [r3, #0]
      		  vhbtn = 0;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_UART_RxCpltCallback+0x1d4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e006      	b.n	80009ee <HAL_UART_RxCpltCallback+0x1c2>
    		  return;
 80009e0:	bf00      	nop
 80009e2:	e004      	b.n	80009ee <HAL_UART_RxCpltCallback+0x1c2>
    		  return;
 80009e4:	bf00      	nop
 80009e6:	e002      	b.n	80009ee <HAL_UART_RxCpltCallback+0x1c2>
      		  return;
 80009e8:	bf00      	nop
 80009ea:	e000      	b.n	80009ee <HAL_UART_RxCpltCallback+0x1c2>
      	  if(received_char < 0x80 & msgnum == 0)return;
 80009ec:	bf00      	nop
      	  }
        }

}
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000002c 	.word	0x2000002c
 80009f8:	2000023c 	.word	0x2000023c
 80009fc:	2000011e 	.word	0x2000011e
 8000a00:	20000028 	.word	0x20000028
 8000a04:	200002c1 	.word	0x200002c1
 8000a08:	200001dc 	.word	0x200001dc
 8000a0c:	2000010c 	.word	0x2000010c
 8000a10:	20000188 	.word	0x20000188
 8000a14:	200001a5 	.word	0x200001a5
 8000a18:	200000c5 	.word	0x200000c5

08000a1c <ProcessReceivedMidiDatas>:

void ProcessReceivedMidiDatas(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
			uint8_t chan = midimsg & 0xf;
 8000a22:	4b37      	ldr	r3, [pc, #220]	; (8000b00 <ProcessReceivedMidiDatas+0xe4>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	71fb      	strb	r3, [r7, #7]
			uint8_t msgtype = midimsg & 0xf0;
 8000a2c:	4b34      	ldr	r3, [pc, #208]	; (8000b00 <ProcessReceivedMidiDatas+0xe4>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	f023 030f 	bic.w	r3, r3, #15
 8000a34:	71bb      	strb	r3, [r7, #6]
			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			// Not a drum machine, so ignore channel ten
			if(chan == 9)return;
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b09      	cmp	r3, #9
 8000a3a:	d053      	beq.n	8000ae4 <ProcessReceivedMidiDatas+0xc8>

			// Handle MIDI messages
			switch(msgtype)
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	2bf0      	cmp	r3, #240	; 0xf0
 8000a40:	d052      	beq.n	8000ae8 <ProcessReceivedMidiDatas+0xcc>
 8000a42:	2bf0      	cmp	r3, #240	; 0xf0
 8000a44:	dc59      	bgt.n	8000afa <ProcessReceivedMidiDatas+0xde>
 8000a46:	2be0      	cmp	r3, #224	; 0xe0
 8000a48:	d043      	beq.n	8000ad2 <ProcessReceivedMidiDatas+0xb6>
 8000a4a:	2be0      	cmp	r3, #224	; 0xe0
 8000a4c:	dc55      	bgt.n	8000afa <ProcessReceivedMidiDatas+0xde>
 8000a4e:	2bd0      	cmp	r3, #208	; 0xd0
 8000a50:	d04c      	beq.n	8000aec <ProcessReceivedMidiDatas+0xd0>
 8000a52:	2bd0      	cmp	r3, #208	; 0xd0
 8000a54:	dc51      	bgt.n	8000afa <ProcessReceivedMidiDatas+0xde>
 8000a56:	2bc0      	cmp	r3, #192	; 0xc0
 8000a58:	d04a      	beq.n	8000af0 <ProcessReceivedMidiDatas+0xd4>
 8000a5a:	2bc0      	cmp	r3, #192	; 0xc0
 8000a5c:	dc4d      	bgt.n	8000afa <ProcessReceivedMidiDatas+0xde>
 8000a5e:	2bb0      	cmp	r3, #176	; 0xb0
 8000a60:	d048      	beq.n	8000af4 <ProcessReceivedMidiDatas+0xd8>
 8000a62:	2bb0      	cmp	r3, #176	; 0xb0
 8000a64:	dc49      	bgt.n	8000afa <ProcessReceivedMidiDatas+0xde>
 8000a66:	2ba0      	cmp	r3, #160	; 0xa0
 8000a68:	d046      	beq.n	8000af8 <ProcessReceivedMidiDatas+0xdc>
 8000a6a:	2ba0      	cmp	r3, #160	; 0xa0
 8000a6c:	dc45      	bgt.n	8000afa <ProcessReceivedMidiDatas+0xde>
 8000a6e:	2b80      	cmp	r3, #128	; 0x80
 8000a70:	d002      	beq.n	8000a78 <ProcessReceivedMidiDatas+0x5c>
 8000a72:	2b90      	cmp	r3, #144	; 0x90
 8000a74:	d010      	beq.n	8000a98 <ProcessReceivedMidiDatas+0x7c>
 8000a76:	e040      	b.n	8000afa <ProcessReceivedMidiDatas+0xde>
			{
				case (0x80): // Note Off
					notepos = key + transpose;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <ProcessReceivedMidiDatas+0xe8>)
 8000a7a:	781a      	ldrb	r2, [r3, #0]
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <ProcessReceivedMidiDatas+0xec>)
 8000a7e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	4413      	add	r3, r2
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <ProcessReceivedMidiDatas+0xf0>)
 8000a8a:	701a      	strb	r2, [r3, #0]
					stop_note(notepos);
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <ProcessReceivedMidiDatas+0xf0>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f85f 	bl	8000b54 <stop_note>
					break;
 8000a96:	e030      	b.n	8000afa <ProcessReceivedMidiDatas+0xde>
				case (0x90): // Note On
					notepos = key + transpose;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <ProcessReceivedMidiDatas+0xe8>)
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <ProcessReceivedMidiDatas+0xec>)
 8000a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <ProcessReceivedMidiDatas+0xf0>)
 8000aaa:	701a      	strb	r2, [r3, #0]
					if(!velocity)
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <ProcessReceivedMidiDatas+0xf4>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d105      	bne.n	8000ac0 <ProcessReceivedMidiDatas+0xa4>
					{
						stop_note(notepos);
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <ProcessReceivedMidiDatas+0xf0>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f84b 	bl	8000b54 <stop_note>
					else
					{

						play_note(notepos, velocity);
					}
					break;
 8000abe:	e01c      	b.n	8000afa <ProcessReceivedMidiDatas+0xde>
						play_note(notepos, velocity);
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <ProcessReceivedMidiDatas+0xf0>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <ProcessReceivedMidiDatas+0xf4>)
 8000ac6:	7812      	ldrb	r2, [r2, #0]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f826 	bl	8000b1c <play_note>
					break;
 8000ad0:	e013      	b.n	8000afa <ProcessReceivedMidiDatas+0xde>
				case (0xC0): // Program Change
					break;
				case (0xD0): // Mono Aftertouch
					break;
				case (0xE0): // Pitch Bend
					LocalMidiHandler(param, data);
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <ProcessReceivedMidiDatas+0xf8>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <ProcessReceivedMidiDatas+0xfc>)
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f845 	bl	8000b6c <LocalMidiHandler>
					break;
 8000ae2:	e00a      	b.n	8000afa <ProcessReceivedMidiDatas+0xde>
			if(chan == 9)return;
 8000ae4:	bf00      	nop
 8000ae6:	e008      	b.n	8000afa <ProcessReceivedMidiDatas+0xde>
				case (0xF0): // Parameter Change
					break;
 8000ae8:	bf00      	nop
 8000aea:	e006      	b.n	8000afa <ProcessReceivedMidiDatas+0xde>
					break;
 8000aec:	bf00      	nop
 8000aee:	e004      	b.n	8000afa <ProcessReceivedMidiDatas+0xde>
					break;
 8000af0:	bf00      	nop
 8000af2:	e002      	b.n	8000afa <ProcessReceivedMidiDatas+0xde>
        			break;
 8000af4:	bf00      	nop
 8000af6:	e000      	b.n	8000afa <ProcessReceivedMidiDatas+0xde>
					break;
 8000af8:	bf00      	nop
	}
}
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200002c1 	.word	0x200002c1
 8000b04:	200001dc 	.word	0x200001dc
 8000b08:	200000ce 	.word	0x200000ce
 8000b0c:	200002c8 	.word	0x200002c8
 8000b10:	20000188 	.word	0x20000188
 8000b14:	200000c5 	.word	0x200000c5
 8000b18:	200001a5 	.word	0x200001a5

08000b1c <play_note>:

// TO DO: RARELY GETS TO 0X90 MESSAGE, CHECK HOW WE EMPTY THE BUFFER
void play_note(uint8_t note, uint8_t velocity){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	460a      	mov	r2, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <play_note+0x2c>)
 8000b30:	f001 f9e5 	bl	8001efe <HAL_GPIO_TogglePin>
	HAL_I2S_Transmit(&hi2s1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);
 8000b34:	230a      	movs	r3, #10
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	4904      	ldr	r1, [pc, #16]	; (8000b4c <play_note+0x30>)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <play_note+0x34>)
 8000b3c:	f001 fae0 	bl	8002100 <HAL_I2S_Transmit>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	08004270 	.word	0x08004270
 8000b50:	200001fc 	.word	0x200001fc

08000b54 <stop_note>:

void stop_note(uint8_t note){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]

}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <LocalMidiHandler>:

void LocalMidiHandler(uint8_t m_param, uint8_t m_data)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	460a      	mov	r2, r1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	71bb      	strb	r3, [r7, #6]
	switch(m_param)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b1f      	cmp	r3, #31
 8000b80:	f200 8157 	bhi.w	8000e32 <LocalMidiHandler+0x2c6>
 8000b84:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <LocalMidiHandler+0x20>)
 8000b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8a:	bf00      	nop
 8000b8c:	08000c0d 	.word	0x08000c0d
 8000b90:	08000c15 	.word	0x08000c15
 8000b94:	08000c2b 	.word	0x08000c2b
 8000b98:	08000c33 	.word	0x08000c33
 8000b9c:	08000c3f 	.word	0x08000c3f
 8000ba0:	08000c59 	.word	0x08000c59
 8000ba4:	08000c65 	.word	0x08000c65
 8000ba8:	08000c73 	.word	0x08000c73
 8000bac:	08000c95 	.word	0x08000c95
 8000bb0:	08000c9f 	.word	0x08000c9f
 8000bb4:	08000cb9 	.word	0x08000cb9
 8000bb8:	08000cd3 	.word	0x08000cd3
 8000bbc:	08000ced 	.word	0x08000ced
 8000bc0:	08000d07 	.word	0x08000d07
 8000bc4:	08000d21 	.word	0x08000d21
 8000bc8:	08000d3b 	.word	0x08000d3b
 8000bcc:	08000d55 	.word	0x08000d55
 8000bd0:	08000d6f 	.word	0x08000d6f
 8000bd4:	08000d89 	.word	0x08000d89
 8000bd8:	08000da3 	.word	0x08000da3
 8000bdc:	08000daf 	.word	0x08000daf
 8000be0:	08000dc9 	.word	0x08000dc9
 8000be4:	08000ddd 	.word	0x08000ddd
 8000be8:	08000df1 	.word	0x08000df1
 8000bec:	08000e05 	.word	0x08000e05
 8000bf0:	08000e19 	.word	0x08000e19
 8000bf4:	08000e21 	.word	0x08000e21
 8000bf8:	08000e29 	.word	0x08000e29
 8000bfc:	08000e33 	.word	0x08000e33
 8000c00:	08000e33 	.word	0x08000e33
 8000c04:	08000e33 	.word	0x08000e33
 8000c08:	08000e33 	.word	0x08000e33
	{
		case (0):  // Pitch Wheel
			bend = m_data;
 8000c0c:	4a8e      	ldr	r2, [pc, #568]	; (8000e48 <LocalMidiHandler+0x2dc>)
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	7013      	strb	r3, [r2, #0]
			break;
 8000c12:	e10e      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (1): // Modulation Wheel
			if(m_data >= 64)
 8000c14:	79bb      	ldrb	r3, [r7, #6]
 8000c16:	2b3f      	cmp	r3, #63	; 0x3f
 8000c18:	f240 810a 	bls.w	8000e30 <LocalMidiHandler+0x2c4>
			{
				mod = (m_data - 64) >> 1;
 8000c1c:	79bb      	ldrb	r3, [r7, #6]
 8000c1e:	3b40      	subs	r3, #64	; 0x40
 8000c20:	105b      	asrs	r3, r3, #1
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b89      	ldr	r3, [pc, #548]	; (8000e4c <LocalMidiHandler+0x2e0>)
 8000c26:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c28:	e102      	b.n	8000e30 <LocalMidiHandler+0x2c4>
		case (2): // Tuning
			tun = m_data;
 8000c2a:	4a89      	ldr	r2, [pc, #548]	; (8000e50 <LocalMidiHandler+0x2e4>)
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	7013      	strb	r3, [r2, #0]
			break;
 8000c30:	e0ff      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (3): // Wave Select
			wavesel = m_data >> 5;
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	095b      	lsrs	r3, r3, #5
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b86      	ldr	r3, [pc, #536]	; (8000e54 <LocalMidiHandler+0x2e8>)
 8000c3a:	701a      	strb	r2, [r3, #0]
			break;
 8000c3c:	e0f9      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (4): // OSC Mix
			oscmix = (((float)(m_data)) * 0.007874f);
 8000c3e:	79bb      	ldrb	r3, [r7, #6]
 8000c40:	ee07 3a90 	vmov	s15, r3
 8000c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c48:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8000e58 <LocalMidiHandler+0x2ec>
 8000c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c50:	4b82      	ldr	r3, [pc, #520]	; (8000e5c <LocalMidiHandler+0x2f0>)
 8000c52:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000c56:	e0ec      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (5): // De-Tune
			det = m_data >> 4;
 8000c58:	79bb      	ldrb	r3, [r7, #6]
 8000c5a:	091b      	lsrs	r3, r3, #4
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b80      	ldr	r3, [pc, #512]	; (8000e60 <LocalMidiHandler+0x2f4>)
 8000c60:	701a      	strb	r2, [r3, #0]
			break;
 8000c62:	e0e6      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (6): // Scale
			scale = (m_data - 64) >> 2;
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	3b40      	subs	r3, #64	; 0x40
 8000c68:	109b      	asrs	r3, r3, #2
 8000c6a:	b25a      	sxtb	r2, r3
 8000c6c:	4b7d      	ldr	r3, [pc, #500]	; (8000e64 <LocalMidiHandler+0x2f8>)
 8000c6e:	701a      	strb	r2, [r3, #0]
			break;
 8000c70:	e0df      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (7): // Resonance
			resonance = (((float)(m_data)) * 0.007874f * 4.0f);
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	ee07 3a90 	vmov	s15, r3
 8000c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c7c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8000e58 <LocalMidiHandler+0x2ec>
 8000c80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c84:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c8c:	4b76      	ldr	r3, [pc, #472]	; (8000e68 <LocalMidiHandler+0x2fc>)
 8000c8e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000c92:	e0ce      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (8): // Pulse Width Value
			pwval = m_data;
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b74      	ldr	r3, [pc, #464]	; (8000e6c <LocalMidiHandler+0x300>)
 8000c9a:	801a      	strh	r2, [r3, #0]
			break;
 8000c9c:	e0c9      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (9): // VCF Attack
			vcfattack = (((float)(m_data)) * 10.0f);
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb0:	4b6f      	ldr	r3, [pc, #444]	; (8000e70 <LocalMidiHandler+0x304>)
 8000cb2:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000cb6:	e0bc      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (10): // VCF Decay
			vcfdecay = (((float)(m_data)) * 10.0f);
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cc2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cca:	4b6a      	ldr	r3, [pc, #424]	; (8000e74 <LocalMidiHandler+0x308>)
 8000ccc:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000cd0:	e0af      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (11): // VCF Sustain
			vcfsustain = (((float)(m_data)) * 0.007874f);
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cdc:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8000e58 <LocalMidiHandler+0x2ec>
 8000ce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ce4:	4b64      	ldr	r3, [pc, #400]	; (8000e78 <LocalMidiHandler+0x30c>)
 8000ce6:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000cea:	e0a2      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (12): // VCF Release
			vcfrelease = (((float)(m_data)) * 10.0f);
 8000cec:	79bb      	ldrb	r3, [r7, #6]
 8000cee:	ee07 3a90 	vmov	s15, r3
 8000cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <LocalMidiHandler+0x310>)
 8000d00:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000d04:	e095      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (13): // VCA Attack
			vcaattack = (((float)(m_data)) * 10.0f);
 8000d06:	79bb      	ldrb	r3, [r7, #6]
 8000d08:	ee07 3a90 	vmov	s15, r3
 8000d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d18:	4b59      	ldr	r3, [pc, #356]	; (8000e80 <LocalMidiHandler+0x314>)
 8000d1a:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000d1e:	e088      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (14): // VCA Decay
			vcadecay = (((float)(m_data)) * 10.0f);
 8000d20:	79bb      	ldrb	r3, [r7, #6]
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d2a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d32:	4b54      	ldr	r3, [pc, #336]	; (8000e84 <LocalMidiHandler+0x318>)
 8000d34:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000d38:	e07b      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (15): // VCA Sustain
			vcasustain = (((float)(m_data)) * 0.007874f);
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	ee07 3a90 	vmov	s15, r3
 8000d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d44:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000e58 <LocalMidiHandler+0x2ec>
 8000d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d4c:	4b4e      	ldr	r3, [pc, #312]	; (8000e88 <LocalMidiHandler+0x31c>)
 8000d4e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000d52:	e06e      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (16): // VCA Release
			vcarelease = (((float)(m_data)) * 10.0f);
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d66:	4b49      	ldr	r3, [pc, #292]	; (8000e8c <LocalMidiHandler+0x320>)
 8000d68:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000d6c:	e061      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (17): // VCF Follow Level
			vcfkflvl = (((float)(m_data)) * 0.007874f);
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d78:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000e58 <LocalMidiHandler+0x2ec>
 8000d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d80:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <LocalMidiHandler+0x324>)
 8000d82:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000d86:	e054      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (18): // ENV Follow Level
			envkflvl = (((float)(m_data)) * 0.007874f);
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	ee07 3a90 	vmov	s15, r3
 8000d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d92:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000e58 <LocalMidiHandler+0x2ec>
 8000d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <LocalMidiHandler+0x328>)
 8000d9c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000da0:	e047      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (19): // Velocity Select
			velsel = m_data >> 5;
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	095b      	lsrs	r3, r3, #5
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b3b      	ldr	r3, [pc, #236]	; (8000e98 <LocalMidiHandler+0x32c>)
 8000daa:	701a      	strb	r2, [r3, #0]
			break;
 8000dac:	e041      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (20): // VCF Envelope Level
			vcfenvlvl = (((float)(m_data)) * 0.007874f);
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000e58 <LocalMidiHandler+0x2ec>
 8000dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc0:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <LocalMidiHandler+0x330>)
 8000dc2:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000dc6:	e034      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (21): // Mod LFO rate
			lfo1rate = (128 - m_data) << 2;
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b32      	ldr	r3, [pc, #200]	; (8000ea0 <LocalMidiHandler+0x334>)
 8000dd8:	801a      	strh	r2, [r3, #0]
			break;
 8000dda:	e02a      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (22): // Pwm LFO rate
			lfo2rate = (128 - m_data) << 2;
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <LocalMidiHandler+0x338>)
 8000dec:	801a      	strh	r2, [r3, #0]
			break;
 8000dee:	e020      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (23): // Pwm2 LFO rate
			lfo4rate = (128 - m_data) << 2;
 8000df0:	79bb      	ldrb	r3, [r7, #6]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <LocalMidiHandler+0x33c>)
 8000e00:	801a      	strh	r2, [r3, #0]
			break;
 8000e02:	e016      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (24): // Vcf LFO rate
			lfo3rate = (128 - m_data) << 2;
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <LocalMidiHandler+0x340>)
 8000e14:	801a      	strh	r2, [r3, #0]
			break;
 8000e16:	e00c      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (25): // VCF LFO Mod level
			vcf = m_data;
 8000e18:	4a25      	ldr	r2, [pc, #148]	; (8000eb0 <LocalMidiHandler+0x344>)
 8000e1a:	79bb      	ldrb	r3, [r7, #6]
 8000e1c:	7013      	strb	r3, [r2, #0]
			break;
 8000e1e:	e008      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (26): // PWM Level
			pwm = m_data;
 8000e20:	4a24      	ldr	r2, [pc, #144]	; (8000eb4 <LocalMidiHandler+0x348>)
 8000e22:	79bb      	ldrb	r3, [r7, #6]
 8000e24:	7013      	strb	r3, [r2, #0]
			break;
 8000e26:	e004      	b.n	8000e32 <LocalMidiHandler+0x2c6>
		case (27): // PWM2 Level
			pwm2 = m_data;
 8000e28:	4a23      	ldr	r2, [pc, #140]	; (8000eb8 <LocalMidiHandler+0x34c>)
 8000e2a:	79bb      	ldrb	r3, [r7, #6]
 8000e2c:	7013      	strb	r3, [r2, #0]
			break;
 8000e2e:	e000      	b.n	8000e32 <LocalMidiHandler+0x2c6>
			break;
 8000e30:	bf00      	nop
		case (30): // Un-assigned
			break;
		case (31): // Un-assigned
			break;
	}
	paramvalue[m_param] = m_data;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4921      	ldr	r1, [pc, #132]	; (8000ebc <LocalMidiHandler+0x350>)
 8000e36:	79ba      	ldrb	r2, [r7, #6]
 8000e38:	54ca      	strb	r2, [r1, r3]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	2000013d 	.word	0x2000013d
 8000e4c:	2000013c 	.word	0x2000013c
 8000e50:	2000011a 	.word	0x2000011a
 8000e54:	20000180 	.word	0x20000180
 8000e58:	3c0101f3 	.word	0x3c0101f3
 8000e5c:	20000114 	.word	0x20000114
 8000e60:	200000cd 	.word	0x200000cd
 8000e64:	200002d8 	.word	0x200002d8
 8000e68:	200002d0 	.word	0x200002d0
 8000e6c:	200002cc 	.word	0x200002cc
 8000e70:	200002e0 	.word	0x200002e0
 8000e74:	2000017c 	.word	0x2000017c
 8000e78:	200002c4 	.word	0x200002c4
 8000e7c:	200002d4 	.word	0x200002d4
 8000e80:	20000158 	.word	0x20000158
 8000e84:	20000184 	.word	0x20000184
 8000e88:	20000108 	.word	0x20000108
 8000e8c:	20000110 	.word	0x20000110
 8000e90:	200001a8 	.word	0x200001a8
 8000e94:	200002dc 	.word	0x200002dc
 8000e98:	200000ee 	.word	0x200000ee
 8000e9c:	200000c8 	.word	0x200000c8
 8000ea0:	20000120 	.word	0x20000120
 8000ea4:	2000011c 	.word	0x2000011c
 8000ea8:	200001de 	.word	0x200001de
 8000eac:	200001e0 	.word	0x200001e0
 8000eb0:	200001a4 	.word	0x200001a4
 8000eb4:	200002c0 	.word	0x200002c0
 8000eb8:	200000c4 	.word	0x200000c4
 8000ebc:	2000015c 	.word	0x2000015c

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <HAL_MspInit+0x44>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_MspInit+0x44>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800

08000f14 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <HAL_I2S_MspInit+0x7c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d127      	bne.n	8000f86 <HAL_I2S_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_I2S_MspInit+0x80>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a16      	ldr	r2, [pc, #88]	; (8000f94 <HAL_I2S_MspInit+0x80>)
 8000f3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_I2S_MspInit+0x80>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_I2S_MspInit+0x80>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_I2S_MspInit+0x80>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_I2S_MspInit+0x80>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000f66:	23b0      	movs	r3, #176	; 0xb0
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f76:	2305      	movs	r3, #5
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <HAL_I2S_MspInit+0x84>)
 8000f82:	f000 fdf7 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40013000 	.word	0x40013000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a3d      	ldr	r2, [pc, #244]	; (80010b0 <HAL_UART_MspInit+0x114>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d173      	bne.n	80010a6 <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000fbe:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <HAL_UART_MspInit+0x118>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a3c      	ldr	r2, [pc, #240]	; (80010b4 <HAL_UART_MspInit+0x118>)
 8000fc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <HAL_UART_MspInit+0x118>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <HAL_UART_MspInit+0x118>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a36      	ldr	r2, [pc, #216]	; (80010b4 <HAL_UART_MspInit+0x118>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b34      	ldr	r3, [pc, #208]	; (80010b4 <HAL_UART_MspInit+0x118>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	4b31      	ldr	r3, [pc, #196]	; (80010b4 <HAL_UART_MspInit+0x118>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a30      	ldr	r2, [pc, #192]	; (80010b4 <HAL_UART_MspInit+0x118>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <HAL_UART_MspInit+0x118>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001006:	2301      	movs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001016:	2308      	movs	r3, #8
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4825      	ldr	r0, [pc, #148]	; (80010b8 <HAL_UART_MspInit+0x11c>)
 8001022:	f000 fda7 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001026:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001038:	2308      	movs	r3, #8
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	481e      	ldr	r0, [pc, #120]	; (80010bc <HAL_UART_MspInit+0x120>)
 8001044:	f000 fd96 	bl	8001b74 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_UART_MspInit+0x124>)
 800104a:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <HAL_UART_MspInit+0x128>)
 800104c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_UART_MspInit+0x124>)
 8001050:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001054:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_UART_MspInit+0x124>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_UART_MspInit+0x124>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_UART_MspInit+0x124>)
 8001064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001068:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_UART_MspInit+0x124>)
 800106c:	2200      	movs	r2, #0
 800106e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_UART_MspInit+0x124>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_UART_MspInit+0x124>)
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_UART_MspInit+0x124>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_UART_MspInit+0x124>)
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800108a:	480d      	ldr	r0, [pc, #52]	; (80010c0 <HAL_UART_MspInit+0x124>)
 800108c:	f000 f9fa 	bl	8001484 <HAL_DMA_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8001096:	f7ff ff13 	bl	8000ec0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_UART_MspInit+0x124>)
 800109e:	671a      	str	r2, [r3, #112]	; 0x70
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_UART_MspInit+0x124>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40004c00 	.word	0x40004c00
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40020800 	.word	0x40020800
 80010c0:	20000064 	.word	0x20000064
 80010c4:	40026040 	.word	0x40026040

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f884 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <DMA1_Stream2_IRQHandler+0x10>)
 8001122:	f000 fabd 	bl	80016a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000064 	.word	0x20000064

08001130 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <SystemInit+0x20>)
 8001136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <SystemInit+0x20>)
 800113c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800118c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800115a:	490e      	ldr	r1, [pc, #56]	; (8001194 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800115c:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001170:	4c0b      	ldr	r4, [pc, #44]	; (80011a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800117e:	f7ff ffd7 	bl	8001130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001182:	f003 f83d 	bl	8004200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001186:	f7ff f9d3 	bl	8000530 <main>
  bx  lr    
 800118a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001198:	080043a0 	.word	0x080043a0
  ldr r2, =_sbss
 800119c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011a0:	20000304 	.word	0x20000304

080011a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC_IRQHandler>

080011a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011aa:	2003      	movs	r0, #3
 80011ac:	f000 f928 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b0:	200f      	movs	r0, #15
 80011b2:	f000 f805 	bl	80011c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011b6:	f7ff fe89 	bl	8000ecc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x54>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x58>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f943 	bl	800146a <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00e      	b.n	800120c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d80a      	bhi.n	800120a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f000 f90b 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001200:	4a06      	ldr	r2, [pc, #24]	; (800121c <HAL_InitTick+0x5c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e000      	b.n	800120c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000000 	.word	0x20000000
 8001218:	20000008 	.word	0x20000008
 800121c:	20000004 	.word	0x20000004

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008
 8001244:	20000300 	.word	0x20000300

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000300 	.word	0x20000300

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	4313      	orrs	r3, r2
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00
 80012a4:	05fa0000 	.word	0x05fa0000

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4907      	ldr	r1, [pc, #28]	; (80012fc <__NVIC_EnableIRQ+0x38>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	; (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	; (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f7ff ff8e 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff29 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff3e 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff8e 	bl	8001354 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5d 	bl	8001300 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff31 	bl	80012c4 <__NVIC_EnableIRQ>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffa2 	bl	80013bc <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff feda 	bl	8001248 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e099      	b.n	80015d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2202      	movs	r2, #2
 80014ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0201 	bic.w	r2, r2, #1
 80014be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c0:	e00f      	b.n	80014e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014c2:	f7ff fec1 	bl	8001248 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d908      	bls.n	80014e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2220      	movs	r2, #32
 80014d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2203      	movs	r2, #3
 80014da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e078      	b.n	80015d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e8      	bne.n	80014c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	4b38      	ldr	r3, [pc, #224]	; (80015dc <HAL_DMA_Init+0x158>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4313      	orrs	r3, r2
 8001532:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	2b04      	cmp	r3, #4
 800153a:	d107      	bne.n	800154c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4313      	orrs	r3, r2
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4313      	orrs	r3, r2
 800154a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f023 0307 	bic.w	r3, r3, #7
 8001562:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	4313      	orrs	r3, r2
 800156c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	2b04      	cmp	r3, #4
 8001574:	d117      	bne.n	80015a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	4313      	orrs	r3, r2
 800157e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00e      	beq.n	80015a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fa77 	bl	8001a7c <DMA_CheckFifoParam>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2240      	movs	r2, #64	; 0x40
 8001598:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015a2:	2301      	movs	r3, #1
 80015a4:	e016      	b.n	80015d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 fa2e 	bl	8001a10 <DMA_CalcBaseAndBitshift>
 80015b4:	4603      	mov	r3, r0
 80015b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015bc:	223f      	movs	r2, #63	; 0x3f
 80015be:	409a      	lsls	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	e010803f 	.word	0xe010803f

080015e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_DMA_Start_IT+0x26>
 8001602:	2302      	movs	r3, #2
 8001604:	e048      	b.n	8001698 <HAL_DMA_Start_IT+0xb8>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d137      	bne.n	800168a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2202      	movs	r2, #2
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 f9c0 	bl	80019b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	223f      	movs	r2, #63	; 0x3f
 800163a:	409a      	lsls	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0216 	orr.w	r2, r2, #22
 800164e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800165e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0208 	orr.w	r2, r2, #8
 8001676:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	e005      	b.n	8001696 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001692:	2302      	movs	r3, #2
 8001694:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001696:	7dfb      	ldrb	r3, [r7, #23]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80016ac:	4b92      	ldr	r3, [pc, #584]	; (80018f8 <HAL_DMA_IRQHandler+0x258>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a92      	ldr	r2, [pc, #584]	; (80018fc <HAL_DMA_IRQHandler+0x25c>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0a9b      	lsrs	r3, r3, #10
 80016b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ca:	2208      	movs	r2, #8
 80016cc:	409a      	lsls	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d01a      	beq.n	800170c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d013      	beq.n	800170c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0204 	bic.w	r2, r2, #4
 80016f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f8:	2208      	movs	r2, #8
 80016fa:	409a      	lsls	r2, r3
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001710:	2201      	movs	r2, #1
 8001712:	409a      	lsls	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d012      	beq.n	8001742 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172e:	2201      	movs	r2, #1
 8001730:	409a      	lsls	r2, r3
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173a:	f043 0202 	orr.w	r2, r3, #2
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	2204      	movs	r2, #4
 8001748:	409a      	lsls	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d012      	beq.n	8001778 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00b      	beq.n	8001778 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001764:	2204      	movs	r2, #4
 8001766:	409a      	lsls	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001770:	f043 0204 	orr.w	r2, r3, #4
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177c:	2210      	movs	r2, #16
 800177e:	409a      	lsls	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d043      	beq.n	8001810 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d03c      	beq.n	8001810 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	2210      	movs	r2, #16
 800179c:	409a      	lsls	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d018      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d108      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d024      	beq.n	8001810 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	4798      	blx	r3
 80017ce:	e01f      	b.n	8001810 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d01b      	beq.n	8001810 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
 80017e0:	e016      	b.n	8001810 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d107      	bne.n	8001800 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0208 	bic.w	r2, r2, #8
 80017fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	2220      	movs	r2, #32
 8001816:	409a      	lsls	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 808e 	beq.w	800193e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8086 	beq.w	800193e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	2220      	movs	r2, #32
 8001838:	409a      	lsls	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b05      	cmp	r3, #5
 8001848:	d136      	bne.n	80018b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0216 	bic.w	r2, r2, #22
 8001858:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001868:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d103      	bne.n	800187a <HAL_DMA_IRQHandler+0x1da>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0208 	bic.w	r2, r2, #8
 8001888:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	223f      	movs	r2, #63	; 0x3f
 8001890:	409a      	lsls	r2, r3
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d07d      	beq.n	80019aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	4798      	blx	r3
        }
        return;
 80018b6:	e078      	b.n	80019aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d01c      	beq.n	8001900 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d108      	bne.n	80018e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d030      	beq.n	800193e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	4798      	blx	r3
 80018e4:	e02b      	b.n	800193e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d027      	beq.n	800193e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	4798      	blx	r3
 80018f6:	e022      	b.n	800193e <HAL_DMA_IRQHandler+0x29e>
 80018f8:	20000000 	.word	0x20000000
 80018fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10f      	bne.n	800192e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0210 	bic.w	r2, r2, #16
 800191c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001942:	2b00      	cmp	r3, #0
 8001944:	d032      	beq.n	80019ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d022      	beq.n	8001998 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2205      	movs	r2, #5
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0201 	bic.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	3301      	adds	r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	429a      	cmp	r2, r3
 8001974:	d307      	bcc.n	8001986 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f2      	bne.n	800196a <HAL_DMA_IRQHandler+0x2ca>
 8001984:	e000      	b.n	8001988 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001986:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4798      	blx	r3
 80019a8:	e000      	b.n	80019ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80019aa:	bf00      	nop
    }
  }
}
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop

080019b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b40      	cmp	r3, #64	; 0x40
 80019e0:	d108      	bne.n	80019f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019f2:	e007      	b.n	8001a04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	60da      	str	r2, [r3, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	3b10      	subs	r3, #16
 8001a20:	4a13      	ldr	r2, [pc, #76]	; (8001a70 <DMA_CalcBaseAndBitshift+0x60>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <DMA_CalcBaseAndBitshift+0x64>)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d908      	bls.n	8001a50 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <DMA_CalcBaseAndBitshift+0x68>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	1d1a      	adds	r2, r3, #4
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	659a      	str	r2, [r3, #88]	; 0x58
 8001a4e:	e006      	b.n	8001a5e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <DMA_CalcBaseAndBitshift+0x68>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	aaaaaaab 	.word	0xaaaaaaab
 8001a74:	08004388 	.word	0x08004388
 8001a78:	fffffc00 	.word	0xfffffc00

08001a7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d11f      	bne.n	8001ad6 <DMA_CheckFifoParam+0x5a>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d856      	bhi.n	8001b4a <DMA_CheckFifoParam+0xce>
 8001a9c:	a201      	add	r2, pc, #4	; (adr r2, 8001aa4 <DMA_CheckFifoParam+0x28>)
 8001a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa2:	bf00      	nop
 8001aa4:	08001ab5 	.word	0x08001ab5
 8001aa8:	08001ac7 	.word	0x08001ac7
 8001aac:	08001ab5 	.word	0x08001ab5
 8001ab0:	08001b4b 	.word	0x08001b4b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d046      	beq.n	8001b4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ac4:	e043      	b.n	8001b4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ace:	d140      	bne.n	8001b52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ad4:	e03d      	b.n	8001b52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ade:	d121      	bne.n	8001b24 <DMA_CheckFifoParam+0xa8>
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d837      	bhi.n	8001b56 <DMA_CheckFifoParam+0xda>
 8001ae6:	a201      	add	r2, pc, #4	; (adr r2, 8001aec <DMA_CheckFifoParam+0x70>)
 8001ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aec:	08001afd 	.word	0x08001afd
 8001af0:	08001b03 	.word	0x08001b03
 8001af4:	08001afd 	.word	0x08001afd
 8001af8:	08001b15 	.word	0x08001b15
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
      break;
 8001b00:	e030      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d025      	beq.n	8001b5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b12:	e022      	b.n	8001b5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b1c:	d11f      	bne.n	8001b5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b22:	e01c      	b.n	8001b5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d903      	bls.n	8001b32 <DMA_CheckFifoParam+0xb6>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d003      	beq.n	8001b38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b30:	e018      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
      break;
 8001b36:	e015      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00e      	beq.n	8001b62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
      break;
 8001b48:	e00b      	b.n	8001b62 <DMA_CheckFifoParam+0xe6>
      break;
 8001b4a:	bf00      	nop
 8001b4c:	e00a      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b4e:	bf00      	nop
 8001b50:	e008      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b52:	bf00      	nop
 8001b54:	e006      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b56:	bf00      	nop
 8001b58:	e004      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b5a:	bf00      	nop
 8001b5c:	e002      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b5e:	bf00      	nop
 8001b60:	e000      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b62:	bf00      	nop
    }
  } 
  
  return status; 
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e175      	b.n	8001e80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	f040 8164 	bne.w	8001e7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d00b      	beq.n	8001bd2 <HAL_GPIO_Init+0x5e>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d007      	beq.n	8001bd2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bc6:	2b11      	cmp	r3, #17
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b12      	cmp	r3, #18
 8001bd0:	d130      	bne.n	8001c34 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 0201 	and.w	r2, r3, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x100>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b12      	cmp	r3, #18
 8001c72:	d123      	bne.n	8001cbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	08da      	lsrs	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3208      	adds	r2, #8
 8001c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	69b9      	ldr	r1, [r7, #24]
 8001cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0203 	and.w	r2, r3, #3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80be 	beq.w	8001e7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <HAL_GPIO_Init+0x324>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a65      	ldr	r2, [pc, #404]	; (8001e98 <HAL_GPIO_Init+0x324>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_GPIO_Init+0x324>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d16:	4a61      	ldr	r2, [pc, #388]	; (8001e9c <HAL_GPIO_Init+0x328>)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a58      	ldr	r2, [pc, #352]	; (8001ea0 <HAL_GPIO_Init+0x32c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d037      	beq.n	8001db2 <HAL_GPIO_Init+0x23e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a57      	ldr	r2, [pc, #348]	; (8001ea4 <HAL_GPIO_Init+0x330>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d031      	beq.n	8001dae <HAL_GPIO_Init+0x23a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a56      	ldr	r2, [pc, #344]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d02b      	beq.n	8001daa <HAL_GPIO_Init+0x236>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a55      	ldr	r2, [pc, #340]	; (8001eac <HAL_GPIO_Init+0x338>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d025      	beq.n	8001da6 <HAL_GPIO_Init+0x232>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a54      	ldr	r2, [pc, #336]	; (8001eb0 <HAL_GPIO_Init+0x33c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d01f      	beq.n	8001da2 <HAL_GPIO_Init+0x22e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a53      	ldr	r2, [pc, #332]	; (8001eb4 <HAL_GPIO_Init+0x340>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d019      	beq.n	8001d9e <HAL_GPIO_Init+0x22a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_GPIO_Init+0x344>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_GPIO_Init+0x226>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a51      	ldr	r2, [pc, #324]	; (8001ebc <HAL_GPIO_Init+0x348>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00d      	beq.n	8001d96 <HAL_GPIO_Init+0x222>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a50      	ldr	r2, [pc, #320]	; (8001ec0 <HAL_GPIO_Init+0x34c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <HAL_GPIO_Init+0x21e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4f      	ldr	r2, [pc, #316]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_GPIO_Init+0x21a>
 8001d8a:	2309      	movs	r3, #9
 8001d8c:	e012      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d8e:	230a      	movs	r3, #10
 8001d90:	e010      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d92:	2308      	movs	r3, #8
 8001d94:	e00e      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e00c      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	e00a      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d9e:	2305      	movs	r3, #5
 8001da0:	e008      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001da2:	2304      	movs	r3, #4
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001da6:	2303      	movs	r3, #3
 8001da8:	e004      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e002      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001db2:	2300      	movs	r3, #0
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	f002 0203 	and.w	r2, r2, #3
 8001dba:	0092      	lsls	r2, r2, #2
 8001dbc:	4093      	lsls	r3, r2
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001dc4:	4935      	ldr	r1, [pc, #212]	; (8001e9c <HAL_GPIO_Init+0x328>)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df6:	4a34      	ldr	r2, [pc, #208]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dfc:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e20:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b0f      	cmp	r3, #15
 8001e84:	f67f ae86 	bls.w	8001b94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40013800 	.word	0x40013800
 8001ea0:	40020000 	.word	0x40020000
 8001ea4:	40020400 	.word	0x40020400
 8001ea8:	40020800 	.word	0x40020800
 8001eac:	40020c00 	.word	0x40020c00
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40021400 	.word	0x40021400
 8001eb8:	40021800 	.word	0x40021800
 8001ebc:	40021c00 	.word	0x40021c00
 8001ec0:	40022000 	.word	0x40022000
 8001ec4:	40022400 	.word	0x40022400
 8001ec8:	40013c00 	.word	0x40013c00

08001ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ee8:	e003      	b.n	8001ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	041a      	lsls	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b085      	sub	sp, #20
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f10:	887a      	ldrh	r2, [r7, #2]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	041a      	lsls	r2, r3, #16
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	400b      	ands	r3, r1
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	619a      	str	r2, [r3, #24]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0d2      	b.n	80020ec <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe ffda 	bl	8000f14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69d9      	ldr	r1, [r3, #28]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b60      	ldr	r3, [pc, #384]	; (80020f4 <HAL_I2S_Init+0x1c0>)
 8001f74:	400b      	ands	r3, r1
 8001f76:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d067      	beq.n	8002058 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001f90:	2310      	movs	r3, #16
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e001      	b.n	8001f9a <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001f96:	2320      	movs	r3, #32
 8001f98:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d802      	bhi.n	8001fa8 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d102      	bne.n	8001fb6 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8001fb0:	4b51      	ldr	r3, [pc, #324]	; (80020f8 <HAL_I2S_Init+0x1c4>)
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	e003      	b.n	8001fbe <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f994 	bl	80022e4 <I2S_GetClockFreq>
 8001fbc:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc6:	d125      	bne.n	8002014 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	3305      	adds	r3, #5
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	e01f      	b.n	8002032 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	461a      	mov	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	3305      	adds	r3, #5
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	e00e      	b.n	8002032 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	fbb2 f2f3 	udiv	r2, r2, r3
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	461a      	mov	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	3305      	adds	r3, #5
 8002030:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4a31      	ldr	r2, [pc, #196]	; (80020fc <HAL_I2S_Init+0x1c8>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	08db      	lsrs	r3, r3, #3
 800203c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	e003      	b.n	8002060 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002058:	2302      	movs	r3, #2
 800205a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d902      	bls.n	800206c <HAL_I2S_Init+0x138>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	2bff      	cmp	r3, #255	; 0xff
 800206a:	d907      	bls.n	800207c <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002070:	f043 0210 	orr.w	r2, r3, #16
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e037      	b.n	80020ec <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	ea42 0103 	orr.w	r1, r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	430a      	orrs	r2, r1
 800208e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69da      	ldr	r2, [r3, #28]
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_I2S_Init+0x1c0>)
 8002098:	4013      	ands	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6851      	ldr	r1, [r2, #4]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6892      	ldr	r2, [r2, #8]
 80020a2:	4311      	orrs	r1, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	68d2      	ldr	r2, [r2, #12]
 80020a8:	4311      	orrs	r1, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6992      	ldr	r2, [r2, #24]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ba:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b30      	cmp	r3, #48	; 0x30
 80020c2:	d003      	beq.n	80020cc <HAL_I2S_Init+0x198>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2bb0      	cmp	r3, #176	; 0xb0
 80020ca:	d107      	bne.n	80020dc <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	fffff040 	.word	0xfffff040
 80020f8:	00bb8000 	.word	0x00bb8000
 80020fc:	cccccccd 	.word	0xcccccccd

08002100 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_I2S_Transmit+0x1c>
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0dc      	b.n	80022da <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_I2S_Transmit+0x30>
 800212c:	2302      	movs	r3, #2
 800212e:	e0d4      	b.n	80022da <HAL_I2S_Transmit+0x1da>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d005      	beq.n	8002150 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 800214c:	2302      	movs	r3, #2
 800214e:	e0c4      	b.n	80022da <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2203      	movs	r2, #3
 8002154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pTxBuffPtr = pData;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	621a      	str	r2, [r3, #32]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d002      	beq.n	800217c <HAL_I2S_Transmit+0x7c>
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b05      	cmp	r3, #5
 800217a:	d10a      	bne.n	8002192 <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = (Size << 1U);
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	84da      	strh	r2, [r3, #38]	; 0x26
 8002190:	e005      	b.n	800219e <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	88fa      	ldrh	r2, [r7, #6]
 8002196:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	84da      	strh	r2, [r3, #38]	; 0x26
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b4:	d007      	beq.n	80021c6 <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021c4:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	2102      	movs	r1, #2
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f8d5 	bl	800237c <I2S_WaitFlagStateUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d04e      	beq.n	8002276 <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    __HAL_UNLOCK(hi2s);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e070      	b.n	80022da <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	881a      	ldrh	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	1c9a      	adds	r2, r3, #2
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	621a      	str	r2, [r3, #32]
    hi2s->TxXferCount--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	2102      	movs	r1, #2
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f8aa 	bl	800237c <I2S_WaitFlagStateUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00f      	beq.n	800224e <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      __HAL_UNLOCK(hi2s);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e045      	b.n	80022da <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b08      	cmp	r3, #8
 800225a:	d10c      	bne.n	8002276 <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	f043 0204 	orr.w	r2, r3, #4
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	63da      	str	r2, [r3, #60]	; 0x3c
  while (hi2s->TxXferCount > 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1bb      	bne.n	80021f8 <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002294:	d118      	bne.n	80022c8 <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2200      	movs	r2, #0
 800229a:	2180      	movs	r1, #128	; 0x80
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f86d 	bl	800237c <I2S_WaitFlagStateUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00f      	beq.n	80022c8 <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	f043 0201 	orr.w	r2, r3, #1
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      __HAL_UNLOCK(hi2s);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e008      	b.n	80022da <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  __HAL_UNLOCK(hi2s);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d02d      	beq.n	8002350 <I2S_GetClockFreq+0x6c>
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d12e      	bne.n	8002356 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80022f8:	4b1c      	ldr	r3, [pc, #112]	; (800236c <I2S_GetClockFreq+0x88>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d108      	bne.n	8002316 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <I2S_GetClockFreq+0x88>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800230c:	4a18      	ldr	r2, [pc, #96]	; (8002370 <I2S_GetClockFreq+0x8c>)
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e007      	b.n	8002326 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <I2S_GetClockFreq+0x88>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800231e:	4a15      	ldr	r2, [pc, #84]	; (8002374 <I2S_GetClockFreq+0x90>)
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <I2S_GetClockFreq+0x88>)
 8002328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800232c:	0f1b      	lsrs	r3, r3, #28
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8002334:	4b0d      	ldr	r3, [pc, #52]	; (800236c <I2S_GetClockFreq+0x88>)
 8002336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800233a:	099b      	lsrs	r3, r3, #6
 800233c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	fb02 f203 	mul.w	r2, r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	613b      	str	r3, [r7, #16]

      break;
 800234e:	e005      	b.n	800235c <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <I2S_GetClockFreq+0x94>)
 8002352:	613b      	str	r3, [r7, #16]
      break;
 8002354:	e002      	b.n	800235c <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
      break;
 800235a:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 800235c:	693b      	ldr	r3, [r7, #16]
}
 800235e:	4618      	mov	r0, r3
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	00f42400 	.word	0x00f42400
 8002374:	017d7840 	.word	0x017d7840
 8002378:	00bb8000 	.word	0x00bb8000

0800237c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800238c:	f7fe ff5c 	bl	8001248 <HAL_GetTick>
 8002390:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002392:	e018      	b.n	80023c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239a:	d014      	beq.n	80023c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800239c:	f7fe ff54 	bl	8001248 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d902      	bls.n	80023b2 <I2S_WaitFlagStateUntilTimeout+0x36>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e00f      	b.n	80023e6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4013      	ands	r3, r2
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	bf0c      	ite	eq
 80023d6:	2301      	moveq	r3, #1
 80023d8:	2300      	movne	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d1d7      	bne.n	8002394 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e29b      	b.n	800293e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8087 	beq.w	8002522 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002414:	4b96      	ldr	r3, [pc, #600]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b04      	cmp	r3, #4
 800241e:	d00c      	beq.n	800243a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002420:	4b93      	ldr	r3, [pc, #588]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d112      	bne.n	8002452 <HAL_RCC_OscConfig+0x62>
 800242c:	4b90      	ldr	r3, [pc, #576]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002438:	d10b      	bne.n	8002452 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243a:	4b8d      	ldr	r3, [pc, #564]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d06c      	beq.n	8002520 <HAL_RCC_OscConfig+0x130>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d168      	bne.n	8002520 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e275      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x7a>
 800245c:	4b84      	ldr	r3, [pc, #528]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a83      	ldr	r2, [pc, #524]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e02e      	b.n	80024c8 <HAL_RCC_OscConfig+0xd8>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x9c>
 8002472:	4b7f      	ldr	r3, [pc, #508]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7e      	ldr	r2, [pc, #504]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b7c      	ldr	r3, [pc, #496]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a7b      	ldr	r2, [pc, #492]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xd8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0xc0>
 8002496:	4b76      	ldr	r3, [pc, #472]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a75      	ldr	r2, [pc, #468]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b73      	ldr	r3, [pc, #460]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a72      	ldr	r2, [pc, #456]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xd8>
 80024b0:	4b6f      	ldr	r3, [pc, #444]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a6e      	ldr	r2, [pc, #440]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b6c      	ldr	r3, [pc, #432]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6b      	ldr	r2, [pc, #428]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe feba 	bl	8001248 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe feb6 	bl	8001248 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e229      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b61      	ldr	r3, [pc, #388]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe8>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fea6 	bl	8001248 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe fea2 	bl	8001248 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e215      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	4b57      	ldr	r3, [pc, #348]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x110>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d069      	beq.n	8002602 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800252e:	4b50      	ldr	r3, [pc, #320]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253a:	4b4d      	ldr	r3, [pc, #308]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b08      	cmp	r3, #8
 8002544:	d11c      	bne.n	8002580 <HAL_RCC_OscConfig+0x190>
 8002546:	4b4a      	ldr	r3, [pc, #296]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x17a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e1e9      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b41      	ldr	r3, [pc, #260]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	493d      	ldr	r1, [pc, #244]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	e040      	b.n	8002602 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d023      	beq.n	80025d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002588:	4b39      	ldr	r3, [pc, #228]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a38      	ldr	r2, [pc, #224]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe fe58 	bl	8001248 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259c:	f7fe fe54 	bl	8001248 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1c7      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ae:	4b30      	ldr	r3, [pc, #192]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ba:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4929      	ldr	r1, [pc, #164]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
 80025ce:	e018      	b.n	8002602 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d0:	4b27      	ldr	r3, [pc, #156]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a26      	ldr	r2, [pc, #152]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 80025d6:	f023 0301 	bic.w	r3, r3, #1
 80025da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe fe34 	bl	8001248 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e4:	f7fe fe30 	bl	8001248 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1a3      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	4b1e      	ldr	r3, [pc, #120]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d038      	beq.n	8002680 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d019      	beq.n	800264a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002616:	4b16      	ldr	r3, [pc, #88]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261a:	4a15      	ldr	r2, [pc, #84]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7fe fe11 	bl	8001248 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262a:	f7fe fe0d 	bl	8001248 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e180      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 800263e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x23a>
 8002648:	e01a      	b.n	8002680 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 800264c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264e:	4a08      	ldr	r2, [pc, #32]	; (8002670 <HAL_RCC_OscConfig+0x280>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002656:	f7fe fdf7 	bl	8001248 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe fdf3 	bl	8001248 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d903      	bls.n	8002674 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e166      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
 8002670:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	4b92      	ldr	r3, [pc, #584]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ee      	bne.n	800265e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a4 	beq.w	80027d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268e:	4b8c      	ldr	r3, [pc, #560]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10d      	bne.n	80026b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	4b89      	ldr	r3, [pc, #548]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a88      	ldr	r2, [pc, #544]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b86      	ldr	r3, [pc, #536]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b6:	4b83      	ldr	r3, [pc, #524]	; (80028c4 <HAL_RCC_OscConfig+0x4d4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d118      	bne.n	80026f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026c2:	4b80      	ldr	r3, [pc, #512]	; (80028c4 <HAL_RCC_OscConfig+0x4d4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a7f      	ldr	r2, [pc, #508]	; (80028c4 <HAL_RCC_OscConfig+0x4d4>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ce:	f7fe fdbb 	bl	8001248 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d6:	f7fe fdb7 	bl	8001248 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b64      	cmp	r3, #100	; 0x64
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e12a      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e8:	4b76      	ldr	r3, [pc, #472]	; (80028c4 <HAL_RCC_OscConfig+0x4d4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x31a>
 80026fc:	4b70      	ldr	r3, [pc, #448]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	4a6f      	ldr	r2, [pc, #444]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	; 0x70
 8002708:	e02d      	b.n	8002766 <HAL_RCC_OscConfig+0x376>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0x33c>
 8002712:	4b6b      	ldr	r3, [pc, #428]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	4a6a      	ldr	r2, [pc, #424]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6713      	str	r3, [r2, #112]	; 0x70
 800271e:	4b68      	ldr	r3, [pc, #416]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	4a67      	ldr	r2, [pc, #412]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002724:	f023 0304 	bic.w	r3, r3, #4
 8002728:	6713      	str	r3, [r2, #112]	; 0x70
 800272a:	e01c      	b.n	8002766 <HAL_RCC_OscConfig+0x376>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b05      	cmp	r3, #5
 8002732:	d10c      	bne.n	800274e <HAL_RCC_OscConfig+0x35e>
 8002734:	4b62      	ldr	r3, [pc, #392]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	4a61      	ldr	r2, [pc, #388]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800273a:	f043 0304 	orr.w	r3, r3, #4
 800273e:	6713      	str	r3, [r2, #112]	; 0x70
 8002740:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a5e      	ldr	r2, [pc, #376]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
 800274c:	e00b      	b.n	8002766 <HAL_RCC_OscConfig+0x376>
 800274e:	4b5c      	ldr	r3, [pc, #368]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	4a5b      	ldr	r2, [pc, #364]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	6713      	str	r3, [r2, #112]	; 0x70
 800275a:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002760:	f023 0304 	bic.w	r3, r3, #4
 8002764:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d015      	beq.n	800279a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7fe fd6b 	bl	8001248 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe fd67 	bl	8001248 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	; 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0d8      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0ee      	beq.n	8002776 <HAL_RCC_OscConfig+0x386>
 8002798:	e014      	b.n	80027c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279a:	f7fe fd55 	bl	8001248 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe fd51 	bl	8001248 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e0c2      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b8:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1ee      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d105      	bne.n	80027d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	4a3c      	ldr	r2, [pc, #240]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80027d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80ae 	beq.w	800293c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e0:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d06d      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d14b      	bne.n	800288c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a31      	ldr	r2, [pc, #196]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80027fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fd22 	bl	8001248 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fd1e 	bl	8001248 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e091      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	3b01      	subs	r3, #1
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	071b      	lsls	r3, r3, #28
 8002852:	491b      	ldr	r1, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a18      	ldr	r2, [pc, #96]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fcf0 	bl	8001248 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fcec 	bl	8001248 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e05f      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x47c>
 800288a:	e057      	b.n	800293c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fcd6 	bl	8001248 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe fcd2 	bl	8001248 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e045      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4b0>
 80028be:	e03d      	b.n	800293c <HAL_RCC_OscConfig+0x54c>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028c8:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <HAL_RCC_OscConfig+0x558>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d030      	beq.n	8002938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d129      	bne.n	8002938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d122      	bne.n	8002938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028f8:	4013      	ands	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002900:	4293      	cmp	r3, r2
 8002902:	d119      	bne.n	8002938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	3b01      	subs	r3, #1
 8002912:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d10f      	bne.n	8002938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d107      	bne.n	8002938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800

0800294c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0d0      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	4b6a      	ldr	r3, [pc, #424]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d910      	bls.n	8002994 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b67      	ldr	r3, [pc, #412]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 020f 	bic.w	r2, r3, #15
 800297a:	4965      	ldr	r1, [pc, #404]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b63      	ldr	r3, [pc, #396]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b8      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ac:	4b59      	ldr	r3, [pc, #356]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a58      	ldr	r2, [pc, #352]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c4:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d0:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	494d      	ldr	r1, [pc, #308]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d040      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d115      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e07f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e073      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e06b      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2e:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f023 0203 	bic.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4936      	ldr	r1, [pc, #216]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a40:	f7fe fc02 	bl	8001248 <HAL_GetTick>
 8002a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a48:	f7fe fbfe 	bl	8001248 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e053      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5e:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 020c 	and.w	r2, r3, #12
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d1eb      	bne.n	8002a48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d210      	bcs.n	8002aa0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 020f 	bic.w	r2, r3, #15
 8002a86:	4922      	ldr	r1, [pc, #136]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e032      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4916      	ldr	r1, [pc, #88]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	490e      	ldr	r1, [pc, #56]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ade:	f000 f821 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	490a      	ldr	r1, [pc, #40]	; (8002b18 <HAL_RCC_ClockConfig+0x1cc>)
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <HAL_RCC_ClockConfig+0x1d0>)
 8002af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1d4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fb5e 	bl	80011c0 <HAL_InitTick>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023c00 	.word	0x40023c00
 8002b14:	40023800 	.word	0x40023800
 8002b18:	08004370 	.word	0x08004370
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	20000004 	.word	0x20000004

08002b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b24:	b5b0      	push	{r4, r5, r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	6079      	str	r1, [r7, #4]
 8002b2e:	2100      	movs	r1, #0
 8002b30:	60f9      	str	r1, [r7, #12]
 8002b32:	2100      	movs	r1, #0
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002b36:	2100      	movs	r1, #0
 8002b38:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3a:	4952      	ldr	r1, [pc, #328]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b3c:	6889      	ldr	r1, [r1, #8]
 8002b3e:	f001 010c 	and.w	r1, r1, #12
 8002b42:	2908      	cmp	r1, #8
 8002b44:	d00d      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0x3e>
 8002b46:	2908      	cmp	r1, #8
 8002b48:	f200 8094 	bhi.w	8002c74 <HAL_RCC_GetSysClockFreq+0x150>
 8002b4c:	2900      	cmp	r1, #0
 8002b4e:	d002      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0x32>
 8002b50:	2904      	cmp	r1, #4
 8002b52:	d003      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x38>
 8002b54:	e08e      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b56:	4b4c      	ldr	r3, [pc, #304]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b58:	60bb      	str	r3, [r7, #8]
      break;
 8002b5a:	e08e      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5c:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x168>)
 8002b5e:	60bb      	str	r3, [r7, #8]
      break;
 8002b60:	e08b      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b62:	4948      	ldr	r1, [pc, #288]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b64:	6849      	ldr	r1, [r1, #4]
 8002b66:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002b6a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b6c:	4945      	ldr	r1, [pc, #276]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b6e:	6849      	ldr	r1, [r1, #4]
 8002b70:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002b74:	2900      	cmp	r1, #0
 8002b76:	d024      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b78:	4942      	ldr	r1, [pc, #264]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b7a:	6849      	ldr	r1, [r1, #4]
 8002b7c:	0989      	lsrs	r1, r1, #6
 8002b7e:	4608      	mov	r0, r1
 8002b80:	f04f 0100 	mov.w	r1, #0
 8002b84:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002b88:	f04f 0500 	mov.w	r5, #0
 8002b8c:	ea00 0204 	and.w	r2, r0, r4
 8002b90:	ea01 0305 	and.w	r3, r1, r5
 8002b94:	493d      	ldr	r1, [pc, #244]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x168>)
 8002b96:	fb01 f003 	mul.w	r0, r1, r3
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	fb01 f102 	mul.w	r1, r1, r2
 8002ba0:	1844      	adds	r4, r0, r1
 8002ba2:	493a      	ldr	r1, [pc, #232]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x168>)
 8002ba4:	fba2 0101 	umull	r0, r1, r2, r1
 8002ba8:	1863      	adds	r3, r4, r1
 8002baa:	4619      	mov	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	f7fd fb40 	bl	8000238 <__aeabi_uldivmod>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e04a      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	ea02 0400 	and.w	r4, r2, r0
 8002bda:	ea03 0501 	and.w	r5, r3, r1
 8002bde:	4620      	mov	r0, r4
 8002be0:	4629      	mov	r1, r5
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	014b      	lsls	r3, r1, #5
 8002bec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bf0:	0142      	lsls	r2, r0, #5
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	1b00      	subs	r0, r0, r4
 8002bf8:	eb61 0105 	sbc.w	r1, r1, r5
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	018b      	lsls	r3, r1, #6
 8002c06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c0a:	0182      	lsls	r2, r0, #6
 8002c0c:	1a12      	subs	r2, r2, r0
 8002c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	00d9      	lsls	r1, r3, #3
 8002c1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c20:	00d0      	lsls	r0, r2, #3
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	1912      	adds	r2, r2, r4
 8002c28:	eb45 0303 	adc.w	r3, r5, r3
 8002c2c:	f04f 0000 	mov.w	r0, #0
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	0299      	lsls	r1, r3, #10
 8002c36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c3a:	0290      	lsls	r0, r2, #10
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	f7fd faf4 	bl	8000238 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4613      	mov	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	3301      	adds	r3, #1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	60bb      	str	r3, [r7, #8]
      break;
 8002c72:	e002      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c76:	60bb      	str	r3, [r7, #8]
      break;
 8002c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bdb0      	pop	{r4, r5, r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	00f42400 	.word	0x00f42400
 8002c8c:	017d7840 	.word	0x017d7840

08002c90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000000 	.word	0x20000000

08002ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cac:	f7ff fff0 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	0a9b      	lsrs	r3, r3, #10
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	4903      	ldr	r1, [pc, #12]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cbe:	5ccb      	ldrb	r3, [r1, r3]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	08004380 	.word	0x08004380

08002cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cd4:	f7ff ffdc 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0b5b      	lsrs	r3, r3, #13
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4903      	ldr	r1, [pc, #12]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	08004380 	.word	0x08004380

08002cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d012      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d20:	4b69      	ldr	r3, [pc, #420]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a68      	ldr	r2, [pc, #416]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d2a:	6093      	str	r3, [r2, #8]
 8002d2c:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	4964      	ldr	r1, [pc, #400]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d42:	2301      	movs	r3, #1
 8002d44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d017      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d52:	4b5d      	ldr	r3, [pc, #372]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	4959      	ldr	r1, [pc, #356]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d70:	d101      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d72:	2301      	movs	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d017      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d8e:	4b4e      	ldr	r3, [pc, #312]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	494a      	ldr	r1, [pc, #296]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dac:	d101      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 808b 	beq.w	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ddc:	4b3a      	ldr	r3, [pc, #232]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	4a39      	ldr	r2, [pc, #228]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de6:	6413      	str	r3, [r2, #64]	; 0x40
 8002de8:	4b37      	ldr	r3, [pc, #220]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a34      	ldr	r2, [pc, #208]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e00:	f7fe fa22 	bl	8001248 <HAL_GetTick>
 8002e04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e08:	f7fe fa1e 	bl	8001248 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e38f      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e26:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d035      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d02e      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e44:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e4e:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a1a      	ldr	r2, [pc, #104]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e66:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d114      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe f9e6 	bl	8001248 <HAL_GetTick>
 8002e7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e80:	f7fe f9e2 	bl	8001248 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e351      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0ee      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eae:	d111      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	4901      	ldr	r1, [pc, #4]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
 8002ec6:	e00b      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	0ffffcff 	.word	0x0ffffcff
 8002ed4:	4bb3      	ldr	r3, [pc, #716]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4ab2      	ldr	r2, [pc, #712]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ede:	6093      	str	r3, [r2, #8]
 8002ee0:	4bb0      	ldr	r3, [pc, #704]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eec:	49ad      	ldr	r1, [pc, #692]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d010      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002efe:	4ba9      	ldr	r3, [pc, #676]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f04:	4aa7      	ldr	r2, [pc, #668]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f0e:	4ba5      	ldr	r3, [pc, #660]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	49a2      	ldr	r1, [pc, #648]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f2c:	4b9d      	ldr	r3, [pc, #628]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f3a:	499a      	ldr	r1, [pc, #616]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f4e:	4b95      	ldr	r3, [pc, #596]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f5c:	4991      	ldr	r1, [pc, #580]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f70:	4b8c      	ldr	r3, [pc, #560]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f7e:	4989      	ldr	r1, [pc, #548]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f92:	4b84      	ldr	r3, [pc, #528]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	4980      	ldr	r1, [pc, #512]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fb4:	4b7b      	ldr	r3, [pc, #492]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	f023 0203 	bic.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	4978      	ldr	r1, [pc, #480]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fd6:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	f023 020c 	bic.w	r2, r3, #12
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe4:	496f      	ldr	r1, [pc, #444]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ff8:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	4967      	ldr	r1, [pc, #412]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800301a:	4b62      	ldr	r3, [pc, #392]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003028:	495e      	ldr	r1, [pc, #376]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	4956      	ldr	r1, [pc, #344]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800305e:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	494d      	ldr	r1, [pc, #308]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003080:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308e:	4945      	ldr	r1, [pc, #276]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030a2:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b0:	493c      	ldr	r1, [pc, #240]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030c4:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030d2:	4934      	ldr	r1, [pc, #208]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d011      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030e6:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f4:	492b      	ldr	r1, [pc, #172]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003104:	d101      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003106:	2301      	movs	r3, #1
 8003108:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003116:	2301      	movs	r3, #1
 8003118:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003126:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003134:	491b      	ldr	r1, [pc, #108]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00b      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003148:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003158:	4912      	ldr	r1, [pc, #72]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800316c:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317c:	4909      	ldr	r1, [pc, #36]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00f      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003196:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	e002      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800
 80031a8:	4986      	ldr	r1, [pc, #536]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80031bc:	4b81      	ldr	r3, [pc, #516]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031cc:	497d      	ldr	r1, [pc, #500]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d006      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80d6 	beq.w	8003394 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031e8:	4b76      	ldr	r3, [pc, #472]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a75      	ldr	r2, [pc, #468]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f4:	f7fe f828 	bl	8001248 <HAL_GetTick>
 80031f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031fc:	f7fe f824 	bl	8001248 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e195      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800320e:	4b6d      	ldr	r3, [pc, #436]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d021      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	2b00      	cmp	r3, #0
 800322c:	d11d      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800322e:	4b65      	ldr	r3, [pc, #404]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800323c:	4b61      	ldr	r3, [pc, #388]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800323e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003242:	0e1b      	lsrs	r3, r3, #24
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	019a      	lsls	r2, r3, #6
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	041b      	lsls	r3, r3, #16
 8003254:	431a      	orrs	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	071b      	lsls	r3, r3, #28
 8003262:	4958      	ldr	r1, [pc, #352]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d004      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02e      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003294:	d129      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003296:	4b4b      	ldr	r3, [pc, #300]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032a4:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032aa:	0f1b      	lsrs	r3, r3, #28
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	019a      	lsls	r2, r3, #6
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	041b      	lsls	r3, r3, #16
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	061b      	lsls	r3, r3, #24
 80032c4:	431a      	orrs	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	071b      	lsls	r3, r3, #28
 80032ca:	493e      	ldr	r1, [pc, #248]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032d2:	4b3c      	ldr	r3, [pc, #240]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d8:	f023 021f 	bic.w	r2, r3, #31
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	3b01      	subs	r3, #1
 80032e2:	4938      	ldr	r1, [pc, #224]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01d      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032f6:	4b33      	ldr	r3, [pc, #204]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032fc:	0e1b      	lsrs	r3, r3, #24
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003304:	4b2f      	ldr	r3, [pc, #188]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800330a:	0f1b      	lsrs	r3, r3, #28
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	019a      	lsls	r2, r3, #6
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	041b      	lsls	r3, r3, #16
 800331e:	431a      	orrs	r2, r3
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	061b      	lsls	r3, r3, #24
 8003324:	431a      	orrs	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	071b      	lsls	r3, r3, #28
 800332a:	4926      	ldr	r1, [pc, #152]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d011      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	019a      	lsls	r2, r3, #6
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	071b      	lsls	r3, r3, #28
 800335a:	491a      	ldr	r1, [pc, #104]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003362:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003368:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800336c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336e:	f7fd ff6b 	bl	8001248 <HAL_GetTick>
 8003372:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003376:	f7fd ff67 	bl	8001248 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b64      	cmp	r3, #100	; 0x64
 8003382:	d901      	bls.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e0d8      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003388:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b01      	cmp	r3, #1
 8003398:	f040 80ce 	bne.w	8003538 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a8:	f7fd ff4e 	bl	8001248 <HAL_GetTick>
 80033ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033ae:	e00b      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033b0:	f7fd ff4a 	bl	8001248 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	; 0x64
 80033bc:	d904      	bls.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e0bb      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033c8:	4b5e      	ldr	r3, [pc, #376]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033d4:	d0ec      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d02e      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d12a      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033fe:	4b51      	ldr	r3, [pc, #324]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800340c:	4b4d      	ldr	r3, [pc, #308]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	0f1b      	lsrs	r3, r3, #28
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	019a      	lsls	r2, r3, #6
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	041b      	lsls	r3, r3, #16
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	061b      	lsls	r3, r3, #24
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	071b      	lsls	r3, r3, #28
 8003432:	4944      	ldr	r1, [pc, #272]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800343a:	4b42      	ldr	r3, [pc, #264]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800343c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003440:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	3b01      	subs	r3, #1
 800344a:	021b      	lsls	r3, r3, #8
 800344c:	493d      	ldr	r1, [pc, #244]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d022      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003468:	d11d      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800346a:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003470:	0e1b      	lsrs	r3, r3, #24
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003478:	4b32      	ldr	r3, [pc, #200]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	0f1b      	lsrs	r3, r3, #28
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	019a      	lsls	r2, r3, #6
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	431a      	orrs	r2, r3
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	061b      	lsls	r3, r3, #24
 8003498:	431a      	orrs	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	071b      	lsls	r3, r3, #28
 800349e:	4929      	ldr	r1, [pc, #164]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d028      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	0e1b      	lsrs	r3, r3, #24
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034c0:	4b20      	ldr	r3, [pc, #128]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	0c1b      	lsrs	r3, r3, #16
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	019a      	lsls	r2, r3, #6
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	431a      	orrs	r2, r3
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	071b      	lsls	r3, r3, #28
 80034e6:	4917      	ldr	r1, [pc, #92]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	4911      	ldr	r1, [pc, #68]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003510:	f7fd fe9a 	bl	8001248 <HAL_GetTick>
 8003514:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003518:	f7fd fe96 	bl	8001248 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e007      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003536:	d1ef      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800

08003548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e040      	b.n	80035dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fd fd16 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2224      	movs	r2, #36	; 0x24
 8003574:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f91c 	bl	80037c4 <UART_SetConfig>
 800358c:	4603      	mov	r3, r0
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e022      	b.n	80035dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fb72 	bl	8003c88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fbf9 	bl	8003dcc <UART_CheckIdleState>
 80035da:	4603      	mov	r3, r0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	; 0x28
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	f040 8081 	bne.w	8003700 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_UART_Transmit+0x26>
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e079      	b.n	8003702 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_UART_Transmit+0x38>
 8003618:	2302      	movs	r3, #2
 800361a:	e072      	b.n	8003702 <HAL_UART_Transmit+0x11e>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2221      	movs	r2, #33	; 0x21
 8003630:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003632:	f7fd fe09 	bl	8001248 <HAL_GetTick>
 8003636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	88fa      	ldrh	r2, [r7, #6]
 800363c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003650:	d108      	bne.n	8003664 <HAL_UART_Transmit+0x80>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d104      	bne.n	8003664 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	e003      	b.n	800366c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003668:	2300      	movs	r3, #0
 800366a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003674:	e02c      	b.n	80036d0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2200      	movs	r2, #0
 800367e:	2180      	movs	r1, #128	; 0x80
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 fbec 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e038      	b.n	8003702 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10b      	bne.n	80036ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	3302      	adds	r3, #2
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	e007      	b.n	80036be <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	781a      	ldrb	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	3301      	adds	r3, #1
 80036bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1cc      	bne.n	8003676 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2200      	movs	r2, #0
 80036e4:	2140      	movs	r1, #64	; 0x40
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fbb9 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e005      	b.n	8003702 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e000      	b.n	8003702 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003700:	2302      	movs	r3, #2
  }
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	4613      	mov	r3, r2
 8003716:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800371c:	2b20      	cmp	r3, #32
 800371e:	d12c      	bne.n	800377a <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_UART_Receive_DMA+0x22>
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e025      	b.n	800377c <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_UART_Receive_DMA+0x34>
 800373a:	2302      	movs	r3, #2
 800373c:	e01e      	b.n	800377c <HAL_UART_Receive_DMA+0x72>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003768:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	461a      	mov	r2, r3
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fbf1 	bl	8003f58 <UART_Start_Receive_DMA>
 8003776:	4603      	mov	r3, r0
 8003778:	e000      	b.n	800377c <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 800377a:	2302      	movs	r3, #2
  }
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4ba7      	ldr	r3, [pc, #668]	; (8003a8c <UART_SetConfig+0x2c8>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	6979      	ldr	r1, [r7, #20]
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	430a      	orrs	r2, r1
 8003834:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a95      	ldr	r2, [pc, #596]	; (8003a90 <UART_SetConfig+0x2cc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d120      	bne.n	8003882 <UART_SetConfig+0xbe>
 8003840:	4b94      	ldr	r3, [pc, #592]	; (8003a94 <UART_SetConfig+0x2d0>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b03      	cmp	r3, #3
 800384c:	d816      	bhi.n	800387c <UART_SetConfig+0xb8>
 800384e:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <UART_SetConfig+0x90>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	08003865 	.word	0x08003865
 8003858:	08003871 	.word	0x08003871
 800385c:	0800386b 	.word	0x0800386b
 8003860:	08003877 	.word	0x08003877
 8003864:	2301      	movs	r3, #1
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e14f      	b.n	8003b0a <UART_SetConfig+0x346>
 800386a:	2302      	movs	r3, #2
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e14c      	b.n	8003b0a <UART_SetConfig+0x346>
 8003870:	2304      	movs	r3, #4
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e149      	b.n	8003b0a <UART_SetConfig+0x346>
 8003876:	2308      	movs	r3, #8
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e146      	b.n	8003b0a <UART_SetConfig+0x346>
 800387c:	2310      	movs	r3, #16
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e143      	b.n	8003b0a <UART_SetConfig+0x346>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a84      	ldr	r2, [pc, #528]	; (8003a98 <UART_SetConfig+0x2d4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d132      	bne.n	80038f2 <UART_SetConfig+0x12e>
 800388c:	4b81      	ldr	r3, [pc, #516]	; (8003a94 <UART_SetConfig+0x2d0>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b0c      	cmp	r3, #12
 8003898:	d828      	bhi.n	80038ec <UART_SetConfig+0x128>
 800389a:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <UART_SetConfig+0xdc>)
 800389c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a0:	080038d5 	.word	0x080038d5
 80038a4:	080038ed 	.word	0x080038ed
 80038a8:	080038ed 	.word	0x080038ed
 80038ac:	080038ed 	.word	0x080038ed
 80038b0:	080038e1 	.word	0x080038e1
 80038b4:	080038ed 	.word	0x080038ed
 80038b8:	080038ed 	.word	0x080038ed
 80038bc:	080038ed 	.word	0x080038ed
 80038c0:	080038db 	.word	0x080038db
 80038c4:	080038ed 	.word	0x080038ed
 80038c8:	080038ed 	.word	0x080038ed
 80038cc:	080038ed 	.word	0x080038ed
 80038d0:	080038e7 	.word	0x080038e7
 80038d4:	2300      	movs	r3, #0
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e117      	b.n	8003b0a <UART_SetConfig+0x346>
 80038da:	2302      	movs	r3, #2
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e114      	b.n	8003b0a <UART_SetConfig+0x346>
 80038e0:	2304      	movs	r3, #4
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e111      	b.n	8003b0a <UART_SetConfig+0x346>
 80038e6:	2308      	movs	r3, #8
 80038e8:	77fb      	strb	r3, [r7, #31]
 80038ea:	e10e      	b.n	8003b0a <UART_SetConfig+0x346>
 80038ec:	2310      	movs	r3, #16
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e10b      	b.n	8003b0a <UART_SetConfig+0x346>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a69      	ldr	r2, [pc, #420]	; (8003a9c <UART_SetConfig+0x2d8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d120      	bne.n	800393e <UART_SetConfig+0x17a>
 80038fc:	4b65      	ldr	r3, [pc, #404]	; (8003a94 <UART_SetConfig+0x2d0>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003906:	2b30      	cmp	r3, #48	; 0x30
 8003908:	d013      	beq.n	8003932 <UART_SetConfig+0x16e>
 800390a:	2b30      	cmp	r3, #48	; 0x30
 800390c:	d814      	bhi.n	8003938 <UART_SetConfig+0x174>
 800390e:	2b20      	cmp	r3, #32
 8003910:	d009      	beq.n	8003926 <UART_SetConfig+0x162>
 8003912:	2b20      	cmp	r3, #32
 8003914:	d810      	bhi.n	8003938 <UART_SetConfig+0x174>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <UART_SetConfig+0x15c>
 800391a:	2b10      	cmp	r3, #16
 800391c:	d006      	beq.n	800392c <UART_SetConfig+0x168>
 800391e:	e00b      	b.n	8003938 <UART_SetConfig+0x174>
 8003920:	2300      	movs	r3, #0
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e0f1      	b.n	8003b0a <UART_SetConfig+0x346>
 8003926:	2302      	movs	r3, #2
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e0ee      	b.n	8003b0a <UART_SetConfig+0x346>
 800392c:	2304      	movs	r3, #4
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e0eb      	b.n	8003b0a <UART_SetConfig+0x346>
 8003932:	2308      	movs	r3, #8
 8003934:	77fb      	strb	r3, [r7, #31]
 8003936:	e0e8      	b.n	8003b0a <UART_SetConfig+0x346>
 8003938:	2310      	movs	r3, #16
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e0e5      	b.n	8003b0a <UART_SetConfig+0x346>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a57      	ldr	r2, [pc, #348]	; (8003aa0 <UART_SetConfig+0x2dc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d120      	bne.n	800398a <UART_SetConfig+0x1c6>
 8003948:	4b52      	ldr	r3, [pc, #328]	; (8003a94 <UART_SetConfig+0x2d0>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003952:	2bc0      	cmp	r3, #192	; 0xc0
 8003954:	d013      	beq.n	800397e <UART_SetConfig+0x1ba>
 8003956:	2bc0      	cmp	r3, #192	; 0xc0
 8003958:	d814      	bhi.n	8003984 <UART_SetConfig+0x1c0>
 800395a:	2b80      	cmp	r3, #128	; 0x80
 800395c:	d009      	beq.n	8003972 <UART_SetConfig+0x1ae>
 800395e:	2b80      	cmp	r3, #128	; 0x80
 8003960:	d810      	bhi.n	8003984 <UART_SetConfig+0x1c0>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <UART_SetConfig+0x1a8>
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d006      	beq.n	8003978 <UART_SetConfig+0x1b4>
 800396a:	e00b      	b.n	8003984 <UART_SetConfig+0x1c0>
 800396c:	2300      	movs	r3, #0
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e0cb      	b.n	8003b0a <UART_SetConfig+0x346>
 8003972:	2302      	movs	r3, #2
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e0c8      	b.n	8003b0a <UART_SetConfig+0x346>
 8003978:	2304      	movs	r3, #4
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e0c5      	b.n	8003b0a <UART_SetConfig+0x346>
 800397e:	2308      	movs	r3, #8
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e0c2      	b.n	8003b0a <UART_SetConfig+0x346>
 8003984:	2310      	movs	r3, #16
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e0bf      	b.n	8003b0a <UART_SetConfig+0x346>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a45      	ldr	r2, [pc, #276]	; (8003aa4 <UART_SetConfig+0x2e0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d125      	bne.n	80039e0 <UART_SetConfig+0x21c>
 8003994:	4b3f      	ldr	r3, [pc, #252]	; (8003a94 <UART_SetConfig+0x2d0>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a2:	d017      	beq.n	80039d4 <UART_SetConfig+0x210>
 80039a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a8:	d817      	bhi.n	80039da <UART_SetConfig+0x216>
 80039aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ae:	d00b      	beq.n	80039c8 <UART_SetConfig+0x204>
 80039b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b4:	d811      	bhi.n	80039da <UART_SetConfig+0x216>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <UART_SetConfig+0x1fe>
 80039ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039be:	d006      	beq.n	80039ce <UART_SetConfig+0x20a>
 80039c0:	e00b      	b.n	80039da <UART_SetConfig+0x216>
 80039c2:	2300      	movs	r3, #0
 80039c4:	77fb      	strb	r3, [r7, #31]
 80039c6:	e0a0      	b.n	8003b0a <UART_SetConfig+0x346>
 80039c8:	2302      	movs	r3, #2
 80039ca:	77fb      	strb	r3, [r7, #31]
 80039cc:	e09d      	b.n	8003b0a <UART_SetConfig+0x346>
 80039ce:	2304      	movs	r3, #4
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e09a      	b.n	8003b0a <UART_SetConfig+0x346>
 80039d4:	2308      	movs	r3, #8
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e097      	b.n	8003b0a <UART_SetConfig+0x346>
 80039da:	2310      	movs	r3, #16
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e094      	b.n	8003b0a <UART_SetConfig+0x346>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a30      	ldr	r2, [pc, #192]	; (8003aa8 <UART_SetConfig+0x2e4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d125      	bne.n	8003a36 <UART_SetConfig+0x272>
 80039ea:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <UART_SetConfig+0x2d0>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039f8:	d017      	beq.n	8003a2a <UART_SetConfig+0x266>
 80039fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039fe:	d817      	bhi.n	8003a30 <UART_SetConfig+0x26c>
 8003a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a04:	d00b      	beq.n	8003a1e <UART_SetConfig+0x25a>
 8003a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0a:	d811      	bhi.n	8003a30 <UART_SetConfig+0x26c>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <UART_SetConfig+0x254>
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a14:	d006      	beq.n	8003a24 <UART_SetConfig+0x260>
 8003a16:	e00b      	b.n	8003a30 <UART_SetConfig+0x26c>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e075      	b.n	8003b0a <UART_SetConfig+0x346>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	e072      	b.n	8003b0a <UART_SetConfig+0x346>
 8003a24:	2304      	movs	r3, #4
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e06f      	b.n	8003b0a <UART_SetConfig+0x346>
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	77fb      	strb	r3, [r7, #31]
 8003a2e:	e06c      	b.n	8003b0a <UART_SetConfig+0x346>
 8003a30:	2310      	movs	r3, #16
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e069      	b.n	8003b0a <UART_SetConfig+0x346>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1c      	ldr	r2, [pc, #112]	; (8003aac <UART_SetConfig+0x2e8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d137      	bne.n	8003ab0 <UART_SetConfig+0x2ec>
 8003a40:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <UART_SetConfig+0x2d0>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a4e:	d017      	beq.n	8003a80 <UART_SetConfig+0x2bc>
 8003a50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a54:	d817      	bhi.n	8003a86 <UART_SetConfig+0x2c2>
 8003a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5a:	d00b      	beq.n	8003a74 <UART_SetConfig+0x2b0>
 8003a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a60:	d811      	bhi.n	8003a86 <UART_SetConfig+0x2c2>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <UART_SetConfig+0x2aa>
 8003a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6a:	d006      	beq.n	8003a7a <UART_SetConfig+0x2b6>
 8003a6c:	e00b      	b.n	8003a86 <UART_SetConfig+0x2c2>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	77fb      	strb	r3, [r7, #31]
 8003a72:	e04a      	b.n	8003b0a <UART_SetConfig+0x346>
 8003a74:	2302      	movs	r3, #2
 8003a76:	77fb      	strb	r3, [r7, #31]
 8003a78:	e047      	b.n	8003b0a <UART_SetConfig+0x346>
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	77fb      	strb	r3, [r7, #31]
 8003a7e:	e044      	b.n	8003b0a <UART_SetConfig+0x346>
 8003a80:	2308      	movs	r3, #8
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e041      	b.n	8003b0a <UART_SetConfig+0x346>
 8003a86:	2310      	movs	r3, #16
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e03e      	b.n	8003b0a <UART_SetConfig+0x346>
 8003a8c:	efff69f3 	.word	0xefff69f3
 8003a90:	40011000 	.word	0x40011000
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40004400 	.word	0x40004400
 8003a9c:	40004800 	.word	0x40004800
 8003aa0:	40004c00 	.word	0x40004c00
 8003aa4:	40005000 	.word	0x40005000
 8003aa8:	40011400 	.word	0x40011400
 8003aac:	40007800 	.word	0x40007800
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a71      	ldr	r2, [pc, #452]	; (8003c7c <UART_SetConfig+0x4b8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d125      	bne.n	8003b06 <UART_SetConfig+0x342>
 8003aba:	4b71      	ldr	r3, [pc, #452]	; (8003c80 <UART_SetConfig+0x4bc>)
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ac4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ac8:	d017      	beq.n	8003afa <UART_SetConfig+0x336>
 8003aca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ace:	d817      	bhi.n	8003b00 <UART_SetConfig+0x33c>
 8003ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad4:	d00b      	beq.n	8003aee <UART_SetConfig+0x32a>
 8003ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ada:	d811      	bhi.n	8003b00 <UART_SetConfig+0x33c>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <UART_SetConfig+0x324>
 8003ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ae4:	d006      	beq.n	8003af4 <UART_SetConfig+0x330>
 8003ae6:	e00b      	b.n	8003b00 <UART_SetConfig+0x33c>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e00d      	b.n	8003b0a <UART_SetConfig+0x346>
 8003aee:	2302      	movs	r3, #2
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e00a      	b.n	8003b0a <UART_SetConfig+0x346>
 8003af4:	2304      	movs	r3, #4
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e007      	b.n	8003b0a <UART_SetConfig+0x346>
 8003afa:	2308      	movs	r3, #8
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e004      	b.n	8003b0a <UART_SetConfig+0x346>
 8003b00:	2310      	movs	r3, #16
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e001      	b.n	8003b0a <UART_SetConfig+0x346>
 8003b06:	2310      	movs	r3, #16
 8003b08:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b12:	d15b      	bne.n	8003bcc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003b14:	7ffb      	ldrb	r3, [r7, #31]
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d827      	bhi.n	8003b6a <UART_SetConfig+0x3a6>
 8003b1a:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <UART_SetConfig+0x35c>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003b45 	.word	0x08003b45
 8003b24:	08003b4d 	.word	0x08003b4d
 8003b28:	08003b55 	.word	0x08003b55
 8003b2c:	08003b6b 	.word	0x08003b6b
 8003b30:	08003b5b 	.word	0x08003b5b
 8003b34:	08003b6b 	.word	0x08003b6b
 8003b38:	08003b6b 	.word	0x08003b6b
 8003b3c:	08003b6b 	.word	0x08003b6b
 8003b40:	08003b63 	.word	0x08003b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b44:	f7ff f8b0 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8003b48:	61b8      	str	r0, [r7, #24]
        break;
 8003b4a:	e013      	b.n	8003b74 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b4c:	f7ff f8c0 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8003b50:	61b8      	str	r0, [r7, #24]
        break;
 8003b52:	e00f      	b.n	8003b74 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b54:	4b4b      	ldr	r3, [pc, #300]	; (8003c84 <UART_SetConfig+0x4c0>)
 8003b56:	61bb      	str	r3, [r7, #24]
        break;
 8003b58:	e00c      	b.n	8003b74 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5a:	f7fe ffe3 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8003b5e:	61b8      	str	r0, [r7, #24]
        break;
 8003b60:	e008      	b.n	8003b74 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b66:	61bb      	str	r3, [r7, #24]
        break;
 8003b68:	e004      	b.n	8003b74 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	77bb      	strb	r3, [r7, #30]
        break;
 8003b72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d074      	beq.n	8003c64 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	005a      	lsls	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b0f      	cmp	r3, #15
 8003b96:	d916      	bls.n	8003bc6 <UART_SetConfig+0x402>
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9e:	d212      	bcs.n	8003bc6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f023 030f 	bic.w	r3, r3, #15
 8003ba8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	085b      	lsrs	r3, r3, #1
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	89fb      	ldrh	r3, [r7, #14]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	89fa      	ldrh	r2, [r7, #14]
 8003bc2:	60da      	str	r2, [r3, #12]
 8003bc4:	e04e      	b.n	8003c64 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	77bb      	strb	r3, [r7, #30]
 8003bca:	e04b      	b.n	8003c64 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bcc:	7ffb      	ldrb	r3, [r7, #31]
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d827      	bhi.n	8003c22 <UART_SetConfig+0x45e>
 8003bd2:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <UART_SetConfig+0x414>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003c05 	.word	0x08003c05
 8003be0:	08003c0d 	.word	0x08003c0d
 8003be4:	08003c23 	.word	0x08003c23
 8003be8:	08003c13 	.word	0x08003c13
 8003bec:	08003c23 	.word	0x08003c23
 8003bf0:	08003c23 	.word	0x08003c23
 8003bf4:	08003c23 	.word	0x08003c23
 8003bf8:	08003c1b 	.word	0x08003c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bfc:	f7ff f854 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8003c00:	61b8      	str	r0, [r7, #24]
        break;
 8003c02:	e013      	b.n	8003c2c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c04:	f7ff f864 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8003c08:	61b8      	str	r0, [r7, #24]
        break;
 8003c0a:	e00f      	b.n	8003c2c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <UART_SetConfig+0x4c0>)
 8003c0e:	61bb      	str	r3, [r7, #24]
        break;
 8003c10:	e00c      	b.n	8003c2c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c12:	f7fe ff87 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8003c16:	61b8      	str	r0, [r7, #24]
        break;
 8003c18:	e008      	b.n	8003c2c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1e:	61bb      	str	r3, [r7, #24]
        break;
 8003c20:	e004      	b.n	8003c2c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	77bb      	strb	r3, [r7, #30]
        break;
 8003c2a:	bf00      	nop
    }

    if (pclk != 0U)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d018      	beq.n	8003c64 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	085a      	lsrs	r2, r3, #1
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	441a      	add	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	2b0f      	cmp	r3, #15
 8003c4c:	d908      	bls.n	8003c60 <UART_SetConfig+0x49c>
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c54:	d204      	bcs.n	8003c60 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	e001      	b.n	8003c64 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c70:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40007c00 	.word	0x40007c00
 8003c80:	40023800 	.word	0x40023800
 8003c84:	00f42400 	.word	0x00f42400

08003c88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01a      	beq.n	8003d9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d86:	d10a      	bne.n	8003d9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	605a      	str	r2, [r3, #4]
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ddc:	f7fd fa34 	bl	8001248 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d10e      	bne.n	8003e0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f82d 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e023      	b.n	8003e56 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d10e      	bne.n	8003e3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f817 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e00d      	b.n	8003e56 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6e:	e05e      	b.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d05a      	beq.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e78:	f7fd f9e6 	bl	8001248 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d302      	bcc.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x30>
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d11b      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e043      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d02c      	beq.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee2:	d124      	bne.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003efc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0201 	bic.w	r2, r2, #1
 8003f0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e00f      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4013      	ands	r3, r2
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	bf0c      	ite	eq
 8003f3e:	2301      	moveq	r3, #1
 8003f40:	2300      	movne	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d091      	beq.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	88fa      	ldrh	r2, [r7, #6]
 8003f70:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2222      	movs	r2, #34	; 0x22
 8003f80:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d02b      	beq.n	8003fe2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	4a25      	ldr	r2, [pc, #148]	; (8004024 <UART_Start_Receive_DMA+0xcc>)
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	4a24      	ldr	r2, [pc, #144]	; (8004028 <UART_Start_Receive_DMA+0xd0>)
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	4a23      	ldr	r2, [pc, #140]	; (800402c <UART_Start_Receive_DMA+0xd4>)
 8003fa0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3324      	adds	r3, #36	; 0x24
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	461a      	mov	r2, r3
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	f7fd fb0f 	bl	80015e0 <HAL_DMA_Start_IT>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00c      	beq.n	8003fe2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2210      	movs	r2, #16
 8003fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e01c      	b.n	800401c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004018:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	080040b9 	.word	0x080040b9
 8004028:	0800414d 	.word	0x0800414d
 800402c:	08004185 	.word	0x08004185

08004030 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004046:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004070:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0201 	bic.w	r2, r2, #1
 8004080:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0210 	bic.w	r2, r2, #16
 8004098:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ce:	d02a      	beq.n	8004126 <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004106:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004112:	2b01      	cmp	r3, #1
 8004114:	d107      	bne.n	8004126 <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0210 	bic.w	r2, r2, #16
 8004124:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412a:	2b01      	cmp	r3, #1
 800412c:	d107      	bne.n	800413e <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004134:	4619      	mov	r1, r3
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f7ff fb38 	bl	80037ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800413c:	e002      	b.n	8004144 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f7fc fb74 	bl	800082c <HAL_UART_RxCpltCallback>
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415e:	2b01      	cmp	r3, #1
 8004160:	d109      	bne.n	8004176 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	b29b      	uxth	r3, r3
 800416c:	4619      	mov	r1, r3
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff fb1c 	bl	80037ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004174:	e002      	b.n	800417c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff fb04 	bl	8003784 <HAL_UART_RxHalfCpltCallback>
}
 800417c:	bf00      	nop
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004196:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800419c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a8:	2b80      	cmp	r3, #128	; 0x80
 80041aa:	d109      	bne.n	80041c0 <UART_DMAError+0x3c>
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b21      	cmp	r3, #33	; 0x21
 80041b0:	d106      	bne.n	80041c0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80041ba:	6978      	ldr	r0, [r7, #20]
 80041bc:	f7ff ff38 	bl	8004030 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d109      	bne.n	80041e2 <UART_DMAError+0x5e>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b22      	cmp	r3, #34	; 0x22
 80041d2:	d106      	bne.n	80041e2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80041dc:	6978      	ldr	r0, [r7, #20]
 80041de:	f7ff ff3c 	bl	800405a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e8:	f043 0210 	orr.w	r2, r3, #16
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041f2:	6978      	ldr	r0, [r7, #20]
 80041f4:	f7ff fad0 	bl	8003798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041f8:	bf00      	nop
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <__libc_init_array>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	4d0d      	ldr	r5, [pc, #52]	; (8004238 <__libc_init_array+0x38>)
 8004204:	4c0d      	ldr	r4, [pc, #52]	; (800423c <__libc_init_array+0x3c>)
 8004206:	1b64      	subs	r4, r4, r5
 8004208:	10a4      	asrs	r4, r4, #2
 800420a:	2600      	movs	r6, #0
 800420c:	42a6      	cmp	r6, r4
 800420e:	d109      	bne.n	8004224 <__libc_init_array+0x24>
 8004210:	4d0b      	ldr	r5, [pc, #44]	; (8004240 <__libc_init_array+0x40>)
 8004212:	4c0c      	ldr	r4, [pc, #48]	; (8004244 <__libc_init_array+0x44>)
 8004214:	f000 f820 	bl	8004258 <_init>
 8004218:	1b64      	subs	r4, r4, r5
 800421a:	10a4      	asrs	r4, r4, #2
 800421c:	2600      	movs	r6, #0
 800421e:	42a6      	cmp	r6, r4
 8004220:	d105      	bne.n	800422e <__libc_init_array+0x2e>
 8004222:	bd70      	pop	{r4, r5, r6, pc}
 8004224:	f855 3b04 	ldr.w	r3, [r5], #4
 8004228:	4798      	blx	r3
 800422a:	3601      	adds	r6, #1
 800422c:	e7ee      	b.n	800420c <__libc_init_array+0xc>
 800422e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004232:	4798      	blx	r3
 8004234:	3601      	adds	r6, #1
 8004236:	e7f2      	b.n	800421e <__libc_init_array+0x1e>
 8004238:	08004398 	.word	0x08004398
 800423c:	08004398 	.word	0x08004398
 8004240:	08004398 	.word	0x08004398
 8004244:	0800439c 	.word	0x0800439c

08004248 <memset>:
 8004248:	4402      	add	r2, r0
 800424a:	4603      	mov	r3, r0
 800424c:	4293      	cmp	r3, r2
 800424e:	d100      	bne.n	8004252 <memset+0xa>
 8004250:	4770      	bx	lr
 8004252:	f803 1b01 	strb.w	r1, [r3], #1
 8004256:	e7f9      	b.n	800424c <memset+0x4>

08004258 <_init>:
 8004258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425a:	bf00      	nop
 800425c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425e:	bc08      	pop	{r3}
 8004260:	469e      	mov	lr, r3
 8004262:	4770      	bx	lr

08004264 <_fini>:
 8004264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004266:	bf00      	nop
 8004268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426a:	bc08      	pop	{r3}
 800426c:	469e      	mov	lr, r3
 800426e:	4770      	bx	lr
