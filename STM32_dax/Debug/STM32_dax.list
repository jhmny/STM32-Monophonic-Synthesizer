
STM32_dax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000177c  08006ab0  08006ab0  00016ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800822c  0800822c  00095384  2**0
                  CONTENTS
  4 .ARM          00000008  0800822c  0800822c  0001822c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008234  08008234  00095384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008234  08008234  00018234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008238  08008238  00018238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00075384  20000000  0800823c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be8  20075384  0807d5c0  00095384  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20075f6c  0807d5c0  00095f6c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00095384  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157cc  00000000  00000000  000953b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f00  00000000  00000000  000aab7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  000ada80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  000aee40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029987  00000000  00000000  000b00f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fc6  00000000  00000000  000d9a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f938b  00000000  00000000  000eda3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e6dc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005538  00000000  00000000  001e6e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20075384 	.word	0x20075384
 8000214:	00000000 	.word	0x00000000
 8000218:	08006a98 	.word	0x08006a98

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20075388 	.word	0x20075388
 8000234:	08006a98 	.word	0x08006a98

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <add_note_last>:

// Add a note at the end of the list
// ---------------------------------

llist add_note_last(llist list, uint8_t midi_note, uint8_t velocity)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
 800053c:	4613      	mov	r3, r2
 800053e:	70bb      	strb	r3, [r7, #2]
    // Add a new element in memory

    note* new_note = malloc(sizeof(note));
 8000540:	2008      	movs	r0, #8
 8000542:	f005 fdcb 	bl	80060dc <malloc>
 8000546:	4603      	mov	r3, r0
 8000548:	60bb      	str	r3, [r7, #8]

    // Set the new element values

    new_note->midi_note = midi_note;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	701a      	strb	r2, [r3, #0]
    new_note->velocity = velocity;
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	78ba      	ldrb	r2, [r7, #2]
 8000554:	705a      	strb	r2, [r3, #1]

    // There is no next element

    new_note->nxt = NULL;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]

    // If list is empty, then simply return the newly created element

    if(list == NULL)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <add_note_last+0x36>
    {
        return new_note;
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	e00d      	b.n	8000582 <add_note_last+0x52>

    // Else, walk through the list to find the actual last element

    else
    {
    	note* temp=list;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 800056a:	e002      	b.n	8000572 <add_note_last+0x42>
        {
            temp = temp->nxt;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1f8      	bne.n	800056c <add_note_last+0x3c>
        }
        temp->nxt = new_note;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	605a      	str	r2, [r3, #4]
        return list;
 8000580:	687b      	ldr	r3, [r7, #4]
    }
}
 8000582:	4618      	mov	r0, r3
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <delete_note>:

// Delete a note based on the midi_note
// ------------------------------------

llist delete_note(llist list, uint8_t midi_note)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	70fb      	strb	r3, [r7, #3]
    // If list is empty, then just returns

    if(list == NULL)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d101      	bne.n	80005a0 <delete_note+0x16>
        return NULL;
 800059c:	2300      	movs	r3, #0
 800059e:	e01d      	b.n	80005dc <delete_note+0x52>

    // If the current element is the one to delete

    if(list->midi_note == midi_note)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	78fa      	ldrb	r2, [r7, #3]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d10d      	bne.n	80005c6 <delete_note+0x3c>
    {
        note* tmp = list->nxt;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	60fb      	str	r3, [r7, #12]
        free(list);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f005 fd9b 	bl	80060ec <free>
        tmp = delete_note(tmp, midi_note);
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	4619      	mov	r1, r3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f7ff ffe5 	bl	800058a <delete_note>
 80005c0:	60f8      	str	r0, [r7, #12]
        return tmp;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	e00a      	b.n	80005dc <delete_note+0x52>

    // Else, the current element is not the one to delete

    else
    {
        list->nxt = delete_note(list->nxt, midi_note);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ffdb 	bl	800058a <delete_note>
 80005d4:	4602      	mov	r2, r0
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	605a      	str	r2, [r3, #4]
        return list;
 80005da:	687b      	ldr	r3, [r7, #4]
    }
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <get_last_note>:

// Get pointer to last note in the list
// ------------------------------------

note* get_last_note(llist list)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

    if(list == NULL)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <get_last_note+0x12>
    {
        return NULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e00a      	b.n	800060c <get_last_note+0x28>
    }

    else
        {
        	note* temp=list;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 80005fa:	e002      	b.n	8000602 <get_last_note+0x1e>
            {
                temp = temp->nxt;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f8      	bne.n	80005fc <get_last_note+0x18>
            }
            return temp;
 800060a:	68fb      	ldr	r3, [r7, #12]
        }
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f001 fb08 	bl	8001c32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f8b9 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 fa6b 	bl	8000b00 <MX_GPIO_Init>
  MX_I2S1_Init();
 800062a:	f000 f9a7 	bl	800097c <MX_I2S1_Init>
  MX_DMA_Init();
 800062e:	f000 fa35 	bl	8000a9c <MX_DMA_Init>
  MX_UART4_Init();
 8000632:	f000 fa03 	bl	8000a3c <MX_UART4_Init>
  MX_I2C2_Init();
 8000636:	f000 f961 	bl	80008fc <MX_I2C2_Init>
  MX_SAI1_Init();
 800063a:	f000 f9c9 	bl	80009d0 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  //Setting up the interupt case/callback
	//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);
	HAL_SAI_Receive_DMA(&hsai_BlockA1, sendBuff, AUDIO_BUFFER_LENGTH);
 800063e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000642:	4946      	ldr	r1, [pc, #280]	; (800075c <main+0x144>)
 8000644:	4846      	ldr	r0, [pc, #280]	; (8000760 <main+0x148>)
 8000646:	f004 fc59 	bl	8004efc <HAL_SAI_Receive_DMA>
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 800064a:	2206      	movs	r2, #6
 800064c:	4945      	ldr	r1, [pc, #276]	; (8000764 <main+0x14c>)
 800064e:	4846      	ldr	r0, [pc, #280]	; (8000768 <main+0x150>)
 8000650:	f004 ffa9 	bl	80055a6 <HAL_UART_Receive_DMA>
	SSD1306_Init(); // initialize the LCD screen display
 8000654:	f000 fd2a 	bl	80010ac <SSD1306_Init>
	SSD1306_Menu();
 8000658:	f000 ffd2 	bl	8001600 <SSD1306_Menu>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// HAL_I2S_Transmit(&hi2s1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);
		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 800065c:	f000 fac0 	bl	8000be0 <MIDI_GetNbNewBytes>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	4b41      	ldr	r3, [pc, #260]	; (800076c <main+0x154>)
 8000666:	701a      	strb	r2, [r3, #0]

		if(nb_MIDI_bytes){
 8000668:	4b40      	ldr	r3, [pc, #256]	; (800076c <main+0x154>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d005      	beq.n	800067c <main+0x64>
			processBuffer(UART4_rxBuffer,nb_MIDI_bytes);
 8000670:	4b3e      	ldr	r3, [pc, #248]	; (800076c <main+0x154>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4619      	mov	r1, r3
 8000676:	483b      	ldr	r0, [pc, #236]	; (8000764 <main+0x14c>)
 8000678:	f000 fae0 	bl	8000c3c <processBuffer>
		}

		play_note = get_last_note(note_list);
 800067c:	4b3c      	ldr	r3, [pc, #240]	; (8000770 <main+0x158>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffaf 	bl	80005e4 <get_last_note>
 8000686:	6038      	str	r0, [r7, #0]

		if (play_note == NULL){ //no notes in the list
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d108      	bne.n	80006a0 <main+0x88>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	4838      	ldr	r0, [pc, #224]	; (8000774 <main+0x15c>)
 8000694:	f002 f960 	bl	8002958 <HAL_GPIO_WritePin>
			trig = 0;
 8000698:	4b37      	ldr	r3, [pc, #220]	; (8000778 <main+0x160>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
 800069e:	e007      	b.n	80006b0 <main+0x98>
		}
		else {
			//set the pitch and trigger the notes
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	4833      	ldr	r0, [pc, #204]	; (8000774 <main+0x15c>)
 80006a6:	f002 f957 	bl	8002958 <HAL_GPIO_WritePin>
			trig = 1;
 80006aa:	4b33      	ldr	r3, [pc, #204]	; (8000778 <main+0x160>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
		}

		//test code
		if ( trig == 1)
 80006b0:	4b31      	ldr	r3, [pc, #196]	; (8000778 <main+0x160>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d04d      	beq.n	8000754 <main+0x13c>
		{
			if (key == 60 ){
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <main+0x164>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b3c      	cmp	r3, #60	; 0x3c
 80006be:	d108      	bne.n	80006d2 <main+0xba>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_c, sizeof(tone_c) / sizeof(tone_c[0]), 1000);
 80006c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c4:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80006c8:	492d      	ldr	r1, [pc, #180]	; (8000780 <main+0x168>)
 80006ca:	4825      	ldr	r0, [pc, #148]	; (8000760 <main+0x148>)
 80006cc:	f004 fb48 	bl	8004d60 <HAL_SAI_Transmit>
 80006d0:	e03a      	b.n	8000748 <main+0x130>
			}
			else if (key == 61 ){
 80006d2:	4b2a      	ldr	r3, [pc, #168]	; (800077c <main+0x164>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b3d      	cmp	r3, #61	; 0x3d
 80006d8:	d108      	bne.n	80006ec <main+0xd4>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_c_sharp, sizeof(tone_c_sharp) / sizeof(tone_c_sharp[0]), 1000);
 80006da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006de:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80006e2:	4928      	ldr	r1, [pc, #160]	; (8000784 <main+0x16c>)
 80006e4:	481e      	ldr	r0, [pc, #120]	; (8000760 <main+0x148>)
 80006e6:	f004 fb3b 	bl	8004d60 <HAL_SAI_Transmit>
 80006ea:	e02d      	b.n	8000748 <main+0x130>
			}
			else if (key == 62 ){
 80006ec:	4b23      	ldr	r3, [pc, #140]	; (800077c <main+0x164>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b3e      	cmp	r3, #62	; 0x3e
 80006f2:	d108      	bne.n	8000706 <main+0xee>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_d, sizeof(tone_d) / sizeof(tone_d[0]), 1000);
 80006f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f8:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80006fc:	4922      	ldr	r1, [pc, #136]	; (8000788 <main+0x170>)
 80006fe:	4818      	ldr	r0, [pc, #96]	; (8000760 <main+0x148>)
 8000700:	f004 fb2e 	bl	8004d60 <HAL_SAI_Transmit>
 8000704:	e020      	b.n	8000748 <main+0x130>
			}
			else if (key == 63 ){
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <main+0x164>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b3f      	cmp	r3, #63	; 0x3f
 800070c:	d108      	bne.n	8000720 <main+0x108>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_d_sharp, sizeof(tone_d_sharp) / sizeof(tone_d_sharp[0]), 1000);
 800070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000712:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000716:	491d      	ldr	r1, [pc, #116]	; (800078c <main+0x174>)
 8000718:	4811      	ldr	r0, [pc, #68]	; (8000760 <main+0x148>)
 800071a:	f004 fb21 	bl	8004d60 <HAL_SAI_Transmit>
 800071e:	e013      	b.n	8000748 <main+0x130>
			}
			else if (key == 64 ){
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <main+0x164>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b40      	cmp	r3, #64	; 0x40
 8000726:	d108      	bne.n	800073a <main+0x122>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_e, sizeof(tone_e) / sizeof(tone_e[0]), 1000);
 8000728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072c:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000730:	4917      	ldr	r1, [pc, #92]	; (8000790 <main+0x178>)
 8000732:	480b      	ldr	r0, [pc, #44]	; (8000760 <main+0x148>)
 8000734:	f004 fb14 	bl	8004d60 <HAL_SAI_Transmit>
 8000738:	e006      	b.n	8000748 <main+0x130>
			}
			//HAL_SAI_Transmit(&hsai_BlockA1, tone_c, sizeof(tone_c) / sizeof(tone_c[0]), 1000);
			else {
			HAL_SAI_Transmit(&hsai_BlockA1, triangle_wave, sizeof(triangle_wave) / sizeof(triangle_wave[0]), 1000);
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	4914      	ldr	r1, [pc, #80]	; (8000794 <main+0x17c>)
 8000742:	4807      	ldr	r0, [pc, #28]	; (8000760 <main+0x148>)
 8000744:	f004 fb0c 	bl	8004d60 <HAL_SAI_Transmit>
			}

			if (screenOn == 0)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d186      	bne.n	800065c <main+0x44>
			{
				//SSD1306_Note0();
				screenOn = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	e783      	b.n	800065c <main+0x44>
			}
		}
		else
		{
			screenOn = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 8000758:	e780      	b.n	800065c <main+0x44>
 800075a:	bf00      	nop
 800075c:	200753a4 	.word	0x200753a4
 8000760:	20075ed0 	.word	0x20075ed0
 8000764:	200758a4 	.word	0x200758a4
 8000768:	20075e48 	.word	0x20075e48
 800076c:	20075f56 	.word	0x20075f56
 8000770:	200753a0 	.word	0x200753a0
 8000774:	40020400 	.word	0x40020400
 8000778:	20075d79 	.word	0x20075d79
 800077c:	20075e04 	.word	0x20075e04
 8000780:	20000010 	.word	0x20000010
 8000784:	20017710 	.word	0x20017710
 8000788:	2002ee10 	.word	0x2002ee10
 800078c:	20046510 	.word	0x20046510
 8000790:	2005dc10 	.word	0x2005dc10
 8000794:	080080a8 	.word	0x080080a8

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0b8      	sub	sp, #224	; 0xe0
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007a2:	2234      	movs	r2, #52	; 0x34
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 fca8 	bl	80060fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2290      	movs	r2, #144	; 0x90
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f005 fc99 	bl	80060fc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b49      	ldr	r3, [pc, #292]	; (80008f0 <SystemClock_Config+0x158>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a48      	ldr	r2, [pc, #288]	; (80008f0 <SystemClock_Config+0x158>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b46      	ldr	r3, [pc, #280]	; (80008f0 <SystemClock_Config+0x158>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e2:	4b44      	ldr	r3, [pc, #272]	; (80008f4 <SystemClock_Config+0x15c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ea:	4a42      	ldr	r2, [pc, #264]	; (80008f4 <SystemClock_Config+0x15c>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	6013      	str	r3, [r2, #0]
 80007f2:	4b40      	ldr	r3, [pc, #256]	; (80008f4 <SystemClock_Config+0x15c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fe:	2302      	movs	r3, #2
 8000800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080a:	2310      	movs	r3, #16
 800080c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000816:	2300      	movs	r3, #0
 8000818:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 800081c:	2308      	movs	r3, #8
 800081e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000822:	2360      	movs	r3, #96	; 0x60
 8000824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000828:	2302      	movs	r3, #2
 800082a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000834:	2302      	movs	r3, #2
 8000836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800083e:	4618      	mov	r0, r3
 8000840:	f002 febe 	bl	80035c0 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800084a:	f000 fc29 	bl	80010a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800084e:	f002 fe67 	bl	8003520 <HAL_PWREx_EnableOverDrive>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000858:	f000 fc22 	bl	80010a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2302      	movs	r3, #2
 8000864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800087e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000882:	2103      	movs	r1, #3
 8000884:	4618      	mov	r0, r3
 8000886:	f003 f949 	bl	8003b1c <HAL_RCC_ClockConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000890:	f000 fc06 	bl	80010a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SAI1
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <SystemClock_Config+0x160>)
 8000896:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000898:	2360      	movs	r3, #96	; 0x60
 800089a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80008a8:	23c0      	movs	r3, #192	; 0xc0
 80008aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 80008b0:	2306      	movs	r3, #6
 80008b2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80008c0:	2300      	movs	r3, #0
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80008c8:	2300      	movs	r3, #0
 80008ca:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 faf5 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x150>
  {
    Error_Handler();
 80008e4:	f000 fbdc 	bl	80010a0 <Error_Handler>
  }
}
 80008e8:	bf00      	nop
 80008ea:	37e0      	adds	r7, #224	; 0xe0
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000
 80008f8:	00088201 	.word	0x00088201

080008fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_I2C2_Init+0x74>)
 8000902:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <MX_I2C2_Init+0x78>)
 8000904:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_I2C2_Init+0x74>)
 8000908:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <MX_I2C2_Init+0x7c>)
 800090a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800090c:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_I2C2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_I2C2_Init+0x74>)
 8000914:	2201      	movs	r2, #1
 8000916:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_I2C2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_I2C2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_I2C2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_I2C2_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_I2C2_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <MX_I2C2_Init+0x74>)
 8000938:	f002 f828 	bl	800298c <HAL_I2C_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000942:	f000 fbad 	bl	80010a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000946:	2100      	movs	r1, #0
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <MX_I2C2_Init+0x74>)
 800094a:	f002 fc1f 	bl	800318c <HAL_I2CEx_ConfigAnalogFilter>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000954:	f000 fba4 	bl	80010a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_I2C2_Init+0x74>)
 800095c:	f002 fc61 	bl	8003222 <HAL_I2CEx_ConfigDigitalFilter>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000966:	f000 fb9b 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20075d2c 	.word	0x20075d2c
 8000974:	40005800 	.word	0x40005800
 8000978:	0090194b 	.word	0x0090194b

0800097c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_I2S1_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <MX_I2S1_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_I2S1_Init+0x4c>)
 8000988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_I2S1_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_I2S1_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_I2S1_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_I2S1_Init+0x4c>)
 80009a2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80009a6:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_I2S1_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_I2S1_Init+0x4c>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_I2S1_Init+0x4c>)
 80009b6:	f002 fc81 	bl	80032bc <HAL_I2S_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 80009c0:	f000 fb6e 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20075e08 	.word	0x20075e08
 80009cc:	40013000 	.word	0x40013000

080009d0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_SAI1_Init+0x64>)
 80009d6:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <MX_SAI1_Init+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_SAI1_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_SAI1_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_SAI1_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_SAI1_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_SAI1_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_SAI1_Init+0x64>)
 80009fa:	f64a 4244 	movw	r2, #44100	; 0xac44
 80009fe:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_SAI1_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_SAI1_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_SAI1_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_SAI1_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8000a18:	2302      	movs	r3, #2
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_SAI1_Init+0x64>)
 8000a20:	f003 ffec 	bl	80049fc <HAL_SAI_InitProtocol>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000a2a:	f000 fb39 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20075ed0 	.word	0x20075ed0
 8000a38:	40015804 	.word	0x40015804

08000a3c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_UART4_Init+0x58>)
 8000a42:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <MX_UART4_Init+0x5c>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_UART4_Init+0x58>)
 8000a48:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000a4c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_UART4_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_UART4_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_UART4_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_UART4_Init+0x58>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_UART4_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_UART4_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_UART4_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_UART4_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_UART4_Init+0x58>)
 8000a80:	f004 fd43 	bl	800550a <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 fb09 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20075e48 	.word	0x20075e48
 8000a98:	40004c00 	.word	0x40004c00

08000a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_DMA_Init+0x60>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a15      	ldr	r2, [pc, #84]	; (8000afc <MX_DMA_Init+0x60>)
 8000aa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_DMA_Init+0x60>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_DMA_Init+0x60>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <MX_DMA_Init+0x60>)
 8000ac0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <MX_DMA_Init+0x60>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	200d      	movs	r0, #13
 8000ad8:	f001 f9e3 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000adc:	200d      	movs	r0, #13
 8000ade:	f001 f9fc 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2039      	movs	r0, #57	; 0x39
 8000ae8:	f001 f9db 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000aec:	2039      	movs	r0, #57	; 0x39
 8000aee:	f001 f9f4 	bl	8001eda <HAL_NVIC_EnableIRQ>

}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b16:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b1c:	f043 0310 	orr.w	r3, r3, #16
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b2e:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a22      	ldr	r2, [pc, #136]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b34:	f043 0320 	orr.w	r3, r3, #32
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0320 	and.w	r3, r3, #32
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_GPIO_Init+0xbc>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <MX_GPIO_Init+0xc0>)
 8000b94:	f001 fee0 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MX_GPIO_Init+0xc0>)
 8000bb0:	f001 fd26 	bl	8002600 <HAL_GPIO_Init>

}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020400 	.word	0x40020400

08000bc4 <DMA_GetCurrDataCounter>:
//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);

//}

uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	b29b      	uxth	r3, r3
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <MIDI_GetNbNewBytes>:


uint8_t MIDI_GetNbNewBytes()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
	static uint16_t dma_cpt_prev = MIDI_BUFFER_LENGTH;
	uint16_t dma_cpt, n = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	80fb      	strh	r3, [r7, #6]
	// Get current DMA counter
	dma_cpt = DMA_GetCurrDataCounter(DMA1_Stream2);
 8000bea:	4812      	ldr	r0, [pc, #72]	; (8000c34 <MIDI_GetNbNewBytes+0x54>)
 8000bec:	f7ff ffea 	bl	8000bc4 <DMA_GetCurrDataCounter>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	80bb      	strh	r3, [r7, #4]

	// If DMA counter has changed, compute the number of received MIDI bytes
	if (dma_cpt != dma_cpt_prev)
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MIDI_GetNbNewBytes+0x58>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	88ba      	ldrh	r2, [r7, #4]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d014      	beq.n	8000c28 <MIDI_GetNbNewBytes+0x48>
	{
		if (dma_cpt < dma_cpt_prev)
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MIDI_GetNbNewBytes+0x58>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	88ba      	ldrh	r2, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d205      	bcs.n	8000c14 <MIDI_GetNbNewBytes+0x34>
		{
			n = dma_cpt_prev - dma_cpt;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MIDI_GetNbNewBytes+0x58>)
 8000c0a:	881a      	ldrh	r2, [r3, #0]
 8000c0c:	88bb      	ldrh	r3, [r7, #4]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	80fb      	strh	r3, [r7, #6]
 8000c12:	e006      	b.n	8000c22 <MIDI_GetNbNewBytes+0x42>
		}
		else
		{
			n = dma_cpt_prev - (dma_cpt - MIDI_BUFFER_LENGTH);
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MIDI_GetNbNewBytes+0x58>)
 8000c16:	881a      	ldrh	r2, [r3, #0]
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	3306      	adds	r3, #6
 8000c20:	80fb      	strh	r3, [r7, #6]
		}
		// Store the new DMA counter
		dma_cpt_prev = dma_cpt;
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <MIDI_GetNbNewBytes+0x58>)
 8000c24:	88bb      	ldrh	r3, [r7, #4]
 8000c26:	8013      	strh	r3, [r2, #0]
	}
	return (n);
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	b2db      	uxtb	r3, r3
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40026040 	.word	0x40026040
 8000c38:	20075310 	.word	0x20075310

08000c3c <processBuffer>:

//Author: Synthol Project, Adjusted to fit projec
void processBuffer(uint8_t* MIDI_buffer, uint8_t nb_MIDI_bytes)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
	__IO uint32_t received_char;

	static uint8_t i = 0;
	static uint8_t state = 0;

	while (nb_MIDI_bytes != 0)
 8000c48:	bf00      	nop
 8000c4a:	e1fd      	b.n	8001048 <processBuffer+0x40c>
	{
		//reading a byte from the buffer
		received_char = UART4_rxBuffer[i];
 8000c4c:	4ba8      	ldr	r3, [pc, #672]	; (8000ef0 <processBuffer+0x2b4>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4ba8      	ldr	r3, [pc, #672]	; (8000ef4 <processBuffer+0x2b8>)
 8000c54:	5c9b      	ldrb	r3, [r3, r2]
 8000c56:	60fb      	str	r3, [r7, #12]
		switch (state)
 8000c58:	4ba7      	ldr	r3, [pc, #668]	; (8000ef8 <processBuffer+0x2bc>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b29      	cmp	r3, #41	; 0x29
 8000c5e:	f200 81f3 	bhi.w	8001048 <processBuffer+0x40c>
 8000c62:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <processBuffer+0x2c>)
 8000c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c68:	08000d11 	.word	0x08000d11
 8000c6c:	08001049 	.word	0x08001049
 8000c70:	08001049 	.word	0x08001049
 8000c74:	08001049 	.word	0x08001049
 8000c78:	08001049 	.word	0x08001049
 8000c7c:	08001049 	.word	0x08001049
 8000c80:	08001049 	.word	0x08001049
 8000c84:	08001049 	.word	0x08001049
 8000c88:	08001049 	.word	0x08001049
 8000c8c:	08001049 	.word	0x08001049
 8000c90:	08000ded 	.word	0x08000ded
 8000c94:	08000e35 	.word	0x08000e35
 8000c98:	08001049 	.word	0x08001049
 8000c9c:	08001049 	.word	0x08001049
 8000ca0:	08001049 	.word	0x08001049
 8000ca4:	08001049 	.word	0x08001049
 8000ca8:	08001049 	.word	0x08001049
 8000cac:	08001049 	.word	0x08001049
 8000cb0:	08001049 	.word	0x08001049
 8000cb4:	08001049 	.word	0x08001049
 8000cb8:	08000ea7 	.word	0x08000ea7
 8000cbc:	08000f15 	.word	0x08000f15
 8000cc0:	08001049 	.word	0x08001049
 8000cc4:	08001049 	.word	0x08001049
 8000cc8:	08001049 	.word	0x08001049
 8000ccc:	08001049 	.word	0x08001049
 8000cd0:	08001049 	.word	0x08001049
 8000cd4:	08001049 	.word	0x08001049
 8000cd8:	08001049 	.word	0x08001049
 8000cdc:	08001049 	.word	0x08001049
 8000ce0:	08000f65 	.word	0x08000f65
 8000ce4:	08000fa5 	.word	0x08000fa5
 8000ce8:	08001049 	.word	0x08001049
 8000cec:	08001049 	.word	0x08001049
 8000cf0:	08001049 	.word	0x08001049
 8000cf4:	08001049 	.word	0x08001049
 8000cf8:	08001049 	.word	0x08001049
 8000cfc:	08001049 	.word	0x08001049
 8000d00:	08001049 	.word	0x08001049
 8000d04:	08001049 	.word	0x08001049
 8000d08:	08000fd7 	.word	0x08000fd7
 8000d0c:	08001017 	.word	0x08001017
		{
		// State 0 = Starting point for a new MIDI message
		case 0:
		{
			switch (received_char & 0xF0)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d16:	2be0      	cmp	r3, #224	; 0xe0
 8000d18:	d04b      	beq.n	8000db2 <processBuffer+0x176>
 8000d1a:	2be0      	cmp	r3, #224	; 0xe0
 8000d1c:	d85e      	bhi.n	8000ddc <processBuffer+0x1a0>
 8000d1e:	2bb0      	cmp	r3, #176	; 0xb0
 8000d20:	d032      	beq.n	8000d88 <processBuffer+0x14c>
 8000d22:	2bb0      	cmp	r3, #176	; 0xb0
 8000d24:	d85a      	bhi.n	8000ddc <processBuffer+0x1a0>
 8000d26:	2b80      	cmp	r3, #128	; 0x80
 8000d28:	d019      	beq.n	8000d5e <processBuffer+0x122>
 8000d2a:	2b90      	cmp	r3, #144	; 0x90
 8000d2c:	d156      	bne.n	8000ddc <processBuffer+0x1a0>
			{
			case 0x90: // Note ON message
			{
				state = 10; // Next state is 10
 8000d2e:	4b72      	ldr	r3, [pc, #456]	; (8000ef8 <processBuffer+0x2bc>)
 8000d30:	220a      	movs	r2, #10
 8000d32:	701a      	strb	r2, [r3, #0]
				printf ("note ON event\n");
 8000d34:	4871      	ldr	r0, [pc, #452]	; (8000efc <processBuffer+0x2c0>)
 8000d36:	f005 fb01 	bl	800633c <puts>
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d3a:	4b6d      	ldr	r3, [pc, #436]	; (8000ef0 <processBuffer+0x2b4>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b05      	cmp	r3, #5
 8000d40:	d103      	bne.n	8000d4a <processBuffer+0x10e>
					i = 0;				// Move to next MIDI byte
 8000d42:	4b6b      	ldr	r3, [pc, #428]	; (8000ef0 <processBuffer+0x2b4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	e005      	b.n	8000d56 <processBuffer+0x11a>
				}
				else {
					i++;
 8000d4a:	4b69      	ldr	r3, [pc, #420]	; (8000ef0 <processBuffer+0x2b4>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b67      	ldr	r3, [pc, #412]	; (8000ef0 <processBuffer+0x2b4>)
 8000d54:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	70fb      	strb	r3, [r7, #3]
				break;
 8000d5c:	e045      	b.n	8000dea <processBuffer+0x1ae>
			}
			case 0x80: // Note OFF message
			{
				state = 20; // Next state is 20
 8000d5e:	4b66      	ldr	r3, [pc, #408]	; (8000ef8 <processBuffer+0x2bc>)
 8000d60:	2214      	movs	r2, #20
 8000d62:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d64:	4b62      	ldr	r3, [pc, #392]	; (8000ef0 <processBuffer+0x2b4>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b05      	cmp	r3, #5
 8000d6a:	d103      	bne.n	8000d74 <processBuffer+0x138>
					i = 0;				// Move to next MIDI byte
 8000d6c:	4b60      	ldr	r3, [pc, #384]	; (8000ef0 <processBuffer+0x2b4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e005      	b.n	8000d80 <processBuffer+0x144>
				}
				else {
					i++;
 8000d74:	4b5e      	ldr	r3, [pc, #376]	; (8000ef0 <processBuffer+0x2b4>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b5c      	ldr	r3, [pc, #368]	; (8000ef0 <processBuffer+0x2b4>)
 8000d7e:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	70fb      	strb	r3, [r7, #3]
				break;
 8000d86:	e030      	b.n	8000dea <processBuffer+0x1ae>
			}
			case 0xB0: // CC message
			{
				state = 30; // Next state is 30
 8000d88:	4b5b      	ldr	r3, [pc, #364]	; (8000ef8 <processBuffer+0x2bc>)
 8000d8a:	221e      	movs	r2, #30
 8000d8c:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d8e:	4b58      	ldr	r3, [pc, #352]	; (8000ef0 <processBuffer+0x2b4>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b05      	cmp	r3, #5
 8000d94:	d103      	bne.n	8000d9e <processBuffer+0x162>
					i = 0;				// Move to next MIDI byte
 8000d96:	4b56      	ldr	r3, [pc, #344]	; (8000ef0 <processBuffer+0x2b4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	e005      	b.n	8000daa <processBuffer+0x16e>
				}
				else {
					i++;
 8000d9e:	4b54      	ldr	r3, [pc, #336]	; (8000ef0 <processBuffer+0x2b4>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4b52      	ldr	r3, [pc, #328]	; (8000ef0 <processBuffer+0x2b4>)
 8000da8:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	70fb      	strb	r3, [r7, #3]
				break;
 8000db0:	e01b      	b.n	8000dea <processBuffer+0x1ae>
			}

			case 0xE0: // Pitch Bend message
			{
				state = 40; // Next state is 40
 8000db2:	4b51      	ldr	r3, [pc, #324]	; (8000ef8 <processBuffer+0x2bc>)
 8000db4:	2228      	movs	r2, #40	; 0x28
 8000db6:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000db8:	4b4d      	ldr	r3, [pc, #308]	; (8000ef0 <processBuffer+0x2b4>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b05      	cmp	r3, #5
 8000dbe:	d103      	bne.n	8000dc8 <processBuffer+0x18c>
					i = 0;				// Move to next MIDI byte
 8000dc0:	4b4b      	ldr	r3, [pc, #300]	; (8000ef0 <processBuffer+0x2b4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e005      	b.n	8000dd4 <processBuffer+0x198>
				}
				else {
					i++;
 8000dc8:	4b49      	ldr	r3, [pc, #292]	; (8000ef0 <processBuffer+0x2b4>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b47      	ldr	r3, [pc, #284]	; (8000ef0 <processBuffer+0x2b4>)
 8000dd2:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	70fb      	strb	r3, [r7, #3]
				break;
 8000dda:	e006      	b.n	8000dea <processBuffer+0x1ae>
			}
			default: // Other type of message, move to next byte but stays in state 0
			{
				//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
				i++;
 8000ddc:	4b44      	ldr	r3, [pc, #272]	; (8000ef0 <processBuffer+0x2b4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b42      	ldr	r3, [pc, #264]	; (8000ef0 <processBuffer+0x2b4>)
 8000de6:	701a      	strb	r2, [r3, #0]
				break;
 8000de8:	bf00      	nop
			}
			}
			break;
 8000dea:	e12d      	b.n	8001048 <processBuffer+0x40c>
		}
		// State 10 & 11 : Note ON command
		case 10:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b7f      	cmp	r3, #127	; 0x7f
 8000df0:	d903      	bls.n	8000dfa <processBuffer+0x1be>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000df2:	4b41      	ldr	r3, [pc, #260]	; (8000ef8 <processBuffer+0x2bc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
 8000df8:	e126      	b.n	8001048 <processBuffer+0x40c>
			}
			else
			{ // Save MIDI note
				ctrl = key = received_char;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <processBuffer+0x2c4>)
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	4b3f      	ldr	r3, [pc, #252]	; (8000f00 <processBuffer+0x2c4>)
 8000e04:	781a      	ldrb	r2, [r3, #0]
 8000e06:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <processBuffer+0x2c8>)
 8000e08:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e0a:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <processBuffer+0x2b4>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b05      	cmp	r3, #5
 8000e10:	d103      	bne.n	8000e1a <processBuffer+0x1de>
					i = 0;				// Move to next MIDI byte
 8000e12:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <processBuffer+0x2b4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e005      	b.n	8000e26 <processBuffer+0x1ea>
				}
				else {
					i++;
 8000e1a:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <processBuffer+0x2b4>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <processBuffer+0x2b4>)
 8000e24:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000e26:	78fb      	ldrb	r3, [r7, #3]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	70fb      	strb	r3, [r7, #3]
				state = 11; // Next state is 11
 8000e2c:	4b32      	ldr	r3, [pc, #200]	; (8000ef8 <processBuffer+0x2bc>)
 8000e2e:	220b      	movs	r2, #11
 8000e30:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000e32:	e109      	b.n	8001048 <processBuffer+0x40c>
		}
		case 11:
		{
			data = velocity = received_char; //will only ever get velocity in this section i think
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <processBuffer+0x2cc>)
 8000e3a:	701a      	strb	r2, [r3, #0]
 8000e3c:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <processBuffer+0x2cc>)
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <processBuffer+0x2d0>)
 8000e42:	701a      	strb	r2, [r3, #0]

			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e44:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <processBuffer+0x2b4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b05      	cmp	r3, #5
 8000e4a:	d103      	bne.n	8000e54 <processBuffer+0x218>
				i = 0;				// Move to next MIDI byte
 8000e4c:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <processBuffer+0x2b4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	e005      	b.n	8000e60 <processBuffer+0x224>
			}
			else {
				i++;
 8000e54:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <processBuffer+0x2b4>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <processBuffer+0x2b4>)
 8000e5e:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	70fb      	strb	r3, [r7, #3]

			state = 10; // Next state is 10
 8000e66:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <processBuffer+0x2bc>)
 8000e68:	220a      	movs	r2, #10
 8000e6a:	701a      	strb	r2, [r3, #0]

			if (velocity > 0)
 8000e6c:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <processBuffer+0x2cc>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00c      	beq.n	8000e8e <processBuffer+0x252>
			{

				note_list = add_note_last(note_list, key, velocity);
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <processBuffer+0x2d4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <processBuffer+0x2c4>)
 8000e7a:	7811      	ldrb	r1, [r2, #0]
 8000e7c:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <processBuffer+0x2cc>)
 8000e7e:	7812      	ldrb	r2, [r2, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fb55 	bl	8000530 <add_note_last>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a21      	ldr	r2, [pc, #132]	; (8000f10 <processBuffer+0x2d4>)
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	e0dc      	b.n	8001048 <processBuffer+0x40c>
				//play_note(midimsg, velocity);
			}
			else
			{
				//find the key and deletes it
				note_list = delete_note(note_list, key);
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <processBuffer+0x2d4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <processBuffer+0x2c4>)
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fb76 	bl	800058a <delete_note>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <processBuffer+0x2d4>)
 8000ea2:	6013      	str	r3, [r2, #0]
			}
			break;
 8000ea4:	e0d0      	b.n	8001048 <processBuffer+0x40c>
		}
		// State 20 & 21 : Note OFF command
		case 20:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eaa:	d903      	bls.n	8000eb4 <processBuffer+0x278>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <processBuffer+0x2bc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e0c9      	b.n	8001048 <processBuffer+0x40c>
			}

			else
			{
				ctrl = key = received_char; // Save MIDI note
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <processBuffer+0x2c4>)
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <processBuffer+0x2c4>)
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <processBuffer+0x2c8>)
 8000ec2:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <processBuffer+0x2b4>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	d103      	bne.n	8000ed4 <processBuffer+0x298>
					i = 0;				// Move to next MIDI byte
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <processBuffer+0x2b4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	e005      	b.n	8000ee0 <processBuffer+0x2a4>
				}
				else {
					i++;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <processBuffer+0x2b4>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <processBuffer+0x2b4>)
 8000ede:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	70fb      	strb	r3, [r7, #3]

				state = 21; // Next state is 21
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <processBuffer+0x2bc>)
 8000ee8:	2215      	movs	r2, #21
 8000eea:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000eec:	e0ac      	b.n	8001048 <processBuffer+0x40c>
 8000eee:	bf00      	nop
 8000ef0:	200758aa 	.word	0x200758aa
 8000ef4:	200758a4 	.word	0x200758a4
 8000ef8:	200758ab 	.word	0x200758ab
 8000efc:	08006ab0 	.word	0x08006ab0
 8000f00:	20075e04 	.word	0x20075e04
 8000f04:	20075d78 	.word	0x20075d78
 8000f08:	20075e01 	.word	0x20075e01
 8000f0c:	20075e03 	.word	0x20075e03
 8000f10:	200753a0 	.word	0x200753a0
		}
		case 21:
		{
			velocity = data = received_char; // Save MIDI velocity
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b50      	ldr	r3, [pc, #320]	; (800105c <processBuffer+0x420>)
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	4b4f      	ldr	r3, [pc, #316]	; (800105c <processBuffer+0x420>)
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	4b4f      	ldr	r3, [pc, #316]	; (8001060 <processBuffer+0x424>)
 8000f22:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f24:	4b4f      	ldr	r3, [pc, #316]	; (8001064 <processBuffer+0x428>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b05      	cmp	r3, #5
 8000f2a:	d103      	bne.n	8000f34 <processBuffer+0x2f8>
				i = 0;				// Move to next MIDI byte
 8000f2c:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <processBuffer+0x428>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	e005      	b.n	8000f40 <processBuffer+0x304>
			}
			else {
				i++;
 8000f34:	4b4b      	ldr	r3, [pc, #300]	; (8001064 <processBuffer+0x428>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b49      	ldr	r3, [pc, #292]	; (8001064 <processBuffer+0x428>)
 8000f3e:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	70fb      	strb	r3, [r7, #3]

			state = 20; // Next state is 20
 8000f46:	4b48      	ldr	r3, [pc, #288]	; (8001068 <processBuffer+0x42c>)
 8000f48:	2214      	movs	r2, #20
 8000f4a:	701a      	strb	r2, [r3, #0]

			note_list = delete_note(note_list, key);
 8000f4c:	4b47      	ldr	r3, [pc, #284]	; (800106c <processBuffer+0x430>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a47      	ldr	r2, [pc, #284]	; (8001070 <processBuffer+0x434>)
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fb17 	bl	800058a <delete_note>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a43      	ldr	r2, [pc, #268]	; (800106c <processBuffer+0x430>)
 8000f60:	6013      	str	r3, [r2, #0]
			break;
 8000f62:	e071      	b.n	8001048 <processBuffer+0x40c>
		}
		// State 30 & 31 : CC command
		case 30:
		{
			if (received_char > 0x7F) // If the following byte is not a CC number
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b7f      	cmp	r3, #127	; 0x7f
 8000f68:	d903      	bls.n	8000f72 <processBuffer+0x336>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <processBuffer+0x42c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e06a      	b.n	8001048 <processBuffer+0x40c>
			}
			else
			{
				param = received_char; // Save MIDI CC number
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <processBuffer+0x438>)
 8000f78:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f7a:	4b3a      	ldr	r3, [pc, #232]	; (8001064 <processBuffer+0x428>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b05      	cmp	r3, #5
 8000f80:	d103      	bne.n	8000f8a <processBuffer+0x34e>
					i = 0;				// Move to next MIDI byte
 8000f82:	4b38      	ldr	r3, [pc, #224]	; (8001064 <processBuffer+0x428>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e005      	b.n	8000f96 <processBuffer+0x35a>
				}
				else {
					i++;
 8000f8a:	4b36      	ldr	r3, [pc, #216]	; (8001064 <processBuffer+0x428>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b34      	ldr	r3, [pc, #208]	; (8001064 <processBuffer+0x428>)
 8000f94:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	70fb      	strb	r3, [r7, #3]
				state = 31; // Next state is 31
 8000f9c:	4b32      	ldr	r3, [pc, #200]	; (8001068 <processBuffer+0x42c>)
 8000f9e:	221f      	movs	r2, #31
 8000fa0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000fa2:	e051      	b.n	8001048 <processBuffer+0x40c>
		}
		case 31:
		{
			param = received_char; // Save MIDI velocity
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <processBuffer+0x438>)
 8000faa:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000fac:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <processBuffer+0x428>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b05      	cmp	r3, #5
 8000fb2:	d103      	bne.n	8000fbc <processBuffer+0x380>
				i = 0;				// Move to next MIDI byte
 8000fb4:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <processBuffer+0x428>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	e005      	b.n	8000fc8 <processBuffer+0x38c>
			}
			else {
				i++;
 8000fbc:	4b29      	ldr	r3, [pc, #164]	; (8001064 <processBuffer+0x428>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <processBuffer+0x428>)
 8000fc6:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	70fb      	strb	r3, [r7, #3]
			state = 30; // Next state is 30
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <processBuffer+0x42c>)
 8000fd0:	221e      	movs	r2, #30
 8000fd2:	701a      	strb	r2, [r3, #0]
			break;
 8000fd4:	e038      	b.n	8001048 <processBuffer+0x40c>
		}
		// State 40 & 41 : Pitch Bend message
		case 40:
		{
			if (received_char > 0x7F) // If following byte is note a PB value
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8000fda:	d903      	bls.n	8000fe4 <processBuffer+0x3a8>
			{
				state = 0; // Return to state 0
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <processBuffer+0x42c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e031      	b.n	8001048 <processBuffer+0x40c>
			}
			else
			{
				param = received_char; // Save MIDI CC number
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <processBuffer+0x438>)
 8000fea:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <processBuffer+0x428>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d103      	bne.n	8000ffc <processBuffer+0x3c0>
					i = 0;				// Move to next MIDI byte
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <processBuffer+0x428>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	e005      	b.n	8001008 <processBuffer+0x3cc>
				}
				else {
					i++;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <processBuffer+0x428>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <processBuffer+0x428>)
 8001006:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	3b01      	subs	r3, #1
 800100c:	70fb      	strb	r3, [r7, #3]
				state = 41; // Next state is 41
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <processBuffer+0x42c>)
 8001010:	2229      	movs	r2, #41	; 0x29
 8001012:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001014:	e018      	b.n	8001048 <processBuffer+0x40c>
		}
		case 41:
		{
			param = received_char; // Save MIDI velocity
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <processBuffer+0x438>)
 800101c:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <processBuffer+0x428>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b05      	cmp	r3, #5
 8001024:	d103      	bne.n	800102e <processBuffer+0x3f2>
				i = 0;				// Move to next MIDI byte
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <processBuffer+0x428>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e005      	b.n	800103a <processBuffer+0x3fe>
			}
			else {
				i++;
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <processBuffer+0x428>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <processBuffer+0x428>)
 8001038:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	3b01      	subs	r3, #1
 800103e:	70fb      	strb	r3, [r7, #3]
			state = 40; // Next state is 00
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <processBuffer+0x42c>)
 8001042:	2228      	movs	r2, #40	; 0x28
 8001044:	701a      	strb	r2, [r3, #0]
			break;
 8001046:	bf00      	nop
	while (nb_MIDI_bytes != 0)
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f47f adfe 	bne.w	8000c4c <processBuffer+0x10>
		}
	}
	}
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20075e03 	.word	0x20075e03
 8001060:	20075e01 	.word	0x20075e01
 8001064:	200758aa 	.word	0x200758aa
 8001068:	200758ab 	.word	0x200758ab
 800106c:	200753a0 	.word	0x200753a0
 8001070:	20075e04 	.word	0x20075e04
 8001074:	20075d25 	.word	0x20075d25

08001078 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	//HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
	//new version dose not call here
		//processBuffer();
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	//HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
	//once MIDI buffer is full we send to the process buffer function
	//new version dose not call here
	//processBuffer();
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80010b2:	f000 fa29 	bl	8001508 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80010b6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80010ba:	2201      	movs	r2, #1
 80010bc:	2178      	movs	r1, #120	; 0x78
 80010be:	485b      	ldr	r0, [pc, #364]	; (800122c <SSD1306_Init+0x180>)
 80010c0:	f001 fde8 	bl	8002c94 <HAL_I2C_IsDeviceReady>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e0a9      	b.n	8001222 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80010ce:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010d2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010d4:	e002      	b.n	80010dc <SSD1306_Init+0x30>
		p--;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3b01      	subs	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f9      	bne.n	80010d6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80010e2:	22ae      	movs	r2, #174	; 0xae
 80010e4:	2100      	movs	r1, #0
 80010e6:	2078      	movs	r0, #120	; 0x78
 80010e8:	f000 fa6c 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80010ec:	2220      	movs	r2, #32
 80010ee:	2100      	movs	r1, #0
 80010f0:	2078      	movs	r0, #120	; 0x78
 80010f2:	f000 fa67 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010f6:	2210      	movs	r2, #16
 80010f8:	2100      	movs	r1, #0
 80010fa:	2078      	movs	r0, #120	; 0x78
 80010fc:	f000 fa62 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001100:	22b0      	movs	r2, #176	; 0xb0
 8001102:	2100      	movs	r1, #0
 8001104:	2078      	movs	r0, #120	; 0x78
 8001106:	f000 fa5d 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800110a:	22c8      	movs	r2, #200	; 0xc8
 800110c:	2100      	movs	r1, #0
 800110e:	2078      	movs	r0, #120	; 0x78
 8001110:	f000 fa58 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2078      	movs	r0, #120	; 0x78
 800111a:	f000 fa53 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800111e:	2210      	movs	r2, #16
 8001120:	2100      	movs	r1, #0
 8001122:	2078      	movs	r0, #120	; 0x78
 8001124:	f000 fa4e 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001128:	2240      	movs	r2, #64	; 0x40
 800112a:	2100      	movs	r1, #0
 800112c:	2078      	movs	r0, #120	; 0x78
 800112e:	f000 fa49 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001132:	2281      	movs	r2, #129	; 0x81
 8001134:	2100      	movs	r1, #0
 8001136:	2078      	movs	r0, #120	; 0x78
 8001138:	f000 fa44 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800113c:	22ff      	movs	r2, #255	; 0xff
 800113e:	2100      	movs	r1, #0
 8001140:	2078      	movs	r0, #120	; 0x78
 8001142:	f000 fa3f 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001146:	22a1      	movs	r2, #161	; 0xa1
 8001148:	2100      	movs	r1, #0
 800114a:	2078      	movs	r0, #120	; 0x78
 800114c:	f000 fa3a 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001150:	22a6      	movs	r2, #166	; 0xa6
 8001152:	2100      	movs	r1, #0
 8001154:	2078      	movs	r0, #120	; 0x78
 8001156:	f000 fa35 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800115a:	22a8      	movs	r2, #168	; 0xa8
 800115c:	2100      	movs	r1, #0
 800115e:	2078      	movs	r0, #120	; 0x78
 8001160:	f000 fa30 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001164:	223f      	movs	r2, #63	; 0x3f
 8001166:	2100      	movs	r1, #0
 8001168:	2078      	movs	r0, #120	; 0x78
 800116a:	f000 fa2b 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800116e:	22a4      	movs	r2, #164	; 0xa4
 8001170:	2100      	movs	r1, #0
 8001172:	2078      	movs	r0, #120	; 0x78
 8001174:	f000 fa26 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001178:	22d3      	movs	r2, #211	; 0xd3
 800117a:	2100      	movs	r1, #0
 800117c:	2078      	movs	r0, #120	; 0x78
 800117e:	f000 fa21 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2078      	movs	r0, #120	; 0x78
 8001188:	f000 fa1c 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800118c:	22d5      	movs	r2, #213	; 0xd5
 800118e:	2100      	movs	r1, #0
 8001190:	2078      	movs	r0, #120	; 0x78
 8001192:	f000 fa17 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001196:	22f0      	movs	r2, #240	; 0xf0
 8001198:	2100      	movs	r1, #0
 800119a:	2078      	movs	r0, #120	; 0x78
 800119c:	f000 fa12 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80011a0:	22d9      	movs	r2, #217	; 0xd9
 80011a2:	2100      	movs	r1, #0
 80011a4:	2078      	movs	r0, #120	; 0x78
 80011a6:	f000 fa0d 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80011aa:	2222      	movs	r2, #34	; 0x22
 80011ac:	2100      	movs	r1, #0
 80011ae:	2078      	movs	r0, #120	; 0x78
 80011b0:	f000 fa08 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80011b4:	22da      	movs	r2, #218	; 0xda
 80011b6:	2100      	movs	r1, #0
 80011b8:	2078      	movs	r0, #120	; 0x78
 80011ba:	f000 fa03 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80011be:	2212      	movs	r2, #18
 80011c0:	2100      	movs	r1, #0
 80011c2:	2078      	movs	r0, #120	; 0x78
 80011c4:	f000 f9fe 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80011c8:	22db      	movs	r2, #219	; 0xdb
 80011ca:	2100      	movs	r1, #0
 80011cc:	2078      	movs	r0, #120	; 0x78
 80011ce:	f000 f9f9 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80011d2:	2220      	movs	r2, #32
 80011d4:	2100      	movs	r1, #0
 80011d6:	2078      	movs	r0, #120	; 0x78
 80011d8:	f000 f9f4 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80011dc:	228d      	movs	r2, #141	; 0x8d
 80011de:	2100      	movs	r1, #0
 80011e0:	2078      	movs	r0, #120	; 0x78
 80011e2:	f000 f9ef 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011e6:	2214      	movs	r2, #20
 80011e8:	2100      	movs	r1, #0
 80011ea:	2078      	movs	r0, #120	; 0x78
 80011ec:	f000 f9ea 	bl	80015c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011f0:	22af      	movs	r2, #175	; 0xaf
 80011f2:	2100      	movs	r1, #0
 80011f4:	2078      	movs	r0, #120	; 0x78
 80011f6:	f000 f9e5 	bl	80015c4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011fa:	222e      	movs	r2, #46	; 0x2e
 80011fc:	2100      	movs	r1, #0
 80011fe:	2078      	movs	r0, #120	; 0x78
 8001200:	f000 f9e0 	bl	80015c4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f843 	bl	8001290 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800120a:	f000 f813 	bl	8001234 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <SSD1306_Init+0x184>)
 8001210:	2200      	movs	r2, #0
 8001212:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <SSD1306_Init+0x184>)
 8001216:	2200      	movs	r2, #0
 8001218:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SSD1306_Init+0x184>)
 800121c:	2201      	movs	r2, #1
 800121e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001220:	2301      	movs	r3, #1
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20075d2c 	.word	0x20075d2c
 8001230:	20075cac 	.word	0x20075cac

08001234 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800123a:	2300      	movs	r3, #0
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	e01d      	b.n	800127c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	3b50      	subs	r3, #80	; 0x50
 8001244:	b2db      	uxtb	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	2100      	movs	r1, #0
 800124a:	2078      	movs	r0, #120	; 0x78
 800124c:	f000 f9ba 	bl	80015c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	2078      	movs	r0, #120	; 0x78
 8001256:	f000 f9b5 	bl	80015c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800125a:	2210      	movs	r2, #16
 800125c:	2100      	movs	r1, #0
 800125e:	2078      	movs	r0, #120	; 0x78
 8001260:	f000 f9b0 	bl	80015c4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	01db      	lsls	r3, r3, #7
 8001268:	4a08      	ldr	r2, [pc, #32]	; (800128c <SSD1306_UpdateScreen+0x58>)
 800126a:	441a      	add	r2, r3
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	2140      	movs	r1, #64	; 0x40
 8001270:	2078      	movs	r0, #120	; 0x78
 8001272:	f000 f95f 	bl	8001534 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	3301      	adds	r3, #1
 800127a:	71fb      	strb	r3, [r7, #7]
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b07      	cmp	r3, #7
 8001280:	d9de      	bls.n	8001240 <SSD1306_UpdateScreen+0xc>
	}
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200758ac 	.word	0x200758ac

08001290 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <SSD1306_Fill+0x14>
 80012a0:	2300      	movs	r3, #0
 80012a2:	e000      	b.n	80012a6 <SSD1306_Fill+0x16>
 80012a4:	23ff      	movs	r3, #255	; 0xff
 80012a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012aa:	4619      	mov	r1, r3
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <SSD1306_Fill+0x2c>)
 80012ae:	f004 ff25 	bl	80060fc <memset>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200758ac 	.word	0x200758ac

080012c0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
 80012ca:	460b      	mov	r3, r1
 80012cc:	80bb      	strh	r3, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	70fb      	strb	r3, [r7, #3]
	if (
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	2b7f      	cmp	r3, #127	; 0x7f
 80012d6:	d848      	bhi.n	800136a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	2b3f      	cmp	r3, #63	; 0x3f
 80012dc:	d845      	bhi.n	800136a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012de:	4b26      	ldr	r3, [pc, #152]	; (8001378 <SSD1306_DrawPixel+0xb8>)
 80012e0:	791b      	ldrb	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf0c      	ite	eq
 80012ec:	2301      	moveq	r3, #1
 80012ee:	2300      	movne	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d11a      	bne.n	8001330 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012fa:	88fa      	ldrh	r2, [r7, #6]
 80012fc:	88bb      	ldrh	r3, [r7, #4]
 80012fe:	08db      	lsrs	r3, r3, #3
 8001300:	b298      	uxth	r0, r3
 8001302:	4603      	mov	r3, r0
 8001304:	01db      	lsls	r3, r3, #7
 8001306:	4413      	add	r3, r2
 8001308:	4a1c      	ldr	r2, [pc, #112]	; (800137c <SSD1306_DrawPixel+0xbc>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	b25a      	sxtb	r2, r3
 800130e:	88bb      	ldrh	r3, [r7, #4]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	b25b      	sxtb	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b259      	sxtb	r1, r3
 8001320:	88fa      	ldrh	r2, [r7, #6]
 8001322:	4603      	mov	r3, r0
 8001324:	01db      	lsls	r3, r3, #7
 8001326:	4413      	add	r3, r2
 8001328:	b2c9      	uxtb	r1, r1
 800132a:	4a14      	ldr	r2, [pc, #80]	; (800137c <SSD1306_DrawPixel+0xbc>)
 800132c:	54d1      	strb	r1, [r2, r3]
 800132e:	e01d      	b.n	800136c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001330:	88fa      	ldrh	r2, [r7, #6]
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	b298      	uxth	r0, r3
 8001338:	4603      	mov	r3, r0
 800133a:	01db      	lsls	r3, r3, #7
 800133c:	4413      	add	r3, r2
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <SSD1306_DrawPixel+0xbc>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
 8001342:	b25a      	sxtb	r2, r3
 8001344:	88bb      	ldrh	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	2101      	movs	r1, #1
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	b25b      	sxtb	r3, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	b25b      	sxtb	r3, r3
 8001356:	4013      	ands	r3, r2
 8001358:	b259      	sxtb	r1, r3
 800135a:	88fa      	ldrh	r2, [r7, #6]
 800135c:	4603      	mov	r3, r0
 800135e:	01db      	lsls	r3, r3, #7
 8001360:	4413      	add	r3, r2
 8001362:	b2c9      	uxtb	r1, r1
 8001364:	4a05      	ldr	r2, [pc, #20]	; (800137c <SSD1306_DrawPixel+0xbc>)
 8001366:	54d1      	strb	r1, [r2, r3]
 8001368:	e000      	b.n	800136c <SSD1306_DrawPixel+0xac>
		return;
 800136a:	bf00      	nop
	}
}
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20075cac 	.word	0x20075cac
 800137c:	200758ac 	.word	0x200758ac

08001380 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	460a      	mov	r2, r1
 800138a:	80fb      	strh	r3, [r7, #6]
 800138c:	4613      	mov	r3, r2
 800138e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001390:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <SSD1306_GotoXY+0x28>)
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <SSD1306_GotoXY+0x28>)
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	8053      	strh	r3, [r2, #2]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	20075cac 	.word	0x20075cac

080013ac <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	4613      	mov	r3, r2
 80013ba:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013bc:	4b3a      	ldr	r3, [pc, #232]	; (80014a8 <SSD1306_Putc+0xfc>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
	if (
 80013c8:	2b7f      	cmp	r3, #127	; 0x7f
 80013ca:	dc07      	bgt.n	80013dc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013cc:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <SSD1306_Putc+0xfc>)
 80013ce:	885b      	ldrh	r3, [r3, #2]
 80013d0:	461a      	mov	r2, r3
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	785b      	ldrb	r3, [r3, #1]
 80013d6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013d8:	2b3f      	cmp	r3, #63	; 0x3f
 80013da:	dd01      	ble.n	80013e0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	e05e      	b.n	800149e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e04b      	b.n	800147e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	3b20      	subs	r3, #32
 80013ee:	6839      	ldr	r1, [r7, #0]
 80013f0:	7849      	ldrb	r1, [r1, #1]
 80013f2:	fb01 f303 	mul.w	r3, r1, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	440b      	add	r3, r1
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	e030      	b.n	800146c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d010      	beq.n	800143c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <SSD1306_Putc+0xfc>)
 800141c:	881a      	ldrh	r2, [r3, #0]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	b29b      	uxth	r3, r3
 8001422:	4413      	add	r3, r2
 8001424:	b298      	uxth	r0, r3
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <SSD1306_Putc+0xfc>)
 8001428:	885a      	ldrh	r2, [r3, #2]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	b29b      	uxth	r3, r3
 800142e:	4413      	add	r3, r2
 8001430:	b29b      	uxth	r3, r3
 8001432:	79ba      	ldrb	r2, [r7, #6]
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff ff43 	bl	80012c0 <SSD1306_DrawPixel>
 800143a:	e014      	b.n	8001466 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <SSD1306_Putc+0xfc>)
 800143e:	881a      	ldrh	r2, [r3, #0]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4413      	add	r3, r2
 8001446:	b298      	uxth	r0, r3
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <SSD1306_Putc+0xfc>)
 800144a:	885a      	ldrh	r2, [r3, #2]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	b29b      	uxth	r3, r3
 8001450:	4413      	add	r3, r2
 8001452:	b299      	uxth	r1, r3
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	2b00      	cmp	r3, #0
 8001458:	bf0c      	ite	eq
 800145a:	2301      	moveq	r3, #1
 800145c:	2300      	movne	r3, #0
 800145e:	b2db      	uxtb	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	f7ff ff2d 	bl	80012c0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	3301      	adds	r3, #1
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4293      	cmp	r3, r2
 8001476:	d3c8      	bcc.n	800140a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3301      	adds	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	785b      	ldrb	r3, [r3, #1]
 8001482:	461a      	mov	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	4293      	cmp	r3, r2
 8001488:	d3ad      	bcc.n	80013e6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <SSD1306_Putc+0xfc>)
 800148c:	881a      	ldrh	r2, [r3, #0]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4413      	add	r3, r2
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <SSD1306_Putc+0xfc>)
 800149a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800149c:	79fb      	ldrb	r3, [r7, #7]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20075cac 	.word	0x20075cac

080014ac <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80014ba:	e012      	b.n	80014e2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	79fa      	ldrb	r2, [r7, #7]
 80014c2:	68b9      	ldr	r1, [r7, #8]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff71 	bl	80013ac <SSD1306_Putc>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d002      	beq.n	80014dc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	e008      	b.n	80014ee <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3301      	adds	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1e8      	bne.n	80014bc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	781b      	ldrb	r3, [r3, #0]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff fec8 	bl	8001290 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001500:	f7ff fe98 	bl	8001234 <SSD1306_UpdateScreen>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <ssd1306_I2C_Init+0x28>)
 8001510:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001512:	e002      	b.n	800151a <ssd1306_I2C_Init+0x12>
		p--;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	607b      	str	r3, [r7, #4]
	while(p>0)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f9      	bne.n	8001514 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	0003d090 	.word	0x0003d090

08001534 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b0c7      	sub	sp, #284	; 0x11c
 8001538:	af02      	add	r7, sp, #8
 800153a:	4604      	mov	r4, r0
 800153c:	4608      	mov	r0, r1
 800153e:	4639      	mov	r1, r7
 8001540:	600a      	str	r2, [r1, #0]
 8001542:	4619      	mov	r1, r3
 8001544:	1dfb      	adds	r3, r7, #7
 8001546:	4622      	mov	r2, r4
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	1dbb      	adds	r3, r7, #6
 800154c:	4602      	mov	r2, r0
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	460a      	mov	r2, r1
 8001554:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	1dba      	adds	r2, r7, #6
 800155c:	7812      	ldrb	r2, [r2, #0]
 800155e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001560:	2300      	movs	r3, #0
 8001562:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001566:	e010      	b.n	800158a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001568:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800156c:	463a      	mov	r2, r7
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	441a      	add	r2, r3
 8001572:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001576:	3301      	adds	r3, #1
 8001578:	7811      	ldrb	r1, [r2, #0]
 800157a:	f107 020c 	add.w	r2, r7, #12
 800157e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001580:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001584:	3301      	adds	r3, #1
 8001586:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800158a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800158e:	b29b      	uxth	r3, r3
 8001590:	1d3a      	adds	r2, r7, #4
 8001592:	8812      	ldrh	r2, [r2, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8e7      	bhi.n	8001568 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8001598:	1dfb      	adds	r3, r7, #7
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b299      	uxth	r1, r3
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f107 020c 	add.w	r2, r7, #12
 80015aa:	200a      	movs	r0, #10
 80015ac:	9000      	str	r0, [sp, #0]
 80015ae:	4804      	ldr	r0, [pc, #16]	; (80015c0 <ssd1306_I2C_WriteMulti+0x8c>)
 80015b0:	f001 fa7c 	bl	8002aac <HAL_I2C_Master_Transmit>
}
 80015b4:	bf00      	nop
 80015b6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}
 80015be:	bf00      	nop
 80015c0:	20075d2c 	.word	0x20075d2c

080015c4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	460b      	mov	r3, r1
 80015d0:	71bb      	strb	r3, [r7, #6]
 80015d2:	4613      	mov	r3, r2
 80015d4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015da:	797b      	ldrb	r3, [r7, #5]
 80015dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	b299      	uxth	r1, r3
 80015e2:	f107 020c 	add.w	r2, r7, #12
 80015e6:	230a      	movs	r3, #10
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2302      	movs	r3, #2
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <ssd1306_I2C_Write+0x38>)
 80015ee:	f001 fa5d 	bl	8002aac <HAL_I2C_Master_Transmit>
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20075d2c 	.word	0x20075d2c

08001600 <SSD1306_Menu>:

/////////////////////////////////////////////////////////////////////////////////////////
//////////////////////[BASE MENU SCREEN]////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
void SSD1306_Menu()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	SSD1306_Init (); 								// initialize the OLED screen
 8001604:	f7ff fd52 	bl	80010ac <SSD1306_Init>
	SSD1306_Clear();								// clear screen of any previous input information
 8001608:	f7ff ff75 	bl	80014f6 <SSD1306_Clear>
	SSD1306_GotoXY (0, 0); 							// go to 0, 0
 800160c:	2100      	movs	r1, #0
 800160e:	2000      	movs	r0, #0
 8001610:	f7ff feb6 	bl	8001380 <SSD1306_GotoXY>
	SSD1306_Puts ("Music Synth", &Font_11x18, 1); 	// print Music Synth
 8001614:	2201      	movs	r2, #1
 8001616:	4916      	ldr	r1, [pc, #88]	; (8001670 <SSD1306_Menu+0x70>)
 8001618:	4816      	ldr	r0, [pc, #88]	; (8001674 <SSD1306_Menu+0x74>)
 800161a:	f7ff ff47 	bl	80014ac <SSD1306_Puts>
	SSD1306_GotoXY (0, 20); 						// go to 0, 20
 800161e:	2114      	movs	r1, #20
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fead 	bl	8001380 <SSD1306_GotoXY>
	SSD1306_Puts ("By:", &Font_7x10, 1); 			// print by
 8001626:	2201      	movs	r2, #1
 8001628:	4913      	ldr	r1, [pc, #76]	; (8001678 <SSD1306_Menu+0x78>)
 800162a:	4814      	ldr	r0, [pc, #80]	; (800167c <SSD1306_Menu+0x7c>)
 800162c:	f7ff ff3e 	bl	80014ac <SSD1306_Puts>
	SSD1306_GotoXY (0, 30);							// go to 0, 30
 8001630:	211e      	movs	r1, #30
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff fea4 	bl	8001380 <SSD1306_GotoXY>
	SSD1306_Puts ("Joshua Mendoza", &Font_7x10, 1);	// print group member 1
 8001638:	2201      	movs	r2, #1
 800163a:	490f      	ldr	r1, [pc, #60]	; (8001678 <SSD1306_Menu+0x78>)
 800163c:	4810      	ldr	r0, [pc, #64]	; (8001680 <SSD1306_Menu+0x80>)
 800163e:	f7ff ff35 	bl	80014ac <SSD1306_Puts>
	SSD1306_GotoXY (0, 40);							// go to 0, 40
 8001642:	2128      	movs	r1, #40	; 0x28
 8001644:	2000      	movs	r0, #0
 8001646:	f7ff fe9b 	bl	8001380 <SSD1306_GotoXY>
	SSD1306_Puts ("Megan Abundo", &Font_7x10, 1);	// print group member 2
 800164a:	2201      	movs	r2, #1
 800164c:	490a      	ldr	r1, [pc, #40]	; (8001678 <SSD1306_Menu+0x78>)
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <SSD1306_Menu+0x84>)
 8001650:	f7ff ff2c 	bl	80014ac <SSD1306_Puts>
	SSD1306_GotoXY (0, 50);							// go to 0,50
 8001654:	2132      	movs	r1, #50	; 0x32
 8001656:	2000      	movs	r0, #0
 8001658:	f7ff fe92 	bl	8001380 <SSD1306_GotoXY>
	SSD1306_Puts ("Paris Villarrial", &Font_7x10, 1);// print group member 3
 800165c:	2201      	movs	r2, #1
 800165e:	4906      	ldr	r1, [pc, #24]	; (8001678 <SSD1306_Menu+0x78>)
 8001660:	4809      	ldr	r0, [pc, #36]	; (8001688 <SSD1306_Menu+0x88>)
 8001662:	f7ff ff23 	bl	80014ac <SSD1306_Puts>
	SSD1306_UpdateScreen(); 						// update screen with new input information
 8001666:	f7ff fde5 	bl	8001234 <SSD1306_UpdateScreen>

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008
 8001674:	08006ac0 	.word	0x08006ac0
 8001678:	20000000 	.word	0x20000000
 800167c:	08006acc 	.word	0x08006acc
 8001680:	08006ad0 	.word	0x08006ad0
 8001684:	08006ae0 	.word	0x08006ae0
 8001688:	08006af0 	.word	0x08006af0

0800168c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_MspInit+0x44>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <HAL_MspInit+0x44>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_MspInit+0x44>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_MspInit+0x44>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_MspInit+0x44>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_MspInit+0x44>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_I2C_MspInit+0x7c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d127      	bne.n	8001746 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_I2C_MspInit+0x80>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a16      	ldr	r2, [pc, #88]	; (8001754 <HAL_I2C_MspInit+0x80>)
 80016fc:	f043 0320 	orr.w	r3, r3, #32
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_I2C_MspInit+0x80>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0320 	and.w	r3, r3, #32
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800170e:	2303      	movs	r3, #3
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001712:	2312      	movs	r3, #18
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800171e:	2304      	movs	r3, #4
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <HAL_I2C_MspInit+0x84>)
 800172a:	f000 ff69 	bl	8002600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_I2C_MspInit+0x80>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a08      	ldr	r2, [pc, #32]	; (8001754 <HAL_I2C_MspInit+0x80>)
 8001734:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_I2C_MspInit+0x80>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3728      	adds	r7, #40	; 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40005800 	.word	0x40005800
 8001754:	40023800 	.word	0x40023800
 8001758:	40021400 	.word	0x40021400

0800175c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <HAL_I2S_MspInit+0x7c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d127      	bne.n	80017ce <HAL_I2S_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_I2S_MspInit+0x80>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a16      	ldr	r2, [pc, #88]	; (80017dc <HAL_I2S_MspInit+0x80>)
 8001784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_I2S_MspInit+0x80>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_I2S_MspInit+0x80>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_I2S_MspInit+0x80>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_I2S_MspInit+0x80>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80017ae:	23b0      	movs	r3, #176	; 0xb0
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017be:	2305      	movs	r3, #5
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	4805      	ldr	r0, [pc, #20]	; (80017e0 <HAL_I2S_MspInit+0x84>)
 80017ca:	f000 ff19 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	; 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40013000 	.word	0x40013000
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000

080017e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a3d      	ldr	r2, [pc, #244]	; (80018f8 <HAL_UART_MspInit+0x114>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d173      	bne.n	80018ee <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_UART_MspInit+0x118>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a3c      	ldr	r2, [pc, #240]	; (80018fc <HAL_UART_MspInit+0x118>)
 800180c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <HAL_UART_MspInit+0x118>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_UART_MspInit+0x118>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a36      	ldr	r2, [pc, #216]	; (80018fc <HAL_UART_MspInit+0x118>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <HAL_UART_MspInit+0x118>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_UART_MspInit+0x118>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a30      	ldr	r2, [pc, #192]	; (80018fc <HAL_UART_MspInit+0x118>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_UART_MspInit+0x118>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800184e:	2301      	movs	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800185e:	2308      	movs	r3, #8
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4825      	ldr	r0, [pc, #148]	; (8001900 <HAL_UART_MspInit+0x11c>)
 800186a:	f000 fec9 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800186e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001880:	2308      	movs	r3, #8
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	481e      	ldr	r0, [pc, #120]	; (8001904 <HAL_UART_MspInit+0x120>)
 800188c:	f000 feb8 	bl	8002600 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_UART_MspInit+0x124>)
 8001892:	4a1e      	ldr	r2, [pc, #120]	; (800190c <HAL_UART_MspInit+0x128>)
 8001894:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <HAL_UART_MspInit+0x124>)
 8001898:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800189c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_UART_MspInit+0x124>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_UART_MspInit+0x124>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_UART_MspInit+0x124>)
 80018ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_UART_MspInit+0x124>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_UART_MspInit+0x124>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_UART_MspInit+0x124>)
 80018c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_UART_MspInit+0x124>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_UART_MspInit+0x124>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80018d2:	480d      	ldr	r0, [pc, #52]	; (8001908 <HAL_UART_MspInit+0x124>)
 80018d4:	f000 fb1c 	bl	8001f10 <HAL_DMA_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80018de:	f7ff fbdf 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a08      	ldr	r2, [pc, #32]	; (8001908 <HAL_UART_MspInit+0x124>)
 80018e6:	671a      	str	r2, [r3, #112]	; 0x70
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_UART_MspInit+0x124>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	; 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40004c00 	.word	0x40004c00
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020800 	.word	0x40020800
 8001908:	20075cc4 	.word	0x20075cc4
 800190c:	40026040 	.word	0x40026040

08001910 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a30      	ldr	r2, [pc, #192]	; (80019e0 <HAL_SAI_MspInit+0xd0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d159      	bne.n	80019d6 <HAL_SAI_MspInit+0xc6>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_SAI_MspInit+0xd4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10b      	bne.n	8001942 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_SAI_MspInit+0xd8>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a2e      	ldr	r2, [pc, #184]	; (80019e8 <HAL_SAI_MspInit+0xd8>)
 8001930:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <HAL_SAI_MspInit+0xd8>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_SAI_MspInit+0xd4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	4a26      	ldr	r2, [pc, #152]	; (80019e4 <HAL_SAI_MspInit+0xd4>)
 800194a:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800194c:	2370      	movs	r3, #112	; 0x70
 800194e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800195c:	2306      	movs	r3, #6
 800195e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	4619      	mov	r1, r3
 8001966:	4821      	ldr	r0, [pc, #132]	; (80019ec <HAL_SAI_MspInit+0xdc>)
 8001968:	f000 fe4a 	bl	8002600 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 800196e:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <HAL_SAI_MspInit+0xe4>)
 8001970:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 8001974:	2200      	movs	r2, #0
 8001976:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 800197a:	2240      	movs	r2, #64	; 0x40
 800197c:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800197e:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 8001986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198a:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800198c:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 800198e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001992:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 8001996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800199a:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80019ae:	4810      	ldr	r0, [pc, #64]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 80019b0:	f000 faae 	bl	8001f10 <HAL_DMA_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_SAI_MspInit+0xae>
    {
      Error_Handler();
 80019ba:	f7ff fb71 	bl	80010a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 80019c2:	671a      	str	r2, [r3, #112]	; 0x70
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 80019ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80019d0:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <HAL_SAI_MspInit+0xe0>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 80019d6:	bf00      	nop
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40015804 	.word	0x40015804
 80019e4:	20075cb4 	.word	0x20075cb4
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40021000 	.word	0x40021000
 80019f0:	20075d7c 	.word	0x20075d7c
 80019f4:	40026428 	.word	0x40026428

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <NMI_Handler+0x4>

080019fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f000 f932 	bl	8001cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <DMA1_Stream2_IRQHandler+0x10>)
 8001a52:	f000 fb6b 	bl	800212c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20075cc4 	.word	0x20075cc4

08001a60 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <DMA2_Stream1_IRQHandler+0x10>)
 8001a66:	f000 fb61 	bl	800212c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20075d7c 	.word	0x20075d7c

08001a74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e00a      	b.n	8001a9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a86:	f3af 8000 	nop.w
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	60ba      	str	r2, [r7, #8]
 8001a92:	b2ca      	uxtb	r2, r1
 8001a94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbf0      	blt.n	8001a86 <_read+0x12>
	}

return len;
 8001aa4:	687b      	ldr	r3, [r7, #4]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e009      	b.n	8001ad4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbf1      	blt.n	8001ac0 <_write+0x12>
	}
	return len;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_close>:

int _close(int file)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
	return -1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_isatty>:

int _isatty(int file)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	return 1;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <_sbrk+0x5c>)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <_sbrk+0x60>)
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <_sbrk+0x64>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <_sbrk+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d207      	bcs.n	8001b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b80:	f004 fa82 	bl	8006088 <__errno>
 8001b84:	4603      	mov	r3, r0
 8001b86:	220c      	movs	r2, #12
 8001b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	e009      	b.n	8001ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <_sbrk+0x64>)
 8001ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20080000 	.word	0x20080000
 8001bb0:	00000400 	.word	0x00000400
 8001bb4:	20075cb8 	.word	0x20075cb8
 8001bb8:	20075f70 	.word	0x20075f70

08001bbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <SystemInit+0x20>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <SystemInit+0x20>)
 8001bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be4:	480d      	ldr	r0, [pc, #52]	; (8001c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001be6:	490e      	ldr	r1, [pc, #56]	; (8001c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001be8:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bfc:	4c0b      	ldr	r4, [pc, #44]	; (8001c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c0a:	f7ff ffd7 	bl	8001bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f004 fa41 	bl	8006094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c12:	f7fe fd01 	bl	8000618 <main>
  bx  lr    
 8001c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c20:	20075384 	.word	0x20075384
  ldr r2, =_sidata
 8001c24:	0800823c 	.word	0x0800823c
  ldr r2, =_sbss
 8001c28:	20075384 	.word	0x20075384
  ldr r4, =_ebss
 8001c2c:	20075f6c 	.word	0x20075f6c

08001c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC_IRQHandler>

08001c32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c36:	2003      	movs	r0, #3
 8001c38:	f000 f928 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3c:	200f      	movs	r0, #15
 8001c3e:	f000 f805 	bl	8001c4c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c42:	f7ff fd23 	bl	800168c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_InitTick+0x54>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_InitTick+0x58>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f943 	bl	8001ef6 <HAL_SYSTICK_Config>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00e      	b.n	8001c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b0f      	cmp	r3, #15
 8001c7e:	d80a      	bhi.n	8001c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c80:	2200      	movs	r2, #0
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f000 f90b 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c8c:	4a06      	ldr	r2, [pc, #24]	; (8001ca8 <HAL_InitTick+0x5c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e000      	b.n	8001c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20075314 	.word	0x20075314
 8001ca4:	2007531c 	.word	0x2007531c
 8001ca8:	20075318 	.word	0x20075318

08001cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_IncTick+0x20>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_IncTick+0x24>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_IncTick+0x24>)
 8001cbe:	6013      	str	r3, [r2, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2007531c 	.word	0x2007531c
 8001cd0:	20075f58 	.word	0x20075f58

08001cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_GetTick+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20075f58 	.word	0x20075f58

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <__NVIC_SetPriorityGrouping+0x40>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <__NVIC_SetPriorityGrouping+0x40>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00
 8001d30:	05fa0000 	.word	0x05fa0000

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff29 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff3e 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff31 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff feda 	bl	8001cd4 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e099      	b.n	8002060 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4c:	e00f      	b.n	8001f6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4e:	f7ff fec1 	bl	8001cd4 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d908      	bls.n	8001f6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2203      	movs	r2, #3
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e078      	b.n	8002060 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1e8      	bne.n	8001f4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4b38      	ldr	r3, [pc, #224]	; (8002068 <HAL_DMA_Init+0x158>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d107      	bne.n	8001fd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f023 0307 	bic.w	r3, r3, #7
 8001fee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d117      	bne.n	8002032 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00e      	beq.n	8002032 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fa77 	bl	8002508 <DMA_CheckFifoParam>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2240      	movs	r2, #64	; 0x40
 8002024:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800202e:	2301      	movs	r3, #1
 8002030:	e016      	b.n	8002060 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fa2e 	bl	800249c <DMA_CalcBaseAndBitshift>
 8002040:	4603      	mov	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	223f      	movs	r2, #63	; 0x3f
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	e010803f 	.word	0xe010803f

0800206c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_DMA_Start_IT+0x26>
 800208e:	2302      	movs	r3, #2
 8002090:	e048      	b.n	8002124 <HAL_DMA_Start_IT+0xb8>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d137      	bne.n	8002116 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2202      	movs	r2, #2
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f9c0 	bl	8002440 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	223f      	movs	r2, #63	; 0x3f
 80020c6:	409a      	lsls	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0216 	orr.w	r2, r2, #22
 80020da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020ea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0208 	orr.w	r2, r2, #8
 8002102:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e005      	b.n	8002122 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800211e:	2302      	movs	r3, #2
 8002120:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002122:	7dfb      	ldrb	r3, [r7, #23]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002138:	4b92      	ldr	r3, [pc, #584]	; (8002384 <HAL_DMA_IRQHandler+0x258>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a92      	ldr	r2, [pc, #584]	; (8002388 <HAL_DMA_IRQHandler+0x25c>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0a9b      	lsrs	r3, r3, #10
 8002144:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002156:	2208      	movs	r2, #8
 8002158:	409a      	lsls	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01a      	beq.n	8002198 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0204 	bic.w	r2, r2, #4
 800217e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002184:	2208      	movs	r2, #8
 8002186:	409a      	lsls	r2, r3
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	2201      	movs	r2, #1
 800219e:	409a      	lsls	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d012      	beq.n	80021ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	2201      	movs	r2, #1
 80021bc:	409a      	lsls	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	f043 0202 	orr.w	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	2204      	movs	r2, #4
 80021d4:	409a      	lsls	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d012      	beq.n	8002204 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00b      	beq.n	8002204 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	2204      	movs	r2, #4
 80021f2:	409a      	lsls	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	f043 0204 	orr.w	r2, r3, #4
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	2210      	movs	r2, #16
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d043      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d03c      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	2210      	movs	r2, #16
 8002228:	409a      	lsls	r2, r3
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d018      	beq.n	800226e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d108      	bne.n	800225c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d024      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4798      	blx	r3
 800225a:	e01f      	b.n	800229c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002260:	2b00      	cmp	r3, #0
 8002262:	d01b      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
 800226c:	e016      	b.n	800229c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d107      	bne.n	800228c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0208 	bic.w	r2, r2, #8
 800228a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	2220      	movs	r2, #32
 80022a2:	409a      	lsls	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 808e 	beq.w	80023ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8086 	beq.w	80023ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	2220      	movs	r2, #32
 80022c4:	409a      	lsls	r2, r3
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d136      	bne.n	8002344 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0216 	bic.w	r2, r2, #22
 80022e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <HAL_DMA_IRQHandler+0x1da>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0208 	bic.w	r2, r2, #8
 8002314:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231a:	223f      	movs	r2, #63	; 0x3f
 800231c:	409a      	lsls	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002336:	2b00      	cmp	r3, #0
 8002338:	d07d      	beq.n	8002436 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	4798      	blx	r3
        }
        return;
 8002342:	e078      	b.n	8002436 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01c      	beq.n	800238c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d108      	bne.n	8002372 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	2b00      	cmp	r3, #0
 8002366:	d030      	beq.n	80023ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	4798      	blx	r3
 8002370:	e02b      	b.n	80023ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d027      	beq.n	80023ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
 8002382:	e022      	b.n	80023ca <HAL_DMA_IRQHandler+0x29e>
 8002384:	20075314 	.word	0x20075314
 8002388:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10f      	bne.n	80023ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0210 	bic.w	r2, r2, #16
 80023a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d032      	beq.n	8002438 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d022      	beq.n	8002424 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2205      	movs	r2, #5
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3301      	adds	r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d307      	bcc.n	8002412 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f2      	bne.n	80023f6 <HAL_DMA_IRQHandler+0x2ca>
 8002410:	e000      	b.n	8002414 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002412:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
 8002434:	e000      	b.n	8002438 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002436:	bf00      	nop
    }
  }
}
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop

08002440 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800245c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	d108      	bne.n	8002480 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800247e:	e007      	b.n	8002490 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	60da      	str	r2, [r3, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3b10      	subs	r3, #16
 80024ac:	4a13      	ldr	r2, [pc, #76]	; (80024fc <DMA_CalcBaseAndBitshift+0x60>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <DMA_CalcBaseAndBitshift+0x64>)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d908      	bls.n	80024dc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <DMA_CalcBaseAndBitshift+0x68>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	1d1a      	adds	r2, r3, #4
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	659a      	str	r2, [r3, #88]	; 0x58
 80024da:	e006      	b.n	80024ea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <DMA_CalcBaseAndBitshift+0x68>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	aaaaaaab 	.word	0xaaaaaaab
 8002500:	080081c0 	.word	0x080081c0
 8002504:	fffffc00 	.word	0xfffffc00

08002508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d11f      	bne.n	8002562 <DMA_CheckFifoParam+0x5a>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d856      	bhi.n	80025d6 <DMA_CheckFifoParam+0xce>
 8002528:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <DMA_CheckFifoParam+0x28>)
 800252a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252e:	bf00      	nop
 8002530:	08002541 	.word	0x08002541
 8002534:	08002553 	.word	0x08002553
 8002538:	08002541 	.word	0x08002541
 800253c:	080025d7 	.word	0x080025d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d046      	beq.n	80025da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002550:	e043      	b.n	80025da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800255a:	d140      	bne.n	80025de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002560:	e03d      	b.n	80025de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256a:	d121      	bne.n	80025b0 <DMA_CheckFifoParam+0xa8>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d837      	bhi.n	80025e2 <DMA_CheckFifoParam+0xda>
 8002572:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <DMA_CheckFifoParam+0x70>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	08002589 	.word	0x08002589
 800257c:	0800258f 	.word	0x0800258f
 8002580:	08002589 	.word	0x08002589
 8002584:	080025a1 	.word	0x080025a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      break;
 800258c:	e030      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d025      	beq.n	80025e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259e:	e022      	b.n	80025e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025a8:	d11f      	bne.n	80025ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ae:	e01c      	b.n	80025ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d903      	bls.n	80025be <DMA_CheckFifoParam+0xb6>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d003      	beq.n	80025c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025bc:	e018      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
      break;
 80025c2:	e015      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00e      	beq.n	80025ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      break;
 80025d4:	e00b      	b.n	80025ee <DMA_CheckFifoParam+0xe6>
      break;
 80025d6:	bf00      	nop
 80025d8:	e00a      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025da:	bf00      	nop
 80025dc:	e008      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
 80025e0:	e006      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e004      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e002      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ea:	bf00      	nop
 80025ec:	e000      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
    }
  } 
  
  return status; 
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	e175      	b.n	800290c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002620:	2201      	movs	r2, #1
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	f040 8164 	bne.w	8002906 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d00b      	beq.n	800265e <HAL_GPIO_Init+0x5e>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002652:	2b11      	cmp	r3, #17
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b12      	cmp	r3, #18
 800265c:	d130      	bne.n	80026c0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	2203      	movs	r2, #3
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002694:	2201      	movs	r2, #1
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 0201 	and.w	r2, r3, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x100>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b12      	cmp	r3, #18
 80026fe:	d123      	bne.n	8002748 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	08da      	lsrs	r2, r3, #3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3208      	adds	r2, #8
 8002708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	220f      	movs	r2, #15
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	08da      	lsrs	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3208      	adds	r2, #8
 8002742:	69b9      	ldr	r1, [r7, #24]
 8002744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	2203      	movs	r2, #3
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0203 	and.w	r2, r3, #3
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80be 	beq.w	8002906 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278a:	4b66      	ldr	r3, [pc, #408]	; (8002924 <HAL_GPIO_Init+0x324>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a65      	ldr	r2, [pc, #404]	; (8002924 <HAL_GPIO_Init+0x324>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b63      	ldr	r3, [pc, #396]	; (8002924 <HAL_GPIO_Init+0x324>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027a2:	4a61      	ldr	r2, [pc, #388]	; (8002928 <HAL_GPIO_Init+0x328>)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	3302      	adds	r3, #2
 80027aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a58      	ldr	r2, [pc, #352]	; (800292c <HAL_GPIO_Init+0x32c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d037      	beq.n	800283e <HAL_GPIO_Init+0x23e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a57      	ldr	r2, [pc, #348]	; (8002930 <HAL_GPIO_Init+0x330>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d031      	beq.n	800283a <HAL_GPIO_Init+0x23a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a56      	ldr	r2, [pc, #344]	; (8002934 <HAL_GPIO_Init+0x334>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d02b      	beq.n	8002836 <HAL_GPIO_Init+0x236>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a55      	ldr	r2, [pc, #340]	; (8002938 <HAL_GPIO_Init+0x338>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d025      	beq.n	8002832 <HAL_GPIO_Init+0x232>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a54      	ldr	r2, [pc, #336]	; (800293c <HAL_GPIO_Init+0x33c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01f      	beq.n	800282e <HAL_GPIO_Init+0x22e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a53      	ldr	r2, [pc, #332]	; (8002940 <HAL_GPIO_Init+0x340>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d019      	beq.n	800282a <HAL_GPIO_Init+0x22a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a52      	ldr	r2, [pc, #328]	; (8002944 <HAL_GPIO_Init+0x344>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0x226>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a51      	ldr	r2, [pc, #324]	; (8002948 <HAL_GPIO_Init+0x348>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00d      	beq.n	8002822 <HAL_GPIO_Init+0x222>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a50      	ldr	r2, [pc, #320]	; (800294c <HAL_GPIO_Init+0x34c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <HAL_GPIO_Init+0x21e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4f      	ldr	r2, [pc, #316]	; (8002950 <HAL_GPIO_Init+0x350>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_GPIO_Init+0x21a>
 8002816:	2309      	movs	r3, #9
 8002818:	e012      	b.n	8002840 <HAL_GPIO_Init+0x240>
 800281a:	230a      	movs	r3, #10
 800281c:	e010      	b.n	8002840 <HAL_GPIO_Init+0x240>
 800281e:	2308      	movs	r3, #8
 8002820:	e00e      	b.n	8002840 <HAL_GPIO_Init+0x240>
 8002822:	2307      	movs	r3, #7
 8002824:	e00c      	b.n	8002840 <HAL_GPIO_Init+0x240>
 8002826:	2306      	movs	r3, #6
 8002828:	e00a      	b.n	8002840 <HAL_GPIO_Init+0x240>
 800282a:	2305      	movs	r3, #5
 800282c:	e008      	b.n	8002840 <HAL_GPIO_Init+0x240>
 800282e:	2304      	movs	r3, #4
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x240>
 8002832:	2303      	movs	r3, #3
 8002834:	e004      	b.n	8002840 <HAL_GPIO_Init+0x240>
 8002836:	2302      	movs	r3, #2
 8002838:	e002      	b.n	8002840 <HAL_GPIO_Init+0x240>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_GPIO_Init+0x240>
 800283e:	2300      	movs	r3, #0
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	f002 0203 	and.w	r2, r2, #3
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	4093      	lsls	r3, r2
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002850:	4935      	ldr	r1, [pc, #212]	; (8002928 <HAL_GPIO_Init+0x328>)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800285e:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <HAL_GPIO_Init+0x354>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002882:	4a34      	ldr	r2, [pc, #208]	; (8002954 <HAL_GPIO_Init+0x354>)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002888:	4b32      	ldr	r3, [pc, #200]	; (8002954 <HAL_GPIO_Init+0x354>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ac:	4a29      	ldr	r2, [pc, #164]	; (8002954 <HAL_GPIO_Init+0x354>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b2:	4b28      	ldr	r3, [pc, #160]	; (8002954 <HAL_GPIO_Init+0x354>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028d6:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <HAL_GPIO_Init+0x354>)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028dc:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <HAL_GPIO_Init+0x354>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <HAL_GPIO_Init+0x354>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3301      	adds	r3, #1
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b0f      	cmp	r3, #15
 8002910:	f67f ae86 	bls.w	8002620 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40013800 	.word	0x40013800
 800292c:	40020000 	.word	0x40020000
 8002930:	40020400 	.word	0x40020400
 8002934:	40020800 	.word	0x40020800
 8002938:	40020c00 	.word	0x40020c00
 800293c:	40021000 	.word	0x40021000
 8002940:	40021400 	.word	0x40021400
 8002944:	40021800 	.word	0x40021800
 8002948:	40021c00 	.word	0x40021c00
 800294c:	40022000 	.word	0x40022000
 8002950:	40022400 	.word	0x40022400
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002974:	e003      	b.n	800297e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	041a      	lsls	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	619a      	str	r2, [r3, #24]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07f      	b.n	8002a9e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fe8e 	bl	80016d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	; 0x24
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	e006      	b.n	8002a14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d104      	bne.n	8002a26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_I2C_Init+0x11c>)
 8002a32:	430b      	orrs	r3, r1
 8002a34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	ea42 0103 	orr.w	r1, r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	021a      	lsls	r2, r3, #8
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69d9      	ldr	r1, [r3, #28]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1a      	ldr	r2, [r3, #32]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	02008000 	.word	0x02008000

08002aac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	460b      	mov	r3, r1
 8002aba:	817b      	strh	r3, [r7, #10]
 8002abc:	4613      	mov	r3, r2
 8002abe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	f040 80da 	bne.w	8002c82 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_I2C_Master_Transmit+0x30>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e0d3      	b.n	8002c84 <HAL_I2C_Master_Transmit+0x1d8>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ae4:	f7ff f8f6 	bl	8001cd4 <HAL_GetTick>
 8002ae8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2319      	movs	r3, #25
 8002af0:	2201      	movs	r2, #1
 8002af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f9f8 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0be      	b.n	8002c84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2221      	movs	r2, #33	; 0x21
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2210      	movs	r2, #16
 8002b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	893a      	ldrh	r2, [r7, #8]
 8002b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2bff      	cmp	r3, #255	; 0xff
 8002b36:	d90e      	bls.n	8002b56 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	22ff      	movs	r2, #255	; 0xff
 8002b3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	8979      	ldrh	r1, [r7, #10]
 8002b46:	4b51      	ldr	r3, [pc, #324]	; (8002c8c <HAL_I2C_Master_Transmit+0x1e0>)
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 faee 	bl	8003130 <I2C_TransferConfig>
 8002b54:	e06c      	b.n	8002c30 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	8979      	ldrh	r1, [r7, #10]
 8002b68:	4b48      	ldr	r3, [pc, #288]	; (8002c8c <HAL_I2C_Master_Transmit+0x1e0>)
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fadd 	bl	8003130 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002b76:	e05b      	b.n	8002c30 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	6a39      	ldr	r1, [r7, #32]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f9f5 	bl	8002f6c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e07b      	b.n	8002c84 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d034      	beq.n	8002c30 <HAL_I2C_Master_Transmit+0x184>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d130      	bne.n	8002c30 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2180      	movs	r1, #128	; 0x80
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f987 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e04d      	b.n	8002c84 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2bff      	cmp	r3, #255	; 0xff
 8002bf0:	d90e      	bls.n	8002c10 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	22ff      	movs	r2, #255	; 0xff
 8002bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	8979      	ldrh	r1, [r7, #10]
 8002c00:	2300      	movs	r3, #0
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fa91 	bl	8003130 <I2C_TransferConfig>
 8002c0e:	e00f      	b.n	8002c30 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	8979      	ldrh	r1, [r7, #10]
 8002c22:	2300      	movs	r3, #0
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 fa80 	bl	8003130 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d19e      	bne.n	8002b78 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	6a39      	ldr	r1, [r7, #32]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f9d4 	bl	8002fec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e01a      	b.n	8002c84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2220      	movs	r2, #32
 8002c54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_I2C_Master_Transmit+0x1e4>)
 8002c62:	400b      	ands	r3, r1
 8002c64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c82:	2302      	movs	r3, #2
  }
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	80002000 	.word	0x80002000
 8002c90:	fe00e800 	.word	0xfe00e800

08002c94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	f040 80ef 	bne.w	8002e94 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc4:	d101      	bne.n	8002cca <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e0e5      	b.n	8002e96 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_I2C_IsDeviceReady+0x44>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e0de      	b.n	8002e96 <HAL_I2C_IsDeviceReady+0x202>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2224      	movs	r2, #36	; 0x24
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d105      	bne.n	8002d02 <HAL_I2C_IsDeviceReady+0x6e>
 8002cf6:	897b      	ldrh	r3, [r7, #10]
 8002cf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cfc:	4b68      	ldr	r3, [pc, #416]	; (8002ea0 <HAL_I2C_IsDeviceReady+0x20c>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	e004      	b.n	8002d0c <HAL_I2C_IsDeviceReady+0x78>
 8002d02:	897b      	ldrh	r3, [r7, #10]
 8002d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d08:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002d12:	f7fe ffdf 	bl	8001cd4 <HAL_GetTick>
 8002d16:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	bf0c      	ite	eq
 8002d26:	2301      	moveq	r3, #1
 8002d28:	2300      	movne	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d44:	e034      	b.n	8002db0 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d01a      	beq.n	8002d84 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7fe ffc1 	bl	8001cd4 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <HAL_I2C_IsDeviceReady+0xd0>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10f      	bne.n	8002d84 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e088      	b.n	8002e96 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	bf0c      	ite	eq
 8002d92:	2301      	moveq	r3, #1
 8002d94:	2300      	movne	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002db0:	7ffb      	ldrb	r3, [r7, #31]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_I2C_IsDeviceReady+0x128>
 8002db6:	7fbb      	ldrb	r3, [r7, #30]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0c4      	beq.n	8002d46 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d01a      	beq.n	8002e00 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2120      	movs	r1, #32
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f889 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e058      	b.n	8002e96 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2220      	movs	r2, #32
 8002dea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e04a      	b.n	8002e96 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2200      	movs	r2, #0
 8002e08:	2120      	movs	r1, #32
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f86e 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e03d      	b.n	8002e96 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2210      	movs	r2, #16
 8002e20:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2220      	movs	r2, #32
 8002e28:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d118      	bne.n	8002e64 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e40:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2120      	movs	r1, #32
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f84d 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e01c      	b.n	8002e96 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2220      	movs	r2, #32
 8002e62:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	3301      	adds	r3, #1
 8002e68:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	f63f af3d 	bhi.w	8002cee <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	02002000 	.word	0x02002000

08002ea4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d103      	bne.n	8002ec2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d007      	beq.n	8002ee0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	619a      	str	r2, [r3, #24]
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002efc:	e022      	b.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d01e      	beq.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f06:	f7fe fee5 	bl	8001cd4 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d302      	bcc.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d113      	bne.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e00f      	b.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d0cd      	beq.n	8002efe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f78:	e02c      	b.n	8002fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f870 	bl	8003064 <I2C_IsAcknowledgeFailed>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e02a      	b.n	8002fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d01e      	beq.n	8002fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f96:	f7fe fe9d 	bl	8001cd4 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d302      	bcc.n	8002fac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d113      	bne.n	8002fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e007      	b.n	8002fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d1cb      	bne.n	8002f7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ff8:	e028      	b.n	800304c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f830 	bl	8003064 <I2C_IsAcknowledgeFailed>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e026      	b.n	800305c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300e:	f7fe fe61 	bl	8001cd4 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	429a      	cmp	r2, r3
 800301c:	d302      	bcc.n	8003024 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d113      	bne.n	800304c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e007      	b.n	800305c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b20      	cmp	r3, #32
 8003058:	d1cf      	bne.n	8002ffa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b10      	cmp	r3, #16
 800307c:	d151      	bne.n	8003122 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800307e:	e022      	b.n	80030c6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003086:	d01e      	beq.n	80030c6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003088:	f7fe fe24 	bl	8001cd4 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	429a      	cmp	r2, r3
 8003096:	d302      	bcc.n	800309e <I2C_IsAcknowledgeFailed+0x3a>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d113      	bne.n	80030c6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f043 0220 	orr.w	r2, r3, #32
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e02e      	b.n	8003124 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d1d5      	bne.n	8003080 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2210      	movs	r2, #16
 80030da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2220      	movs	r2, #32
 80030e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff fedd 	bl	8002ea4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b0d      	ldr	r3, [pc, #52]	; (800312c <I2C_IsAcknowledgeFailed+0xc8>)
 80030f6:	400b      	ands	r3, r1
 80030f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	f043 0204 	orr.w	r2, r3, #4
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	fe00e800 	.word	0xfe00e800

08003130 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	817b      	strh	r3, [r7, #10]
 800313e:	4613      	mov	r3, r2
 8003140:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	0d5b      	lsrs	r3, r3, #21
 800314c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003150:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <I2C_TransferConfig+0x58>)
 8003152:	430b      	orrs	r3, r1
 8003154:	43db      	mvns	r3, r3
 8003156:	ea02 0103 	and.w	r1, r2, r3
 800315a:	897b      	ldrh	r3, [r7, #10]
 800315c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003160:	7a7b      	ldrb	r3, [r7, #9]
 8003162:	041b      	lsls	r3, r3, #16
 8003164:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	431a      	orrs	r2, r3
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	431a      	orrs	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	03ff63ff 	.word	0x03ff63ff

0800318c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d138      	bne.n	8003214 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e032      	b.n	8003216 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	; 0x24
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6819      	ldr	r1, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b20      	cmp	r3, #32
 8003236:	d139      	bne.n	80032ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003242:	2302      	movs	r3, #2
 8003244:	e033      	b.n	80032ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2224      	movs	r2, #36	; 0x24
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003274:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0d2      	b.n	8003474 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fe fa3a 	bl	800175c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69d9      	ldr	r1, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b60      	ldr	r3, [pc, #384]	; (800347c <HAL_I2S_Init+0x1c0>)
 80032fc:	400b      	ands	r3, r1
 80032fe:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2202      	movs	r2, #2
 8003306:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d067      	beq.n	80033e0 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003318:	2310      	movs	r3, #16
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	e001      	b.n	8003322 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800331e:	2320      	movs	r3, #32
 8003320:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b20      	cmp	r3, #32
 8003328:	d802      	bhi.n	8003330 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d102      	bne.n	800333e <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8003338:	4b51      	ldr	r3, [pc, #324]	; (8003480 <HAL_I2S_Init+0x1c4>)
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	e003      	b.n	8003346 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8a2 	bl	8003488 <I2S_GetClockFreq>
 8003344:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334e:	d125      	bne.n	800339c <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d010      	beq.n	800337a <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	461a      	mov	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	3305      	adds	r3, #5
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	e01f      	b.n	80033ba <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	fbb2 f2f3 	udiv	r2, r2, r3
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	461a      	mov	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	3305      	adds	r3, #5
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	e00e      	b.n	80033ba <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	461a      	mov	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b6:	3305      	adds	r3, #5
 80033b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4a31      	ldr	r2, [pc, #196]	; (8003484 <HAL_I2S_Init+0x1c8>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	08db      	lsrs	r3, r3, #3
 80033c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	085b      	lsrs	r3, r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	e003      	b.n	80033e8 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033e0:	2302      	movs	r3, #2
 80033e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d902      	bls.n	80033f4 <HAL_I2S_Init+0x138>
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	2bff      	cmp	r3, #255	; 0xff
 80033f2:	d907      	bls.n	8003404 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f8:	f043 0210 	orr.w	r2, r3, #16
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e037      	b.n	8003474 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	ea42 0103 	orr.w	r1, r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	430a      	orrs	r2, r1
 8003416:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69da      	ldr	r2, [r3, #28]
 800341e:	4b17      	ldr	r3, [pc, #92]	; (800347c <HAL_I2S_Init+0x1c0>)
 8003420:	4013      	ands	r3, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6851      	ldr	r1, [r2, #4]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6892      	ldr	r2, [r2, #8]
 800342a:	4311      	orrs	r1, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	68d2      	ldr	r2, [r2, #12]
 8003430:	4311      	orrs	r1, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6992      	ldr	r2, [r2, #24]
 8003436:	430a      	orrs	r2, r1
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003442:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b30      	cmp	r3, #48	; 0x30
 800344a:	d003      	beq.n	8003454 <HAL_I2S_Init+0x198>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2bb0      	cmp	r3, #176	; 0xb0
 8003452:	d107      	bne.n	8003464 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69da      	ldr	r2, [r3, #28]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003462:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	fffff040 	.word	0xfffff040
 8003480:	00bb8000 	.word	0x00bb8000
 8003484:	cccccccd 	.word	0xcccccccd

08003488 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d02d      	beq.n	80034f4 <I2S_GetClockFreq+0x6c>
 8003498:	2b02      	cmp	r3, #2
 800349a:	d12e      	bne.n	80034fa <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800349c:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <I2S_GetClockFreq+0x88>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d108      	bne.n	80034ba <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80034a8:	4b19      	ldr	r3, [pc, #100]	; (8003510 <I2S_GetClockFreq+0x88>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b0:	4a18      	ldr	r2, [pc, #96]	; (8003514 <I2S_GetClockFreq+0x8c>)
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e007      	b.n	80034ca <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <I2S_GetClockFreq+0x88>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c2:	4a15      	ldr	r2, [pc, #84]	; (8003518 <I2S_GetClockFreq+0x90>)
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <I2S_GetClockFreq+0x88>)
 80034cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d0:	0f1b      	lsrs	r3, r3, #28
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80034d8:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <I2S_GetClockFreq+0x88>)
 80034da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034de:	099b      	lsrs	r3, r3, #6
 80034e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	fb02 f203 	mul.w	r2, r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f0:	613b      	str	r3, [r7, #16]

      break;
 80034f2:	e005      	b.n	8003500 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <I2S_GetClockFreq+0x94>)
 80034f6:	613b      	str	r3, [r7, #16]
      break;
 80034f8:	e002      	b.n	8003500 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
      break;
 80034fe:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8003500:	693b      	ldr	r3, [r7, #16]
}
 8003502:	4618      	mov	r0, r3
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800
 8003514:	00f42400 	.word	0x00f42400
 8003518:	017d7840 	.word	0x017d7840
 800351c:	00bb8000 	.word	0x00bb8000

08003520 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003534:	6413      	str	r3, [r2, #64]	; 0x40
 8003536:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003542:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800354e:	f7fe fbc1 	bl	8001cd4 <HAL_GetTick>
 8003552:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003554:	e009      	b.n	800356a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003556:	f7fe fbbd 	bl	8001cd4 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003564:	d901      	bls.n	800356a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e022      	b.n	80035b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003576:	d1ee      	bne.n	8003556 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0f      	ldr	r2, [pc, #60]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800357e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003582:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003584:	f7fe fba6 	bl	8001cd4 <HAL_GetTick>
 8003588:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800358a:	e009      	b.n	80035a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800358c:	f7fe fba2 	bl	8001cd4 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800359a:	d901      	bls.n	80035a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e007      	b.n	80035b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035ac:	d1ee      	bne.n	800358c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40007000 	.word	0x40007000

080035c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035c8:	2300      	movs	r3, #0
 80035ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e29b      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8087 	beq.w	80036f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e4:	4b96      	ldr	r3, [pc, #600]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d00c      	beq.n	800360a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f0:	4b93      	ldr	r3, [pc, #588]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d112      	bne.n	8003622 <HAL_RCC_OscConfig+0x62>
 80035fc:	4b90      	ldr	r3, [pc, #576]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003608:	d10b      	bne.n	8003622 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360a:	4b8d      	ldr	r3, [pc, #564]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d06c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x130>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d168      	bne.n	80036f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e275      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x7a>
 800362c:	4b84      	ldr	r3, [pc, #528]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a83      	ldr	r2, [pc, #524]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	e02e      	b.n	8003698 <HAL_RCC_OscConfig+0xd8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x9c>
 8003642:	4b7f      	ldr	r3, [pc, #508]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a7e      	ldr	r2, [pc, #504]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b7c      	ldr	r3, [pc, #496]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a7b      	ldr	r2, [pc, #492]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01d      	b.n	8003698 <HAL_RCC_OscConfig+0xd8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0xc0>
 8003666:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a75      	ldr	r2, [pc, #468]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b73      	ldr	r3, [pc, #460]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a72      	ldr	r2, [pc, #456]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0xd8>
 8003680:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6e      	ldr	r2, [pc, #440]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b6c      	ldr	r3, [pc, #432]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a6b      	ldr	r2, [pc, #428]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe fb18 	bl	8001cd4 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fe fb14 	bl	8001cd4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e229      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b61      	ldr	r3, [pc, #388]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0xe8>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe fb04 	bl	8001cd4 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fe fb00 	bl	8001cd4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e215      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	4b57      	ldr	r3, [pc, #348]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x110>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d069      	beq.n	80037d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036fe:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370a:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b08      	cmp	r3, #8
 8003714:	d11c      	bne.n	8003750 <HAL_RCC_OscConfig+0x190>
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d116      	bne.n	8003750 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_RCC_OscConfig+0x17a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d001      	beq.n	800373a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e1e9      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	493d      	ldr	r1, [pc, #244]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	e040      	b.n	80037d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d023      	beq.n	80037a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003758:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a38      	ldr	r2, [pc, #224]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fe fab6 	bl	8001cd4 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376c:	f7fe fab2 	bl	8001cd4 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e1c7      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377e:	4b30      	ldr	r3, [pc, #192]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4929      	ldr	r1, [pc, #164]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
 800379e:	e018      	b.n	80037d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a26      	ldr	r2, [pc, #152]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe fa92 	bl	8001cd4 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b4:	f7fe fa8e 	bl	8001cd4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1a3      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c6:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d038      	beq.n	8003850 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d019      	beq.n	800381a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	4a15      	ldr	r2, [pc, #84]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fe fa6f 	bl	8001cd4 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fa:	f7fe fa6b 	bl	8001cd4 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e180      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800380e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x23a>
 8003818:	e01a      	b.n	8003850 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800381c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381e:	4a08      	ldr	r2, [pc, #32]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003826:	f7fe fa55 	bl	8001cd4 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382e:	f7fe fa51 	bl	8001cd4 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d903      	bls.n	8003844 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e166      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
 8003840:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003844:	4b92      	ldr	r3, [pc, #584]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ee      	bne.n	800382e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80a4 	beq.w	80039a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385e:	4b8c      	ldr	r3, [pc, #560]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	4b89      	ldr	r3, [pc, #548]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	4a88      	ldr	r2, [pc, #544]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003874:	6413      	str	r3, [r2, #64]	; 0x40
 8003876:	4b86      	ldr	r3, [pc, #536]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003882:	2301      	movs	r3, #1
 8003884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003886:	4b83      	ldr	r3, [pc, #524]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d118      	bne.n	80038c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003892:	4b80      	ldr	r3, [pc, #512]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7f      	ldr	r2, [pc, #508]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fe fa19 	bl	8001cd4 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fe fa15 	bl	8001cd4 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b64      	cmp	r3, #100	; 0x64
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e12a      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b8:	4b76      	ldr	r3, [pc, #472]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d106      	bne.n	80038da <HAL_RCC_OscConfig+0x31a>
 80038cc:	4b70      	ldr	r3, [pc, #448]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	4a6f      	ldr	r2, [pc, #444]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6713      	str	r3, [r2, #112]	; 0x70
 80038d8:	e02d      	b.n	8003936 <HAL_RCC_OscConfig+0x376>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x33c>
 80038e2:	4b6b      	ldr	r3, [pc, #428]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	4a6a      	ldr	r2, [pc, #424]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	6713      	str	r3, [r2, #112]	; 0x70
 80038ee:	4b68      	ldr	r3, [pc, #416]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	4a67      	ldr	r2, [pc, #412]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038f4:	f023 0304 	bic.w	r3, r3, #4
 80038f8:	6713      	str	r3, [r2, #112]	; 0x70
 80038fa:	e01c      	b.n	8003936 <HAL_RCC_OscConfig+0x376>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b05      	cmp	r3, #5
 8003902:	d10c      	bne.n	800391e <HAL_RCC_OscConfig+0x35e>
 8003904:	4b62      	ldr	r3, [pc, #392]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a61      	ldr	r2, [pc, #388]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800390a:	f043 0304 	orr.w	r3, r3, #4
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	4b5f      	ldr	r3, [pc, #380]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4a5e      	ldr	r2, [pc, #376]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	6713      	str	r3, [r2, #112]	; 0x70
 800391c:	e00b      	b.n	8003936 <HAL_RCC_OscConfig+0x376>
 800391e:	4b5c      	ldr	r3, [pc, #368]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a5b      	ldr	r2, [pc, #364]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	6713      	str	r3, [r2, #112]	; 0x70
 800392a:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d015      	beq.n	800396a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393e:	f7fe f9c9 	bl	8001cd4 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fe f9c5 	bl	8001cd4 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e0d8      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395c:	4b4c      	ldr	r3, [pc, #304]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ee      	beq.n	8003946 <HAL_RCC_OscConfig+0x386>
 8003968:	e014      	b.n	8003994 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396a:	f7fe f9b3 	bl	8001cd4 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003970:	e00a      	b.n	8003988 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003972:	f7fe f9af 	bl	8001cd4 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003980:	4293      	cmp	r3, r2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e0c2      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ee      	bne.n	8003972 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d105      	bne.n	80039a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399a:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4a3c      	ldr	r2, [pc, #240]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80ae 	beq.w	8003b0c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039b0:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d06d      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d14b      	bne.n	8003a5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c4:	4b32      	ldr	r3, [pc, #200]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a31      	ldr	r2, [pc, #196]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe f980 	bl	8001cd4 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d8:	f7fe f97c 	bl	8001cd4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e091      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69da      	ldr	r2, [r3, #28]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	019b      	lsls	r3, r3, #6
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	041b      	lsls	r3, r3, #16
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	061b      	lsls	r3, r3, #24
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	071b      	lsls	r3, r3, #28
 8003a22:	491b      	ldr	r1, [pc, #108]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe f94e 	bl	8001cd4 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe f94a 	bl	8001cd4 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e05f      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x47c>
 8003a5a:	e057      	b.n	8003b0c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe f934 	bl	8001cd4 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fe f930 	bl	8001cd4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e045      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x4b0>
 8003a8e:	e03d      	b.n	8003b0c <HAL_RCC_OscConfig+0x54c>
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a98:	4b1f      	ldr	r3, [pc, #124]	; (8003b18 <HAL_RCC_OscConfig+0x558>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d030      	beq.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d129      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d122      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ac8:	4013      	ands	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ace:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d119      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d10f      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800

08003b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0d0      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b34:	4b6a      	ldr	r3, [pc, #424]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d910      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 020f 	bic.w	r2, r3, #15
 8003b4a:	4965      	ldr	r1, [pc, #404]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b63      	ldr	r3, [pc, #396]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0b8      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b7c:	4b59      	ldr	r3, [pc, #356]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a58      	ldr	r2, [pc, #352]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b94:	4b53      	ldr	r3, [pc, #332]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a52      	ldr	r2, [pc, #328]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba0:	4b50      	ldr	r3, [pc, #320]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	494d      	ldr	r1, [pc, #308]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d040      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d115      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e07f      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bde:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e073      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bee:	4b3d      	ldr	r3, [pc, #244]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e06b      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfe:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 0203 	bic.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4936      	ldr	r1, [pc, #216]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fe f860 	bl	8001cd4 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c18:	f7fe f85c 	bl	8001cd4 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e053      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 020c 	and.w	r2, r3, #12
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1eb      	bne.n	8003c18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c40:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d210      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 020f 	bic.w	r2, r3, #15
 8003c56:	4922      	ldr	r1, [pc, #136]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e032      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c7c:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4916      	ldr	r1, [pc, #88]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	490e      	ldr	r1, [pc, #56]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cae:	f000 f821 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	490a      	ldr	r1, [pc, #40]	; (8003ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8003cc0:	5ccb      	ldrb	r3, [r1, r3]
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	4a09      	ldr	r2, [pc, #36]	; (8003cec <HAL_RCC_ClockConfig+0x1d0>)
 8003cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_RCC_ClockConfig+0x1d4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fd ffbc 	bl	8001c4c <HAL_InitTick>

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023c00 	.word	0x40023c00
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	080081a8 	.word	0x080081a8
 8003cec:	20075314 	.word	0x20075314
 8003cf0:	20075318 	.word	0x20075318

08003cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf4:	b5b0      	push	{r4, r5, r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	6079      	str	r1, [r7, #4]
 8003cfe:	2100      	movs	r1, #0
 8003d00:	60f9      	str	r1, [r7, #12]
 8003d02:	2100      	movs	r1, #0
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003d06:	2100      	movs	r1, #0
 8003d08:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d0a:	4952      	ldr	r1, [pc, #328]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d0c:	6889      	ldr	r1, [r1, #8]
 8003d0e:	f001 010c 	and.w	r1, r1, #12
 8003d12:	2908      	cmp	r1, #8
 8003d14:	d00d      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x3e>
 8003d16:	2908      	cmp	r1, #8
 8003d18:	f200 8094 	bhi.w	8003e44 <HAL_RCC_GetSysClockFreq+0x150>
 8003d1c:	2900      	cmp	r1, #0
 8003d1e:	d002      	beq.n	8003d26 <HAL_RCC_GetSysClockFreq+0x32>
 8003d20:	2904      	cmp	r1, #4
 8003d22:	d003      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0x38>
 8003d24:	e08e      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d26:	4b4c      	ldr	r3, [pc, #304]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d28:	60bb      	str	r3, [r7, #8]
      break;
 8003d2a:	e08e      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x168>)
 8003d2e:	60bb      	str	r3, [r7, #8]
      break;
 8003d30:	e08b      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d32:	4948      	ldr	r1, [pc, #288]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d34:	6849      	ldr	r1, [r1, #4]
 8003d36:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d3a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d3c:	4945      	ldr	r1, [pc, #276]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d3e:	6849      	ldr	r1, [r1, #4]
 8003d40:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d44:	2900      	cmp	r1, #0
 8003d46:	d024      	beq.n	8003d92 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d48:	4942      	ldr	r1, [pc, #264]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d4a:	6849      	ldr	r1, [r1, #4]
 8003d4c:	0989      	lsrs	r1, r1, #6
 8003d4e:	4608      	mov	r0, r1
 8003d50:	f04f 0100 	mov.w	r1, #0
 8003d54:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003d58:	f04f 0500 	mov.w	r5, #0
 8003d5c:	ea00 0204 	and.w	r2, r0, r4
 8003d60:	ea01 0305 	and.w	r3, r1, r5
 8003d64:	493d      	ldr	r1, [pc, #244]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x168>)
 8003d66:	fb01 f003 	mul.w	r0, r1, r3
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	fb01 f102 	mul.w	r1, r1, r2
 8003d70:	1844      	adds	r4, r0, r1
 8003d72:	493a      	ldr	r1, [pc, #232]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x168>)
 8003d74:	fba2 0101 	umull	r0, r1, r2, r1
 8003d78:	1863      	adds	r3, r4, r1
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	f7fc fa58 	bl	8000238 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e04a      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d92:	4b30      	ldr	r3, [pc, #192]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003da2:	f04f 0100 	mov.w	r1, #0
 8003da6:	ea02 0400 	and.w	r4, r2, r0
 8003daa:	ea03 0501 	and.w	r5, r3, r1
 8003dae:	4620      	mov	r0, r4
 8003db0:	4629      	mov	r1, r5
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	014b      	lsls	r3, r1, #5
 8003dbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dc0:	0142      	lsls	r2, r0, #5
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	1b00      	subs	r0, r0, r4
 8003dc8:	eb61 0105 	sbc.w	r1, r1, r5
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	018b      	lsls	r3, r1, #6
 8003dd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dda:	0182      	lsls	r2, r0, #6
 8003ddc:	1a12      	subs	r2, r2, r0
 8003dde:	eb63 0301 	sbc.w	r3, r3, r1
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	00d9      	lsls	r1, r3, #3
 8003dec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003df0:	00d0      	lsls	r0, r2, #3
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	1912      	adds	r2, r2, r4
 8003df8:	eb45 0303 	adc.w	r3, r5, r3
 8003dfc:	f04f 0000 	mov.w	r0, #0
 8003e00:	f04f 0100 	mov.w	r1, #0
 8003e04:	0299      	lsls	r1, r3, #10
 8003e06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e0a:	0290      	lsls	r0, r2, #10
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	f7fc fa0c 	bl	8000238 <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4613      	mov	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e28:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	3301      	adds	r3, #1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	60bb      	str	r3, [r7, #8]
      break;
 8003e42:	e002      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e46:	60bb      	str	r3, [r7, #8]
      break;
 8003e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bdb0      	pop	{r4, r5, r7, pc}
 8003e54:	40023800 	.word	0x40023800
 8003e58:	00f42400 	.word	0x00f42400
 8003e5c:	017d7840 	.word	0x017d7840

08003e60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e64:	4b03      	ldr	r3, [pc, #12]	; (8003e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20075314 	.word	0x20075314

08003e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e7c:	f7ff fff0 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	0a9b      	lsrs	r3, r3, #10
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	080081b8 	.word	0x080081b8

08003ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ea4:	f7ff ffdc 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	0b5b      	lsrs	r3, r3, #13
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	4903      	ldr	r1, [pc, #12]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	080081b8 	.word	0x080081b8

08003ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d012      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ef0:	4b69      	ldr	r3, [pc, #420]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a68      	ldr	r2, [pc, #416]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003efa:	6093      	str	r3, [r2, #8]
 8003efc:	4b66      	ldr	r3, [pc, #408]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f04:	4964      	ldr	r1, [pc, #400]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d017      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f22:	4b5d      	ldr	r3, [pc, #372]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f30:	4959      	ldr	r1, [pc, #356]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f40:	d101      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d017      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f5e:	4b4e      	ldr	r3, [pc, #312]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	494a      	ldr	r1, [pc, #296]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 808b 	beq.w	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fac:	4b3a      	ldr	r3, [pc, #232]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	4a39      	ldr	r2, [pc, #228]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb8:	4b37      	ldr	r3, [pc, #220]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fc4:	4b35      	ldr	r3, [pc, #212]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a34      	ldr	r2, [pc, #208]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd0:	f7fd fe80 	bl	8001cd4 <HAL_GetTick>
 8003fd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd8:	f7fd fe7c 	bl	8001cd4 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	; 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e38f      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fea:	4b2c      	ldr	r3, [pc, #176]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d035      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	429a      	cmp	r2, r3
 8004012:	d02e      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004014:	4b20      	ldr	r3, [pc, #128]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a1a      	ldr	r2, [pc, #104]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004034:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004036:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800403c:	4b16      	ldr	r3, [pc, #88]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d114      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fd fe44 	bl	8001cd4 <HAL_GetTick>
 800404c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404e:	e00a      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fd fe40 	bl	8001cd4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e351      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004066:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ee      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800407e:	d111      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800408e:	400b      	ands	r3, r1
 8004090:	4901      	ldr	r1, [pc, #4]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
 8004096:	e00b      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004098:	40023800 	.word	0x40023800
 800409c:	40007000 	.word	0x40007000
 80040a0:	0ffffcff 	.word	0x0ffffcff
 80040a4:	4bb3      	ldr	r3, [pc, #716]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4ab2      	ldr	r2, [pc, #712]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040ae:	6093      	str	r3, [r2, #8]
 80040b0:	4bb0      	ldr	r3, [pc, #704]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040bc:	49ad      	ldr	r1, [pc, #692]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d010      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040ce:	4ba9      	ldr	r3, [pc, #676]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d4:	4aa7      	ldr	r2, [pc, #668]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040de:	4ba5      	ldr	r3, [pc, #660]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	49a2      	ldr	r1, [pc, #648]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040fc:	4b9d      	ldr	r3, [pc, #628]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800410a:	499a      	ldr	r1, [pc, #616]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800411e:	4b95      	ldr	r3, [pc, #596]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800412c:	4991      	ldr	r1, [pc, #580]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004140:	4b8c      	ldr	r3, [pc, #560]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004146:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414e:	4989      	ldr	r1, [pc, #548]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004162:	4b84      	ldr	r3, [pc, #528]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	4980      	ldr	r1, [pc, #512]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004184:	4b7b      	ldr	r3, [pc, #492]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f023 0203 	bic.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	4978      	ldr	r1, [pc, #480]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041a6:	4b73      	ldr	r3, [pc, #460]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	f023 020c 	bic.w	r2, r3, #12
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b4:	496f      	ldr	r1, [pc, #444]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041c8:	4b6a      	ldr	r3, [pc, #424]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	4967      	ldr	r1, [pc, #412]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041ea:	4b62      	ldr	r3, [pc, #392]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f8:	495e      	ldr	r1, [pc, #376]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800420c:	4b59      	ldr	r3, [pc, #356]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	4956      	ldr	r1, [pc, #344]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800422e:	4b51      	ldr	r3, [pc, #324]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004234:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	494d      	ldr	r1, [pc, #308]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004250:	4b48      	ldr	r3, [pc, #288]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	4945      	ldr	r1, [pc, #276]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004272:	4b40      	ldr	r3, [pc, #256]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004278:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004280:	493c      	ldr	r1, [pc, #240]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004294:	4b37      	ldr	r3, [pc, #220]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042a2:	4934      	ldr	r1, [pc, #208]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d011      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042b6:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c4:	492b      	ldr	r1, [pc, #172]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d4:	d101      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042f6:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004304:	491b      	ldr	r1, [pc, #108]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004318:	4b16      	ldr	r3, [pc, #88]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004328:	4912      	ldr	r1, [pc, #72]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800434c:	4909      	ldr	r1, [pc, #36]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00f      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004366:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	e002      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800
 8004378:	4986      	ldr	r1, [pc, #536]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00b      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800438c:	4b81      	ldr	r3, [pc, #516]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004392:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439c:	497d      	ldr	r1, [pc, #500]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d006      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80d6 	beq.w	8004564 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043b8:	4b76      	ldr	r3, [pc, #472]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a75      	ldr	r2, [pc, #468]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c4:	f7fd fc86 	bl	8001cd4 <HAL_GetTick>
 80043c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043cc:	f7fd fc82 	bl	8001cd4 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e195      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043de:	4b6d      	ldr	r3, [pc, #436]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d021      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11d      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043fe:	4b65      	ldr	r3, [pc, #404]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800440c:	4b61      	ldr	r3, [pc, #388]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800440e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004412:	0e1b      	lsrs	r3, r3, #24
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	019a      	lsls	r2, r3, #6
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	061b      	lsls	r3, r3, #24
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	071b      	lsls	r3, r3, #28
 8004432:	4958      	ldr	r1, [pc, #352]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d004      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004458:	2b00      	cmp	r3, #0
 800445a:	d02e      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004464:	d129      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004466:	4b4b      	ldr	r3, [pc, #300]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004474:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447a:	0f1b      	lsrs	r3, r3, #28
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	019a      	lsls	r2, r3, #6
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	431a      	orrs	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	071b      	lsls	r3, r3, #28
 800449a:	493e      	ldr	r1, [pc, #248]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044a2:	4b3c      	ldr	r3, [pc, #240]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a8:	f023 021f 	bic.w	r2, r3, #31
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	3b01      	subs	r3, #1
 80044b2:	4938      	ldr	r1, [pc, #224]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d01d      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044c6:	4b33      	ldr	r3, [pc, #204]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044cc:	0e1b      	lsrs	r3, r3, #24
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044d4:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044da:	0f1b      	lsrs	r3, r3, #28
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	019a      	lsls	r2, r3, #6
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	431a      	orrs	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	431a      	orrs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	071b      	lsls	r3, r3, #28
 80044fa:	4926      	ldr	r1, [pc, #152]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d011      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	019a      	lsls	r2, r3, #6
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	061b      	lsls	r3, r3, #24
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	071b      	lsls	r3, r3, #28
 800452a:	491a      	ldr	r1, [pc, #104]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004532:	4b18      	ldr	r3, [pc, #96]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a17      	ldr	r2, [pc, #92]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004538:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800453c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453e:	f7fd fbc9 	bl	8001cd4 <HAL_GetTick>
 8004542:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004544:	e008      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004546:	f7fd fbc5 	bl	8001cd4 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b64      	cmp	r3, #100	; 0x64
 8004552:	d901      	bls.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e0d8      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b01      	cmp	r3, #1
 8004568:	f040 80ce 	bne.w	8004708 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a08      	ldr	r2, [pc, #32]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004578:	f7fd fbac 	bl	8001cd4 <HAL_GetTick>
 800457c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800457e:	e00b      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004580:	f7fd fba8 	bl	8001cd4 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d904      	bls.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e0bb      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004592:	bf00      	nop
 8004594:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004598:	4b5e      	ldr	r3, [pc, #376]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045a4:	d0ec      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d02e      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d12a      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045dc:	4b4d      	ldr	r3, [pc, #308]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	0f1b      	lsrs	r3, r3, #28
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	019a      	lsls	r2, r3, #6
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	041b      	lsls	r3, r3, #16
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	071b      	lsls	r3, r3, #28
 8004602:	4944      	ldr	r1, [pc, #272]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800460a:	4b42      	ldr	r3, [pc, #264]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800460c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004610:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	493d      	ldr	r1, [pc, #244]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d022      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004638:	d11d      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800463a:	4b36      	ldr	r3, [pc, #216]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	0e1b      	lsrs	r3, r3, #24
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004648:	4b32      	ldr	r3, [pc, #200]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	0f1b      	lsrs	r3, r3, #28
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	019a      	lsls	r2, r3, #6
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	431a      	orrs	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	061b      	lsls	r3, r3, #24
 8004668:	431a      	orrs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	071b      	lsls	r3, r3, #28
 800466e:	4929      	ldr	r1, [pc, #164]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d028      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004682:	4b24      	ldr	r3, [pc, #144]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	0e1b      	lsrs	r3, r3, #24
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	019a      	lsls	r2, r3, #6
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	431a      	orrs	r2, r3
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	061b      	lsls	r3, r3, #24
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	071b      	lsls	r3, r3, #28
 80046b6:	4917      	ldr	r1, [pc, #92]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	4911      	ldr	r1, [pc, #68]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046d4:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0e      	ldr	r2, [pc, #56]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e0:	f7fd faf8 	bl	8001cd4 <HAL_GetTick>
 80046e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046e8:	f7fd faf4 	bl	8001cd4 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	; 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e007      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004706:	d1ef      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800

08004718 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004736:	f040 80a3 	bne.w	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 800473a:	4bac      	ldr	r3, [pc, #688]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800473c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004740:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004748:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004750:	f000 808a 	beq.w	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800475a:	f200 8093 	bhi.w	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004764:	d07d      	beq.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800476c:	f200 808a 	bhi.w	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800477c:	d039      	beq.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800477e:	e081      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004780:	4b9a      	ldr	r3, [pc, #616]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d108      	bne.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800478c:	4b97      	ldr	r3, [pc, #604]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004794:	4a96      	ldr	r2, [pc, #600]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004796:	fbb2 f3f3 	udiv	r3, r2, r3
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	e007      	b.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800479e:	4b93      	ldr	r3, [pc, #588]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a6:	4a93      	ldr	r2, [pc, #588]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80047ae:	4b8f      	ldr	r3, [pc, #572]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	0e1b      	lsrs	r3, r3, #24
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80047bc:	4b8b      	ldr	r3, [pc, #556]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	099b      	lsrs	r3, r3, #6
 80047c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	fb02 f203 	mul.w	r2, r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80047d6:	4b85      	ldr	r3, [pc, #532]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80047d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047dc:	0a1b      	lsrs	r3, r3, #8
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ee:	617b      	str	r3, [r7, #20]
        break;
 80047f0:	e049      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047f2:	4b7e      	ldr	r3, [pc, #504]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d108      	bne.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047fe:	4b7b      	ldr	r3, [pc, #492]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004806:	4a7a      	ldr	r2, [pc, #488]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004808:	fbb2 f3f3 	udiv	r3, r2, r3
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	e007      	b.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004810:	4b76      	ldr	r3, [pc, #472]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004818:	4a76      	ldr	r2, [pc, #472]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004820:	4b72      	ldr	r3, [pc, #456]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004826:	0e1b      	lsrs	r3, r3, #24
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800482e:	4b6f      	ldr	r3, [pc, #444]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004834:	099b      	lsrs	r3, r3, #6
 8004836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	fb02 f203 	mul.w	r2, r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	fbb2 f3f3 	udiv	r3, r2, r3
 8004846:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004848:	4b68      	ldr	r3, [pc, #416]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800484a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	3301      	adds	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	fbb2 f3f3 	udiv	r3, r2, r3
 800485e:	617b      	str	r3, [r7, #20]
        break;
 8004860:	e011      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004862:	4b65      	ldr	r3, [pc, #404]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004864:	617b      	str	r3, [r7, #20]
        break;
 8004866:	e00e      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004868:	4b60      	ldr	r3, [pc, #384]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8004874:	4b5e      	ldr	r3, [pc, #376]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004876:	617b      	str	r3, [r7, #20]
        break;
 8004878:	e005      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 800487a:	4b5e      	ldr	r3, [pc, #376]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800487c:	617b      	str	r3, [r7, #20]
        break;
 800487e:	e002      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8004880:	bf00      	nop
 8004882:	e000      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8004884:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800488c:	f040 80a3 	bne.w	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004890:	4b56      	ldr	r3, [pc, #344]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004896:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800489e:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048a6:	f000 808a 	beq.w	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048b0:	f200 8093 	bhi.w	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048ba:	d07d      	beq.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048c2:	f200 808a 	bhi.w	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d2:	d039      	beq.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80048d4:	e081      	b.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80048d6:	4b45      	ldr	r3, [pc, #276]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d108      	bne.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048e2:	4b42      	ldr	r3, [pc, #264]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ea:	4a41      	ldr	r2, [pc, #260]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	e007      	b.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80048f4:	4b3d      	ldr	r3, [pc, #244]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048fc:	4a3d      	ldr	r2, [pc, #244]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004904:	4b39      	ldr	r3, [pc, #228]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	0e1b      	lsrs	r3, r3, #24
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004912:	4b36      	ldr	r3, [pc, #216]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	099b      	lsrs	r3, r3, #6
 800491a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	fb02 f203 	mul.w	r2, r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800492c:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800492e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	3301      	adds	r3, #1
 800493a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	617b      	str	r3, [r7, #20]
        break;
 8004946:	e049      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004948:	4b28      	ldr	r3, [pc, #160]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d108      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004954:	4b25      	ldr	r3, [pc, #148]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800495c:	4a24      	ldr	r2, [pc, #144]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	e007      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004966:	4b21      	ldr	r3, [pc, #132]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800496e:	4a21      	ldr	r2, [pc, #132]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004976:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497c:	0e1b      	lsrs	r3, r3, #24
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004984:	4b19      	ldr	r3, [pc, #100]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498a:	099b      	lsrs	r3, r3, #6
 800498c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	fb02 f203 	mul.w	r2, r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80049a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	3301      	adds	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]
        break;
 80049b6:	e011      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80049ba:	617b      	str	r3, [r7, #20]
        break;
 80049bc:	e00e      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80049be:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d102      	bne.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 80049ca:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80049cc:	617b      	str	r3, [r7, #20]
        break;
 80049ce:	e005      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 80049d0:	4b08      	ldr	r3, [pc, #32]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80049d2:	617b      	str	r3, [r7, #20]
        break;
 80049d4:	e002      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 80049da:	bf00      	nop

  return frequency;
 80049dc:	697b      	ldr	r3, [r7, #20]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	00f42400 	.word	0x00f42400
 80049f4:	017d7840 	.word	0x017d7840
 80049f8:	00bb8000 	.word	0x00bb8000

080049fc <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d904      	bls.n	8004a1e <HAL_SAI_InitProtocol+0x22>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	3b03      	subs	r3, #3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d812      	bhi.n	8004a42 <HAL_SAI_InitProtocol+0x46>
 8004a1c:	e008      	b.n	8004a30 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fb15 	bl	8005054 <SAI_InitI2S>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a2e:	e00b      	b.n	8004a48 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 fbba 	bl	80051b0 <SAI_InitPCM>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a40:	e002      	b.n	8004a48 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
      break;
 8004a46:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d104      	bne.n	8004a58 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f808 	bl	8004a64 <HAL_SAI_Init>
 8004a54:	4603      	mov	r3, r0
 8004a56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e156      	b.n	8004d30 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fc ff3a 	bl	8001910 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fc87 	bl	80053b8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d00c      	beq.n	8004acc <HAL_SAI_Init+0x68>
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d80d      	bhi.n	8004ad2 <HAL_SAI_Init+0x6e>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SAI_Init+0x5c>
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d003      	beq.n	8004ac6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004abe:	e008      	b.n	8004ad2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61fb      	str	r3, [r7, #28]
      break;
 8004ac4:	e006      	b.n	8004ad4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004ac6:	2310      	movs	r3, #16
 8004ac8:	61fb      	str	r3, [r7, #28]
      break;
 8004aca:	e003      	b.n	8004ad4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004acc:	2320      	movs	r3, #32
 8004ace:	61fb      	str	r3, [r7, #28]
      break;
 8004ad0:	e000      	b.n	8004ad4 <HAL_SAI_Init+0x70>
      break;
 8004ad2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d81e      	bhi.n	8004b1a <HAL_SAI_Init+0xb6>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <HAL_SAI_Init+0x80>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004afb 	.word	0x08004afb
 8004aec:	08004b03 	.word	0x08004b03
 8004af0:	08004b0b 	.word	0x08004b0b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
    }
    break;
 8004af8:	e010      	b.n	8004b1c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004afe:	617b      	str	r3, [r7, #20]
    }
    break;
 8004b00:	e00c      	b.n	8004b1c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004b02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b06:	617b      	str	r3, [r7, #20]
    }
    break;
 8004b08:	e008      	b.n	8004b1c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b0e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004b18:	e000      	b.n	8004b1c <HAL_SAI_Init+0xb8>
    default:
      break;
 8004b1a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a85      	ldr	r2, [pc, #532]	; (8004d38 <HAL_SAI_Init+0x2d4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_SAI_Init+0xcc>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a84      	ldr	r2, [pc, #528]	; (8004d3c <HAL_SAI_Init+0x2d8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d103      	bne.n	8004b38 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004b30:	4a83      	ldr	r2, [pc, #524]	; (8004d40 <HAL_SAI_Init+0x2dc>)
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e002      	b.n	8004b3e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004b38:	4a82      	ldr	r2, [pc, #520]	; (8004d44 <HAL_SAI_Init+0x2e0>)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d04c      	beq.n	8004be0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a7a      	ldr	r2, [pc, #488]	; (8004d38 <HAL_SAI_Init+0x2d4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d004      	beq.n	8004b5e <HAL_SAI_Init+0xfa>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a78      	ldr	r2, [pc, #480]	; (8004d3c <HAL_SAI_Init+0x2d8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d104      	bne.n	8004b68 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004b5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004b62:	f7ff fdd9 	bl	8004718 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b66:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a76      	ldr	r2, [pc, #472]	; (8004d48 <HAL_SAI_Init+0x2e4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_SAI_Init+0x118>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a75      	ldr	r2, [pc, #468]	; (8004d4c <HAL_SAI_Init+0x2e8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d104      	bne.n	8004b86 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004b7c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004b80:	f7ff fdca 	bl	8004718 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b84:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	461a      	mov	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	025b      	lsls	r3, r3, #9
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a6b      	ldr	r2, [pc, #428]	; (8004d50 <HAL_SAI_Init+0x2ec>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	08da      	lsrs	r2, r3, #3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004bac:	68f9      	ldr	r1, [r7, #12]
 8004bae:	4b68      	ldr	r3, [pc, #416]	; (8004d50 <HAL_SAI_Init+0x2ec>)
 8004bb0:	fba3 2301 	umull	r2, r3, r3, r1
 8004bb4:	08da      	lsrs	r2, r3, #3
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	1aca      	subs	r2, r1, r3
 8004bc0:	2a08      	cmp	r2, #8
 8004bc2:	d904      	bls.n	8004bce <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d104      	bne.n	8004be0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	085a      	lsrs	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_SAI_Init+0x18c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d109      	bne.n	8004c04 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_SAI_Init+0x198>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e001      	b.n	8004c00 <HAL_SAI_Init+0x19c>
 8004bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	e008      	b.n	8004c16 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d102      	bne.n	8004c12 <HAL_SAI_Init+0x1ae>
 8004c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c10:	e000      	b.n	8004c14 <HAL_SAI_Init+0x1b0>
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6819      	ldr	r1, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	4b4c      	ldr	r3, [pc, #304]	; (8004d54 <HAL_SAI_Init+0x2f0>)
 8004c22:	400b      	ands	r3, r1
 8004c24:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6819      	ldr	r1, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c3a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	431a      	orrs	r2, r3
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8004c4e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c5a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	051b      	lsls	r3, r3, #20
 8004c62:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6859      	ldr	r1, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b38      	ldr	r3, [pc, #224]	; (8004d58 <HAL_SAI_Init+0x2f4>)
 8004c78:	400b      	ands	r3, r1
 8004c7a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6859      	ldr	r1, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6899      	ldr	r1, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4b2d      	ldr	r3, [pc, #180]	; (8004d5c <HAL_SAI_Init+0x2f8>)
 8004ca6:	400b      	ands	r3, r1
 8004ca8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6899      	ldr	r1, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004cba:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004cc0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004cc6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004cd0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68d9      	ldr	r1, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004ce8:	400b      	ands	r3, r1
 8004cea:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68d9      	ldr	r1, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfa:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d00:	041b      	lsls	r3, r3, #16
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3720      	adds	r7, #32
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40015804 	.word	0x40015804
 8004d3c:	40015824 	.word	0x40015824
 8004d40:	40015800 	.word	0x40015800
 8004d44:	40015c00 	.word	0x40015c00
 8004d48:	40015c04 	.word	0x40015c04
 8004d4c:	40015c24 	.word	0x40015c24
 8004d50:	cccccccd 	.word	0xcccccccd
 8004d54:	ff05c010 	.word	0xff05c010
 8004d58:	ffff1ff0 	.word	0xffff1ff0
 8004d5c:	fff88000 	.word	0xfff88000

08004d60 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8004d70:	f7fc ffb0 	bl	8001cd4 <HAL_GetTick>
 8004d74:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_SAI_Transmit+0x22>
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e0b6      	b.n	8004ef4 <HAL_SAI_Transmit+0x194>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	f040 80af 	bne.w	8004ef2 <HAL_SAI_Transmit+0x192>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_SAI_Transmit+0x42>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e0a8      	b.n	8004ef4 <HAL_SAI_Transmit+0x194>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->XferSize = Size;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	88fa      	ldrh	r2, [r7, #6]
 8004dae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	88fa      	ldrh	r2, [r7, #6]
 8004db6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2212      	movs	r2, #18
 8004dc4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d17a      	bne.n	8004ed4 <HAL_SAI_Transmit+0x174>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fa66 	bl	80052b0 <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004df2:	601a      	str	r2, [r3, #0]
    }

    while (hsai->XferCount > 0)
 8004df4:	e06e      	b.n	8004ed4 <HAL_SAI_Transmit+0x174>
    {
      /* Write data if the FIFO is not full */
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e04:	d035      	beq.n	8004e72 <HAL_SAI_Transmit+0x112>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d10d      	bne.n	8004e2a <HAL_SAI_Transmit+0xca>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d109      	bne.n	8004e2a <HAL_SAI_Transmit+0xca>
        {
          hsai->Instance->DR = (*hsai->pBuffPtr++);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e1a:	1c59      	adds	r1, r3, #1
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	6651      	str	r1, [r2, #100]	; 0x64
 8004e20:	781a      	ldrb	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	61da      	str	r2, [r3, #28]
 8004e28:	e01a      	b.n	8004e60 <HAL_SAI_Transmit+0x100>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2e:	2b80      	cmp	r3, #128	; 0x80
 8004e30:	d80b      	bhi.n	8004e4a <HAL_SAI_Transmit+0xea>
        {
          hsai->Instance->DR = *((uint16_t *)hsai->pBuffPtr);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e36:	881a      	ldrh	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 2;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e42:	1c9a      	adds	r2, r3, #2
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	665a      	str	r2, [r3, #100]	; 0x64
 8004e48:	e00a      	b.n	8004e60 <HAL_SAI_Transmit+0x100>
        }
        else
        {
          hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 4;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e5a:	1d1a      	adds	r2, r3, #4
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        hsai->XferCount--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004e70:	e030      	b.n	8004ed4 <HAL_SAI_Transmit+0x174>
      }
      else
      {
        /* Check for the Timeout */
        if ((Timeout != HAL_MAX_DELAY) && ((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout)))
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e78:	d02c      	beq.n	8004ed4 <HAL_SAI_Transmit+0x174>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <HAL_SAI_Transmit+0x130>
 8004e80:	f7fc ff28 	bl	8001cd4 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d221      	bcs.n	8004ed4 <HAL_SAI_Transmit+0x174>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea8:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 fa84 	bl	80053b8 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0208 	orr.w	r2, r2, #8
 8004ebe:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e00f      	b.n	8004ef4 <HAL_SAI_Transmit+0x194>
    while (hsai->XferCount > 0)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d18b      	bne.n	8004df6 <HAL_SAI_Transmit+0x96>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e000      	b.n	8004ef4 <HAL_SAI_Transmit+0x194>
  }
  else
  {
    return HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
  }
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_SAI_Receive_DMA+0x1a>
 8004f10:	88fb      	ldrh	r3, [r7, #6]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e074      	b.n	8005004 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d16d      	bne.n	8005002 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_SAI_Receive_DMA+0x38>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e067      	b.n	8005004 <HAL_SAI_Receive_DMA+0x108>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	88fa      	ldrh	r2, [r7, #6]
 8004f46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	88fa      	ldrh	r2, [r7, #6]
 8004f4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2222      	movs	r2, #34	; 0x22
 8004f5e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f66:	4a29      	ldr	r2, [pc, #164]	; (800500c <HAL_SAI_Receive_DMA+0x110>)
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	4a28      	ldr	r2, [pc, #160]	; (8005010 <HAL_SAI_Receive_DMA+0x114>)
 8004f70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f76:	4a27      	ldr	r2, [pc, #156]	; (8005014 <HAL_SAI_Receive_DMA+0x118>)
 8004f78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	2200      	movs	r2, #0
 8004f80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	331c      	adds	r3, #28
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f92:	461a      	mov	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004f9a:	f7fd f867 	bl	800206c <HAL_DMA_Start_IT>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e029      	b.n	8005004 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f9c9 	bl	800534a <SAI_InterruptFlag>
 8004fb8:	4601      	mov	r1, r0
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d107      	bne.n	8004ff6 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ff4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e000      	b.n	8005004 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005002:	2302      	movs	r3, #2
  }
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	08005489 	.word	0x08005489
 8005010:	08005429 	.word	0x08005429
 8005014:	080054a5 	.word	0x080054a5

08005018 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <SAI_InitI2S+0x2a>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d103      	bne.n	8005086 <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	63da      	str	r2, [r3, #60]	; 0x3c
 8005084:	e002      	b.n	800508c <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005092:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800509a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e076      	b.n	80051a4 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d107      	bne.n	80050cc <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80050c8:	651a      	str	r2, [r3, #80]	; 0x50
 80050ca:	e006      	b.n	80050da <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050d2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	651a      	str	r2, [r3, #80]	; 0x50
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d84f      	bhi.n	8005180 <SAI_InitI2S+0x12c>
 80050e0:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <SAI_InitI2S+0x94>)
 80050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e6:	bf00      	nop
 80050e8:	080050f9 	.word	0x080050f9
 80050ec:	0800511b 	.word	0x0800511b
 80050f0:	0800513d 	.word	0x0800513d
 80050f4:	0800515f 	.word	0x0800515f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2280      	movs	r2, #128	; 0x80
 80050fc:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	085b      	lsrs	r3, r3, #1
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	085b      	lsrs	r3, r3, #1
 800510c:	011a      	lsls	r2, r3, #4
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2240      	movs	r2, #64	; 0x40
 8005116:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005118:	e034      	b.n	8005184 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2280      	movs	r2, #128	; 0x80
 800511e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	019a      	lsls	r2, r3, #6
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2280      	movs	r2, #128	; 0x80
 8005138:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800513a:	e023      	b.n	8005184 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	22c0      	movs	r2, #192	; 0xc0
 8005140:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	085b      	lsrs	r3, r3, #1
 8005146:	019a      	lsls	r2, r3, #6
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2280      	movs	r2, #128	; 0x80
 800515a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800515c:	e012      	b.n	8005184 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	22e0      	movs	r2, #224	; 0xe0
 8005162:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	019a      	lsls	r2, r3, #6
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	085b      	lsrs	r3, r3, #1
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2280      	movs	r2, #128	; 0x80
 800517c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800517e:	e001      	b.n	8005184 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e00f      	b.n	80051a4 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d10b      	bne.n	80051a2 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d102      	bne.n	8005196 <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2210      	movs	r2, #16
 8005194:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d102      	bne.n	80051a2 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2208      	movs	r2, #8
 80051a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <SAI_InitPCM+0x2a>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d103      	bne.n	80051e2 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	63da      	str	r2, [r3, #60]	; 0x3c
 80051e0:	e002      	b.n	80051e8 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80051fc:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005210:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b04      	cmp	r3, #4
 8005216:	d103      	bne.n	8005220 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	645a      	str	r2, [r3, #68]	; 0x44
 800521e:	e002      	b.n	8005226 <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	220d      	movs	r2, #13
 8005224:	645a      	str	r2, [r3, #68]	; 0x44
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b03      	cmp	r3, #3
 800522a:	d837      	bhi.n	800529c <SAI_InitPCM+0xec>
 800522c:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <SAI_InitPCM+0x84>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	08005245 	.word	0x08005245
 8005238:	0800525b 	.word	0x0800525b
 800523c:	08005271 	.word	0x08005271
 8005240:	08005287 	.word	0x08005287
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2280      	movs	r2, #128	; 0x80
 8005248:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	011a      	lsls	r2, r3, #4
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2240      	movs	r2, #64	; 0x40
 8005256:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005258:	e022      	b.n	80052a0 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2280      	movs	r2, #128	; 0x80
 800525e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2280      	movs	r2, #128	; 0x80
 800526c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800526e:	e017      	b.n	80052a0 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	22c0      	movs	r2, #192	; 0xc0
 8005274:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2280      	movs	r2, #128	; 0x80
 8005282:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005284:	e00c      	b.n	80052a0 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	22e0      	movs	r2, #224	; 0xe0
 800528a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2280      	movs	r2, #128	; 0x80
 8005298:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800529a:	e001      	b.n	80052a0 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop

080052b0 <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* fill the fifo with data before to enabled the SAI */
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 80052b8:	e034      	b.n	8005324 <SAI_FillFifo+0x74>
  {
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d10d      	bne.n	80052de <SAI_FillFifo+0x2e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <SAI_FillFifo+0x2e>
    {
      hsai->Instance->DR = (*hsai->pBuffPtr++);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ce:	1c59      	adds	r1, r3, #1
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6651      	str	r1, [r2, #100]	; 0x64
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	61da      	str	r2, [r3, #28]
 80052dc:	e01a      	b.n	8005314 <SAI_FillFifo+0x64>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e2:	2b80      	cmp	r3, #128	; 0x80
 80052e4:	d80b      	bhi.n	80052fe <SAI_FillFifo+0x4e>
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f6:	1c9a      	adds	r2, r3, #2
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	665a      	str	r2, [r3, #100]	; 0x64
 80052fc:	e00a      	b.n	8005314 <SAI_FillFifo+0x64>
    }
    else
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 4;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800530e:	1d1a      	adds	r2, r3, #4
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	665a      	str	r2, [r3, #100]	; 0x64
    }
    hsai->XferCount--;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800532e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005332:	d004      	beq.n	800533e <SAI_FillFifo+0x8e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1bd      	bne.n	80052ba <SAI_FillFifo+0xa>
  }
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005354:	2301      	movs	r3, #1
 8005356:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d103      	bne.n	8005366 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f043 0308 	orr.w	r3, r3, #8
 8005364:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536a:	2b08      	cmp	r3, #8
 800536c:	d10b      	bne.n	8005386 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005372:	2b03      	cmp	r3, #3
 8005374:	d003      	beq.n	800537e <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d103      	bne.n	8005386 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f043 0310 	orr.w	r3, r3, #16
 8005384:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b03      	cmp	r3, #3
 800538c:	d003      	beq.n	8005396 <SAI_InterruptFlag+0x4c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d104      	bne.n	80053a0 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e003      	b.n	80053a8 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f043 0304 	orr.w	r3, r3, #4
 80053a6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80053a8:	68fb      	ldr	r3, [r7, #12]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80053c0:	4b17      	ldr	r3, [pc, #92]	; (8005420 <SAI_Disable+0x68>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a17      	ldr	r2, [pc, #92]	; (8005424 <SAI_Disable+0x6c>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	0b1b      	lsrs	r3, r3, #12
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80053e2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1e5a      	subs	r2, r3, #1
 80053e8:	60fa      	str	r2, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10a      	bne.n	8005404 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	72fb      	strb	r3, [r7, #11]
      break;
 8005402:	e006      	b.n	8005412 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e8      	bne.n	80053e4 <SAI_Disable+0x2c>

  return status;
 8005412:	7afb      	ldrb	r3, [r7, #11]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	20075314 	.word	0x20075314
 8005424:	95cbec1b 	.word	0x95cbec1b

08005428 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543e:	d01c      	beq.n	800547a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800544e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005458:	2100      	movs	r1, #0
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff ff75 	bl	800534a <SAI_InterruptFlag>
 8005460:	4603      	mov	r3, r0
 8005462:	43d9      	mvns	r1, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	400a      	ands	r2, r1
 8005470:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f7ff fdcc 	bl	8005018 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff fdc8 	bl	800502c <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800549c:	bf00      	nop
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d004      	beq.n	80054d6 <SAI_DMAError+0x32>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d112      	bne.n	80054fc <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80054e4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f7ff ff66 	bl	80053b8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff fd9f 	bl	8005040 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e040      	b.n	800559e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005520:	2b00      	cmp	r3, #0
 8005522:	d106      	bne.n	8005532 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fc f959 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2224      	movs	r2, #36	; 0x24
 8005536:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0201 	bic.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f87f 	bl	800564c <UART_SetConfig>
 800554e:	4603      	mov	r3, r0
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e022      	b.n	800559e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fad5 	bl	8005b10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005574:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005584:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0201 	orr.w	r2, r2, #1
 8005594:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fb5c 	bl	8005c54 <UART_CheckIdleState>
 800559c:	4603      	mov	r3, r0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	4613      	mov	r3, r2
 80055b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d12c      	bne.n	8005616 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_UART_Receive_DMA+0x22>
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e025      	b.n	8005618 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_UART_Receive_DMA+0x34>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e01e      	b.n	8005618 <HAL_UART_Receive_DMA+0x72>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005604:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	461a      	mov	r2, r3
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 fbe7 	bl	8005de0 <UART_Start_Receive_DMA>
 8005612:	4603      	mov	r3, r0
 8005614:	e000      	b.n	8005618 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005616:	2302      	movs	r3, #2
  }
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4ba7      	ldr	r3, [pc, #668]	; (8005914 <UART_SetConfig+0x2c8>)
 8005678:	4013      	ands	r3, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	6979      	ldr	r1, [r7, #20]
 8005680:	430b      	orrs	r3, r1
 8005682:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a95      	ldr	r2, [pc, #596]	; (8005918 <UART_SetConfig+0x2cc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d120      	bne.n	800570a <UART_SetConfig+0xbe>
 80056c8:	4b94      	ldr	r3, [pc, #592]	; (800591c <UART_SetConfig+0x2d0>)
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	d816      	bhi.n	8005704 <UART_SetConfig+0xb8>
 80056d6:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <UART_SetConfig+0x90>)
 80056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056dc:	080056ed 	.word	0x080056ed
 80056e0:	080056f9 	.word	0x080056f9
 80056e4:	080056f3 	.word	0x080056f3
 80056e8:	080056ff 	.word	0x080056ff
 80056ec:	2301      	movs	r3, #1
 80056ee:	77fb      	strb	r3, [r7, #31]
 80056f0:	e14f      	b.n	8005992 <UART_SetConfig+0x346>
 80056f2:	2302      	movs	r3, #2
 80056f4:	77fb      	strb	r3, [r7, #31]
 80056f6:	e14c      	b.n	8005992 <UART_SetConfig+0x346>
 80056f8:	2304      	movs	r3, #4
 80056fa:	77fb      	strb	r3, [r7, #31]
 80056fc:	e149      	b.n	8005992 <UART_SetConfig+0x346>
 80056fe:	2308      	movs	r3, #8
 8005700:	77fb      	strb	r3, [r7, #31]
 8005702:	e146      	b.n	8005992 <UART_SetConfig+0x346>
 8005704:	2310      	movs	r3, #16
 8005706:	77fb      	strb	r3, [r7, #31]
 8005708:	e143      	b.n	8005992 <UART_SetConfig+0x346>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a84      	ldr	r2, [pc, #528]	; (8005920 <UART_SetConfig+0x2d4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d132      	bne.n	800577a <UART_SetConfig+0x12e>
 8005714:	4b81      	ldr	r3, [pc, #516]	; (800591c <UART_SetConfig+0x2d0>)
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571a:	f003 030c 	and.w	r3, r3, #12
 800571e:	2b0c      	cmp	r3, #12
 8005720:	d828      	bhi.n	8005774 <UART_SetConfig+0x128>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <UART_SetConfig+0xdc>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	0800575d 	.word	0x0800575d
 800572c:	08005775 	.word	0x08005775
 8005730:	08005775 	.word	0x08005775
 8005734:	08005775 	.word	0x08005775
 8005738:	08005769 	.word	0x08005769
 800573c:	08005775 	.word	0x08005775
 8005740:	08005775 	.word	0x08005775
 8005744:	08005775 	.word	0x08005775
 8005748:	08005763 	.word	0x08005763
 800574c:	08005775 	.word	0x08005775
 8005750:	08005775 	.word	0x08005775
 8005754:	08005775 	.word	0x08005775
 8005758:	0800576f 	.word	0x0800576f
 800575c:	2300      	movs	r3, #0
 800575e:	77fb      	strb	r3, [r7, #31]
 8005760:	e117      	b.n	8005992 <UART_SetConfig+0x346>
 8005762:	2302      	movs	r3, #2
 8005764:	77fb      	strb	r3, [r7, #31]
 8005766:	e114      	b.n	8005992 <UART_SetConfig+0x346>
 8005768:	2304      	movs	r3, #4
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	e111      	b.n	8005992 <UART_SetConfig+0x346>
 800576e:	2308      	movs	r3, #8
 8005770:	77fb      	strb	r3, [r7, #31]
 8005772:	e10e      	b.n	8005992 <UART_SetConfig+0x346>
 8005774:	2310      	movs	r3, #16
 8005776:	77fb      	strb	r3, [r7, #31]
 8005778:	e10b      	b.n	8005992 <UART_SetConfig+0x346>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a69      	ldr	r2, [pc, #420]	; (8005924 <UART_SetConfig+0x2d8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d120      	bne.n	80057c6 <UART_SetConfig+0x17a>
 8005784:	4b65      	ldr	r3, [pc, #404]	; (800591c <UART_SetConfig+0x2d0>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800578e:	2b30      	cmp	r3, #48	; 0x30
 8005790:	d013      	beq.n	80057ba <UART_SetConfig+0x16e>
 8005792:	2b30      	cmp	r3, #48	; 0x30
 8005794:	d814      	bhi.n	80057c0 <UART_SetConfig+0x174>
 8005796:	2b20      	cmp	r3, #32
 8005798:	d009      	beq.n	80057ae <UART_SetConfig+0x162>
 800579a:	2b20      	cmp	r3, #32
 800579c:	d810      	bhi.n	80057c0 <UART_SetConfig+0x174>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <UART_SetConfig+0x15c>
 80057a2:	2b10      	cmp	r3, #16
 80057a4:	d006      	beq.n	80057b4 <UART_SetConfig+0x168>
 80057a6:	e00b      	b.n	80057c0 <UART_SetConfig+0x174>
 80057a8:	2300      	movs	r3, #0
 80057aa:	77fb      	strb	r3, [r7, #31]
 80057ac:	e0f1      	b.n	8005992 <UART_SetConfig+0x346>
 80057ae:	2302      	movs	r3, #2
 80057b0:	77fb      	strb	r3, [r7, #31]
 80057b2:	e0ee      	b.n	8005992 <UART_SetConfig+0x346>
 80057b4:	2304      	movs	r3, #4
 80057b6:	77fb      	strb	r3, [r7, #31]
 80057b8:	e0eb      	b.n	8005992 <UART_SetConfig+0x346>
 80057ba:	2308      	movs	r3, #8
 80057bc:	77fb      	strb	r3, [r7, #31]
 80057be:	e0e8      	b.n	8005992 <UART_SetConfig+0x346>
 80057c0:	2310      	movs	r3, #16
 80057c2:	77fb      	strb	r3, [r7, #31]
 80057c4:	e0e5      	b.n	8005992 <UART_SetConfig+0x346>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a57      	ldr	r2, [pc, #348]	; (8005928 <UART_SetConfig+0x2dc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d120      	bne.n	8005812 <UART_SetConfig+0x1c6>
 80057d0:	4b52      	ldr	r3, [pc, #328]	; (800591c <UART_SetConfig+0x2d0>)
 80057d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057da:	2bc0      	cmp	r3, #192	; 0xc0
 80057dc:	d013      	beq.n	8005806 <UART_SetConfig+0x1ba>
 80057de:	2bc0      	cmp	r3, #192	; 0xc0
 80057e0:	d814      	bhi.n	800580c <UART_SetConfig+0x1c0>
 80057e2:	2b80      	cmp	r3, #128	; 0x80
 80057e4:	d009      	beq.n	80057fa <UART_SetConfig+0x1ae>
 80057e6:	2b80      	cmp	r3, #128	; 0x80
 80057e8:	d810      	bhi.n	800580c <UART_SetConfig+0x1c0>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <UART_SetConfig+0x1a8>
 80057ee:	2b40      	cmp	r3, #64	; 0x40
 80057f0:	d006      	beq.n	8005800 <UART_SetConfig+0x1b4>
 80057f2:	e00b      	b.n	800580c <UART_SetConfig+0x1c0>
 80057f4:	2300      	movs	r3, #0
 80057f6:	77fb      	strb	r3, [r7, #31]
 80057f8:	e0cb      	b.n	8005992 <UART_SetConfig+0x346>
 80057fa:	2302      	movs	r3, #2
 80057fc:	77fb      	strb	r3, [r7, #31]
 80057fe:	e0c8      	b.n	8005992 <UART_SetConfig+0x346>
 8005800:	2304      	movs	r3, #4
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e0c5      	b.n	8005992 <UART_SetConfig+0x346>
 8005806:	2308      	movs	r3, #8
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e0c2      	b.n	8005992 <UART_SetConfig+0x346>
 800580c:	2310      	movs	r3, #16
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e0bf      	b.n	8005992 <UART_SetConfig+0x346>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a45      	ldr	r2, [pc, #276]	; (800592c <UART_SetConfig+0x2e0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d125      	bne.n	8005868 <UART_SetConfig+0x21c>
 800581c:	4b3f      	ldr	r3, [pc, #252]	; (800591c <UART_SetConfig+0x2d0>)
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800582a:	d017      	beq.n	800585c <UART_SetConfig+0x210>
 800582c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005830:	d817      	bhi.n	8005862 <UART_SetConfig+0x216>
 8005832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005836:	d00b      	beq.n	8005850 <UART_SetConfig+0x204>
 8005838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800583c:	d811      	bhi.n	8005862 <UART_SetConfig+0x216>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <UART_SetConfig+0x1fe>
 8005842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005846:	d006      	beq.n	8005856 <UART_SetConfig+0x20a>
 8005848:	e00b      	b.n	8005862 <UART_SetConfig+0x216>
 800584a:	2300      	movs	r3, #0
 800584c:	77fb      	strb	r3, [r7, #31]
 800584e:	e0a0      	b.n	8005992 <UART_SetConfig+0x346>
 8005850:	2302      	movs	r3, #2
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e09d      	b.n	8005992 <UART_SetConfig+0x346>
 8005856:	2304      	movs	r3, #4
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e09a      	b.n	8005992 <UART_SetConfig+0x346>
 800585c:	2308      	movs	r3, #8
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e097      	b.n	8005992 <UART_SetConfig+0x346>
 8005862:	2310      	movs	r3, #16
 8005864:	77fb      	strb	r3, [r7, #31]
 8005866:	e094      	b.n	8005992 <UART_SetConfig+0x346>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a30      	ldr	r2, [pc, #192]	; (8005930 <UART_SetConfig+0x2e4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d125      	bne.n	80058be <UART_SetConfig+0x272>
 8005872:	4b2a      	ldr	r3, [pc, #168]	; (800591c <UART_SetConfig+0x2d0>)
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005878:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800587c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005880:	d017      	beq.n	80058b2 <UART_SetConfig+0x266>
 8005882:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005886:	d817      	bhi.n	80058b8 <UART_SetConfig+0x26c>
 8005888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588c:	d00b      	beq.n	80058a6 <UART_SetConfig+0x25a>
 800588e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005892:	d811      	bhi.n	80058b8 <UART_SetConfig+0x26c>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <UART_SetConfig+0x254>
 8005898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589c:	d006      	beq.n	80058ac <UART_SetConfig+0x260>
 800589e:	e00b      	b.n	80058b8 <UART_SetConfig+0x26c>
 80058a0:	2301      	movs	r3, #1
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e075      	b.n	8005992 <UART_SetConfig+0x346>
 80058a6:	2302      	movs	r3, #2
 80058a8:	77fb      	strb	r3, [r7, #31]
 80058aa:	e072      	b.n	8005992 <UART_SetConfig+0x346>
 80058ac:	2304      	movs	r3, #4
 80058ae:	77fb      	strb	r3, [r7, #31]
 80058b0:	e06f      	b.n	8005992 <UART_SetConfig+0x346>
 80058b2:	2308      	movs	r3, #8
 80058b4:	77fb      	strb	r3, [r7, #31]
 80058b6:	e06c      	b.n	8005992 <UART_SetConfig+0x346>
 80058b8:	2310      	movs	r3, #16
 80058ba:	77fb      	strb	r3, [r7, #31]
 80058bc:	e069      	b.n	8005992 <UART_SetConfig+0x346>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1c      	ldr	r2, [pc, #112]	; (8005934 <UART_SetConfig+0x2e8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d137      	bne.n	8005938 <UART_SetConfig+0x2ec>
 80058c8:	4b14      	ldr	r3, [pc, #80]	; (800591c <UART_SetConfig+0x2d0>)
 80058ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80058d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058d6:	d017      	beq.n	8005908 <UART_SetConfig+0x2bc>
 80058d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058dc:	d817      	bhi.n	800590e <UART_SetConfig+0x2c2>
 80058de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e2:	d00b      	beq.n	80058fc <UART_SetConfig+0x2b0>
 80058e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e8:	d811      	bhi.n	800590e <UART_SetConfig+0x2c2>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <UART_SetConfig+0x2aa>
 80058ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f2:	d006      	beq.n	8005902 <UART_SetConfig+0x2b6>
 80058f4:	e00b      	b.n	800590e <UART_SetConfig+0x2c2>
 80058f6:	2300      	movs	r3, #0
 80058f8:	77fb      	strb	r3, [r7, #31]
 80058fa:	e04a      	b.n	8005992 <UART_SetConfig+0x346>
 80058fc:	2302      	movs	r3, #2
 80058fe:	77fb      	strb	r3, [r7, #31]
 8005900:	e047      	b.n	8005992 <UART_SetConfig+0x346>
 8005902:	2304      	movs	r3, #4
 8005904:	77fb      	strb	r3, [r7, #31]
 8005906:	e044      	b.n	8005992 <UART_SetConfig+0x346>
 8005908:	2308      	movs	r3, #8
 800590a:	77fb      	strb	r3, [r7, #31]
 800590c:	e041      	b.n	8005992 <UART_SetConfig+0x346>
 800590e:	2310      	movs	r3, #16
 8005910:	77fb      	strb	r3, [r7, #31]
 8005912:	e03e      	b.n	8005992 <UART_SetConfig+0x346>
 8005914:	efff69f3 	.word	0xefff69f3
 8005918:	40011000 	.word	0x40011000
 800591c:	40023800 	.word	0x40023800
 8005920:	40004400 	.word	0x40004400
 8005924:	40004800 	.word	0x40004800
 8005928:	40004c00 	.word	0x40004c00
 800592c:	40005000 	.word	0x40005000
 8005930:	40011400 	.word	0x40011400
 8005934:	40007800 	.word	0x40007800
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a71      	ldr	r2, [pc, #452]	; (8005b04 <UART_SetConfig+0x4b8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d125      	bne.n	800598e <UART_SetConfig+0x342>
 8005942:	4b71      	ldr	r3, [pc, #452]	; (8005b08 <UART_SetConfig+0x4bc>)
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005948:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800594c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005950:	d017      	beq.n	8005982 <UART_SetConfig+0x336>
 8005952:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005956:	d817      	bhi.n	8005988 <UART_SetConfig+0x33c>
 8005958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800595c:	d00b      	beq.n	8005976 <UART_SetConfig+0x32a>
 800595e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005962:	d811      	bhi.n	8005988 <UART_SetConfig+0x33c>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <UART_SetConfig+0x324>
 8005968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800596c:	d006      	beq.n	800597c <UART_SetConfig+0x330>
 800596e:	e00b      	b.n	8005988 <UART_SetConfig+0x33c>
 8005970:	2300      	movs	r3, #0
 8005972:	77fb      	strb	r3, [r7, #31]
 8005974:	e00d      	b.n	8005992 <UART_SetConfig+0x346>
 8005976:	2302      	movs	r3, #2
 8005978:	77fb      	strb	r3, [r7, #31]
 800597a:	e00a      	b.n	8005992 <UART_SetConfig+0x346>
 800597c:	2304      	movs	r3, #4
 800597e:	77fb      	strb	r3, [r7, #31]
 8005980:	e007      	b.n	8005992 <UART_SetConfig+0x346>
 8005982:	2308      	movs	r3, #8
 8005984:	77fb      	strb	r3, [r7, #31]
 8005986:	e004      	b.n	8005992 <UART_SetConfig+0x346>
 8005988:	2310      	movs	r3, #16
 800598a:	77fb      	strb	r3, [r7, #31]
 800598c:	e001      	b.n	8005992 <UART_SetConfig+0x346>
 800598e:	2310      	movs	r3, #16
 8005990:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800599a:	d15b      	bne.n	8005a54 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800599c:	7ffb      	ldrb	r3, [r7, #31]
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d827      	bhi.n	80059f2 <UART_SetConfig+0x3a6>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <UART_SetConfig+0x35c>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059cd 	.word	0x080059cd
 80059ac:	080059d5 	.word	0x080059d5
 80059b0:	080059dd 	.word	0x080059dd
 80059b4:	080059f3 	.word	0x080059f3
 80059b8:	080059e3 	.word	0x080059e3
 80059bc:	080059f3 	.word	0x080059f3
 80059c0:	080059f3 	.word	0x080059f3
 80059c4:	080059f3 	.word	0x080059f3
 80059c8:	080059eb 	.word	0x080059eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059cc:	f7fe fa54 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 80059d0:	61b8      	str	r0, [r7, #24]
        break;
 80059d2:	e013      	b.n	80059fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059d4:	f7fe fa64 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 80059d8:	61b8      	str	r0, [r7, #24]
        break;
 80059da:	e00f      	b.n	80059fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059dc:	4b4b      	ldr	r3, [pc, #300]	; (8005b0c <UART_SetConfig+0x4c0>)
 80059de:	61bb      	str	r3, [r7, #24]
        break;
 80059e0:	e00c      	b.n	80059fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e2:	f7fe f987 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 80059e6:	61b8      	str	r0, [r7, #24]
        break;
 80059e8:	e008      	b.n	80059fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ee:	61bb      	str	r3, [r7, #24]
        break;
 80059f0:	e004      	b.n	80059fc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	77bb      	strb	r3, [r7, #30]
        break;
 80059fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d074      	beq.n	8005aec <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	005a      	lsls	r2, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	441a      	add	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b0f      	cmp	r3, #15
 8005a1e:	d916      	bls.n	8005a4e <UART_SetConfig+0x402>
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a26:	d212      	bcs.n	8005a4e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f023 030f 	bic.w	r3, r3, #15
 8005a30:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	085b      	lsrs	r3, r3, #1
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	89fb      	ldrh	r3, [r7, #14]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	89fa      	ldrh	r2, [r7, #14]
 8005a4a:	60da      	str	r2, [r3, #12]
 8005a4c:	e04e      	b.n	8005aec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	77bb      	strb	r3, [r7, #30]
 8005a52:	e04b      	b.n	8005aec <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a54:	7ffb      	ldrb	r3, [r7, #31]
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d827      	bhi.n	8005aaa <UART_SetConfig+0x45e>
 8005a5a:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <UART_SetConfig+0x414>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005a85 	.word	0x08005a85
 8005a64:	08005a8d 	.word	0x08005a8d
 8005a68:	08005a95 	.word	0x08005a95
 8005a6c:	08005aab 	.word	0x08005aab
 8005a70:	08005a9b 	.word	0x08005a9b
 8005a74:	08005aab 	.word	0x08005aab
 8005a78:	08005aab 	.word	0x08005aab
 8005a7c:	08005aab 	.word	0x08005aab
 8005a80:	08005aa3 	.word	0x08005aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a84:	f7fe f9f8 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8005a88:	61b8      	str	r0, [r7, #24]
        break;
 8005a8a:	e013      	b.n	8005ab4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a8c:	f7fe fa08 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 8005a90:	61b8      	str	r0, [r7, #24]
        break;
 8005a92:	e00f      	b.n	8005ab4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a94:	4b1d      	ldr	r3, [pc, #116]	; (8005b0c <UART_SetConfig+0x4c0>)
 8005a96:	61bb      	str	r3, [r7, #24]
        break;
 8005a98:	e00c      	b.n	8005ab4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a9a:	f7fe f92b 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8005a9e:	61b8      	str	r0, [r7, #24]
        break;
 8005aa0:	e008      	b.n	8005ab4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aa6:	61bb      	str	r3, [r7, #24]
        break;
 8005aa8:	e004      	b.n	8005ab4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	77bb      	strb	r3, [r7, #30]
        break;
 8005ab2:	bf00      	nop
    }

    if (pclk != 0U)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d018      	beq.n	8005aec <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	085a      	lsrs	r2, r3, #1
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	441a      	add	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b0f      	cmp	r3, #15
 8005ad4:	d908      	bls.n	8005ae8 <UART_SetConfig+0x49c>
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005adc:	d204      	bcs.n	8005ae8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	60da      	str	r2, [r3, #12]
 8005ae6:	e001      	b.n	8005aec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005af8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	40007c00 	.word	0x40007c00
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	00f42400 	.word	0x00f42400

08005b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00a      	beq.n	8005b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00a      	beq.n	8005bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01a      	beq.n	8005c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c0e:	d10a      	bne.n	8005c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	605a      	str	r2, [r3, #4]
  }
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c64:	f7fc f836 	bl	8001cd4 <HAL_GetTick>
 8005c68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d10e      	bne.n	8005c96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f82d 	bl	8005ce6 <UART_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e023      	b.n	8005cde <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d10e      	bne.n	8005cc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f817 	bl	8005ce6 <UART_WaitOnFlagUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e00d      	b.n	8005cde <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	603b      	str	r3, [r7, #0]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf6:	e05e      	b.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfe:	d05a      	beq.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d00:	f7fb ffe8 	bl	8001cd4 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d302      	bcc.n	8005d16 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d11b      	bne.n	8005d4e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0201 	bic.w	r2, r2, #1
 8005d34:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e043      	b.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d02c      	beq.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d6a:	d124      	bne.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d84:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0201 	bic.w	r2, r2, #1
 8005d94:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e00f      	b.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	bf0c      	ite	eq
 8005dc6:	2301      	moveq	r3, #1
 8005dc8:	2300      	movne	r3, #0
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	461a      	mov	r2, r3
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d091      	beq.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	88fa      	ldrh	r2, [r7, #6]
 8005df8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2222      	movs	r2, #34	; 0x22
 8005e08:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d02b      	beq.n	8005e6a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e16:	4a25      	ldr	r2, [pc, #148]	; (8005eac <UART_Start_Receive_DMA+0xcc>)
 8005e18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	4a24      	ldr	r2, [pc, #144]	; (8005eb0 <UART_Start_Receive_DMA+0xd0>)
 8005e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	4a23      	ldr	r2, [pc, #140]	; (8005eb4 <UART_Start_Receive_DMA+0xd4>)
 8005e28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2e:	2200      	movs	r2, #0
 8005e30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3324      	adds	r3, #36	; 0x24
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e42:	461a      	mov	r2, r3
 8005e44:	88fb      	ldrh	r3, [r7, #6]
 8005e46:	f7fc f911 	bl	800206c <HAL_DMA_Start_IT>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00c      	beq.n	8005e6a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2210      	movs	r2, #16
 8005e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e01c      	b.n	8005ea4 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e80:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0201 	orr.w	r2, r2, #1
 8005e90:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ea0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	08005f41 	.word	0x08005f41
 8005eb0:	08005fd5 	.word	0x08005fd5
 8005eb4:	0800600d 	.word	0x0800600d

08005eb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005ece:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ef8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0201 	bic.w	r2, r2, #1
 8005f08:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d107      	bne.n	8005f22 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0210 	bic.w	r2, r2, #16
 8005f20:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f56:	d02a      	beq.n	8005fae <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f6e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0201 	bic.w	r2, r2, #1
 8005f7e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f8e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2220      	movs	r2, #32
 8005f94:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d107      	bne.n	8005fae <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0210 	bic.w	r2, r2, #16
 8005fac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d107      	bne.n	8005fc6 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff fb38 	bl	8005634 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fc4:	e002      	b.n	8005fcc <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f7fb f860 	bl	800108c <HAL_UART_RxCpltCallback>
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d109      	bne.n	8005ffe <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff fb1c 	bl	8005634 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ffc:	e002      	b.n	8006004 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7fb f83a 	bl	8001078 <HAL_UART_RxHalfCpltCallback>
}
 8006004:	bf00      	nop
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800601e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006024:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006030:	2b80      	cmp	r3, #128	; 0x80
 8006032:	d109      	bne.n	8006048 <UART_DMAError+0x3c>
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	2b21      	cmp	r3, #33	; 0x21
 8006038:	d106      	bne.n	8006048 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2200      	movs	r2, #0
 800603e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006042:	6978      	ldr	r0, [r7, #20]
 8006044:	f7ff ff38 	bl	8005eb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d109      	bne.n	800606a <UART_DMAError+0x5e>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b22      	cmp	r3, #34	; 0x22
 800605a:	d106      	bne.n	800606a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2200      	movs	r2, #0
 8006060:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006064:	6978      	ldr	r0, [r7, #20]
 8006066:	f7ff ff3c 	bl	8005ee2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006070:	f043 0210 	orr.w	r2, r3, #16
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800607a:	6978      	ldr	r0, [r7, #20]
 800607c:	f7ff fad0 	bl	8005620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006080:	bf00      	nop
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <__errno>:
 8006088:	4b01      	ldr	r3, [pc, #4]	; (8006090 <__errno+0x8>)
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20075320 	.word	0x20075320

08006094 <__libc_init_array>:
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	4d0d      	ldr	r5, [pc, #52]	; (80060cc <__libc_init_array+0x38>)
 8006098:	4c0d      	ldr	r4, [pc, #52]	; (80060d0 <__libc_init_array+0x3c>)
 800609a:	1b64      	subs	r4, r4, r5
 800609c:	10a4      	asrs	r4, r4, #2
 800609e:	2600      	movs	r6, #0
 80060a0:	42a6      	cmp	r6, r4
 80060a2:	d109      	bne.n	80060b8 <__libc_init_array+0x24>
 80060a4:	4d0b      	ldr	r5, [pc, #44]	; (80060d4 <__libc_init_array+0x40>)
 80060a6:	4c0c      	ldr	r4, [pc, #48]	; (80060d8 <__libc_init_array+0x44>)
 80060a8:	f000 fcf6 	bl	8006a98 <_init>
 80060ac:	1b64      	subs	r4, r4, r5
 80060ae:	10a4      	asrs	r4, r4, #2
 80060b0:	2600      	movs	r6, #0
 80060b2:	42a6      	cmp	r6, r4
 80060b4:	d105      	bne.n	80060c2 <__libc_init_array+0x2e>
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060bc:	4798      	blx	r3
 80060be:	3601      	adds	r6, #1
 80060c0:	e7ee      	b.n	80060a0 <__libc_init_array+0xc>
 80060c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c6:	4798      	blx	r3
 80060c8:	3601      	adds	r6, #1
 80060ca:	e7f2      	b.n	80060b2 <__libc_init_array+0x1e>
 80060cc:	08008234 	.word	0x08008234
 80060d0:	08008234 	.word	0x08008234
 80060d4:	08008234 	.word	0x08008234
 80060d8:	08008238 	.word	0x08008238

080060dc <malloc>:
 80060dc:	4b02      	ldr	r3, [pc, #8]	; (80060e8 <malloc+0xc>)
 80060de:	4601      	mov	r1, r0
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	f000 b863 	b.w	80061ac <_malloc_r>
 80060e6:	bf00      	nop
 80060e8:	20075320 	.word	0x20075320

080060ec <free>:
 80060ec:	4b02      	ldr	r3, [pc, #8]	; (80060f8 <free+0xc>)
 80060ee:	4601      	mov	r1, r0
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	f000 b80b 	b.w	800610c <_free_r>
 80060f6:	bf00      	nop
 80060f8:	20075320 	.word	0x20075320

080060fc <memset>:
 80060fc:	4402      	add	r2, r0
 80060fe:	4603      	mov	r3, r0
 8006100:	4293      	cmp	r3, r2
 8006102:	d100      	bne.n	8006106 <memset+0xa>
 8006104:	4770      	bx	lr
 8006106:	f803 1b01 	strb.w	r1, [r3], #1
 800610a:	e7f9      	b.n	8006100 <memset+0x4>

0800610c <_free_r>:
 800610c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800610e:	2900      	cmp	r1, #0
 8006110:	d048      	beq.n	80061a4 <_free_r+0x98>
 8006112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006116:	9001      	str	r0, [sp, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f1a1 0404 	sub.w	r4, r1, #4
 800611e:	bfb8      	it	lt
 8006120:	18e4      	addlt	r4, r4, r3
 8006122:	f000 fc01 	bl	8006928 <__malloc_lock>
 8006126:	4a20      	ldr	r2, [pc, #128]	; (80061a8 <_free_r+0x9c>)
 8006128:	9801      	ldr	r0, [sp, #4]
 800612a:	6813      	ldr	r3, [r2, #0]
 800612c:	4615      	mov	r5, r2
 800612e:	b933      	cbnz	r3, 800613e <_free_r+0x32>
 8006130:	6063      	str	r3, [r4, #4]
 8006132:	6014      	str	r4, [r2, #0]
 8006134:	b003      	add	sp, #12
 8006136:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800613a:	f000 bbfb 	b.w	8006934 <__malloc_unlock>
 800613e:	42a3      	cmp	r3, r4
 8006140:	d90b      	bls.n	800615a <_free_r+0x4e>
 8006142:	6821      	ldr	r1, [r4, #0]
 8006144:	1862      	adds	r2, r4, r1
 8006146:	4293      	cmp	r3, r2
 8006148:	bf04      	itt	eq
 800614a:	681a      	ldreq	r2, [r3, #0]
 800614c:	685b      	ldreq	r3, [r3, #4]
 800614e:	6063      	str	r3, [r4, #4]
 8006150:	bf04      	itt	eq
 8006152:	1852      	addeq	r2, r2, r1
 8006154:	6022      	streq	r2, [r4, #0]
 8006156:	602c      	str	r4, [r5, #0]
 8006158:	e7ec      	b.n	8006134 <_free_r+0x28>
 800615a:	461a      	mov	r2, r3
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	b10b      	cbz	r3, 8006164 <_free_r+0x58>
 8006160:	42a3      	cmp	r3, r4
 8006162:	d9fa      	bls.n	800615a <_free_r+0x4e>
 8006164:	6811      	ldr	r1, [r2, #0]
 8006166:	1855      	adds	r5, r2, r1
 8006168:	42a5      	cmp	r5, r4
 800616a:	d10b      	bne.n	8006184 <_free_r+0x78>
 800616c:	6824      	ldr	r4, [r4, #0]
 800616e:	4421      	add	r1, r4
 8006170:	1854      	adds	r4, r2, r1
 8006172:	42a3      	cmp	r3, r4
 8006174:	6011      	str	r1, [r2, #0]
 8006176:	d1dd      	bne.n	8006134 <_free_r+0x28>
 8006178:	681c      	ldr	r4, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	6053      	str	r3, [r2, #4]
 800617e:	4421      	add	r1, r4
 8006180:	6011      	str	r1, [r2, #0]
 8006182:	e7d7      	b.n	8006134 <_free_r+0x28>
 8006184:	d902      	bls.n	800618c <_free_r+0x80>
 8006186:	230c      	movs	r3, #12
 8006188:	6003      	str	r3, [r0, #0]
 800618a:	e7d3      	b.n	8006134 <_free_r+0x28>
 800618c:	6825      	ldr	r5, [r4, #0]
 800618e:	1961      	adds	r1, r4, r5
 8006190:	428b      	cmp	r3, r1
 8006192:	bf04      	itt	eq
 8006194:	6819      	ldreq	r1, [r3, #0]
 8006196:	685b      	ldreq	r3, [r3, #4]
 8006198:	6063      	str	r3, [r4, #4]
 800619a:	bf04      	itt	eq
 800619c:	1949      	addeq	r1, r1, r5
 800619e:	6021      	streq	r1, [r4, #0]
 80061a0:	6054      	str	r4, [r2, #4]
 80061a2:	e7c7      	b.n	8006134 <_free_r+0x28>
 80061a4:	b003      	add	sp, #12
 80061a6:	bd30      	pop	{r4, r5, pc}
 80061a8:	20075cbc 	.word	0x20075cbc

080061ac <_malloc_r>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	1ccd      	adds	r5, r1, #3
 80061b0:	f025 0503 	bic.w	r5, r5, #3
 80061b4:	3508      	adds	r5, #8
 80061b6:	2d0c      	cmp	r5, #12
 80061b8:	bf38      	it	cc
 80061ba:	250c      	movcc	r5, #12
 80061bc:	2d00      	cmp	r5, #0
 80061be:	4606      	mov	r6, r0
 80061c0:	db01      	blt.n	80061c6 <_malloc_r+0x1a>
 80061c2:	42a9      	cmp	r1, r5
 80061c4:	d903      	bls.n	80061ce <_malloc_r+0x22>
 80061c6:	230c      	movs	r3, #12
 80061c8:	6033      	str	r3, [r6, #0]
 80061ca:	2000      	movs	r0, #0
 80061cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ce:	f000 fbab 	bl	8006928 <__malloc_lock>
 80061d2:	4921      	ldr	r1, [pc, #132]	; (8006258 <_malloc_r+0xac>)
 80061d4:	680a      	ldr	r2, [r1, #0]
 80061d6:	4614      	mov	r4, r2
 80061d8:	b99c      	cbnz	r4, 8006202 <_malloc_r+0x56>
 80061da:	4f20      	ldr	r7, [pc, #128]	; (800625c <_malloc_r+0xb0>)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	b923      	cbnz	r3, 80061ea <_malloc_r+0x3e>
 80061e0:	4621      	mov	r1, r4
 80061e2:	4630      	mov	r0, r6
 80061e4:	f000 f8b2 	bl	800634c <_sbrk_r>
 80061e8:	6038      	str	r0, [r7, #0]
 80061ea:	4629      	mov	r1, r5
 80061ec:	4630      	mov	r0, r6
 80061ee:	f000 f8ad 	bl	800634c <_sbrk_r>
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	d123      	bne.n	800623e <_malloc_r+0x92>
 80061f6:	230c      	movs	r3, #12
 80061f8:	6033      	str	r3, [r6, #0]
 80061fa:	4630      	mov	r0, r6
 80061fc:	f000 fb9a 	bl	8006934 <__malloc_unlock>
 8006200:	e7e3      	b.n	80061ca <_malloc_r+0x1e>
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	1b5b      	subs	r3, r3, r5
 8006206:	d417      	bmi.n	8006238 <_malloc_r+0x8c>
 8006208:	2b0b      	cmp	r3, #11
 800620a:	d903      	bls.n	8006214 <_malloc_r+0x68>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	441c      	add	r4, r3
 8006210:	6025      	str	r5, [r4, #0]
 8006212:	e004      	b.n	800621e <_malloc_r+0x72>
 8006214:	6863      	ldr	r3, [r4, #4]
 8006216:	42a2      	cmp	r2, r4
 8006218:	bf0c      	ite	eq
 800621a:	600b      	streq	r3, [r1, #0]
 800621c:	6053      	strne	r3, [r2, #4]
 800621e:	4630      	mov	r0, r6
 8006220:	f000 fb88 	bl	8006934 <__malloc_unlock>
 8006224:	f104 000b 	add.w	r0, r4, #11
 8006228:	1d23      	adds	r3, r4, #4
 800622a:	f020 0007 	bic.w	r0, r0, #7
 800622e:	1ac2      	subs	r2, r0, r3
 8006230:	d0cc      	beq.n	80061cc <_malloc_r+0x20>
 8006232:	1a1b      	subs	r3, r3, r0
 8006234:	50a3      	str	r3, [r4, r2]
 8006236:	e7c9      	b.n	80061cc <_malloc_r+0x20>
 8006238:	4622      	mov	r2, r4
 800623a:	6864      	ldr	r4, [r4, #4]
 800623c:	e7cc      	b.n	80061d8 <_malloc_r+0x2c>
 800623e:	1cc4      	adds	r4, r0, #3
 8006240:	f024 0403 	bic.w	r4, r4, #3
 8006244:	42a0      	cmp	r0, r4
 8006246:	d0e3      	beq.n	8006210 <_malloc_r+0x64>
 8006248:	1a21      	subs	r1, r4, r0
 800624a:	4630      	mov	r0, r6
 800624c:	f000 f87e 	bl	800634c <_sbrk_r>
 8006250:	3001      	adds	r0, #1
 8006252:	d1dd      	bne.n	8006210 <_malloc_r+0x64>
 8006254:	e7cf      	b.n	80061f6 <_malloc_r+0x4a>
 8006256:	bf00      	nop
 8006258:	20075cbc 	.word	0x20075cbc
 800625c:	20075cc0 	.word	0x20075cc0

08006260 <_puts_r>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	460e      	mov	r6, r1
 8006264:	4605      	mov	r5, r0
 8006266:	b118      	cbz	r0, 8006270 <_puts_r+0x10>
 8006268:	6983      	ldr	r3, [r0, #24]
 800626a:	b90b      	cbnz	r3, 8006270 <_puts_r+0x10>
 800626c:	f000 fa58 	bl	8006720 <__sinit>
 8006270:	69ab      	ldr	r3, [r5, #24]
 8006272:	68ac      	ldr	r4, [r5, #8]
 8006274:	b913      	cbnz	r3, 800627c <_puts_r+0x1c>
 8006276:	4628      	mov	r0, r5
 8006278:	f000 fa52 	bl	8006720 <__sinit>
 800627c:	4b2c      	ldr	r3, [pc, #176]	; (8006330 <_puts_r+0xd0>)
 800627e:	429c      	cmp	r4, r3
 8006280:	d120      	bne.n	80062c4 <_puts_r+0x64>
 8006282:	686c      	ldr	r4, [r5, #4]
 8006284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006286:	07db      	lsls	r3, r3, #31
 8006288:	d405      	bmi.n	8006296 <_puts_r+0x36>
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	0598      	lsls	r0, r3, #22
 800628e:	d402      	bmi.n	8006296 <_puts_r+0x36>
 8006290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006292:	f000 fae3 	bl	800685c <__retarget_lock_acquire_recursive>
 8006296:	89a3      	ldrh	r3, [r4, #12]
 8006298:	0719      	lsls	r1, r3, #28
 800629a:	d51d      	bpl.n	80062d8 <_puts_r+0x78>
 800629c:	6923      	ldr	r3, [r4, #16]
 800629e:	b1db      	cbz	r3, 80062d8 <_puts_r+0x78>
 80062a0:	3e01      	subs	r6, #1
 80062a2:	68a3      	ldr	r3, [r4, #8]
 80062a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062a8:	3b01      	subs	r3, #1
 80062aa:	60a3      	str	r3, [r4, #8]
 80062ac:	bb39      	cbnz	r1, 80062fe <_puts_r+0x9e>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	da38      	bge.n	8006324 <_puts_r+0xc4>
 80062b2:	4622      	mov	r2, r4
 80062b4:	210a      	movs	r1, #10
 80062b6:	4628      	mov	r0, r5
 80062b8:	f000 f858 	bl	800636c <__swbuf_r>
 80062bc:	3001      	adds	r0, #1
 80062be:	d011      	beq.n	80062e4 <_puts_r+0x84>
 80062c0:	250a      	movs	r5, #10
 80062c2:	e011      	b.n	80062e8 <_puts_r+0x88>
 80062c4:	4b1b      	ldr	r3, [pc, #108]	; (8006334 <_puts_r+0xd4>)
 80062c6:	429c      	cmp	r4, r3
 80062c8:	d101      	bne.n	80062ce <_puts_r+0x6e>
 80062ca:	68ac      	ldr	r4, [r5, #8]
 80062cc:	e7da      	b.n	8006284 <_puts_r+0x24>
 80062ce:	4b1a      	ldr	r3, [pc, #104]	; (8006338 <_puts_r+0xd8>)
 80062d0:	429c      	cmp	r4, r3
 80062d2:	bf08      	it	eq
 80062d4:	68ec      	ldreq	r4, [r5, #12]
 80062d6:	e7d5      	b.n	8006284 <_puts_r+0x24>
 80062d8:	4621      	mov	r1, r4
 80062da:	4628      	mov	r0, r5
 80062dc:	f000 f898 	bl	8006410 <__swsetup_r>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d0dd      	beq.n	80062a0 <_puts_r+0x40>
 80062e4:	f04f 35ff 	mov.w	r5, #4294967295
 80062e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062ea:	07da      	lsls	r2, r3, #31
 80062ec:	d405      	bmi.n	80062fa <_puts_r+0x9a>
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	059b      	lsls	r3, r3, #22
 80062f2:	d402      	bmi.n	80062fa <_puts_r+0x9a>
 80062f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062f6:	f000 fab2 	bl	800685e <__retarget_lock_release_recursive>
 80062fa:	4628      	mov	r0, r5
 80062fc:	bd70      	pop	{r4, r5, r6, pc}
 80062fe:	2b00      	cmp	r3, #0
 8006300:	da04      	bge.n	800630c <_puts_r+0xac>
 8006302:	69a2      	ldr	r2, [r4, #24]
 8006304:	429a      	cmp	r2, r3
 8006306:	dc06      	bgt.n	8006316 <_puts_r+0xb6>
 8006308:	290a      	cmp	r1, #10
 800630a:	d004      	beq.n	8006316 <_puts_r+0xb6>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	6022      	str	r2, [r4, #0]
 8006312:	7019      	strb	r1, [r3, #0]
 8006314:	e7c5      	b.n	80062a2 <_puts_r+0x42>
 8006316:	4622      	mov	r2, r4
 8006318:	4628      	mov	r0, r5
 800631a:	f000 f827 	bl	800636c <__swbuf_r>
 800631e:	3001      	adds	r0, #1
 8006320:	d1bf      	bne.n	80062a2 <_puts_r+0x42>
 8006322:	e7df      	b.n	80062e4 <_puts_r+0x84>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	250a      	movs	r5, #10
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	6022      	str	r2, [r4, #0]
 800632c:	701d      	strb	r5, [r3, #0]
 800632e:	e7db      	b.n	80062e8 <_puts_r+0x88>
 8006330:	080081ec 	.word	0x080081ec
 8006334:	0800820c 	.word	0x0800820c
 8006338:	080081cc 	.word	0x080081cc

0800633c <puts>:
 800633c:	4b02      	ldr	r3, [pc, #8]	; (8006348 <puts+0xc>)
 800633e:	4601      	mov	r1, r0
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	f7ff bf8d 	b.w	8006260 <_puts_r>
 8006346:	bf00      	nop
 8006348:	20075320 	.word	0x20075320

0800634c <_sbrk_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d06      	ldr	r5, [pc, #24]	; (8006368 <_sbrk_r+0x1c>)
 8006350:	2300      	movs	r3, #0
 8006352:	4604      	mov	r4, r0
 8006354:	4608      	mov	r0, r1
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	f7fb fbfa 	bl	8001b50 <_sbrk>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_sbrk_r+0x1a>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_sbrk_r+0x1a>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	20075f68 	.word	0x20075f68

0800636c <__swbuf_r>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	460e      	mov	r6, r1
 8006370:	4614      	mov	r4, r2
 8006372:	4605      	mov	r5, r0
 8006374:	b118      	cbz	r0, 800637e <__swbuf_r+0x12>
 8006376:	6983      	ldr	r3, [r0, #24]
 8006378:	b90b      	cbnz	r3, 800637e <__swbuf_r+0x12>
 800637a:	f000 f9d1 	bl	8006720 <__sinit>
 800637e:	4b21      	ldr	r3, [pc, #132]	; (8006404 <__swbuf_r+0x98>)
 8006380:	429c      	cmp	r4, r3
 8006382:	d12b      	bne.n	80063dc <__swbuf_r+0x70>
 8006384:	686c      	ldr	r4, [r5, #4]
 8006386:	69a3      	ldr	r3, [r4, #24]
 8006388:	60a3      	str	r3, [r4, #8]
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	071a      	lsls	r2, r3, #28
 800638e:	d52f      	bpl.n	80063f0 <__swbuf_r+0x84>
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	b36b      	cbz	r3, 80063f0 <__swbuf_r+0x84>
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	6820      	ldr	r0, [r4, #0]
 8006398:	1ac0      	subs	r0, r0, r3
 800639a:	6963      	ldr	r3, [r4, #20]
 800639c:	b2f6      	uxtb	r6, r6
 800639e:	4283      	cmp	r3, r0
 80063a0:	4637      	mov	r7, r6
 80063a2:	dc04      	bgt.n	80063ae <__swbuf_r+0x42>
 80063a4:	4621      	mov	r1, r4
 80063a6:	4628      	mov	r0, r5
 80063a8:	f000 f926 	bl	80065f8 <_fflush_r>
 80063ac:	bb30      	cbnz	r0, 80063fc <__swbuf_r+0x90>
 80063ae:	68a3      	ldr	r3, [r4, #8]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	60a3      	str	r3, [r4, #8]
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	6022      	str	r2, [r4, #0]
 80063ba:	701e      	strb	r6, [r3, #0]
 80063bc:	6963      	ldr	r3, [r4, #20]
 80063be:	3001      	adds	r0, #1
 80063c0:	4283      	cmp	r3, r0
 80063c2:	d004      	beq.n	80063ce <__swbuf_r+0x62>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	07db      	lsls	r3, r3, #31
 80063c8:	d506      	bpl.n	80063d8 <__swbuf_r+0x6c>
 80063ca:	2e0a      	cmp	r6, #10
 80063cc:	d104      	bne.n	80063d8 <__swbuf_r+0x6c>
 80063ce:	4621      	mov	r1, r4
 80063d0:	4628      	mov	r0, r5
 80063d2:	f000 f911 	bl	80065f8 <_fflush_r>
 80063d6:	b988      	cbnz	r0, 80063fc <__swbuf_r+0x90>
 80063d8:	4638      	mov	r0, r7
 80063da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063dc:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <__swbuf_r+0x9c>)
 80063de:	429c      	cmp	r4, r3
 80063e0:	d101      	bne.n	80063e6 <__swbuf_r+0x7a>
 80063e2:	68ac      	ldr	r4, [r5, #8]
 80063e4:	e7cf      	b.n	8006386 <__swbuf_r+0x1a>
 80063e6:	4b09      	ldr	r3, [pc, #36]	; (800640c <__swbuf_r+0xa0>)
 80063e8:	429c      	cmp	r4, r3
 80063ea:	bf08      	it	eq
 80063ec:	68ec      	ldreq	r4, [r5, #12]
 80063ee:	e7ca      	b.n	8006386 <__swbuf_r+0x1a>
 80063f0:	4621      	mov	r1, r4
 80063f2:	4628      	mov	r0, r5
 80063f4:	f000 f80c 	bl	8006410 <__swsetup_r>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d0cb      	beq.n	8006394 <__swbuf_r+0x28>
 80063fc:	f04f 37ff 	mov.w	r7, #4294967295
 8006400:	e7ea      	b.n	80063d8 <__swbuf_r+0x6c>
 8006402:	bf00      	nop
 8006404:	080081ec 	.word	0x080081ec
 8006408:	0800820c 	.word	0x0800820c
 800640c:	080081cc 	.word	0x080081cc

08006410 <__swsetup_r>:
 8006410:	4b32      	ldr	r3, [pc, #200]	; (80064dc <__swsetup_r+0xcc>)
 8006412:	b570      	push	{r4, r5, r6, lr}
 8006414:	681d      	ldr	r5, [r3, #0]
 8006416:	4606      	mov	r6, r0
 8006418:	460c      	mov	r4, r1
 800641a:	b125      	cbz	r5, 8006426 <__swsetup_r+0x16>
 800641c:	69ab      	ldr	r3, [r5, #24]
 800641e:	b913      	cbnz	r3, 8006426 <__swsetup_r+0x16>
 8006420:	4628      	mov	r0, r5
 8006422:	f000 f97d 	bl	8006720 <__sinit>
 8006426:	4b2e      	ldr	r3, [pc, #184]	; (80064e0 <__swsetup_r+0xd0>)
 8006428:	429c      	cmp	r4, r3
 800642a:	d10f      	bne.n	800644c <__swsetup_r+0x3c>
 800642c:	686c      	ldr	r4, [r5, #4]
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006434:	0719      	lsls	r1, r3, #28
 8006436:	d42c      	bmi.n	8006492 <__swsetup_r+0x82>
 8006438:	06dd      	lsls	r5, r3, #27
 800643a:	d411      	bmi.n	8006460 <__swsetup_r+0x50>
 800643c:	2309      	movs	r3, #9
 800643e:	6033      	str	r3, [r6, #0]
 8006440:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006444:	81a3      	strh	r3, [r4, #12]
 8006446:	f04f 30ff 	mov.w	r0, #4294967295
 800644a:	e03e      	b.n	80064ca <__swsetup_r+0xba>
 800644c:	4b25      	ldr	r3, [pc, #148]	; (80064e4 <__swsetup_r+0xd4>)
 800644e:	429c      	cmp	r4, r3
 8006450:	d101      	bne.n	8006456 <__swsetup_r+0x46>
 8006452:	68ac      	ldr	r4, [r5, #8]
 8006454:	e7eb      	b.n	800642e <__swsetup_r+0x1e>
 8006456:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <__swsetup_r+0xd8>)
 8006458:	429c      	cmp	r4, r3
 800645a:	bf08      	it	eq
 800645c:	68ec      	ldreq	r4, [r5, #12]
 800645e:	e7e6      	b.n	800642e <__swsetup_r+0x1e>
 8006460:	0758      	lsls	r0, r3, #29
 8006462:	d512      	bpl.n	800648a <__swsetup_r+0x7a>
 8006464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006466:	b141      	cbz	r1, 800647a <__swsetup_r+0x6a>
 8006468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800646c:	4299      	cmp	r1, r3
 800646e:	d002      	beq.n	8006476 <__swsetup_r+0x66>
 8006470:	4630      	mov	r0, r6
 8006472:	f7ff fe4b 	bl	800610c <_free_r>
 8006476:	2300      	movs	r3, #0
 8006478:	6363      	str	r3, [r4, #52]	; 0x34
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006480:	81a3      	strh	r3, [r4, #12]
 8006482:	2300      	movs	r3, #0
 8006484:	6063      	str	r3, [r4, #4]
 8006486:	6923      	ldr	r3, [r4, #16]
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	f043 0308 	orr.w	r3, r3, #8
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	b94b      	cbnz	r3, 80064aa <__swsetup_r+0x9a>
 8006496:	89a3      	ldrh	r3, [r4, #12]
 8006498:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800649c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064a0:	d003      	beq.n	80064aa <__swsetup_r+0x9a>
 80064a2:	4621      	mov	r1, r4
 80064a4:	4630      	mov	r0, r6
 80064a6:	f000 f9ff 	bl	80068a8 <__smakebuf_r>
 80064aa:	89a0      	ldrh	r0, [r4, #12]
 80064ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064b0:	f010 0301 	ands.w	r3, r0, #1
 80064b4:	d00a      	beq.n	80064cc <__swsetup_r+0xbc>
 80064b6:	2300      	movs	r3, #0
 80064b8:	60a3      	str	r3, [r4, #8]
 80064ba:	6963      	ldr	r3, [r4, #20]
 80064bc:	425b      	negs	r3, r3
 80064be:	61a3      	str	r3, [r4, #24]
 80064c0:	6923      	ldr	r3, [r4, #16]
 80064c2:	b943      	cbnz	r3, 80064d6 <__swsetup_r+0xc6>
 80064c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064c8:	d1ba      	bne.n	8006440 <__swsetup_r+0x30>
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	0781      	lsls	r1, r0, #30
 80064ce:	bf58      	it	pl
 80064d0:	6963      	ldrpl	r3, [r4, #20]
 80064d2:	60a3      	str	r3, [r4, #8]
 80064d4:	e7f4      	b.n	80064c0 <__swsetup_r+0xb0>
 80064d6:	2000      	movs	r0, #0
 80064d8:	e7f7      	b.n	80064ca <__swsetup_r+0xba>
 80064da:	bf00      	nop
 80064dc:	20075320 	.word	0x20075320
 80064e0:	080081ec 	.word	0x080081ec
 80064e4:	0800820c 	.word	0x0800820c
 80064e8:	080081cc 	.word	0x080081cc

080064ec <__sflush_r>:
 80064ec:	898a      	ldrh	r2, [r1, #12]
 80064ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f2:	4605      	mov	r5, r0
 80064f4:	0710      	lsls	r0, r2, #28
 80064f6:	460c      	mov	r4, r1
 80064f8:	d458      	bmi.n	80065ac <__sflush_r+0xc0>
 80064fa:	684b      	ldr	r3, [r1, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	dc05      	bgt.n	800650c <__sflush_r+0x20>
 8006500:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	dc02      	bgt.n	800650c <__sflush_r+0x20>
 8006506:	2000      	movs	r0, #0
 8006508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800650c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800650e:	2e00      	cmp	r6, #0
 8006510:	d0f9      	beq.n	8006506 <__sflush_r+0x1a>
 8006512:	2300      	movs	r3, #0
 8006514:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006518:	682f      	ldr	r7, [r5, #0]
 800651a:	602b      	str	r3, [r5, #0]
 800651c:	d032      	beq.n	8006584 <__sflush_r+0x98>
 800651e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	075a      	lsls	r2, r3, #29
 8006524:	d505      	bpl.n	8006532 <__sflush_r+0x46>
 8006526:	6863      	ldr	r3, [r4, #4]
 8006528:	1ac0      	subs	r0, r0, r3
 800652a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800652c:	b10b      	cbz	r3, 8006532 <__sflush_r+0x46>
 800652e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006530:	1ac0      	subs	r0, r0, r3
 8006532:	2300      	movs	r3, #0
 8006534:	4602      	mov	r2, r0
 8006536:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006538:	6a21      	ldr	r1, [r4, #32]
 800653a:	4628      	mov	r0, r5
 800653c:	47b0      	blx	r6
 800653e:	1c43      	adds	r3, r0, #1
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	d106      	bne.n	8006552 <__sflush_r+0x66>
 8006544:	6829      	ldr	r1, [r5, #0]
 8006546:	291d      	cmp	r1, #29
 8006548:	d82c      	bhi.n	80065a4 <__sflush_r+0xb8>
 800654a:	4a2a      	ldr	r2, [pc, #168]	; (80065f4 <__sflush_r+0x108>)
 800654c:	40ca      	lsrs	r2, r1
 800654e:	07d6      	lsls	r6, r2, #31
 8006550:	d528      	bpl.n	80065a4 <__sflush_r+0xb8>
 8006552:	2200      	movs	r2, #0
 8006554:	6062      	str	r2, [r4, #4]
 8006556:	04d9      	lsls	r1, r3, #19
 8006558:	6922      	ldr	r2, [r4, #16]
 800655a:	6022      	str	r2, [r4, #0]
 800655c:	d504      	bpl.n	8006568 <__sflush_r+0x7c>
 800655e:	1c42      	adds	r2, r0, #1
 8006560:	d101      	bne.n	8006566 <__sflush_r+0x7a>
 8006562:	682b      	ldr	r3, [r5, #0]
 8006564:	b903      	cbnz	r3, 8006568 <__sflush_r+0x7c>
 8006566:	6560      	str	r0, [r4, #84]	; 0x54
 8006568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800656a:	602f      	str	r7, [r5, #0]
 800656c:	2900      	cmp	r1, #0
 800656e:	d0ca      	beq.n	8006506 <__sflush_r+0x1a>
 8006570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006574:	4299      	cmp	r1, r3
 8006576:	d002      	beq.n	800657e <__sflush_r+0x92>
 8006578:	4628      	mov	r0, r5
 800657a:	f7ff fdc7 	bl	800610c <_free_r>
 800657e:	2000      	movs	r0, #0
 8006580:	6360      	str	r0, [r4, #52]	; 0x34
 8006582:	e7c1      	b.n	8006508 <__sflush_r+0x1c>
 8006584:	6a21      	ldr	r1, [r4, #32]
 8006586:	2301      	movs	r3, #1
 8006588:	4628      	mov	r0, r5
 800658a:	47b0      	blx	r6
 800658c:	1c41      	adds	r1, r0, #1
 800658e:	d1c7      	bne.n	8006520 <__sflush_r+0x34>
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0c4      	beq.n	8006520 <__sflush_r+0x34>
 8006596:	2b1d      	cmp	r3, #29
 8006598:	d001      	beq.n	800659e <__sflush_r+0xb2>
 800659a:	2b16      	cmp	r3, #22
 800659c:	d101      	bne.n	80065a2 <__sflush_r+0xb6>
 800659e:	602f      	str	r7, [r5, #0]
 80065a0:	e7b1      	b.n	8006506 <__sflush_r+0x1a>
 80065a2:	89a3      	ldrh	r3, [r4, #12]
 80065a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a8:	81a3      	strh	r3, [r4, #12]
 80065aa:	e7ad      	b.n	8006508 <__sflush_r+0x1c>
 80065ac:	690f      	ldr	r7, [r1, #16]
 80065ae:	2f00      	cmp	r7, #0
 80065b0:	d0a9      	beq.n	8006506 <__sflush_r+0x1a>
 80065b2:	0793      	lsls	r3, r2, #30
 80065b4:	680e      	ldr	r6, [r1, #0]
 80065b6:	bf08      	it	eq
 80065b8:	694b      	ldreq	r3, [r1, #20]
 80065ba:	600f      	str	r7, [r1, #0]
 80065bc:	bf18      	it	ne
 80065be:	2300      	movne	r3, #0
 80065c0:	eba6 0807 	sub.w	r8, r6, r7
 80065c4:	608b      	str	r3, [r1, #8]
 80065c6:	f1b8 0f00 	cmp.w	r8, #0
 80065ca:	dd9c      	ble.n	8006506 <__sflush_r+0x1a>
 80065cc:	6a21      	ldr	r1, [r4, #32]
 80065ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065d0:	4643      	mov	r3, r8
 80065d2:	463a      	mov	r2, r7
 80065d4:	4628      	mov	r0, r5
 80065d6:	47b0      	blx	r6
 80065d8:	2800      	cmp	r0, #0
 80065da:	dc06      	bgt.n	80065ea <__sflush_r+0xfe>
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065e2:	81a3      	strh	r3, [r4, #12]
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	e78e      	b.n	8006508 <__sflush_r+0x1c>
 80065ea:	4407      	add	r7, r0
 80065ec:	eba8 0800 	sub.w	r8, r8, r0
 80065f0:	e7e9      	b.n	80065c6 <__sflush_r+0xda>
 80065f2:	bf00      	nop
 80065f4:	20400001 	.word	0x20400001

080065f8 <_fflush_r>:
 80065f8:	b538      	push	{r3, r4, r5, lr}
 80065fa:	690b      	ldr	r3, [r1, #16]
 80065fc:	4605      	mov	r5, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	b913      	cbnz	r3, 8006608 <_fflush_r+0x10>
 8006602:	2500      	movs	r5, #0
 8006604:	4628      	mov	r0, r5
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	b118      	cbz	r0, 8006612 <_fflush_r+0x1a>
 800660a:	6983      	ldr	r3, [r0, #24]
 800660c:	b90b      	cbnz	r3, 8006612 <_fflush_r+0x1a>
 800660e:	f000 f887 	bl	8006720 <__sinit>
 8006612:	4b14      	ldr	r3, [pc, #80]	; (8006664 <_fflush_r+0x6c>)
 8006614:	429c      	cmp	r4, r3
 8006616:	d11b      	bne.n	8006650 <_fflush_r+0x58>
 8006618:	686c      	ldr	r4, [r5, #4]
 800661a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0ef      	beq.n	8006602 <_fflush_r+0xa>
 8006622:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006624:	07d0      	lsls	r0, r2, #31
 8006626:	d404      	bmi.n	8006632 <_fflush_r+0x3a>
 8006628:	0599      	lsls	r1, r3, #22
 800662a:	d402      	bmi.n	8006632 <_fflush_r+0x3a>
 800662c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800662e:	f000 f915 	bl	800685c <__retarget_lock_acquire_recursive>
 8006632:	4628      	mov	r0, r5
 8006634:	4621      	mov	r1, r4
 8006636:	f7ff ff59 	bl	80064ec <__sflush_r>
 800663a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800663c:	07da      	lsls	r2, r3, #31
 800663e:	4605      	mov	r5, r0
 8006640:	d4e0      	bmi.n	8006604 <_fflush_r+0xc>
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	059b      	lsls	r3, r3, #22
 8006646:	d4dd      	bmi.n	8006604 <_fflush_r+0xc>
 8006648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800664a:	f000 f908 	bl	800685e <__retarget_lock_release_recursive>
 800664e:	e7d9      	b.n	8006604 <_fflush_r+0xc>
 8006650:	4b05      	ldr	r3, [pc, #20]	; (8006668 <_fflush_r+0x70>)
 8006652:	429c      	cmp	r4, r3
 8006654:	d101      	bne.n	800665a <_fflush_r+0x62>
 8006656:	68ac      	ldr	r4, [r5, #8]
 8006658:	e7df      	b.n	800661a <_fflush_r+0x22>
 800665a:	4b04      	ldr	r3, [pc, #16]	; (800666c <_fflush_r+0x74>)
 800665c:	429c      	cmp	r4, r3
 800665e:	bf08      	it	eq
 8006660:	68ec      	ldreq	r4, [r5, #12]
 8006662:	e7da      	b.n	800661a <_fflush_r+0x22>
 8006664:	080081ec 	.word	0x080081ec
 8006668:	0800820c 	.word	0x0800820c
 800666c:	080081cc 	.word	0x080081cc

08006670 <std>:
 8006670:	2300      	movs	r3, #0
 8006672:	b510      	push	{r4, lr}
 8006674:	4604      	mov	r4, r0
 8006676:	e9c0 3300 	strd	r3, r3, [r0]
 800667a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800667e:	6083      	str	r3, [r0, #8]
 8006680:	8181      	strh	r1, [r0, #12]
 8006682:	6643      	str	r3, [r0, #100]	; 0x64
 8006684:	81c2      	strh	r2, [r0, #14]
 8006686:	6183      	str	r3, [r0, #24]
 8006688:	4619      	mov	r1, r3
 800668a:	2208      	movs	r2, #8
 800668c:	305c      	adds	r0, #92	; 0x5c
 800668e:	f7ff fd35 	bl	80060fc <memset>
 8006692:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <std+0x38>)
 8006694:	6263      	str	r3, [r4, #36]	; 0x24
 8006696:	4b05      	ldr	r3, [pc, #20]	; (80066ac <std+0x3c>)
 8006698:	62a3      	str	r3, [r4, #40]	; 0x28
 800669a:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <std+0x40>)
 800669c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800669e:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <std+0x44>)
 80066a0:	6224      	str	r4, [r4, #32]
 80066a2:	6323      	str	r3, [r4, #48]	; 0x30
 80066a4:	bd10      	pop	{r4, pc}
 80066a6:	bf00      	nop
 80066a8:	08006941 	.word	0x08006941
 80066ac:	08006963 	.word	0x08006963
 80066b0:	0800699b 	.word	0x0800699b
 80066b4:	080069bf 	.word	0x080069bf

080066b8 <_cleanup_r>:
 80066b8:	4901      	ldr	r1, [pc, #4]	; (80066c0 <_cleanup_r+0x8>)
 80066ba:	f000 b8af 	b.w	800681c <_fwalk_reent>
 80066be:	bf00      	nop
 80066c0:	080065f9 	.word	0x080065f9

080066c4 <__sfmoreglue>:
 80066c4:	b570      	push	{r4, r5, r6, lr}
 80066c6:	1e4a      	subs	r2, r1, #1
 80066c8:	2568      	movs	r5, #104	; 0x68
 80066ca:	4355      	muls	r5, r2
 80066cc:	460e      	mov	r6, r1
 80066ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066d2:	f7ff fd6b 	bl	80061ac <_malloc_r>
 80066d6:	4604      	mov	r4, r0
 80066d8:	b140      	cbz	r0, 80066ec <__sfmoreglue+0x28>
 80066da:	2100      	movs	r1, #0
 80066dc:	e9c0 1600 	strd	r1, r6, [r0]
 80066e0:	300c      	adds	r0, #12
 80066e2:	60a0      	str	r0, [r4, #8]
 80066e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066e8:	f7ff fd08 	bl	80060fc <memset>
 80066ec:	4620      	mov	r0, r4
 80066ee:	bd70      	pop	{r4, r5, r6, pc}

080066f0 <__sfp_lock_acquire>:
 80066f0:	4801      	ldr	r0, [pc, #4]	; (80066f8 <__sfp_lock_acquire+0x8>)
 80066f2:	f000 b8b3 	b.w	800685c <__retarget_lock_acquire_recursive>
 80066f6:	bf00      	nop
 80066f8:	20075f64 	.word	0x20075f64

080066fc <__sfp_lock_release>:
 80066fc:	4801      	ldr	r0, [pc, #4]	; (8006704 <__sfp_lock_release+0x8>)
 80066fe:	f000 b8ae 	b.w	800685e <__retarget_lock_release_recursive>
 8006702:	bf00      	nop
 8006704:	20075f64 	.word	0x20075f64

08006708 <__sinit_lock_acquire>:
 8006708:	4801      	ldr	r0, [pc, #4]	; (8006710 <__sinit_lock_acquire+0x8>)
 800670a:	f000 b8a7 	b.w	800685c <__retarget_lock_acquire_recursive>
 800670e:	bf00      	nop
 8006710:	20075f5f 	.word	0x20075f5f

08006714 <__sinit_lock_release>:
 8006714:	4801      	ldr	r0, [pc, #4]	; (800671c <__sinit_lock_release+0x8>)
 8006716:	f000 b8a2 	b.w	800685e <__retarget_lock_release_recursive>
 800671a:	bf00      	nop
 800671c:	20075f5f 	.word	0x20075f5f

08006720 <__sinit>:
 8006720:	b510      	push	{r4, lr}
 8006722:	4604      	mov	r4, r0
 8006724:	f7ff fff0 	bl	8006708 <__sinit_lock_acquire>
 8006728:	69a3      	ldr	r3, [r4, #24]
 800672a:	b11b      	cbz	r3, 8006734 <__sinit+0x14>
 800672c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006730:	f7ff bff0 	b.w	8006714 <__sinit_lock_release>
 8006734:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006738:	6523      	str	r3, [r4, #80]	; 0x50
 800673a:	4b13      	ldr	r3, [pc, #76]	; (8006788 <__sinit+0x68>)
 800673c:	4a13      	ldr	r2, [pc, #76]	; (800678c <__sinit+0x6c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	62a2      	str	r2, [r4, #40]	; 0x28
 8006742:	42a3      	cmp	r3, r4
 8006744:	bf04      	itt	eq
 8006746:	2301      	moveq	r3, #1
 8006748:	61a3      	streq	r3, [r4, #24]
 800674a:	4620      	mov	r0, r4
 800674c:	f000 f820 	bl	8006790 <__sfp>
 8006750:	6060      	str	r0, [r4, #4]
 8006752:	4620      	mov	r0, r4
 8006754:	f000 f81c 	bl	8006790 <__sfp>
 8006758:	60a0      	str	r0, [r4, #8]
 800675a:	4620      	mov	r0, r4
 800675c:	f000 f818 	bl	8006790 <__sfp>
 8006760:	2200      	movs	r2, #0
 8006762:	60e0      	str	r0, [r4, #12]
 8006764:	2104      	movs	r1, #4
 8006766:	6860      	ldr	r0, [r4, #4]
 8006768:	f7ff ff82 	bl	8006670 <std>
 800676c:	68a0      	ldr	r0, [r4, #8]
 800676e:	2201      	movs	r2, #1
 8006770:	2109      	movs	r1, #9
 8006772:	f7ff ff7d 	bl	8006670 <std>
 8006776:	68e0      	ldr	r0, [r4, #12]
 8006778:	2202      	movs	r2, #2
 800677a:	2112      	movs	r1, #18
 800677c:	f7ff ff78 	bl	8006670 <std>
 8006780:	2301      	movs	r3, #1
 8006782:	61a3      	str	r3, [r4, #24]
 8006784:	e7d2      	b.n	800672c <__sinit+0xc>
 8006786:	bf00      	nop
 8006788:	080081c8 	.word	0x080081c8
 800678c:	080066b9 	.word	0x080066b9

08006790 <__sfp>:
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	4607      	mov	r7, r0
 8006794:	f7ff ffac 	bl	80066f0 <__sfp_lock_acquire>
 8006798:	4b1e      	ldr	r3, [pc, #120]	; (8006814 <__sfp+0x84>)
 800679a:	681e      	ldr	r6, [r3, #0]
 800679c:	69b3      	ldr	r3, [r6, #24]
 800679e:	b913      	cbnz	r3, 80067a6 <__sfp+0x16>
 80067a0:	4630      	mov	r0, r6
 80067a2:	f7ff ffbd 	bl	8006720 <__sinit>
 80067a6:	3648      	adds	r6, #72	; 0x48
 80067a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	d503      	bpl.n	80067b8 <__sfp+0x28>
 80067b0:	6833      	ldr	r3, [r6, #0]
 80067b2:	b30b      	cbz	r3, 80067f8 <__sfp+0x68>
 80067b4:	6836      	ldr	r6, [r6, #0]
 80067b6:	e7f7      	b.n	80067a8 <__sfp+0x18>
 80067b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067bc:	b9d5      	cbnz	r5, 80067f4 <__sfp+0x64>
 80067be:	4b16      	ldr	r3, [pc, #88]	; (8006818 <__sfp+0x88>)
 80067c0:	60e3      	str	r3, [r4, #12]
 80067c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067c6:	6665      	str	r5, [r4, #100]	; 0x64
 80067c8:	f000 f847 	bl	800685a <__retarget_lock_init_recursive>
 80067cc:	f7ff ff96 	bl	80066fc <__sfp_lock_release>
 80067d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067d8:	6025      	str	r5, [r4, #0]
 80067da:	61a5      	str	r5, [r4, #24]
 80067dc:	2208      	movs	r2, #8
 80067de:	4629      	mov	r1, r5
 80067e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067e4:	f7ff fc8a 	bl	80060fc <memset>
 80067e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067f0:	4620      	mov	r0, r4
 80067f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f4:	3468      	adds	r4, #104	; 0x68
 80067f6:	e7d9      	b.n	80067ac <__sfp+0x1c>
 80067f8:	2104      	movs	r1, #4
 80067fa:	4638      	mov	r0, r7
 80067fc:	f7ff ff62 	bl	80066c4 <__sfmoreglue>
 8006800:	4604      	mov	r4, r0
 8006802:	6030      	str	r0, [r6, #0]
 8006804:	2800      	cmp	r0, #0
 8006806:	d1d5      	bne.n	80067b4 <__sfp+0x24>
 8006808:	f7ff ff78 	bl	80066fc <__sfp_lock_release>
 800680c:	230c      	movs	r3, #12
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	e7ee      	b.n	80067f0 <__sfp+0x60>
 8006812:	bf00      	nop
 8006814:	080081c8 	.word	0x080081c8
 8006818:	ffff0001 	.word	0xffff0001

0800681c <_fwalk_reent>:
 800681c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006820:	4606      	mov	r6, r0
 8006822:	4688      	mov	r8, r1
 8006824:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006828:	2700      	movs	r7, #0
 800682a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800682e:	f1b9 0901 	subs.w	r9, r9, #1
 8006832:	d505      	bpl.n	8006840 <_fwalk_reent+0x24>
 8006834:	6824      	ldr	r4, [r4, #0]
 8006836:	2c00      	cmp	r4, #0
 8006838:	d1f7      	bne.n	800682a <_fwalk_reent+0xe>
 800683a:	4638      	mov	r0, r7
 800683c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006840:	89ab      	ldrh	r3, [r5, #12]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d907      	bls.n	8006856 <_fwalk_reent+0x3a>
 8006846:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800684a:	3301      	adds	r3, #1
 800684c:	d003      	beq.n	8006856 <_fwalk_reent+0x3a>
 800684e:	4629      	mov	r1, r5
 8006850:	4630      	mov	r0, r6
 8006852:	47c0      	blx	r8
 8006854:	4307      	orrs	r7, r0
 8006856:	3568      	adds	r5, #104	; 0x68
 8006858:	e7e9      	b.n	800682e <_fwalk_reent+0x12>

0800685a <__retarget_lock_init_recursive>:
 800685a:	4770      	bx	lr

0800685c <__retarget_lock_acquire_recursive>:
 800685c:	4770      	bx	lr

0800685e <__retarget_lock_release_recursive>:
 800685e:	4770      	bx	lr

08006860 <__swhatbuf_r>:
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	460e      	mov	r6, r1
 8006864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006868:	2900      	cmp	r1, #0
 800686a:	b096      	sub	sp, #88	; 0x58
 800686c:	4614      	mov	r4, r2
 800686e:	461d      	mov	r5, r3
 8006870:	da07      	bge.n	8006882 <__swhatbuf_r+0x22>
 8006872:	2300      	movs	r3, #0
 8006874:	602b      	str	r3, [r5, #0]
 8006876:	89b3      	ldrh	r3, [r6, #12]
 8006878:	061a      	lsls	r2, r3, #24
 800687a:	d410      	bmi.n	800689e <__swhatbuf_r+0x3e>
 800687c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006880:	e00e      	b.n	80068a0 <__swhatbuf_r+0x40>
 8006882:	466a      	mov	r2, sp
 8006884:	f000 f8c2 	bl	8006a0c <_fstat_r>
 8006888:	2800      	cmp	r0, #0
 800688a:	dbf2      	blt.n	8006872 <__swhatbuf_r+0x12>
 800688c:	9a01      	ldr	r2, [sp, #4]
 800688e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006892:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006896:	425a      	negs	r2, r3
 8006898:	415a      	adcs	r2, r3
 800689a:	602a      	str	r2, [r5, #0]
 800689c:	e7ee      	b.n	800687c <__swhatbuf_r+0x1c>
 800689e:	2340      	movs	r3, #64	; 0x40
 80068a0:	2000      	movs	r0, #0
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	b016      	add	sp, #88	; 0x58
 80068a6:	bd70      	pop	{r4, r5, r6, pc}

080068a8 <__smakebuf_r>:
 80068a8:	898b      	ldrh	r3, [r1, #12]
 80068aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068ac:	079d      	lsls	r5, r3, #30
 80068ae:	4606      	mov	r6, r0
 80068b0:	460c      	mov	r4, r1
 80068b2:	d507      	bpl.n	80068c4 <__smakebuf_r+0x1c>
 80068b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	6123      	str	r3, [r4, #16]
 80068bc:	2301      	movs	r3, #1
 80068be:	6163      	str	r3, [r4, #20]
 80068c0:	b002      	add	sp, #8
 80068c2:	bd70      	pop	{r4, r5, r6, pc}
 80068c4:	ab01      	add	r3, sp, #4
 80068c6:	466a      	mov	r2, sp
 80068c8:	f7ff ffca 	bl	8006860 <__swhatbuf_r>
 80068cc:	9900      	ldr	r1, [sp, #0]
 80068ce:	4605      	mov	r5, r0
 80068d0:	4630      	mov	r0, r6
 80068d2:	f7ff fc6b 	bl	80061ac <_malloc_r>
 80068d6:	b948      	cbnz	r0, 80068ec <__smakebuf_r+0x44>
 80068d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068dc:	059a      	lsls	r2, r3, #22
 80068de:	d4ef      	bmi.n	80068c0 <__smakebuf_r+0x18>
 80068e0:	f023 0303 	bic.w	r3, r3, #3
 80068e4:	f043 0302 	orr.w	r3, r3, #2
 80068e8:	81a3      	strh	r3, [r4, #12]
 80068ea:	e7e3      	b.n	80068b4 <__smakebuf_r+0xc>
 80068ec:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <__smakebuf_r+0x7c>)
 80068ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	6020      	str	r0, [r4, #0]
 80068f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	9b00      	ldr	r3, [sp, #0]
 80068fc:	6163      	str	r3, [r4, #20]
 80068fe:	9b01      	ldr	r3, [sp, #4]
 8006900:	6120      	str	r0, [r4, #16]
 8006902:	b15b      	cbz	r3, 800691c <__smakebuf_r+0x74>
 8006904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006908:	4630      	mov	r0, r6
 800690a:	f000 f891 	bl	8006a30 <_isatty_r>
 800690e:	b128      	cbz	r0, 800691c <__smakebuf_r+0x74>
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	f023 0303 	bic.w	r3, r3, #3
 8006916:	f043 0301 	orr.w	r3, r3, #1
 800691a:	81a3      	strh	r3, [r4, #12]
 800691c:	89a0      	ldrh	r0, [r4, #12]
 800691e:	4305      	orrs	r5, r0
 8006920:	81a5      	strh	r5, [r4, #12]
 8006922:	e7cd      	b.n	80068c0 <__smakebuf_r+0x18>
 8006924:	080066b9 	.word	0x080066b9

08006928 <__malloc_lock>:
 8006928:	4801      	ldr	r0, [pc, #4]	; (8006930 <__malloc_lock+0x8>)
 800692a:	f7ff bf97 	b.w	800685c <__retarget_lock_acquire_recursive>
 800692e:	bf00      	nop
 8006930:	20075f60 	.word	0x20075f60

08006934 <__malloc_unlock>:
 8006934:	4801      	ldr	r0, [pc, #4]	; (800693c <__malloc_unlock+0x8>)
 8006936:	f7ff bf92 	b.w	800685e <__retarget_lock_release_recursive>
 800693a:	bf00      	nop
 800693c:	20075f60 	.word	0x20075f60

08006940 <__sread>:
 8006940:	b510      	push	{r4, lr}
 8006942:	460c      	mov	r4, r1
 8006944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006948:	f000 f894 	bl	8006a74 <_read_r>
 800694c:	2800      	cmp	r0, #0
 800694e:	bfab      	itete	ge
 8006950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006952:	89a3      	ldrhlt	r3, [r4, #12]
 8006954:	181b      	addge	r3, r3, r0
 8006956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800695a:	bfac      	ite	ge
 800695c:	6563      	strge	r3, [r4, #84]	; 0x54
 800695e:	81a3      	strhlt	r3, [r4, #12]
 8006960:	bd10      	pop	{r4, pc}

08006962 <__swrite>:
 8006962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006966:	461f      	mov	r7, r3
 8006968:	898b      	ldrh	r3, [r1, #12]
 800696a:	05db      	lsls	r3, r3, #23
 800696c:	4605      	mov	r5, r0
 800696e:	460c      	mov	r4, r1
 8006970:	4616      	mov	r6, r2
 8006972:	d505      	bpl.n	8006980 <__swrite+0x1e>
 8006974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006978:	2302      	movs	r3, #2
 800697a:	2200      	movs	r2, #0
 800697c:	f000 f868 	bl	8006a50 <_lseek_r>
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	4632      	mov	r2, r6
 800698e:	463b      	mov	r3, r7
 8006990:	4628      	mov	r0, r5
 8006992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006996:	f000 b817 	b.w	80069c8 <_write_r>

0800699a <__sseek>:
 800699a:	b510      	push	{r4, lr}
 800699c:	460c      	mov	r4, r1
 800699e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a2:	f000 f855 	bl	8006a50 <_lseek_r>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	bf15      	itete	ne
 80069ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80069ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069b6:	81a3      	strheq	r3, [r4, #12]
 80069b8:	bf18      	it	ne
 80069ba:	81a3      	strhne	r3, [r4, #12]
 80069bc:	bd10      	pop	{r4, pc}

080069be <__sclose>:
 80069be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c2:	f000 b813 	b.w	80069ec <_close_r>
	...

080069c8 <_write_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4d07      	ldr	r5, [pc, #28]	; (80069e8 <_write_r+0x20>)
 80069cc:	4604      	mov	r4, r0
 80069ce:	4608      	mov	r0, r1
 80069d0:	4611      	mov	r1, r2
 80069d2:	2200      	movs	r2, #0
 80069d4:	602a      	str	r2, [r5, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f7fb f869 	bl	8001aae <_write>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_write_r+0x1e>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_write_r+0x1e>
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	20075f68 	.word	0x20075f68

080069ec <_close_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4d06      	ldr	r5, [pc, #24]	; (8006a08 <_close_r+0x1c>)
 80069f0:	2300      	movs	r3, #0
 80069f2:	4604      	mov	r4, r0
 80069f4:	4608      	mov	r0, r1
 80069f6:	602b      	str	r3, [r5, #0]
 80069f8:	f7fb f875 	bl	8001ae6 <_close>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d102      	bne.n	8006a06 <_close_r+0x1a>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	b103      	cbz	r3, 8006a06 <_close_r+0x1a>
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
 8006a08:	20075f68 	.word	0x20075f68

08006a0c <_fstat_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4d07      	ldr	r5, [pc, #28]	; (8006a2c <_fstat_r+0x20>)
 8006a10:	2300      	movs	r3, #0
 8006a12:	4604      	mov	r4, r0
 8006a14:	4608      	mov	r0, r1
 8006a16:	4611      	mov	r1, r2
 8006a18:	602b      	str	r3, [r5, #0]
 8006a1a:	f7fb f870 	bl	8001afe <_fstat>
 8006a1e:	1c43      	adds	r3, r0, #1
 8006a20:	d102      	bne.n	8006a28 <_fstat_r+0x1c>
 8006a22:	682b      	ldr	r3, [r5, #0]
 8006a24:	b103      	cbz	r3, 8006a28 <_fstat_r+0x1c>
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	bd38      	pop	{r3, r4, r5, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20075f68 	.word	0x20075f68

08006a30 <_isatty_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4d06      	ldr	r5, [pc, #24]	; (8006a4c <_isatty_r+0x1c>)
 8006a34:	2300      	movs	r3, #0
 8006a36:	4604      	mov	r4, r0
 8006a38:	4608      	mov	r0, r1
 8006a3a:	602b      	str	r3, [r5, #0]
 8006a3c:	f7fb f86f 	bl	8001b1e <_isatty>
 8006a40:	1c43      	adds	r3, r0, #1
 8006a42:	d102      	bne.n	8006a4a <_isatty_r+0x1a>
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	b103      	cbz	r3, 8006a4a <_isatty_r+0x1a>
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
 8006a4c:	20075f68 	.word	0x20075f68

08006a50 <_lseek_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4d07      	ldr	r5, [pc, #28]	; (8006a70 <_lseek_r+0x20>)
 8006a54:	4604      	mov	r4, r0
 8006a56:	4608      	mov	r0, r1
 8006a58:	4611      	mov	r1, r2
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	602a      	str	r2, [r5, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f7fb f868 	bl	8001b34 <_lseek>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_lseek_r+0x1e>
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_lseek_r+0x1e>
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	20075f68 	.word	0x20075f68

08006a74 <_read_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4d07      	ldr	r5, [pc, #28]	; (8006a94 <_read_r+0x20>)
 8006a78:	4604      	mov	r4, r0
 8006a7a:	4608      	mov	r0, r1
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	2200      	movs	r2, #0
 8006a80:	602a      	str	r2, [r5, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f7fa fff6 	bl	8001a74 <_read>
 8006a88:	1c43      	adds	r3, r0, #1
 8006a8a:	d102      	bne.n	8006a92 <_read_r+0x1e>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	b103      	cbz	r3, 8006a92 <_read_r+0x1e>
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	bd38      	pop	{r3, r4, r5, pc}
 8006a94:	20075f68 	.word	0x20075f68

08006a98 <_init>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	bf00      	nop
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr

08006aa4 <_fini>:
 8006aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa6:	bf00      	nop
 8006aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aaa:	bc08      	pop	{r3}
 8006aac:	469e      	mov	lr, r3
 8006aae:	4770      	bx	lr
