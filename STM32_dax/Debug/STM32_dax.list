
STM32_dax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b78  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000177c  08006d70  08006d70  00016d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084ec  080084ec  00095384  2**0
                  CONTENTS
  4 .ARM          00000008  080084ec  080084ec  000184ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084f4  080084f4  00095384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084f4  080084f4  000184f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084f8  080084f8  000184f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00075384  20000000  080084fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000698  20075384  0807d880  00095384  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20075a1c  0807d880  00095a1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00095384  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157e1  00000000  00000000  000953b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f15  00000000  00000000  000aab93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  000adaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  000aee68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029987  00000000  00000000  000b0118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013faf  00000000  00000000  000d9a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9379  00000000  00000000  000eda4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e6dc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005538  00000000  00000000  001e6e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20075384 	.word	0x20075384
 8000214:	00000000 	.word	0x00000000
 8000218:	08006d58 	.word	0x08006d58

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20075388 	.word	0x20075388
 8000234:	08006d58 	.word	0x08006d58

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <add_note_last>:

// Add a note at the end of the list
// ---------------------------------

llist add_note_last(llist list, uint8_t midi_note, uint8_t velocity)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
 800053c:	4613      	mov	r3, r2
 800053e:	70bb      	strb	r3, [r7, #2]
    // Add a new element in memory

    note* new_note = malloc(sizeof(note));
 8000540:	2008      	movs	r0, #8
 8000542:	f005 ff2b 	bl	800639c <malloc>
 8000546:	4603      	mov	r3, r0
 8000548:	60bb      	str	r3, [r7, #8]

    // Set the new element values

    new_note->midi_note = midi_note;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	701a      	strb	r2, [r3, #0]
    new_note->velocity = velocity;
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	78ba      	ldrb	r2, [r7, #2]
 8000554:	705a      	strb	r2, [r3, #1]

    // There is no next element

    new_note->nxt = NULL;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]

    // If list is empty, then simply return the newly created element

    if(list == NULL)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <add_note_last+0x36>
    {
        return new_note;
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	e00d      	b.n	8000582 <add_note_last+0x52>

    // Else, walk through the list to find the actual last element

    else
    {
    	note* temp=list;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 800056a:	e002      	b.n	8000572 <add_note_last+0x42>
        {
            temp = temp->nxt;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1f8      	bne.n	800056c <add_note_last+0x3c>
        }
        temp->nxt = new_note;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	605a      	str	r2, [r3, #4]
        return list;
 8000580:	687b      	ldr	r3, [r7, #4]
    }
}
 8000582:	4618      	mov	r0, r3
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <delete_note>:

// Delete a note based on the midi_note
// ------------------------------------

llist delete_note(llist list, uint8_t midi_note)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	70fb      	strb	r3, [r7, #3]
    // If list is empty, then just returns

    if(list == NULL)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d101      	bne.n	80005a0 <delete_note+0x16>
        return NULL;
 800059c:	2300      	movs	r3, #0
 800059e:	e01d      	b.n	80005dc <delete_note+0x52>

    // If the current element is the one to delete

    if(list->midi_note == midi_note)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	78fa      	ldrb	r2, [r7, #3]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d10d      	bne.n	80005c6 <delete_note+0x3c>
    {
        note* tmp = list->nxt;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	60fb      	str	r3, [r7, #12]
        free(list);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f005 fefb 	bl	80063ac <free>
        tmp = delete_note(tmp, midi_note);
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	4619      	mov	r1, r3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f7ff ffe5 	bl	800058a <delete_note>
 80005c0:	60f8      	str	r0, [r7, #12]
        return tmp;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	e00a      	b.n	80005dc <delete_note+0x52>

    // Else, the current element is not the one to delete

    else
    {
        list->nxt = delete_note(list->nxt, midi_note);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ffdb 	bl	800058a <delete_note>
 80005d4:	4602      	mov	r2, r0
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	605a      	str	r2, [r3, #4]
        return list;
 80005da:	687b      	ldr	r3, [r7, #4]
    }
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <get_last_note>:

// Get pointer to last note in the list
// ------------------------------------

note* get_last_note(llist list)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

    if(list == NULL)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <get_last_note+0x12>
    {
        return NULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e00a      	b.n	800060c <get_last_note+0x28>
    }

    else
        {
        	note* temp=list;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 80005fa:	e002      	b.n	8000602 <get_last_note+0x1e>
            {
                temp = temp->nxt;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f8      	bne.n	80005fc <get_last_note+0x18>
            }
            return temp;
 800060a:	68fb      	ldr	r3, [r7, #12]
        }
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f001 fb14 	bl	8001c4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f8bd 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 fa5b 	bl	8000ae0 <MX_GPIO_Init>
  MX_I2S1_Init();
 800062a:	f000 f9ab 	bl	8000984 <MX_I2S1_Init>
  MX_DMA_Init();
 800062e:	f000 fa39 	bl	8000aa4 <MX_DMA_Init>
  MX_UART4_Init();
 8000632:	f000 fa07 	bl	8000a44 <MX_UART4_Init>
  MX_I2C2_Init();
 8000636:	f000 f965 	bl	8000904 <MX_I2C2_Init>
  MX_SAI1_Init();
 800063a:	f000 f9cd 	bl	80009d8 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);
 800063e:	2204      	movs	r2, #4
 8000640:	4947      	ldr	r1, [pc, #284]	; (8000760 <main+0x148>)
 8000642:	4848      	ldr	r0, [pc, #288]	; (8000764 <main+0x14c>)
 8000644:	f002 fff6 	bl	8003634 <HAL_I2S_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 8000648:	2206      	movs	r2, #6
 800064a:	4947      	ldr	r1, [pc, #284]	; (8000768 <main+0x150>)
 800064c:	4847      	ldr	r0, [pc, #284]	; (800076c <main+0x154>)
 800064e:	f005 f90a 	bl	8005866 <HAL_UART_Receive_DMA>
	SSD1306_Init(); // initialize the LCD screen display
 8000652:	f000 fd4d 	bl	80010f0 <SSD1306_Init>
	SSD1306_Menu();
 8000656:	f000 fff5 	bl	8001644 <SSD1306_Menu>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// HAL_I2S_Transmit(&hi2s1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);
		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 800065a:	f000 fac7 	bl	8000bec <MIDI_GetNbNewBytes>
 800065e:	4603      	mov	r3, r0
 8000660:	72fb      	strb	r3, [r7, #11]

		if(nb_MIDI_bytes){
 8000662:	7afb      	ldrb	r3, [r7, #11]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d004      	beq.n	8000672 <main+0x5a>
			processBuffer(UART4_rxBuffer,nb_MIDI_bytes);
 8000668:	7afb      	ldrb	r3, [r7, #11]
 800066a:	4619      	mov	r1, r3
 800066c:	483e      	ldr	r0, [pc, #248]	; (8000768 <main+0x150>)
 800066e:	f000 faeb 	bl	8000c48 <processBuffer>
		}

		play_note = get_last_note(note_list);
 8000672:	4b3f      	ldr	r3, [pc, #252]	; (8000770 <main+0x158>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffb4 	bl	80005e4 <get_last_note>
 800067c:	6078      	str	r0, [r7, #4]

		if (play_note == NULL){ //no notes in the list
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d10b      	bne.n	800069c <main+0x84>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2180      	movs	r1, #128	; 0x80
 8000688:	483a      	ldr	r0, [pc, #232]	; (8000774 <main+0x15c>)
 800068a:	f002 f971 	bl	8002970 <HAL_GPIO_WritePin>
			trig = 0;
 800068e:	4b3a      	ldr	r3, [pc, #232]	; (8000778 <main+0x160>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
			playNoteB = 0;
 8000694:	4b39      	ldr	r3, [pc, #228]	; (800077c <main+0x164>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	e00a      	b.n	80006b2 <main+0x9a>
		}
		else {
			//set the pitch and trigger the notes
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	4834      	ldr	r0, [pc, #208]	; (8000774 <main+0x15c>)
 80006a2:	f002 f965 	bl	8002970 <HAL_GPIO_WritePin>
			trig = 1;
 80006a6:	4b34      	ldr	r3, [pc, #208]	; (8000778 <main+0x160>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
			playNoteB = 1;
 80006ac:	4b33      	ldr	r3, [pc, #204]	; (800077c <main+0x164>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
		}

		//test code
		if ( trig == 1)
 80006b2:	4b31      	ldr	r3, [pc, #196]	; (8000778 <main+0x160>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d04f      	beq.n	800075a <main+0x142>
		{
			if (key == 60 ){
 80006ba:	4b31      	ldr	r3, [pc, #196]	; (8000780 <main+0x168>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b3c      	cmp	r3, #60	; 0x3c
 80006c0:	d108      	bne.n	80006d4 <main+0xbc>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_c, sizeof(tone_c) / sizeof(tone_c[0]), 1000);
 80006c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c6:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80006ca:	492e      	ldr	r1, [pc, #184]	; (8000784 <main+0x16c>)
 80006cc:	482e      	ldr	r0, [pc, #184]	; (8000788 <main+0x170>)
 80006ce:	f004 fd67 	bl	80051a0 <HAL_SAI_Transmit>
 80006d2:	e03a      	b.n	800074a <main+0x132>
			}
			else if (key == 61 ){
 80006d4:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <main+0x168>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b3d      	cmp	r3, #61	; 0x3d
 80006da:	d108      	bne.n	80006ee <main+0xd6>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_c_sharp, sizeof(tone_c_sharp) / sizeof(tone_c_sharp[0]), 1000);
 80006dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e0:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80006e4:	4929      	ldr	r1, [pc, #164]	; (800078c <main+0x174>)
 80006e6:	4828      	ldr	r0, [pc, #160]	; (8000788 <main+0x170>)
 80006e8:	f004 fd5a 	bl	80051a0 <HAL_SAI_Transmit>
 80006ec:	e02d      	b.n	800074a <main+0x132>
			}
			else if (key == 62 ){
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <main+0x168>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b3e      	cmp	r3, #62	; 0x3e
 80006f4:	d108      	bne.n	8000708 <main+0xf0>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_d, sizeof(tone_d) / sizeof(tone_d[0]), 1000);
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80006fe:	4924      	ldr	r1, [pc, #144]	; (8000790 <main+0x178>)
 8000700:	4821      	ldr	r0, [pc, #132]	; (8000788 <main+0x170>)
 8000702:	f004 fd4d 	bl	80051a0 <HAL_SAI_Transmit>
 8000706:	e020      	b.n	800074a <main+0x132>
			}
			else if (key == 63 ){
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <main+0x168>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b3f      	cmp	r3, #63	; 0x3f
 800070e:	d108      	bne.n	8000722 <main+0x10a>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_d_sharp, sizeof(tone_d_sharp) / sizeof(tone_d_sharp[0]), 1000);
 8000710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000714:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000718:	491e      	ldr	r1, [pc, #120]	; (8000794 <main+0x17c>)
 800071a:	481b      	ldr	r0, [pc, #108]	; (8000788 <main+0x170>)
 800071c:	f004 fd40 	bl	80051a0 <HAL_SAI_Transmit>
 8000720:	e013      	b.n	800074a <main+0x132>
			}
			else if (key == 64 ){
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <main+0x168>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b40      	cmp	r3, #64	; 0x40
 8000728:	d108      	bne.n	800073c <main+0x124>
				HAL_SAI_Transmit(&hsai_BlockA1, tone_e, sizeof(tone_e) / sizeof(tone_e[0]), 1000);
 800072a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072e:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000732:	4919      	ldr	r1, [pc, #100]	; (8000798 <main+0x180>)
 8000734:	4814      	ldr	r0, [pc, #80]	; (8000788 <main+0x170>)
 8000736:	f004 fd33 	bl	80051a0 <HAL_SAI_Transmit>
 800073a:	e006      	b.n	800074a <main+0x132>
			}
			//HAL_SAI_Transmit(&hsai_BlockA1, tone_c, sizeof(tone_c) / sizeof(tone_c[0]), 1000);
			else {
			HAL_SAI_Transmit(&hsai_BlockA1, triangle_wave, sizeof(triangle_wave) / sizeof(triangle_wave[0]), 1000);
 800073c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	4916      	ldr	r1, [pc, #88]	; (800079c <main+0x184>)
 8000744:	4810      	ldr	r0, [pc, #64]	; (8000788 <main+0x170>)
 8000746:	f004 fd2b 	bl	80051a0 <HAL_SAI_Transmit>
			}

			if (screenOn == 0)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d184      	bne.n	800065a <main+0x42>
			{
				SSD1306_Note0();
 8000750:	f000 ffbe 	bl	80016d0 <SSD1306_Note0>
				screenOn = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	e77f      	b.n	800065a <main+0x42>
			}
		}
		else
		{
			screenOn = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 800075e:	e77c      	b.n	800065a <main+0x42>
 8000760:	200753a4 	.word	0x200753a4
 8000764:	200758b8 	.word	0x200758b8
 8000768:	200753ac 	.word	0x200753ac
 800076c:	200758f8 	.word	0x200758f8
 8000770:	200753a0 	.word	0x200753a0
 8000774:	40020400 	.word	0x40020400
 8000778:	20075881 	.word	0x20075881
 800077c:	20075888 	.word	0x20075888
 8000780:	200758b4 	.word	0x200758b4
 8000784:	20000010 	.word	0x20000010
 8000788:	20075980 	.word	0x20075980
 800078c:	20017710 	.word	0x20017710
 8000790:	2002ee10 	.word	0x2002ee10
 8000794:	20046510 	.word	0x20046510
 8000798:	2005dc10 	.word	0x2005dc10
 800079c:	08008368 	.word	0x08008368

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0b8      	sub	sp, #224	; 0xe0
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007aa:	2234      	movs	r2, #52	; 0x34
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f005 fe04 	bl	80063bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2290      	movs	r2, #144	; 0x90
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f005 fdf5 	bl	80063bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b49      	ldr	r3, [pc, #292]	; (80008f8 <SystemClock_Config+0x158>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a48      	ldr	r2, [pc, #288]	; (80008f8 <SystemClock_Config+0x158>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b46      	ldr	r3, [pc, #280]	; (80008f8 <SystemClock_Config+0x158>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ea:	4b44      	ldr	r3, [pc, #272]	; (80008fc <SystemClock_Config+0x15c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f2:	4a42      	ldr	r2, [pc, #264]	; (80008fc <SystemClock_Config+0x15c>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	4b40      	ldr	r3, [pc, #256]	; (80008fc <SystemClock_Config+0x15c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000806:	2302      	movs	r3, #2
 8000808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000812:	2310      	movs	r3, #16
 8000814:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081e:	2300      	movs	r3, #0
 8000820:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000824:	2308      	movs	r3, #8
 8000826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 800082a:	2360      	movs	r3, #96	; 0x60
 800082c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000830:	2302      	movs	r3, #2
 8000832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000846:	4618      	mov	r0, r3
 8000848:	f003 f8da 	bl	8003a00 <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000852:	f000 fc47 	bl	80010e4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000856:	f003 f883 	bl	8003960 <HAL_PWREx_EnableOverDrive>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000860:	f000 fc40 	bl	80010e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2302      	movs	r3, #2
 800086c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000886:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800088a:	2103      	movs	r1, #3
 800088c:	4618      	mov	r0, r3
 800088e:	f003 fb65 	bl	8003f5c <HAL_RCC_ClockConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000898:	f000 fc24 	bl	80010e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SAI1
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <SystemClock_Config+0x160>)
 800089e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 80008a0:	2360      	movs	r3, #96	; 0x60
 80008a2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80008b0:	23c0      	movs	r3, #192	; 0xc0
 80008b2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 80008b8:	2306      	movs	r3, #6
 80008ba:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80008c8:	2300      	movs	r3, #0
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 80008cc:	2300      	movs	r3, #0
 80008ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80008d0:	2300      	movs	r3, #0
 80008d2:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008d8:	2300      	movs	r3, #0
 80008da:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 fd11 	bl	8004308 <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x150>
  {
    Error_Handler();
 80008ec:	f000 fbfa 	bl	80010e4 <Error_Handler>
  }
}
 80008f0:	bf00      	nop
 80008f2:	37e0      	adds	r7, #224	; 0xe0
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40007000 	.word	0x40007000
 8000900:	00088201 	.word	0x00088201

08000904 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_I2C2_Init+0x74>)
 800090a:	4a1c      	ldr	r2, [pc, #112]	; (800097c <MX_I2C2_Init+0x78>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_I2C2_Init+0x74>)
 8000910:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <MX_I2C2_Init+0x7c>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_I2C2_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_I2C2_Init+0x74>)
 800091c:	2201      	movs	r2, #1
 800091e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_I2C2_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_I2C2_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_I2C2_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_I2C2_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_I2C2_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <MX_I2C2_Init+0x74>)
 8000940:	f002 f830 	bl	80029a4 <HAL_I2C_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800094a:	f000 fbcb 	bl	80010e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <MX_I2C2_Init+0x74>)
 8000952:	f002 fc27 	bl	80031a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800095c:	f000 fbc2 	bl	80010e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_I2C2_Init+0x74>)
 8000964:	f002 fc69 	bl	800323a <HAL_I2CEx_ConfigDigitalFilter>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 fbb9 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20075834 	.word	0x20075834
 800097c:	40005800 	.word	0x40005800
 8000980:	0090194b 	.word	0x0090194b

08000984 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_I2S1_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <MX_I2S1_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_I2S1_Init+0x4c>)
 8000990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000994:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_I2S1_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_I2S1_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_I2S1_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_I2S1_Init+0x4c>)
 80009aa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80009ae:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_I2S1_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_I2S1_Init+0x4c>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_I2S1_Init+0x4c>)
 80009be:	f002 fc89 	bl	80032d4 <HAL_I2S_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 80009c8:	f000 fb8c 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200758b8 	.word	0x200758b8
 80009d4:	40013000 	.word	0x40013000

080009d8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_SAI1_Init+0x64>)
 80009de:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <MX_SAI1_Init+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_SAI1_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_SAI1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_SAI1_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_SAI1_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_SAI1_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_SAI1_Init+0x64>)
 8000a02:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000a06:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_SAI1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_SAI1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_SAI1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_SAI1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8000a20:	2302      	movs	r3, #2
 8000a22:	2203      	movs	r2, #3
 8000a24:	2100      	movs	r1, #0
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_SAI1_Init+0x64>)
 8000a28:	f004 fa08 	bl	8004e3c <HAL_SAI_InitProtocol>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000a32:	f000 fb57 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20075980 	.word	0x20075980
 8000a40:	40015804 	.word	0x40015804

08000a44 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_UART4_Init+0x58>)
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <MX_UART4_Init+0x5c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_UART4_Init+0x58>)
 8000a50:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000a54:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_UART4_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_UART4_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_UART4_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_UART4_Init+0x58>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_UART4_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_UART4_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_UART4_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_UART4_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_UART4_Init+0x58>)
 8000a88:	f004 fe0c 	bl	80056a4 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a92:	f000 fb27 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200758f8 	.word	0x200758f8
 8000aa0:	40004c00 	.word	0x40004c00

08000aa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_DMA_Init+0x38>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <MX_DMA_Init+0x38>)
 8000ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_DMA_Init+0x38>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	200d      	movs	r0, #13
 8000ac8:	f001 f9f7 	bl	8001eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000acc:	200d      	movs	r0, #13
 8000ace:	f001 fa10 	bl	8001ef2 <HAL_NVIC_EnableIRQ>

}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a28      	ldr	r2, [pc, #160]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0310 	and.w	r3, r3, #16
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000b14:	f043 0320 	orr.w	r3, r3, #32
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0320 	and.w	r3, r3, #32
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a1c      	ldr	r2, [pc, #112]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a16      	ldr	r2, [pc, #88]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_GPIO_Init+0xbc>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <MX_GPIO_Init+0xc0>)
 8000b74:	f001 fefc 	bl	8002970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_GPIO_Init+0xc0>)
 8000b90:	f001 fd42 	bl	8002618 <HAL_GPIO_Init>

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <HAL_I2S_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	HAL_I2S_Receive(&hi2s1, sendBuff, 8, 100);
 8000bac:	1d38      	adds	r0, r7, #4
 8000bae:	2364      	movs	r3, #100	; 0x64
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	4906      	ldr	r1, [pc, #24]	; (8000bcc <HAL_I2S_TxCpltCallback+0x28>)
 8000bb4:	f002 fc74 	bl	80034a0 <HAL_I2S_Receive>
	//HAL_I2S_(hi2s1, sendBuff, 16, 100);
	HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, 8);
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2208      	movs	r2, #8
 8000bbc:	4903      	ldr	r1, [pc, #12]	; (8000bcc <HAL_I2S_TxCpltCallback+0x28>)
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 fd38 	bl	8003634 <HAL_I2S_Transmit_DMA>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200753a4 	.word	0x200753a4

08000bd0 <DMA_GetCurrDataCounter>:
//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);

//}

uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	b29b      	uxth	r3, r3
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <MIDI_GetNbNewBytes>:


//TODO: Need to fix function for HAL not LL
uint8_t MIDI_GetNbNewBytes()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	static uint16_t dma_cpt_prev = MIDI_BUFFER_LENGTH;
	uint16_t dma_cpt, n = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	80fb      	strh	r3, [r7, #6]
	// Get current DMA counter
	dma_cpt = DMA_GetCurrDataCounter(DMA1_Stream2);
 8000bf6:	4812      	ldr	r0, [pc, #72]	; (8000c40 <MIDI_GetNbNewBytes+0x54>)
 8000bf8:	f7ff ffea 	bl	8000bd0 <DMA_GetCurrDataCounter>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	80bb      	strh	r3, [r7, #4]

	// If DMA counter has changed, compute the number of received MIDI bytes
	if (dma_cpt != dma_cpt_prev)
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MIDI_GetNbNewBytes+0x58>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	88ba      	ldrh	r2, [r7, #4]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d014      	beq.n	8000c34 <MIDI_GetNbNewBytes+0x48>
	{
		if (dma_cpt < dma_cpt_prev)
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MIDI_GetNbNewBytes+0x58>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	88ba      	ldrh	r2, [r7, #4]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d205      	bcs.n	8000c20 <MIDI_GetNbNewBytes+0x34>
		{
			n = dma_cpt_prev - dma_cpt;
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MIDI_GetNbNewBytes+0x58>)
 8000c16:	881a      	ldrh	r2, [r3, #0]
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	80fb      	strh	r3, [r7, #6]
 8000c1e:	e006      	b.n	8000c2e <MIDI_GetNbNewBytes+0x42>
		}
		else
		{
			n = dma_cpt_prev - (dma_cpt - MIDI_BUFFER_LENGTH);
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MIDI_GetNbNewBytes+0x58>)
 8000c22:	881a      	ldrh	r2, [r3, #0]
 8000c24:	88bb      	ldrh	r3, [r7, #4]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	3306      	adds	r3, #6
 8000c2c:	80fb      	strh	r3, [r7, #6]
		}
		// Store the new DMA counter
		dma_cpt_prev = dma_cpt;
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <MIDI_GetNbNewBytes+0x58>)
 8000c30:	88bb      	ldrh	r3, [r7, #4]
 8000c32:	8013      	strh	r3, [r2, #0]
	}
	return (n);
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	b2db      	uxtb	r3, r3
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40026040 	.word	0x40026040
 8000c44:	20075310 	.word	0x20075310

08000c48 <processBuffer>:


void processBuffer(uint8_t* MIDI_buffer, uint8_t nb_MIDI_bytes)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	70fb      	strb	r3, [r7, #3]
	__IO uint32_t received_char;

	static uint8_t i = 0;
	static uint8_t state = 0;

	while (nb_MIDI_bytes != 0)
 8000c54:	bf00      	nop
 8000c56:	e1fd      	b.n	8001054 <processBuffer+0x40c>
	{
		//reading a byte from the buffer
		received_char = UART4_rxBuffer[i];
 8000c58:	4ba8      	ldr	r3, [pc, #672]	; (8000efc <processBuffer+0x2b4>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4ba8      	ldr	r3, [pc, #672]	; (8000f00 <processBuffer+0x2b8>)
 8000c60:	5c9b      	ldrb	r3, [r3, r2]
 8000c62:	60fb      	str	r3, [r7, #12]
		switch (state)
 8000c64:	4ba7      	ldr	r3, [pc, #668]	; (8000f04 <processBuffer+0x2bc>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b29      	cmp	r3, #41	; 0x29
 8000c6a:	f200 81f3 	bhi.w	8001054 <processBuffer+0x40c>
 8000c6e:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <processBuffer+0x2c>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000d1d 	.word	0x08000d1d
 8000c78:	08001055 	.word	0x08001055
 8000c7c:	08001055 	.word	0x08001055
 8000c80:	08001055 	.word	0x08001055
 8000c84:	08001055 	.word	0x08001055
 8000c88:	08001055 	.word	0x08001055
 8000c8c:	08001055 	.word	0x08001055
 8000c90:	08001055 	.word	0x08001055
 8000c94:	08001055 	.word	0x08001055
 8000c98:	08001055 	.word	0x08001055
 8000c9c:	08000df9 	.word	0x08000df9
 8000ca0:	08000e41 	.word	0x08000e41
 8000ca4:	08001055 	.word	0x08001055
 8000ca8:	08001055 	.word	0x08001055
 8000cac:	08001055 	.word	0x08001055
 8000cb0:	08001055 	.word	0x08001055
 8000cb4:	08001055 	.word	0x08001055
 8000cb8:	08001055 	.word	0x08001055
 8000cbc:	08001055 	.word	0x08001055
 8000cc0:	08001055 	.word	0x08001055
 8000cc4:	08000eb3 	.word	0x08000eb3
 8000cc8:	08000f21 	.word	0x08000f21
 8000ccc:	08001055 	.word	0x08001055
 8000cd0:	08001055 	.word	0x08001055
 8000cd4:	08001055 	.word	0x08001055
 8000cd8:	08001055 	.word	0x08001055
 8000cdc:	08001055 	.word	0x08001055
 8000ce0:	08001055 	.word	0x08001055
 8000ce4:	08001055 	.word	0x08001055
 8000ce8:	08001055 	.word	0x08001055
 8000cec:	08000f71 	.word	0x08000f71
 8000cf0:	08000fb1 	.word	0x08000fb1
 8000cf4:	08001055 	.word	0x08001055
 8000cf8:	08001055 	.word	0x08001055
 8000cfc:	08001055 	.word	0x08001055
 8000d00:	08001055 	.word	0x08001055
 8000d04:	08001055 	.word	0x08001055
 8000d08:	08001055 	.word	0x08001055
 8000d0c:	08001055 	.word	0x08001055
 8000d10:	08001055 	.word	0x08001055
 8000d14:	08000fe3 	.word	0x08000fe3
 8000d18:	08001023 	.word	0x08001023
		{
		// State 0 = Starting point for a new MIDI message
		case 0:
		{
			switch (received_char & 0xF0)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d22:	2be0      	cmp	r3, #224	; 0xe0
 8000d24:	d04b      	beq.n	8000dbe <processBuffer+0x176>
 8000d26:	2be0      	cmp	r3, #224	; 0xe0
 8000d28:	d85e      	bhi.n	8000de8 <processBuffer+0x1a0>
 8000d2a:	2bb0      	cmp	r3, #176	; 0xb0
 8000d2c:	d032      	beq.n	8000d94 <processBuffer+0x14c>
 8000d2e:	2bb0      	cmp	r3, #176	; 0xb0
 8000d30:	d85a      	bhi.n	8000de8 <processBuffer+0x1a0>
 8000d32:	2b80      	cmp	r3, #128	; 0x80
 8000d34:	d019      	beq.n	8000d6a <processBuffer+0x122>
 8000d36:	2b90      	cmp	r3, #144	; 0x90
 8000d38:	d156      	bne.n	8000de8 <processBuffer+0x1a0>
			{
			case 0x90: // Note ON message
			{
				state = 10; // Next state is 10
 8000d3a:	4b72      	ldr	r3, [pc, #456]	; (8000f04 <processBuffer+0x2bc>)
 8000d3c:	220a      	movs	r2, #10
 8000d3e:	701a      	strb	r2, [r3, #0]
				printf ("note ON event\n");
 8000d40:	4871      	ldr	r0, [pc, #452]	; (8000f08 <processBuffer+0x2c0>)
 8000d42:	f005 fc5b 	bl	80065fc <puts>
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d46:	4b6d      	ldr	r3, [pc, #436]	; (8000efc <processBuffer+0x2b4>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b05      	cmp	r3, #5
 8000d4c:	d103      	bne.n	8000d56 <processBuffer+0x10e>
					i = 0;				// Move to next MIDI byte
 8000d4e:	4b6b      	ldr	r3, [pc, #428]	; (8000efc <processBuffer+0x2b4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	e005      	b.n	8000d62 <processBuffer+0x11a>
				}
				else {
					i++;
 8000d56:	4b69      	ldr	r3, [pc, #420]	; (8000efc <processBuffer+0x2b4>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b67      	ldr	r3, [pc, #412]	; (8000efc <processBuffer+0x2b4>)
 8000d60:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	70fb      	strb	r3, [r7, #3]
				break;
 8000d68:	e045      	b.n	8000df6 <processBuffer+0x1ae>
			}
			case 0x80: // Note OFF message
			{
				state = 20; // Next state is 20
 8000d6a:	4b66      	ldr	r3, [pc, #408]	; (8000f04 <processBuffer+0x2bc>)
 8000d6c:	2214      	movs	r2, #20
 8000d6e:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d70:	4b62      	ldr	r3, [pc, #392]	; (8000efc <processBuffer+0x2b4>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b05      	cmp	r3, #5
 8000d76:	d103      	bne.n	8000d80 <processBuffer+0x138>
					i = 0;				// Move to next MIDI byte
 8000d78:	4b60      	ldr	r3, [pc, #384]	; (8000efc <processBuffer+0x2b4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	e005      	b.n	8000d8c <processBuffer+0x144>
				}
				else {
					i++;
 8000d80:	4b5e      	ldr	r3, [pc, #376]	; (8000efc <processBuffer+0x2b4>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	4b5c      	ldr	r3, [pc, #368]	; (8000efc <processBuffer+0x2b4>)
 8000d8a:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	70fb      	strb	r3, [r7, #3]
				break;
 8000d92:	e030      	b.n	8000df6 <processBuffer+0x1ae>
			}
			case 0xB0: // CC message
			{
				state = 30; // Next state is 30
 8000d94:	4b5b      	ldr	r3, [pc, #364]	; (8000f04 <processBuffer+0x2bc>)
 8000d96:	221e      	movs	r2, #30
 8000d98:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d9a:	4b58      	ldr	r3, [pc, #352]	; (8000efc <processBuffer+0x2b4>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b05      	cmp	r3, #5
 8000da0:	d103      	bne.n	8000daa <processBuffer+0x162>
					i = 0;				// Move to next MIDI byte
 8000da2:	4b56      	ldr	r3, [pc, #344]	; (8000efc <processBuffer+0x2b4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
 8000da8:	e005      	b.n	8000db6 <processBuffer+0x16e>
				}
				else {
					i++;
 8000daa:	4b54      	ldr	r3, [pc, #336]	; (8000efc <processBuffer+0x2b4>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b52      	ldr	r3, [pc, #328]	; (8000efc <processBuffer+0x2b4>)
 8000db4:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	70fb      	strb	r3, [r7, #3]
				break;
 8000dbc:	e01b      	b.n	8000df6 <processBuffer+0x1ae>
			}

			case 0xE0: // Pitch Bend message
			{
				state = 40; // Next state is 40
 8000dbe:	4b51      	ldr	r3, [pc, #324]	; (8000f04 <processBuffer+0x2bc>)
 8000dc0:	2228      	movs	r2, #40	; 0x28
 8000dc2:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000dc4:	4b4d      	ldr	r3, [pc, #308]	; (8000efc <processBuffer+0x2b4>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b05      	cmp	r3, #5
 8000dca:	d103      	bne.n	8000dd4 <processBuffer+0x18c>
					i = 0;				// Move to next MIDI byte
 8000dcc:	4b4b      	ldr	r3, [pc, #300]	; (8000efc <processBuffer+0x2b4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	e005      	b.n	8000de0 <processBuffer+0x198>
				}
				else {
					i++;
 8000dd4:	4b49      	ldr	r3, [pc, #292]	; (8000efc <processBuffer+0x2b4>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b47      	ldr	r3, [pc, #284]	; (8000efc <processBuffer+0x2b4>)
 8000dde:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	70fb      	strb	r3, [r7, #3]
				break;
 8000de6:	e006      	b.n	8000df6 <processBuffer+0x1ae>
			}
			default: // Other type of message, move to next byte but stays in state 0
			{
				//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
				i++;
 8000de8:	4b44      	ldr	r3, [pc, #272]	; (8000efc <processBuffer+0x2b4>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b42      	ldr	r3, [pc, #264]	; (8000efc <processBuffer+0x2b4>)
 8000df2:	701a      	strb	r2, [r3, #0]
				break;
 8000df4:	bf00      	nop
			}
			}
			break;
 8000df6:	e12d      	b.n	8001054 <processBuffer+0x40c>
		}
		// State 10 & 11 : Note ON command
		case 10:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8000dfc:	d903      	bls.n	8000e06 <processBuffer+0x1be>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000dfe:	4b41      	ldr	r3, [pc, #260]	; (8000f04 <processBuffer+0x2bc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
 8000e04:	e126      	b.n	8001054 <processBuffer+0x40c>
			}
			else
			{ // Save MIDI note
				ctrl = key = received_char;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <processBuffer+0x2c4>)
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <processBuffer+0x2c4>)
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <processBuffer+0x2c8>)
 8000e14:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e16:	4b39      	ldr	r3, [pc, #228]	; (8000efc <processBuffer+0x2b4>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b05      	cmp	r3, #5
 8000e1c:	d103      	bne.n	8000e26 <processBuffer+0x1de>
					i = 0;				// Move to next MIDI byte
 8000e1e:	4b37      	ldr	r3, [pc, #220]	; (8000efc <processBuffer+0x2b4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	e005      	b.n	8000e32 <processBuffer+0x1ea>
				}
				else {
					i++;
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <processBuffer+0x2b4>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b33      	ldr	r3, [pc, #204]	; (8000efc <processBuffer+0x2b4>)
 8000e30:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	70fb      	strb	r3, [r7, #3]
				state = 11; // Next state is 11
 8000e38:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <processBuffer+0x2bc>)
 8000e3a:	220b      	movs	r2, #11
 8000e3c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000e3e:	e109      	b.n	8001054 <processBuffer+0x40c>
		}
		case 11:
		{
			data = velocity = received_char; //will only ever get velocity in this section i think
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <processBuffer+0x2cc>)
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <processBuffer+0x2cc>)
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <processBuffer+0x2d0>)
 8000e4e:	701a      	strb	r2, [r3, #0]

			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e50:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <processBuffer+0x2b4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d103      	bne.n	8000e60 <processBuffer+0x218>
				i = 0;				// Move to next MIDI byte
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <processBuffer+0x2b4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e005      	b.n	8000e6c <processBuffer+0x224>
			}
			else {
				i++;
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <processBuffer+0x2b4>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <processBuffer+0x2b4>)
 8000e6a:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	70fb      	strb	r3, [r7, #3]

			state = 10; // Next state is 10
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <processBuffer+0x2bc>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	701a      	strb	r2, [r3, #0]

			if (velocity > 0)
 8000e78:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <processBuffer+0x2cc>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00c      	beq.n	8000e9a <processBuffer+0x252>
			{

				note_list = add_note_last(note_list, key, velocity);
 8000e80:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <processBuffer+0x2d4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <processBuffer+0x2c4>)
 8000e86:	7811      	ldrb	r1, [r2, #0]
 8000e88:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <processBuffer+0x2cc>)
 8000e8a:	7812      	ldrb	r2, [r2, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fb4f 	bl	8000530 <add_note_last>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <processBuffer+0x2d4>)
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e0dc      	b.n	8001054 <processBuffer+0x40c>
				//play_note(midimsg, velocity);
			}
			else
			{
				//find the key and deletes it
				note_list = delete_note(note_list, key);
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <processBuffer+0x2d4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <processBuffer+0x2c4>)
 8000ea0:	7812      	ldrb	r2, [r2, #0]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fb70 	bl	800058a <delete_note>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <processBuffer+0x2d4>)
 8000eae:	6013      	str	r3, [r2, #0]
			}
			break;
 8000eb0:	e0d0      	b.n	8001054 <processBuffer+0x40c>
		}
		// State 20 & 21 : Note OFF command
		case 20:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000eb6:	d903      	bls.n	8000ec0 <processBuffer+0x278>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <processBuffer+0x2bc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	e0c9      	b.n	8001054 <processBuffer+0x40c>
			}

			else
			{
				ctrl = key = received_char; // Save MIDI note
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <processBuffer+0x2c4>)
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <processBuffer+0x2c4>)
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <processBuffer+0x2c8>)
 8000ece:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <processBuffer+0x2b4>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b05      	cmp	r3, #5
 8000ed6:	d103      	bne.n	8000ee0 <processBuffer+0x298>
					i = 0;				// Move to next MIDI byte
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <processBuffer+0x2b4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e005      	b.n	8000eec <processBuffer+0x2a4>
				}
				else {
					i++;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <processBuffer+0x2b4>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <processBuffer+0x2b4>)
 8000eea:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	70fb      	strb	r3, [r7, #3]

				state = 21; // Next state is 21
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <processBuffer+0x2bc>)
 8000ef4:	2215      	movs	r2, #21
 8000ef6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ef8:	e0ac      	b.n	8001054 <processBuffer+0x40c>
 8000efa:	bf00      	nop
 8000efc:	200753b2 	.word	0x200753b2
 8000f00:	200753ac 	.word	0x200753ac
 8000f04:	200753b3 	.word	0x200753b3
 8000f08:	08006d70 	.word	0x08006d70
 8000f0c:	200758b4 	.word	0x200758b4
 8000f10:	20075880 	.word	0x20075880
 8000f14:	200758b1 	.word	0x200758b1
 8000f18:	200758b3 	.word	0x200758b3
 8000f1c:	200753a0 	.word	0x200753a0
		}
		case 21:
		{
			velocity = data = received_char; // Save MIDI velocity
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b50      	ldr	r3, [pc, #320]	; (8001068 <processBuffer+0x420>)
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	4b4f      	ldr	r3, [pc, #316]	; (8001068 <processBuffer+0x420>)
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	4b4f      	ldr	r3, [pc, #316]	; (800106c <processBuffer+0x424>)
 8000f2e:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f30:	4b4f      	ldr	r3, [pc, #316]	; (8001070 <processBuffer+0x428>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b05      	cmp	r3, #5
 8000f36:	d103      	bne.n	8000f40 <processBuffer+0x2f8>
				i = 0;				// Move to next MIDI byte
 8000f38:	4b4d      	ldr	r3, [pc, #308]	; (8001070 <processBuffer+0x428>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	e005      	b.n	8000f4c <processBuffer+0x304>
			}
			else {
				i++;
 8000f40:	4b4b      	ldr	r3, [pc, #300]	; (8001070 <processBuffer+0x428>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b49      	ldr	r3, [pc, #292]	; (8001070 <processBuffer+0x428>)
 8000f4a:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	70fb      	strb	r3, [r7, #3]

			state = 20; // Next state is 20
 8000f52:	4b48      	ldr	r3, [pc, #288]	; (8001074 <processBuffer+0x42c>)
 8000f54:	2214      	movs	r2, #20
 8000f56:	701a      	strb	r2, [r3, #0]

			note_list = delete_note(note_list, key);
 8000f58:	4b47      	ldr	r3, [pc, #284]	; (8001078 <processBuffer+0x430>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a47      	ldr	r2, [pc, #284]	; (800107c <processBuffer+0x434>)
 8000f5e:	7812      	ldrb	r2, [r2, #0]
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fb11 	bl	800058a <delete_note>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a43      	ldr	r2, [pc, #268]	; (8001078 <processBuffer+0x430>)
 8000f6c:	6013      	str	r3, [r2, #0]
			break;
 8000f6e:	e071      	b.n	8001054 <processBuffer+0x40c>
		}
		// State 30 & 31 : CC command
		case 30:
		{
			if (received_char > 0x7F) // If the following byte is not a CC number
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b7f      	cmp	r3, #127	; 0x7f
 8000f74:	d903      	bls.n	8000f7e <processBuffer+0x336>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000f76:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <processBuffer+0x42c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e06a      	b.n	8001054 <processBuffer+0x40c>
			}
			else
			{
				param = received_char; // Save MIDI CC number
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <processBuffer+0x438>)
 8000f84:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f86:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <processBuffer+0x428>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b05      	cmp	r3, #5
 8000f8c:	d103      	bne.n	8000f96 <processBuffer+0x34e>
					i = 0;				// Move to next MIDI byte
 8000f8e:	4b38      	ldr	r3, [pc, #224]	; (8001070 <processBuffer+0x428>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e005      	b.n	8000fa2 <processBuffer+0x35a>
				}
				else {
					i++;
 8000f96:	4b36      	ldr	r3, [pc, #216]	; (8001070 <processBuffer+0x428>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b34      	ldr	r3, [pc, #208]	; (8001070 <processBuffer+0x428>)
 8000fa0:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	70fb      	strb	r3, [r7, #3]
				state = 31; // Next state is 31
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <processBuffer+0x42c>)
 8000faa:	221f      	movs	r2, #31
 8000fac:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000fae:	e051      	b.n	8001054 <processBuffer+0x40c>
		}
		case 31:
		{
			param = received_char; // Save MIDI velocity
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b32      	ldr	r3, [pc, #200]	; (8001080 <processBuffer+0x438>)
 8000fb6:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <processBuffer+0x428>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b05      	cmp	r3, #5
 8000fbe:	d103      	bne.n	8000fc8 <processBuffer+0x380>
				i = 0;				// Move to next MIDI byte
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <processBuffer+0x428>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	e005      	b.n	8000fd4 <processBuffer+0x38c>
			}
			else {
				i++;
 8000fc8:	4b29      	ldr	r3, [pc, #164]	; (8001070 <processBuffer+0x428>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <processBuffer+0x428>)
 8000fd2:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	70fb      	strb	r3, [r7, #3]
			state = 30; // Next state is 30
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <processBuffer+0x42c>)
 8000fdc:	221e      	movs	r2, #30
 8000fde:	701a      	strb	r2, [r3, #0]
			break;
 8000fe0:	e038      	b.n	8001054 <processBuffer+0x40c>
		}
		// State 40 & 41 : Pitch Bend message
		case 40:
		{
			if (received_char > 0x7F) // If following byte is note a PB value
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8000fe6:	d903      	bls.n	8000ff0 <processBuffer+0x3a8>
			{
				state = 0; // Return to state 0
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <processBuffer+0x42c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e031      	b.n	8001054 <processBuffer+0x40c>
			}
			else
			{
				param = received_char; // Save MIDI CC number
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <processBuffer+0x438>)
 8000ff6:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <processBuffer+0x428>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b05      	cmp	r3, #5
 8000ffe:	d103      	bne.n	8001008 <processBuffer+0x3c0>
					i = 0;				// Move to next MIDI byte
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <processBuffer+0x428>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e005      	b.n	8001014 <processBuffer+0x3cc>
				}
				else {
					i++;
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <processBuffer+0x428>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <processBuffer+0x428>)
 8001012:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	3b01      	subs	r3, #1
 8001018:	70fb      	strb	r3, [r7, #3]
				state = 41; // Next state is 41
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <processBuffer+0x42c>)
 800101c:	2229      	movs	r2, #41	; 0x29
 800101e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001020:	e018      	b.n	8001054 <processBuffer+0x40c>
		}
		case 41:
		{
			param = received_char; // Save MIDI velocity
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <processBuffer+0x438>)
 8001028:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <processBuffer+0x428>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b05      	cmp	r3, #5
 8001030:	d103      	bne.n	800103a <processBuffer+0x3f2>
				i = 0;				// Move to next MIDI byte
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <processBuffer+0x428>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	e005      	b.n	8001046 <processBuffer+0x3fe>
			}
			else {
				i++;
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <processBuffer+0x428>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <processBuffer+0x428>)
 8001044:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	3b01      	subs	r3, #1
 800104a:	70fb      	strb	r3, [r7, #3]
			state = 40; // Next state is 00
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <processBuffer+0x42c>)
 800104e:	2228      	movs	r2, #40	; 0x28
 8001050:	701a      	strb	r2, [r3, #0]
			break;
 8001052:	bf00      	nop
	while (nb_MIDI_bytes != 0)
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f47f adfe 	bne.w	8000c58 <processBuffer+0x10>
		}
	}
	}
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200758b3 	.word	0x200758b3
 800106c:	200758b1 	.word	0x200758b1
 8001070:	200753b2 	.word	0x200753b2
 8001074:	200753b3 	.word	0x200753b3
 8001078:	200753a0 	.word	0x200753a0
 800107c:	200758b4 	.word	0x200758b4
 8001080:	2007582d 	.word	0x2007582d

08001084 <HAL_UART_RxHalfCpltCallback>:

//Author: Synthol Project, Adjusted to fit projec

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	2206      	movs	r2, #6
 8001090:	4906      	ldr	r1, [pc, #24]	; (80010ac <HAL_UART_RxHalfCpltCallback+0x28>)
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <HAL_UART_RxHalfCpltCallback+0x2c>)
 8001094:	f004 fb54 	bl	8005740 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 8001098:	2206      	movs	r2, #6
 800109a:	4904      	ldr	r1, [pc, #16]	; (80010ac <HAL_UART_RxHalfCpltCallback+0x28>)
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <HAL_UART_RxHalfCpltCallback+0x2c>)
 800109e:	f004 fbe2 	bl	8005866 <HAL_UART_Receive_DMA>

	//new version dose not call here
		//processBuffer();
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200753ac 	.word	0x200753ac
 80010b0:	200758f8 	.word	0x200758f8

080010b4 <HAL_UART_RxCpltCallback>:

//buffer is full here, do something when full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
 80010bc:	2364      	movs	r3, #100	; 0x64
 80010be:	2206      	movs	r2, #6
 80010c0:	4906      	ldr	r1, [pc, #24]	; (80010dc <HAL_UART_RxCpltCallback+0x28>)
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <HAL_UART_RxCpltCallback+0x2c>)
 80010c4:	f004 fb3c 	bl	8005740 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 80010c8:	2206      	movs	r2, #6
 80010ca:	4904      	ldr	r1, [pc, #16]	; (80010dc <HAL_UART_RxCpltCallback+0x28>)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <HAL_UART_RxCpltCallback+0x2c>)
 80010ce:	f004 fbca 	bl	8005866 <HAL_UART_Receive_DMA>
	//once MIDI buffer is full we send to the process buffer function


	//new version dose not call here
	//processBuffer();
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200753ac 	.word	0x200753ac
 80010e0:	200758f8 	.word	0x200758f8

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010ec:	e7fe      	b.n	80010ec <Error_Handler+0x8>
	...

080010f0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80010f6:	f000 fa29 	bl	800154c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80010fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80010fe:	2201      	movs	r2, #1
 8001100:	2178      	movs	r1, #120	; 0x78
 8001102:	485b      	ldr	r0, [pc, #364]	; (8001270 <SSD1306_Init+0x180>)
 8001104:	f001 fdd2 	bl	8002cac <HAL_I2C_IsDeviceReady>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800110e:	2300      	movs	r3, #0
 8001110:	e0a9      	b.n	8001266 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001112:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001116:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001118:	e002      	b.n	8001120 <SSD1306_Init+0x30>
		p--;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3b01      	subs	r3, #1
 800111e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f9      	bne.n	800111a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001126:	22ae      	movs	r2, #174	; 0xae
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	; 0x78
 800112c:	f000 fa6c 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001130:	2220      	movs	r2, #32
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	; 0x78
 8001136:	f000 fa67 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800113a:	2210      	movs	r2, #16
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	; 0x78
 8001140:	f000 fa62 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001144:	22b0      	movs	r2, #176	; 0xb0
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	; 0x78
 800114a:	f000 fa5d 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800114e:	22c8      	movs	r2, #200	; 0xc8
 8001150:	2100      	movs	r1, #0
 8001152:	2078      	movs	r0, #120	; 0x78
 8001154:	f000 fa58 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	2078      	movs	r0, #120	; 0x78
 800115e:	f000 fa53 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001162:	2210      	movs	r2, #16
 8001164:	2100      	movs	r1, #0
 8001166:	2078      	movs	r0, #120	; 0x78
 8001168:	f000 fa4e 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800116c:	2240      	movs	r2, #64	; 0x40
 800116e:	2100      	movs	r1, #0
 8001170:	2078      	movs	r0, #120	; 0x78
 8001172:	f000 fa49 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001176:	2281      	movs	r2, #129	; 0x81
 8001178:	2100      	movs	r1, #0
 800117a:	2078      	movs	r0, #120	; 0x78
 800117c:	f000 fa44 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001180:	22ff      	movs	r2, #255	; 0xff
 8001182:	2100      	movs	r1, #0
 8001184:	2078      	movs	r0, #120	; 0x78
 8001186:	f000 fa3f 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800118a:	22a1      	movs	r2, #161	; 0xa1
 800118c:	2100      	movs	r1, #0
 800118e:	2078      	movs	r0, #120	; 0x78
 8001190:	f000 fa3a 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001194:	22a6      	movs	r2, #166	; 0xa6
 8001196:	2100      	movs	r1, #0
 8001198:	2078      	movs	r0, #120	; 0x78
 800119a:	f000 fa35 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800119e:	22a8      	movs	r2, #168	; 0xa8
 80011a0:	2100      	movs	r1, #0
 80011a2:	2078      	movs	r0, #120	; 0x78
 80011a4:	f000 fa30 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80011a8:	223f      	movs	r2, #63	; 0x3f
 80011aa:	2100      	movs	r1, #0
 80011ac:	2078      	movs	r0, #120	; 0x78
 80011ae:	f000 fa2b 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80011b2:	22a4      	movs	r2, #164	; 0xa4
 80011b4:	2100      	movs	r1, #0
 80011b6:	2078      	movs	r0, #120	; 0x78
 80011b8:	f000 fa26 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80011bc:	22d3      	movs	r2, #211	; 0xd3
 80011be:	2100      	movs	r1, #0
 80011c0:	2078      	movs	r0, #120	; 0x78
 80011c2:	f000 fa21 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2078      	movs	r0, #120	; 0x78
 80011cc:	f000 fa1c 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80011d0:	22d5      	movs	r2, #213	; 0xd5
 80011d2:	2100      	movs	r1, #0
 80011d4:	2078      	movs	r0, #120	; 0x78
 80011d6:	f000 fa17 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80011da:	22f0      	movs	r2, #240	; 0xf0
 80011dc:	2100      	movs	r1, #0
 80011de:	2078      	movs	r0, #120	; 0x78
 80011e0:	f000 fa12 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80011e4:	22d9      	movs	r2, #217	; 0xd9
 80011e6:	2100      	movs	r1, #0
 80011e8:	2078      	movs	r0, #120	; 0x78
 80011ea:	f000 fa0d 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80011ee:	2222      	movs	r2, #34	; 0x22
 80011f0:	2100      	movs	r1, #0
 80011f2:	2078      	movs	r0, #120	; 0x78
 80011f4:	f000 fa08 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80011f8:	22da      	movs	r2, #218	; 0xda
 80011fa:	2100      	movs	r1, #0
 80011fc:	2078      	movs	r0, #120	; 0x78
 80011fe:	f000 fa03 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001202:	2212      	movs	r2, #18
 8001204:	2100      	movs	r1, #0
 8001206:	2078      	movs	r0, #120	; 0x78
 8001208:	f000 f9fe 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800120c:	22db      	movs	r2, #219	; 0xdb
 800120e:	2100      	movs	r1, #0
 8001210:	2078      	movs	r0, #120	; 0x78
 8001212:	f000 f9f9 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001216:	2220      	movs	r2, #32
 8001218:	2100      	movs	r1, #0
 800121a:	2078      	movs	r0, #120	; 0x78
 800121c:	f000 f9f4 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001220:	228d      	movs	r2, #141	; 0x8d
 8001222:	2100      	movs	r1, #0
 8001224:	2078      	movs	r0, #120	; 0x78
 8001226:	f000 f9ef 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800122a:	2214      	movs	r2, #20
 800122c:	2100      	movs	r1, #0
 800122e:	2078      	movs	r0, #120	; 0x78
 8001230:	f000 f9ea 	bl	8001608 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001234:	22af      	movs	r2, #175	; 0xaf
 8001236:	2100      	movs	r1, #0
 8001238:	2078      	movs	r0, #120	; 0x78
 800123a:	f000 f9e5 	bl	8001608 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800123e:	222e      	movs	r2, #46	; 0x2e
 8001240:	2100      	movs	r1, #0
 8001242:	2078      	movs	r0, #120	; 0x78
 8001244:	f000 f9e0 	bl	8001608 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001248:	2000      	movs	r0, #0
 800124a:	f000 f843 	bl	80012d4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800124e:	f000 f813 	bl	8001278 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <SSD1306_Init+0x184>)
 8001254:	2200      	movs	r2, #0
 8001256:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <SSD1306_Init+0x184>)
 800125a:	2200      	movs	r2, #0
 800125c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SSD1306_Init+0x184>)
 8001260:	2201      	movs	r2, #1
 8001262:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001264:	2301      	movs	r3, #1
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20075834 	.word	0x20075834
 8001274:	200757b4 	.word	0x200757b4

08001278 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	e01d      	b.n	80012c0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	3b50      	subs	r3, #80	; 0x50
 8001288:	b2db      	uxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	2100      	movs	r1, #0
 800128e:	2078      	movs	r0, #120	; 0x78
 8001290:	f000 f9ba 	bl	8001608 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	2078      	movs	r0, #120	; 0x78
 800129a:	f000 f9b5 	bl	8001608 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800129e:	2210      	movs	r2, #16
 80012a0:	2100      	movs	r1, #0
 80012a2:	2078      	movs	r0, #120	; 0x78
 80012a4:	f000 f9b0 	bl	8001608 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	01db      	lsls	r3, r3, #7
 80012ac:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <SSD1306_UpdateScreen+0x58>)
 80012ae:	441a      	add	r2, r3
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	2140      	movs	r1, #64	; 0x40
 80012b4:	2078      	movs	r0, #120	; 0x78
 80012b6:	f000 f95f 	bl	8001578 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	3301      	adds	r3, #1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b07      	cmp	r3, #7
 80012c4:	d9de      	bls.n	8001284 <SSD1306_UpdateScreen+0xc>
	}
}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200753b4 	.word	0x200753b4

080012d4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <SSD1306_Fill+0x14>
 80012e4:	2300      	movs	r3, #0
 80012e6:	e000      	b.n	80012ea <SSD1306_Fill+0x16>
 80012e8:	23ff      	movs	r3, #255	; 0xff
 80012ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ee:	4619      	mov	r1, r3
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <SSD1306_Fill+0x2c>)
 80012f2:	f005 f863 	bl	80063bc <memset>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200753b4 	.word	0x200753b4

08001304 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
 800130e:	460b      	mov	r3, r1
 8001310:	80bb      	strh	r3, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	70fb      	strb	r3, [r7, #3]
	if (
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	2b7f      	cmp	r3, #127	; 0x7f
 800131a:	d848      	bhi.n	80013ae <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	2b3f      	cmp	r3, #63	; 0x3f
 8001320:	d845      	bhi.n	80013ae <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <SSD1306_DrawPixel+0xb8>)
 8001324:	791b      	ldrb	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf0c      	ite	eq
 8001330:	2301      	moveq	r3, #1
 8001332:	2300      	movne	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d11a      	bne.n	8001374 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800133e:	88fa      	ldrh	r2, [r7, #6]
 8001340:	88bb      	ldrh	r3, [r7, #4]
 8001342:	08db      	lsrs	r3, r3, #3
 8001344:	b298      	uxth	r0, r3
 8001346:	4603      	mov	r3, r0
 8001348:	01db      	lsls	r3, r3, #7
 800134a:	4413      	add	r3, r2
 800134c:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <SSD1306_DrawPixel+0xbc>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	b25a      	sxtb	r2, r3
 8001352:	88bb      	ldrh	r3, [r7, #4]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	2101      	movs	r1, #1
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	b25b      	sxtb	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b259      	sxtb	r1, r3
 8001364:	88fa      	ldrh	r2, [r7, #6]
 8001366:	4603      	mov	r3, r0
 8001368:	01db      	lsls	r3, r3, #7
 800136a:	4413      	add	r3, r2
 800136c:	b2c9      	uxtb	r1, r1
 800136e:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <SSD1306_DrawPixel+0xbc>)
 8001370:	54d1      	strb	r1, [r2, r3]
 8001372:	e01d      	b.n	80013b0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001374:	88fa      	ldrh	r2, [r7, #6]
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	b298      	uxth	r0, r3
 800137c:	4603      	mov	r3, r0
 800137e:	01db      	lsls	r3, r3, #7
 8001380:	4413      	add	r3, r2
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <SSD1306_DrawPixel+0xbc>)
 8001384:	5cd3      	ldrb	r3, [r2, r3]
 8001386:	b25a      	sxtb	r2, r3
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	2101      	movs	r1, #1
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	b25b      	sxtb	r3, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	b25b      	sxtb	r3, r3
 800139a:	4013      	ands	r3, r2
 800139c:	b259      	sxtb	r1, r3
 800139e:	88fa      	ldrh	r2, [r7, #6]
 80013a0:	4603      	mov	r3, r0
 80013a2:	01db      	lsls	r3, r3, #7
 80013a4:	4413      	add	r3, r2
 80013a6:	b2c9      	uxtb	r1, r1
 80013a8:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <SSD1306_DrawPixel+0xbc>)
 80013aa:	54d1      	strb	r1, [r2, r3]
 80013ac:	e000      	b.n	80013b0 <SSD1306_DrawPixel+0xac>
		return;
 80013ae:	bf00      	nop
	}
}
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	200757b4 	.word	0x200757b4
 80013c0:	200753b4 	.word	0x200753b4

080013c4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	460a      	mov	r2, r1
 80013ce:	80fb      	strh	r3, [r7, #6]
 80013d0:	4613      	mov	r3, r2
 80013d2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80013d4:	4a05      	ldr	r2, [pc, #20]	; (80013ec <SSD1306_GotoXY+0x28>)
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <SSD1306_GotoXY+0x28>)
 80013dc:	88bb      	ldrh	r3, [r7, #4]
 80013de:	8053      	strh	r3, [r2, #2]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	200757b4 	.word	0x200757b4

080013f0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	4613      	mov	r3, r2
 80013fe:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001400:	4b3a      	ldr	r3, [pc, #232]	; (80014ec <SSD1306_Putc+0xfc>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
	if (
 800140c:	2b7f      	cmp	r3, #127	; 0x7f
 800140e:	dc07      	bgt.n	8001420 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <SSD1306_Putc+0xfc>)
 8001412:	885b      	ldrh	r3, [r3, #2]
 8001414:	461a      	mov	r2, r3
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800141c:	2b3f      	cmp	r3, #63	; 0x3f
 800141e:	dd01      	ble.n	8001424 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	e05e      	b.n	80014e2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	e04b      	b.n	80014c2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	3b20      	subs	r3, #32
 8001432:	6839      	ldr	r1, [r7, #0]
 8001434:	7849      	ldrb	r1, [r1, #1]
 8001436:	fb01 f303 	mul.w	r3, r1, r3
 800143a:	4619      	mov	r1, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	440b      	add	r3, r1
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	e030      	b.n	80014b0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d010      	beq.n	8001480 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800145e:	4b23      	ldr	r3, [pc, #140]	; (80014ec <SSD1306_Putc+0xfc>)
 8001460:	881a      	ldrh	r2, [r3, #0]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	b29b      	uxth	r3, r3
 8001466:	4413      	add	r3, r2
 8001468:	b298      	uxth	r0, r3
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <SSD1306_Putc+0xfc>)
 800146c:	885a      	ldrh	r2, [r3, #2]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	b29b      	uxth	r3, r3
 8001476:	79ba      	ldrb	r2, [r7, #6]
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff ff43 	bl	8001304 <SSD1306_DrawPixel>
 800147e:	e014      	b.n	80014aa <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <SSD1306_Putc+0xfc>)
 8001482:	881a      	ldrh	r2, [r3, #0]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b298      	uxth	r0, r3
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <SSD1306_Putc+0xfc>)
 800148e:	885a      	ldrh	r2, [r3, #2]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4413      	add	r3, r2
 8001496:	b299      	uxth	r1, r3
 8001498:	79bb      	ldrb	r3, [r7, #6]
 800149a:	2b00      	cmp	r3, #0
 800149c:	bf0c      	ite	eq
 800149e:	2301      	moveq	r3, #1
 80014a0:	2300      	movne	r3, #0
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	f7ff ff2d 	bl	8001304 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	3301      	adds	r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d3c8      	bcc.n	800144e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	785b      	ldrb	r3, [r3, #1]
 80014c6:	461a      	mov	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d3ad      	bcc.n	800142a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <SSD1306_Putc+0xfc>)
 80014d0:	881a      	ldrh	r2, [r3, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4413      	add	r3, r2
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <SSD1306_Putc+0xfc>)
 80014de:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200757b4 	.word	0x200757b4

080014f0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	4613      	mov	r3, r2
 80014fc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80014fe:	e012      	b.n	8001526 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff71 	bl	80013f0 <SSD1306_Putc>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d002      	beq.n	8001520 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	e008      	b.n	8001532 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3301      	adds	r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1e8      	bne.n	8001500 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	781b      	ldrb	r3, [r3, #0]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800153e:	2000      	movs	r0, #0
 8001540:	f7ff fec8 	bl	80012d4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001544:	f7ff fe98 	bl	8001278 <SSD1306_UpdateScreen>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <ssd1306_I2C_Init+0x28>)
 8001554:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001556:	e002      	b.n	800155e <ssd1306_I2C_Init+0x12>
		p--;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f9      	bne.n	8001558 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	0003d090 	.word	0x0003d090

08001578 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b0c7      	sub	sp, #284	; 0x11c
 800157c:	af02      	add	r7, sp, #8
 800157e:	4604      	mov	r4, r0
 8001580:	4608      	mov	r0, r1
 8001582:	4639      	mov	r1, r7
 8001584:	600a      	str	r2, [r1, #0]
 8001586:	4619      	mov	r1, r3
 8001588:	1dfb      	adds	r3, r7, #7
 800158a:	4622      	mov	r2, r4
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	1dbb      	adds	r3, r7, #6
 8001590:	4602      	mov	r2, r0
 8001592:	701a      	strb	r2, [r3, #0]
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	460a      	mov	r2, r1
 8001598:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	1dba      	adds	r2, r7, #6
 80015a0:	7812      	ldrb	r2, [r2, #0]
 80015a2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80015aa:	e010      	b.n	80015ce <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80015ac:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015b0:	463a      	mov	r2, r7
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	441a      	add	r2, r3
 80015b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015ba:	3301      	adds	r3, #1
 80015bc:	7811      	ldrb	r1, [r2, #0]
 80015be:	f107 020c 	add.w	r2, r7, #12
 80015c2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80015c4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015c8:	3301      	adds	r3, #1
 80015ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80015ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	1d3a      	adds	r2, r7, #4
 80015d6:	8812      	ldrh	r2, [r2, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8e7      	bhi.n	80015ac <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 80015dc:	1dfb      	adds	r3, r7, #7
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b299      	uxth	r1, r3
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	f107 020c 	add.w	r2, r7, #12
 80015ee:	200a      	movs	r0, #10
 80015f0:	9000      	str	r0, [sp, #0]
 80015f2:	4804      	ldr	r0, [pc, #16]	; (8001604 <ssd1306_I2C_WriteMulti+0x8c>)
 80015f4:	f001 fa66 	bl	8002ac4 <HAL_I2C_Master_Transmit>
}
 80015f8:	bf00      	nop
 80015fa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	bf00      	nop
 8001604:	20075834 	.word	0x20075834

08001608 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af02      	add	r7, sp, #8
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	460b      	mov	r3, r1
 8001614:	71bb      	strb	r3, [r7, #6]
 8001616:	4613      	mov	r3, r2
 8001618:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800161e:	797b      	ldrb	r3, [r7, #5]
 8001620:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	b299      	uxth	r1, r3
 8001626:	f107 020c 	add.w	r2, r7, #12
 800162a:	230a      	movs	r3, #10
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2302      	movs	r3, #2
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <ssd1306_I2C_Write+0x38>)
 8001632:	f001 fa47 	bl	8002ac4 <HAL_I2C_Master_Transmit>
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20075834 	.word	0x20075834

08001644 <SSD1306_Menu>:

/////////////////////////////////////////////////////////////////////////////////////////
//////////////////////[BASE MENU SCREEN]////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
void SSD1306_Menu()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	SSD1306_Init (); 								// initialize the OLED screen
 8001648:	f7ff fd52 	bl	80010f0 <SSD1306_Init>
	SSD1306_Clear();								// clear screen of any previous input information
 800164c:	f7ff ff75 	bl	800153a <SSD1306_Clear>
	SSD1306_GotoXY (0, 0); 							// go to 0, 0
 8001650:	2100      	movs	r1, #0
 8001652:	2000      	movs	r0, #0
 8001654:	f7ff feb6 	bl	80013c4 <SSD1306_GotoXY>
	SSD1306_Puts ("Music Synth", &Font_11x18, 1); 	// print Music Synth
 8001658:	2201      	movs	r2, #1
 800165a:	4916      	ldr	r1, [pc, #88]	; (80016b4 <SSD1306_Menu+0x70>)
 800165c:	4816      	ldr	r0, [pc, #88]	; (80016b8 <SSD1306_Menu+0x74>)
 800165e:	f7ff ff47 	bl	80014f0 <SSD1306_Puts>
	SSD1306_GotoXY (0, 20); 						// go to 0, 20
 8001662:	2114      	movs	r1, #20
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff fead 	bl	80013c4 <SSD1306_GotoXY>
	SSD1306_Puts ("By:", &Font_7x10, 1); 			// print by
 800166a:	2201      	movs	r2, #1
 800166c:	4913      	ldr	r1, [pc, #76]	; (80016bc <SSD1306_Menu+0x78>)
 800166e:	4814      	ldr	r0, [pc, #80]	; (80016c0 <SSD1306_Menu+0x7c>)
 8001670:	f7ff ff3e 	bl	80014f0 <SSD1306_Puts>
	SSD1306_GotoXY (0, 30);							// go to 0, 30
 8001674:	211e      	movs	r1, #30
 8001676:	2000      	movs	r0, #0
 8001678:	f7ff fea4 	bl	80013c4 <SSD1306_GotoXY>
	SSD1306_Puts ("Joshua Mendoza", &Font_7x10, 1);	// print group member 1
 800167c:	2201      	movs	r2, #1
 800167e:	490f      	ldr	r1, [pc, #60]	; (80016bc <SSD1306_Menu+0x78>)
 8001680:	4810      	ldr	r0, [pc, #64]	; (80016c4 <SSD1306_Menu+0x80>)
 8001682:	f7ff ff35 	bl	80014f0 <SSD1306_Puts>
	SSD1306_GotoXY (0, 40);							// go to 0, 40
 8001686:	2128      	movs	r1, #40	; 0x28
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff fe9b 	bl	80013c4 <SSD1306_GotoXY>
	SSD1306_Puts ("Megan Abundo", &Font_7x10, 1);	// print group member 2
 800168e:	2201      	movs	r2, #1
 8001690:	490a      	ldr	r1, [pc, #40]	; (80016bc <SSD1306_Menu+0x78>)
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <SSD1306_Menu+0x84>)
 8001694:	f7ff ff2c 	bl	80014f0 <SSD1306_Puts>
	SSD1306_GotoXY (0, 50);							// go to 0,50
 8001698:	2132      	movs	r1, #50	; 0x32
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff fe92 	bl	80013c4 <SSD1306_GotoXY>
	SSD1306_Puts ("Paris Villarrial", &Font_7x10, 1);// print group member 3
 80016a0:	2201      	movs	r2, #1
 80016a2:	4906      	ldr	r1, [pc, #24]	; (80016bc <SSD1306_Menu+0x78>)
 80016a4:	4809      	ldr	r0, [pc, #36]	; (80016cc <SSD1306_Menu+0x88>)
 80016a6:	f7ff ff23 	bl	80014f0 <SSD1306_Puts>
	SSD1306_UpdateScreen(); 						// update screen with new input information
 80016aa:	f7ff fde5 	bl	8001278 <SSD1306_UpdateScreen>

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008
 80016b8:	08006d80 	.word	0x08006d80
 80016bc:	20000000 	.word	0x20000000
 80016c0:	08006d8c 	.word	0x08006d8c
 80016c4:	08006d90 	.word	0x08006d90
 80016c8:	08006da0 	.word	0x08006da0
 80016cc:	08006db0 	.word	0x08006db0

080016d0 <SSD1306_Note0>:

////////////////////
////////////////////[OCTAVE -1]///////////////////////////
////////////////////

void SSD1306_Note0(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	SSD1306_Init (); 								// initialize the OLED screen
 80016d4:	f7ff fd0c 	bl	80010f0 <SSD1306_Init>
	SSD1306_Clear();								// clear screen of any previous input information
 80016d8:	f7ff ff2f 	bl	800153a <SSD1306_Clear>
	SSD1306_GotoXY (0, 0); 							// go to 0, 0 (top left corner of the screen)
 80016dc:	2100      	movs	r1, #0
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff fe70 	bl	80013c4 <SSD1306_GotoXY>
	SSD1306_Puts ("Wave: Sine", &Font_11x18, 1);	// display current wave
 80016e4:	2201      	movs	r2, #1
 80016e6:	490d      	ldr	r1, [pc, #52]	; (800171c <SSD1306_Note0+0x4c>)
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <SSD1306_Note0+0x50>)
 80016ea:	f7ff ff01 	bl	80014f0 <SSD1306_Puts>
	SSD1306_GotoXY (0,20); 							// go to 0, 20 (dropping to a new row below)
 80016ee:	2114      	movs	r1, #20
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff fe67 	bl	80013c4 <SSD1306_GotoXY>
	SSD1306_Puts ("Note: C", &Font_11x18, 1); 		// display current note
 80016f6:	2201      	movs	r2, #1
 80016f8:	4908      	ldr	r1, [pc, #32]	; (800171c <SSD1306_Note0+0x4c>)
 80016fa:	480a      	ldr	r0, [pc, #40]	; (8001724 <SSD1306_Note0+0x54>)
 80016fc:	f7ff fef8 	bl	80014f0 <SSD1306_Puts>
	SSD1306_GotoXY (0, 40); 						// go to 0, 40 (dropping to a new row below)
 8001700:	2128      	movs	r1, #40	; 0x28
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff fe5e 	bl	80013c4 <SSD1306_GotoXY>
	SSD1306_Puts ("Octv: -1", &Font_11x18, 1);  	// display current octave
 8001708:	2201      	movs	r2, #1
 800170a:	4904      	ldr	r1, [pc, #16]	; (800171c <SSD1306_Note0+0x4c>)
 800170c:	4806      	ldr	r0, [pc, #24]	; (8001728 <SSD1306_Note0+0x58>)
 800170e:	f7ff feef 	bl	80014f0 <SSD1306_Puts>
	SSD1306_UpdateScreen();							// update screen with new input information
 8001712:	f7ff fdb1 	bl	8001278 <SSD1306_UpdateScreen>
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000008 	.word	0x20000008
 8001720:	08006dc4 	.word	0x08006dc4
 8001724:	08006dd0 	.word	0x08006dd0
 8001728:	08006dd8 	.word	0x08006dd8

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_MspInit+0x44>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_MspInit+0x44>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_MspInit+0x44>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_MspInit+0x44>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <HAL_MspInit+0x44>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_MspInit+0x44>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <HAL_I2C_MspInit+0x7c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d127      	bne.n	80017e6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_I2C_MspInit+0x80>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <HAL_I2C_MspInit+0x80>)
 800179c:	f043 0320 	orr.w	r3, r3, #32
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_I2C_MspInit+0x80>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ae:	2303      	movs	r3, #3
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b2:	2312      	movs	r3, #18
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017be:	2304      	movs	r3, #4
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <HAL_I2C_MspInit+0x84>)
 80017ca:	f000 ff25 	bl	8002618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_I2C_MspInit+0x80>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <HAL_I2C_MspInit+0x80>)
 80017d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_I2C_MspInit+0x80>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40005800 	.word	0x40005800
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40021400 	.word	0x40021400

080017fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_I2S_MspInit+0x7c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d127      	bne.n	800186e <HAL_I2S_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_I2S_MspInit+0x80>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a16      	ldr	r2, [pc, #88]	; (800187c <HAL_I2S_MspInit+0x80>)
 8001824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_I2S_MspInit+0x80>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_I2S_MspInit+0x80>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <HAL_I2S_MspInit+0x80>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_I2S_MspInit+0x80>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800184e:	23b0      	movs	r3, #176	; 0xb0
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800185e:	2305      	movs	r3, #5
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <HAL_I2S_MspInit+0x84>)
 800186a:	f000 fed5 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800186e:	bf00      	nop
 8001870:	3728      	adds	r7, #40	; 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40013000 	.word	0x40013000
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000

08001884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a3d      	ldr	r2, [pc, #244]	; (8001998 <HAL_UART_MspInit+0x114>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d173      	bne.n	800198e <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018a6:	4b3d      	ldr	r3, [pc, #244]	; (800199c <HAL_UART_MspInit+0x118>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a3c      	ldr	r2, [pc, #240]	; (800199c <HAL_UART_MspInit+0x118>)
 80018ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b3a      	ldr	r3, [pc, #232]	; (800199c <HAL_UART_MspInit+0x118>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b37      	ldr	r3, [pc, #220]	; (800199c <HAL_UART_MspInit+0x118>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a36      	ldr	r2, [pc, #216]	; (800199c <HAL_UART_MspInit+0x118>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <HAL_UART_MspInit+0x118>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_UART_MspInit+0x118>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a30      	ldr	r2, [pc, #192]	; (800199c <HAL_UART_MspInit+0x118>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_UART_MspInit+0x118>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018ee:	2301      	movs	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018fe:	2308      	movs	r3, #8
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4825      	ldr	r0, [pc, #148]	; (80019a0 <HAL_UART_MspInit+0x11c>)
 800190a:	f000 fe85 	bl	8002618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800190e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001920:	2308      	movs	r3, #8
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	481e      	ldr	r0, [pc, #120]	; (80019a4 <HAL_UART_MspInit+0x120>)
 800192c:	f000 fe74 	bl	8002618 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_UART_MspInit+0x124>)
 8001932:	4a1e      	ldr	r2, [pc, #120]	; (80019ac <HAL_UART_MspInit+0x128>)
 8001934:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_UART_MspInit+0x124>)
 8001938:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800193c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_UART_MspInit+0x124>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_UART_MspInit+0x124>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_UART_MspInit+0x124>)
 800194c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001950:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_UART_MspInit+0x124>)
 8001954:	2200      	movs	r2, #0
 8001956:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <HAL_UART_MspInit+0x124>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_UART_MspInit+0x124>)
 8001960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001964:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_UART_MspInit+0x124>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_UART_MspInit+0x124>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001972:	480d      	ldr	r0, [pc, #52]	; (80019a8 <HAL_UART_MspInit+0x124>)
 8001974:	f000 fad8 	bl	8001f28 <HAL_DMA_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 800197e:	f7ff fbb1 	bl	80010e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_UART_MspInit+0x124>)
 8001986:	671a      	str	r2, [r3, #112]	; 0x70
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_UART_MspInit+0x124>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40004c00 	.word	0x40004c00
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020000 	.word	0x40020000
 80019a4:	40020800 	.word	0x40020800
 80019a8:	200757cc 	.word	0x200757cc
 80019ac:	40026040 	.word	0x40026040

080019b0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a15      	ldr	r2, [pc, #84]	; (8001a14 <HAL_SAI_MspInit+0x64>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d124      	bne.n	8001a0c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_SAI_MspInit+0x68>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10b      	bne.n	80019e2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_SAI_MspInit+0x6c>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <HAL_SAI_MspInit+0x6c>)
 80019d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_SAI_MspInit+0x6c>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_SAI_MspInit+0x68>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <HAL_SAI_MspInit+0x68>)
 80019ea:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80019ec:	2370      	movs	r3, #112	; 0x70
 80019ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80019fc:	2306      	movs	r3, #6
 80019fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4619      	mov	r1, r3
 8001a06:	4806      	ldr	r0, [pc, #24]	; (8001a20 <HAL_SAI_MspInit+0x70>)
 8001a08:	f000 fe06 	bl	8002618 <HAL_GPIO_Init>

    }
}
 8001a0c:	bf00      	nop
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40015804 	.word	0x40015804
 8001a18:	200757bc 	.word	0x200757bc
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40021000 	.word	0x40021000

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <NMI_Handler+0x4>

08001a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler+0x4>

08001a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a70:	f000 f928 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <DMA1_Stream2_IRQHandler+0x10>)
 8001a7e:	f000 fb61 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200757cc 	.word	0x200757cc

08001a8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e00a      	b.n	8001ab4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a9e:	f3af 8000 	nop.w
 8001aa2:	4601      	mov	r1, r0
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	60ba      	str	r2, [r7, #8]
 8001aaa:	b2ca      	uxtb	r2, r1
 8001aac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dbf0      	blt.n	8001a9e <_read+0x12>
	}

return len;
 8001abc:	687b      	ldr	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e009      	b.n	8001aec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	60ba      	str	r2, [r7, #8]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dbf1      	blt.n	8001ad8 <_write+0x12>
	}
	return len;
 8001af4:	687b      	ldr	r3, [r7, #4]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_close>:

int _close(int file)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
	return -1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b26:	605a      	str	r2, [r3, #4]
	return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <_isatty>:

int _isatty(int file)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
	return 0;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <_sbrk+0x5c>)
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <_sbrk+0x60>)
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <_sbrk+0x64>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <_sbrk+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d207      	bcs.n	8001ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b98:	f004 fbd6 	bl	8006348 <__errno>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e009      	b.n	8001bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <_sbrk+0x64>)
 8001bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20080000 	.word	0x20080000
 8001bc8:	00000400 	.word	0x00000400
 8001bcc:	200757c0 	.word	0x200757c0
 8001bd0:	20075a20 	.word	0x20075a20

08001bd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <SystemInit+0x20>)
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <SystemInit+0x20>)
 8001be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bfc:	480d      	ldr	r0, [pc, #52]	; (8001c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bfe:	490e      	ldr	r1, [pc, #56]	; (8001c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c00:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c04:	e002      	b.n	8001c0c <LoopCopyDataInit>

08001c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0a:	3304      	adds	r3, #4

08001c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c10:	d3f9      	bcc.n	8001c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c14:	4c0b      	ldr	r4, [pc, #44]	; (8001c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c18:	e001      	b.n	8001c1e <LoopFillZerobss>

08001c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c1c:	3204      	adds	r2, #4

08001c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c20:	d3fb      	bcc.n	8001c1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c22:	f7ff ffd7 	bl	8001bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c26:	f004 fb95 	bl	8006354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c2a:	f7fe fcf5 	bl	8000618 <main>
  bx  lr    
 8001c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c30:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c38:	20075384 	.word	0x20075384
  ldr r2, =_sidata
 8001c3c:	080084fc 	.word	0x080084fc
  ldr r2, =_sbss
 8001c40:	20075384 	.word	0x20075384
  ldr r4, =_ebss
 8001c44:	20075a1c 	.word	0x20075a1c

08001c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC_IRQHandler>

08001c4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4e:	2003      	movs	r0, #3
 8001c50:	f000 f928 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c54:	200f      	movs	r0, #15
 8001c56:	f000 f805 	bl	8001c64 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c5a:	f7ff fd67 	bl	800172c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f943 	bl	8001f0e <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 f90b 	bl	8001eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20075314 	.word	0x20075314
 8001cbc:	2007531c 	.word	0x2007531c
 8001cc0:	20075318 	.word	0x20075318

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	2007531c 	.word	0x2007531c
 8001ce8:	20075a08 	.word	0x20075a08

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20075a08 	.word	0x20075a08

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <__NVIC_SetPriorityGrouping+0x40>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <__NVIC_SetPriorityGrouping+0x40>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00
 8001d48:	05fa0000 	.word	0x05fa0000

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <__NVIC_EnableIRQ+0x38>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff29 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff3e 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff8e 	bl	8001df8 <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5d 	bl	8001da4 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff31 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffa2 	bl	8001e60 <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff feda 	bl	8001cec <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e099      	b.n	8002078 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f64:	e00f      	b.n	8001f86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f66:	f7ff fec1 	bl	8001cec <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d908      	bls.n	8001f86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e078      	b.n	8002078 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e8      	bne.n	8001f66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4b38      	ldr	r3, [pc, #224]	; (8002080 <HAL_DMA_Init+0x158>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d107      	bne.n	8001ff0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f023 0307 	bic.w	r3, r3, #7
 8002006:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	2b04      	cmp	r3, #4
 8002018:	d117      	bne.n	800204a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00e      	beq.n	800204a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fa77 	bl	8002520 <DMA_CheckFifoParam>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2240      	movs	r2, #64	; 0x40
 800203c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002046:	2301      	movs	r3, #1
 8002048:	e016      	b.n	8002078 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa2e 	bl	80024b4 <DMA_CalcBaseAndBitshift>
 8002058:	4603      	mov	r3, r0
 800205a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	223f      	movs	r2, #63	; 0x3f
 8002062:	409a      	lsls	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	e010803f 	.word	0xe010803f

08002084 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_DMA_Start_IT+0x26>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e048      	b.n	800213c <HAL_DMA_Start_IT+0xb8>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d137      	bne.n	800212e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f9c0 	bl	8002458 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	223f      	movs	r2, #63	; 0x3f
 80020de:	409a      	lsls	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0216 	orr.w	r2, r2, #22
 80020f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002102:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0208 	orr.w	r2, r2, #8
 800211a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e005      	b.n	800213a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002136:	2302      	movs	r3, #2
 8002138:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800213a:	7dfb      	ldrb	r3, [r7, #23]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002150:	4b92      	ldr	r3, [pc, #584]	; (800239c <HAL_DMA_IRQHandler+0x258>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a92      	ldr	r2, [pc, #584]	; (80023a0 <HAL_DMA_IRQHandler+0x25c>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	0a9b      	lsrs	r3, r3, #10
 800215c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	2208      	movs	r2, #8
 8002170:	409a      	lsls	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01a      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0204 	bic.w	r2, r2, #4
 8002196:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	2208      	movs	r2, #8
 800219e:	409a      	lsls	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b4:	2201      	movs	r2, #1
 80021b6:	409a      	lsls	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d012      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	2201      	movs	r2, #1
 80021d4:	409a      	lsls	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	f043 0202 	orr.w	r2, r3, #2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	2204      	movs	r2, #4
 80021ec:	409a      	lsls	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d012      	beq.n	800221c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00b      	beq.n	800221c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	2204      	movs	r2, #4
 800220a:	409a      	lsls	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	f043 0204 	orr.w	r2, r3, #4
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	2210      	movs	r2, #16
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d043      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d03c      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223e:	2210      	movs	r2, #16
 8002240:	409a      	lsls	r2, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d018      	beq.n	8002286 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d108      	bne.n	8002274 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d024      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
 8002272:	e01f      	b.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
 8002284:	e016      	b.n	80022b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d107      	bne.n	80022a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0208 	bic.w	r2, r2, #8
 80022a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	2220      	movs	r2, #32
 80022ba:	409a      	lsls	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4013      	ands	r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 808e 	beq.w	80023e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8086 	beq.w	80023e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	2220      	movs	r2, #32
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d136      	bne.n	800235c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0216 	bic.w	r2, r2, #22
 80022fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800230c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <HAL_DMA_IRQHandler+0x1da>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0208 	bic.w	r2, r2, #8
 800232c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	223f      	movs	r2, #63	; 0x3f
 8002334:	409a      	lsls	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234e:	2b00      	cmp	r3, #0
 8002350:	d07d      	beq.n	800244e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	4798      	blx	r3
        }
        return;
 800235a:	e078      	b.n	800244e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01c      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d108      	bne.n	800238a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	2b00      	cmp	r3, #0
 800237e:	d030      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
 8002388:	e02b      	b.n	80023e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d027      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	4798      	blx	r3
 800239a:	e022      	b.n	80023e2 <HAL_DMA_IRQHandler+0x29e>
 800239c:	20075314 	.word	0x20075314
 80023a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10f      	bne.n	80023d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0210 	bic.w	r2, r2, #16
 80023c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d032      	beq.n	8002450 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d022      	beq.n	800243c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2205      	movs	r2, #5
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	3301      	adds	r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	429a      	cmp	r2, r3
 8002418:	d307      	bcc.n	800242a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f2      	bne.n	800240e <HAL_DMA_IRQHandler+0x2ca>
 8002428:	e000      	b.n	800242c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800242a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4798      	blx	r3
 800244c:	e000      	b.n	8002450 <HAL_DMA_IRQHandler+0x30c>
        return;
 800244e:	bf00      	nop
    }
  }
}
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop

08002458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002474:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b40      	cmp	r3, #64	; 0x40
 8002484:	d108      	bne.n	8002498 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002496:	e007      	b.n	80024a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	60da      	str	r2, [r3, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	3b10      	subs	r3, #16
 80024c4:	4a13      	ldr	r2, [pc, #76]	; (8002514 <DMA_CalcBaseAndBitshift+0x60>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <DMA_CalcBaseAndBitshift+0x64>)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d908      	bls.n	80024f4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <DMA_CalcBaseAndBitshift+0x68>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	1d1a      	adds	r2, r3, #4
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	659a      	str	r2, [r3, #88]	; 0x58
 80024f2:	e006      	b.n	8002502 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <DMA_CalcBaseAndBitshift+0x68>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	aaaaaaab 	.word	0xaaaaaaab
 8002518:	08008480 	.word	0x08008480
 800251c:	fffffc00 	.word	0xfffffc00

08002520 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11f      	bne.n	800257a <DMA_CheckFifoParam+0x5a>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d856      	bhi.n	80025ee <DMA_CheckFifoParam+0xce>
 8002540:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <DMA_CheckFifoParam+0x28>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	08002559 	.word	0x08002559
 800254c:	0800256b 	.word	0x0800256b
 8002550:	08002559 	.word	0x08002559
 8002554:	080025ef 	.word	0x080025ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d046      	beq.n	80025f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002568:	e043      	b.n	80025f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002572:	d140      	bne.n	80025f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002578:	e03d      	b.n	80025f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002582:	d121      	bne.n	80025c8 <DMA_CheckFifoParam+0xa8>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d837      	bhi.n	80025fa <DMA_CheckFifoParam+0xda>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <DMA_CheckFifoParam+0x70>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025a1 	.word	0x080025a1
 8002594:	080025a7 	.word	0x080025a7
 8002598:	080025a1 	.word	0x080025a1
 800259c:	080025b9 	.word	0x080025b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      break;
 80025a4:	e030      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d025      	beq.n	80025fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b6:	e022      	b.n	80025fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025c0:	d11f      	bne.n	8002602 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025c6:	e01c      	b.n	8002602 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d903      	bls.n	80025d6 <DMA_CheckFifoParam+0xb6>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d003      	beq.n	80025dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025d4:	e018      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
      break;
 80025da:	e015      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00e      	beq.n	8002606 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
      break;
 80025ec:	e00b      	b.n	8002606 <DMA_CheckFifoParam+0xe6>
      break;
 80025ee:	bf00      	nop
 80025f0:	e00a      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025f2:	bf00      	nop
 80025f4:	e008      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
 80025f8:	e006      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025fa:	bf00      	nop
 80025fc:	e004      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025fe:	bf00      	nop
 8002600:	e002      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;   
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 8002606:	bf00      	nop
    }
  } 
  
  return status; 
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e175      	b.n	8002924 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002638:	2201      	movs	r2, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	429a      	cmp	r2, r3
 8002652:	f040 8164 	bne.w	800291e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d00b      	beq.n	8002676 <HAL_GPIO_Init+0x5e>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800266a:	2b11      	cmp	r3, #17
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b12      	cmp	r3, #18
 8002674:	d130      	bne.n	80026d8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2203      	movs	r2, #3
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 0201 	and.w	r2, r3, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x100>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b12      	cmp	r3, #18
 8002716:	d123      	bne.n	8002760 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	220f      	movs	r2, #15
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	08da      	lsrs	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3208      	adds	r2, #8
 800275a:	69b9      	ldr	r1, [r7, #24]
 800275c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0203 	and.w	r2, r3, #3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80be 	beq.w	800291e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a2:	4b66      	ldr	r3, [pc, #408]	; (800293c <HAL_GPIO_Init+0x324>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a65      	ldr	r2, [pc, #404]	; (800293c <HAL_GPIO_Init+0x324>)
 80027a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b63      	ldr	r3, [pc, #396]	; (800293c <HAL_GPIO_Init+0x324>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027ba:	4a61      	ldr	r2, [pc, #388]	; (8002940 <HAL_GPIO_Init+0x328>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a58      	ldr	r2, [pc, #352]	; (8002944 <HAL_GPIO_Init+0x32c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d037      	beq.n	8002856 <HAL_GPIO_Init+0x23e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a57      	ldr	r2, [pc, #348]	; (8002948 <HAL_GPIO_Init+0x330>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d031      	beq.n	8002852 <HAL_GPIO_Init+0x23a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a56      	ldr	r2, [pc, #344]	; (800294c <HAL_GPIO_Init+0x334>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d02b      	beq.n	800284e <HAL_GPIO_Init+0x236>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a55      	ldr	r2, [pc, #340]	; (8002950 <HAL_GPIO_Init+0x338>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d025      	beq.n	800284a <HAL_GPIO_Init+0x232>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a54      	ldr	r2, [pc, #336]	; (8002954 <HAL_GPIO_Init+0x33c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01f      	beq.n	8002846 <HAL_GPIO_Init+0x22e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a53      	ldr	r2, [pc, #332]	; (8002958 <HAL_GPIO_Init+0x340>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d019      	beq.n	8002842 <HAL_GPIO_Init+0x22a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a52      	ldr	r2, [pc, #328]	; (800295c <HAL_GPIO_Init+0x344>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_GPIO_Init+0x226>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a51      	ldr	r2, [pc, #324]	; (8002960 <HAL_GPIO_Init+0x348>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00d      	beq.n	800283a <HAL_GPIO_Init+0x222>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a50      	ldr	r2, [pc, #320]	; (8002964 <HAL_GPIO_Init+0x34c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_Init+0x21e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4f      	ldr	r2, [pc, #316]	; (8002968 <HAL_GPIO_Init+0x350>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_GPIO_Init+0x21a>
 800282e:	2309      	movs	r3, #9
 8002830:	e012      	b.n	8002858 <HAL_GPIO_Init+0x240>
 8002832:	230a      	movs	r3, #10
 8002834:	e010      	b.n	8002858 <HAL_GPIO_Init+0x240>
 8002836:	2308      	movs	r3, #8
 8002838:	e00e      	b.n	8002858 <HAL_GPIO_Init+0x240>
 800283a:	2307      	movs	r3, #7
 800283c:	e00c      	b.n	8002858 <HAL_GPIO_Init+0x240>
 800283e:	2306      	movs	r3, #6
 8002840:	e00a      	b.n	8002858 <HAL_GPIO_Init+0x240>
 8002842:	2305      	movs	r3, #5
 8002844:	e008      	b.n	8002858 <HAL_GPIO_Init+0x240>
 8002846:	2304      	movs	r3, #4
 8002848:	e006      	b.n	8002858 <HAL_GPIO_Init+0x240>
 800284a:	2303      	movs	r3, #3
 800284c:	e004      	b.n	8002858 <HAL_GPIO_Init+0x240>
 800284e:	2302      	movs	r3, #2
 8002850:	e002      	b.n	8002858 <HAL_GPIO_Init+0x240>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_GPIO_Init+0x240>
 8002856:	2300      	movs	r3, #0
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f002 0203 	and.w	r2, r2, #3
 800285e:	0092      	lsls	r2, r2, #2
 8002860:	4093      	lsls	r3, r2
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002868:	4935      	ldr	r1, [pc, #212]	; (8002940 <HAL_GPIO_Init+0x328>)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	3302      	adds	r3, #2
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002876:	4b3d      	ldr	r3, [pc, #244]	; (800296c <HAL_GPIO_Init+0x354>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800289a:	4a34      	ldr	r2, [pc, #208]	; (800296c <HAL_GPIO_Init+0x354>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028a0:	4b32      	ldr	r3, [pc, #200]	; (800296c <HAL_GPIO_Init+0x354>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028c4:	4a29      	ldr	r2, [pc, #164]	; (800296c <HAL_GPIO_Init+0x354>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ca:	4b28      	ldr	r3, [pc, #160]	; (800296c <HAL_GPIO_Init+0x354>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ee:	4a1f      	ldr	r2, [pc, #124]	; (800296c <HAL_GPIO_Init+0x354>)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_GPIO_Init+0x354>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <HAL_GPIO_Init+0x354>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3301      	adds	r3, #1
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b0f      	cmp	r3, #15
 8002928:	f67f ae86 	bls.w	8002638 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3724      	adds	r7, #36	; 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	40013800 	.word	0x40013800
 8002944:	40020000 	.word	0x40020000
 8002948:	40020400 	.word	0x40020400
 800294c:	40020800 	.word	0x40020800
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40021000 	.word	0x40021000
 8002958:	40021400 	.word	0x40021400
 800295c:	40021800 	.word	0x40021800
 8002960:	40021c00 	.word	0x40021c00
 8002964:	40022000 	.word	0x40022000
 8002968:	40022400 	.word	0x40022400
 800296c:	40013c00 	.word	0x40013c00

08002970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	807b      	strh	r3, [r7, #2]
 800297c:	4613      	mov	r3, r2
 800297e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002980:	787b      	ldrb	r3, [r7, #1]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800298c:	e003      	b.n	8002996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800298e:	887b      	ldrh	r3, [r7, #2]
 8002990:	041a      	lsls	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	619a      	str	r2, [r3, #24]
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e07f      	b.n	8002ab6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe fed2 	bl	8001774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2224      	movs	r2, #36	; 0x24
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	e006      	b.n	8002a2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d104      	bne.n	8002a3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_I2C_Init+0x11c>)
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	ea42 0103 	orr.w	r1, r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	021a      	lsls	r2, r3, #8
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69d9      	ldr	r1, [r3, #28]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1a      	ldr	r2, [r3, #32]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	02008000 	.word	0x02008000

08002ac4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	817b      	strh	r3, [r7, #10]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	f040 80da 	bne.w	8002c9a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_I2C_Master_Transmit+0x30>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e0d3      	b.n	8002c9c <HAL_I2C_Master_Transmit+0x1d8>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002afc:	f7ff f8f6 	bl	8001cec <HAL_GetTick>
 8002b00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2319      	movs	r3, #25
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f9f8 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e0be      	b.n	8002c9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2221      	movs	r2, #33	; 0x21
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2210      	movs	r2, #16
 8002b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	893a      	ldrh	r2, [r7, #8]
 8002b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2bff      	cmp	r3, #255	; 0xff
 8002b4e:	d90e      	bls.n	8002b6e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	22ff      	movs	r2, #255	; 0xff
 8002b54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	8979      	ldrh	r1, [r7, #10]
 8002b5e:	4b51      	ldr	r3, [pc, #324]	; (8002ca4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 faee 	bl	8003148 <I2C_TransferConfig>
 8002b6c:	e06c      	b.n	8002c48 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	8979      	ldrh	r1, [r7, #10]
 8002b80:	4b48      	ldr	r3, [pc, #288]	; (8002ca4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fadd 	bl	8003148 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002b8e:	e05b      	b.n	8002c48 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	6a39      	ldr	r1, [r7, #32]
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f9f5 	bl	8002f84 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e07b      	b.n	8002c9c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	781a      	ldrb	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d034      	beq.n	8002c48 <HAL_I2C_Master_Transmit+0x184>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d130      	bne.n	8002c48 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2180      	movs	r1, #128	; 0x80
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f987 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e04d      	b.n	8002c9c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2bff      	cmp	r3, #255	; 0xff
 8002c08:	d90e      	bls.n	8002c28 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	22ff      	movs	r2, #255	; 0xff
 8002c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	8979      	ldrh	r1, [r7, #10]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fa91 	bl	8003148 <I2C_TransferConfig>
 8002c26:	e00f      	b.n	8002c48 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	8979      	ldrh	r1, [r7, #10]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fa80 	bl	8003148 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d19e      	bne.n	8002b90 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	6a39      	ldr	r1, [r7, #32]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f9d4 	bl	8003004 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e01a      	b.n	8002c9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_I2C_Master_Transmit+0x1e4>)
 8002c7a:	400b      	ands	r3, r1
 8002c7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
  }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	80002000 	.word	0x80002000
 8002ca8:	fe00e800 	.word	0xfe00e800

08002cac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	f040 80ef 	bne.w	8002eac <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e0e5      	b.n	8002eae <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_I2C_IsDeviceReady+0x44>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e0de      	b.n	8002eae <HAL_I2C_IsDeviceReady+0x202>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2224      	movs	r2, #36	; 0x24
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d105      	bne.n	8002d1a <HAL_I2C_IsDeviceReady+0x6e>
 8002d0e:	897b      	ldrh	r3, [r7, #10]
 8002d10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d14:	4b68      	ldr	r3, [pc, #416]	; (8002eb8 <HAL_I2C_IsDeviceReady+0x20c>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	e004      	b.n	8002d24 <HAL_I2C_IsDeviceReady+0x78>
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d20:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002d2a:	f7fe ffdf 	bl	8001cec <HAL_GetTick>
 8002d2e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2301      	moveq	r3, #1
 8002d40:	2300      	movne	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d5c:	e034      	b.n	8002dc8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d01a      	beq.n	8002d9c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d66:	f7fe ffc1 	bl	8001cec <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d302      	bcc.n	8002d7c <HAL_I2C_IsDeviceReady+0xd0>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10f      	bne.n	8002d9c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e088      	b.n	8002eae <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	bf0c      	ite	eq
 8002daa:	2301      	moveq	r3, #1
 8002dac:	2300      	movne	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002dc8:	7ffb      	ldrb	r3, [r7, #31]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d102      	bne.n	8002dd4 <HAL_I2C_IsDeviceReady+0x128>
 8002dce:	7fbb      	ldrb	r3, [r7, #30]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0c4      	beq.n	8002d5e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d01a      	beq.n	8002e18 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2200      	movs	r2, #0
 8002dea:	2120      	movs	r1, #32
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f889 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e058      	b.n	8002eae <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2220      	movs	r2, #32
 8002e02:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e04a      	b.n	8002eae <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2120      	movs	r1, #32
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f86e 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e03d      	b.n	8002eae <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2210      	movs	r2, #16
 8002e38:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d118      	bne.n	8002e7c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e58:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2200      	movs	r2, #0
 8002e62:	2120      	movs	r1, #32
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f84d 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e01c      	b.n	8002eae <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	f63f af3d 	bhi.w	8002d06 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	f043 0220 	orr.w	r2, r3, #32
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
  }
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	02002000 	.word	0x02002000

08002ebc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d103      	bne.n	8002eda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d007      	beq.n	8002ef8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	619a      	str	r2, [r3, #24]
  }
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f14:	e022      	b.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d01e      	beq.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7fe fee5 	bl	8001cec <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d113      	bne.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	f043 0220 	orr.w	r2, r3, #32
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e00f      	b.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d0cd      	beq.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f90:	e02c      	b.n	8002fec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f870 	bl	800307c <I2C_IsAcknowledgeFailed>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e02a      	b.n	8002ffc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d01e      	beq.n	8002fec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7fe fe9d 	bl	8001cec <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d113      	bne.n	8002fec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc8:	f043 0220 	orr.w	r2, r3, #32
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e007      	b.n	8002ffc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d1cb      	bne.n	8002f92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003010:	e028      	b.n	8003064 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f830 	bl	800307c <I2C_IsAcknowledgeFailed>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e026      	b.n	8003074 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003026:	f7fe fe61 	bl	8001cec <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d302      	bcc.n	800303c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d113      	bne.n	8003064 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	f043 0220 	orr.w	r2, r3, #32
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e007      	b.n	8003074 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b20      	cmp	r3, #32
 8003070:	d1cf      	bne.n	8003012 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b10      	cmp	r3, #16
 8003094:	d151      	bne.n	800313a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003096:	e022      	b.n	80030de <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d01e      	beq.n	80030de <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a0:	f7fe fe24 	bl	8001cec <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d302      	bcc.n	80030b6 <I2C_IsAcknowledgeFailed+0x3a>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d113      	bne.n	80030de <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f043 0220 	orr.w	r2, r3, #32
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e02e      	b.n	800313c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d1d5      	bne.n	8003098 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2210      	movs	r2, #16
 80030f2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2220      	movs	r2, #32
 80030fa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f7ff fedd 	bl	8002ebc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <I2C_IsAcknowledgeFailed+0xc8>)
 800310e:	400b      	ands	r3, r1
 8003110:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f043 0204 	orr.w	r2, r3, #4
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	fe00e800 	.word	0xfe00e800

08003148 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	817b      	strh	r3, [r7, #10]
 8003156:	4613      	mov	r3, r2
 8003158:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	0d5b      	lsrs	r3, r3, #21
 8003164:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003168:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <I2C_TransferConfig+0x58>)
 800316a:	430b      	orrs	r3, r1
 800316c:	43db      	mvns	r3, r3
 800316e:	ea02 0103 	and.w	r1, r2, r3
 8003172:	897b      	ldrh	r3, [r7, #10]
 8003174:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003178:	7a7b      	ldrb	r3, [r7, #9]
 800317a:	041b      	lsls	r3, r3, #16
 800317c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	431a      	orrs	r2, r3
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	431a      	orrs	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	03ff63ff 	.word	0x03ff63ff

080031a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d138      	bne.n	800322c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e032      	b.n	800322e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	; 0x24
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e000      	b.n	800322e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b20      	cmp	r3, #32
 800324e:	d139      	bne.n	80032c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800325a:	2302      	movs	r3, #2
 800325c:	e033      	b.n	80032c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2224      	movs	r2, #36	; 0x24
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800328c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e000      	b.n	80032c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e0d2      	b.n	800348c <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fe fa7e 	bl	80017fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69d9      	ldr	r1, [r3, #28]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b60      	ldr	r3, [pc, #384]	; (8003494 <HAL_I2S_Init+0x1c0>)
 8003314:	400b      	ands	r3, r1
 8003316:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2202      	movs	r2, #2
 800331e:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d067      	beq.n	80033f8 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003330:	2310      	movs	r3, #16
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	e001      	b.n	800333a <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003336:	2320      	movs	r3, #32
 8003338:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b20      	cmp	r3, #32
 8003340:	d802      	bhi.n	8003348 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d102      	bne.n	8003356 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8003350:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_I2S_Init+0x1c4>)
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	e003      	b.n	800335e <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fa28 	bl	80037ac <I2S_GetClockFreq>
 800335c:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003366:	d125      	bne.n	80033b4 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d010      	beq.n	8003392 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	fbb2 f2f3 	udiv	r2, r2, r3
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	461a      	mov	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	3305      	adds	r3, #5
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	e01f      	b.n	80033d2 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	fbb2 f2f3 	udiv	r2, r2, r3
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	461a      	mov	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	3305      	adds	r3, #5
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	e00e      	b.n	80033d2 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	461a      	mov	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ce:	3305      	adds	r3, #5
 80033d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4a31      	ldr	r2, [pc, #196]	; (800349c <HAL_I2S_Init+0x1c8>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	08db      	lsrs	r3, r3, #3
 80033dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e003      	b.n	8003400 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033f8:	2302      	movs	r3, #2
 80033fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d902      	bls.n	800340c <HAL_I2S_Init+0x138>
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	2bff      	cmp	r3, #255	; 0xff
 800340a:	d907      	bls.n	800341c <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	f043 0210 	orr.w	r2, r3, #16
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e037      	b.n	800348c <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	ea42 0103 	orr.w	r1, r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	430a      	orrs	r2, r1
 800342e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <HAL_I2S_Init+0x1c0>)
 8003438:	4013      	ands	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6851      	ldr	r1, [r2, #4]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6892      	ldr	r2, [r2, #8]
 8003442:	4311      	orrs	r1, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68d2      	ldr	r2, [r2, #12]
 8003448:	4311      	orrs	r1, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6992      	ldr	r2, [r2, #24]
 800344e:	430a      	orrs	r2, r1
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b30      	cmp	r3, #48	; 0x30
 8003462:	d003      	beq.n	800346c <HAL_I2S_Init+0x198>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2bb0      	cmp	r3, #176	; 0xb0
 800346a:	d107      	bne.n	800347c <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69da      	ldr	r2, [r3, #28]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800347a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3720      	adds	r7, #32
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	fffff040 	.word	0xfffff040
 8003498:	00bb8000 	.word	0x00bb8000
 800349c:	cccccccd 	.word	0xcccccccd

080034a0 <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_I2S_Receive+0x1c>
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0b4      	b.n	800362a <HAL_I2S_Receive+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_I2S_Receive+0x30>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e0ac      	b.n	800362a <HAL_I2S_Receive+0x18a>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d005      	beq.n	80034f0 <HAL_I2S_Receive+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
 80034ee:	e09c      	b.n	800362a <HAL_I2S_Receive+0x18a>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2204      	movs	r2, #4
 80034f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pRxBuffPtr = pData;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	629a      	str	r2, [r3, #40]	; 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d002      	beq.n	800351c <HAL_I2S_Receive+0x7c>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d10a      	bne.n	8003532 <HAL_I2S_Receive+0x92>
  {
    hi2s->RxXferSize = (Size << 1U);
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003530:	e005      	b.n	800353e <HAL_I2S_Receive+0x9e>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	88fa      	ldrh	r2, [r7, #6]
 800353c:	85da      	strh	r2, [r3, #46]	; 0x2e
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354c:	d007      	beq.n	800355e <HAL_I2S_Receive+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800355c:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800356c:	d14f      	bne.n	800360e <HAL_I2S_Receive+0x16e>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800356e:	2300      	movs	r3, #0
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 8003584:	e043      	b.n	800360e <HAL_I2S_Receive+0x16e>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2201      	movs	r2, #1
 800358a:	2101      	movs	r1, #1
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f9ae 	bl	80038ee <I2S_WaitFlagStateUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00f      	beq.n	80035b8 <HAL_I2S_Receive+0x118>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359c:	f043 0201 	orr.w	r2, r3, #1
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      __HAL_UNLOCK(hi2s);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e038      	b.n	800362a <HAL_I2S_Receive+0x18a>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	b292      	uxth	r2, r2
 80035c4:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	1c9a      	adds	r2, r3, #2
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
    hi2s->RxXferCount--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b40      	cmp	r3, #64	; 0x40
 80035ea:	d110      	bne.n	800360e <HAL_I2S_Receive+0x16e>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	f043 0202 	orr.w	r2, r3, #2
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	63da      	str	r2, [r3, #60]	; 0x3c
  while (hi2s->RxXferCount > 0U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1b6      	bne.n	8003586 <HAL_I2S_Receive+0xe6>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  __HAL_UNLOCK(hi2s);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3720      	adds	r7, #32
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	4613      	mov	r3, r2
 8003640:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_I2S_Transmit_DMA+0x1a>
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e08e      	b.n	8003770 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_I2S_Transmit_DMA+0x2e>
 800365e:	2302      	movs	r3, #2
 8003660:	e086      	b.n	8003770 <HAL_I2S_Transmit_DMA+0x13c>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d005      	beq.n	8003682 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 800367e:	2302      	movs	r3, #2
 8003680:	e076      	b.n	8003770 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2203      	movs	r2, #3
 8003686:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pTxBuffPtr = pData;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	621a      	str	r2, [r3, #32]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d002      	beq.n	80036ae <HAL_I2S_Transmit_DMA+0x7a>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d10a      	bne.n	80036c4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = (Size << 1U);
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	84da      	strh	r2, [r3, #38]	; 0x26
 80036c2:	e005      	b.n	80036d0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	88fa      	ldrh	r2, [r7, #6]
 80036c8:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = Size;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	88fa      	ldrh	r2, [r7, #6]
 80036ce:	84da      	strh	r2, [r3, #38]	; 0x26
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	4a28      	ldr	r2, [pc, #160]	; (8003778 <HAL_I2S_Transmit_DMA+0x144>)
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	4a27      	ldr	r2, [pc, #156]	; (800377c <HAL_I2S_Transmit_DMA+0x148>)
 80036de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	4a26      	ldr	r2, [pc, #152]	; (8003780 <HAL_I2S_Transmit_DMA+0x14c>)
 80036e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
                                 (uint32_t)hi2s->pTxBuffPtr,
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80036f0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80036f8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003700:	f7fe fcc0 	bl	8002084 <HAL_DMA_Start_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00f      	beq.n	800372a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	f043 0208 	orr.w	r2, r3, #8
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e022      	b.n	8003770 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	2b00      	cmp	r3, #0
 8003736:	d107      	bne.n	8003748 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69da      	ldr	r2, [r3, #28]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003746:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d107      	bne.n	8003766 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0202 	orr.w	r2, r2, #2
 8003764:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	08003887 	.word	0x08003887
 800377c:	08003845 	.word	0x08003845
 8003780:	080038a3 	.word	0x080038a3

08003784 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d02d      	beq.n	8003818 <I2S_GetClockFreq+0x6c>
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d12e      	bne.n	800381e <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <I2S_GetClockFreq+0x88>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d108      	bne.n	80037de <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <I2S_GetClockFreq+0x88>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d4:	4a18      	ldr	r2, [pc, #96]	; (8003838 <I2S_GetClockFreq+0x8c>)
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e007      	b.n	80037ee <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80037de:	4b15      	ldr	r3, [pc, #84]	; (8003834 <I2S_GetClockFreq+0x88>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e6:	4a15      	ldr	r2, [pc, #84]	; (800383c <I2S_GetClockFreq+0x90>)
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 80037ee:	4b11      	ldr	r3, [pc, #68]	; (8003834 <I2S_GetClockFreq+0x88>)
 80037f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f4:	0f1b      	lsrs	r3, r3, #28
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80037fc:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <I2S_GetClockFreq+0x88>)
 80037fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003802:	099b      	lsrs	r3, r3, #6
 8003804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	fb02 f203 	mul.w	r2, r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	613b      	str	r3, [r7, #16]

      break;
 8003816:	e005      	b.n	8003824 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <I2S_GetClockFreq+0x94>)
 800381a:	613b      	str	r3, [r7, #16]
      break;
 800381c:	e002      	b.n	8003824 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
      break;
 8003822:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8003824:	693b      	ldr	r3, [r7, #16]
}
 8003826:	4618      	mov	r0, r3
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	00f42400 	.word	0x00f42400
 800383c:	017d7840 	.word	0x017d7840
 8003840:	00bb8000 	.word	0x00bb8000

08003844 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10e      	bne.n	8003878 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0202 	bic.w	r2, r2, #2
 8003868:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	84da      	strh	r2, [r3, #38]	; 0x26
    hi2s->State = HAL_I2S_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f7fd f993 	bl	8000ba4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f7ff ff75 	bl	8003784 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0203 	bic.w	r2, r2, #3
 80038be:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	84da      	strh	r2, [r3, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	f043 0208 	orr.w	r2, r3, #8
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f7ff ff59 	bl	8003798 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	4613      	mov	r3, r2
 80038fc:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80038fe:	f7fe f9f5 	bl	8001cec <HAL_GetTick>
 8003902:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003904:	e018      	b.n	8003938 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d014      	beq.n	8003938 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800390e:	f7fe f9ed 	bl	8001cec <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d902      	bls.n	8003924 <I2S_WaitFlagStateUntilTimeout+0x36>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e00f      	b.n	8003958 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	429a      	cmp	r2, r3
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	429a      	cmp	r2, r3
 8003954:	d1d7      	bne.n	8003906 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800396a:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	4a22      	ldr	r2, [pc, #136]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003974:	6413      	str	r3, [r2, #64]	; 0x40
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003982:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1d      	ldr	r2, [pc, #116]	; (80039fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800398e:	f7fe f9ad 	bl	8001cec <HAL_GetTick>
 8003992:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003994:	e009      	b.n	80039aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003996:	f7fe f9a9 	bl	8001cec <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039a4:	d901      	bls.n	80039aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e022      	b.n	80039f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039aa:	4b14      	ldr	r3, [pc, #80]	; (80039fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b6:	d1ee      	bne.n	8003996 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039b8:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80039be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c4:	f7fe f992 	bl	8001cec <HAL_GetTick>
 80039c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039ca:	e009      	b.n	80039e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039cc:	f7fe f98e 	bl	8001cec <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039da:	d901      	bls.n	80039e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e007      	b.n	80039f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039ec:	d1ee      	bne.n	80039cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40007000 	.word	0x40007000

08003a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e29b      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8087 	beq.w	8003b32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a24:	4b96      	ldr	r3, [pc, #600]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d00c      	beq.n	8003a4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a30:	4b93      	ldr	r3, [pc, #588]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 030c 	and.w	r3, r3, #12
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d112      	bne.n	8003a62 <HAL_RCC_OscConfig+0x62>
 8003a3c:	4b90      	ldr	r3, [pc, #576]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a48:	d10b      	bne.n	8003a62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4a:	4b8d      	ldr	r3, [pc, #564]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d06c      	beq.n	8003b30 <HAL_RCC_OscConfig+0x130>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d168      	bne.n	8003b30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e275      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x7a>
 8003a6c:	4b84      	ldr	r3, [pc, #528]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a83      	ldr	r2, [pc, #524]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	e02e      	b.n	8003ad8 <HAL_RCC_OscConfig+0xd8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x9c>
 8003a82:	4b7f      	ldr	r3, [pc, #508]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7e      	ldr	r2, [pc, #504]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	4b7c      	ldr	r3, [pc, #496]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a7b      	ldr	r2, [pc, #492]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e01d      	b.n	8003ad8 <HAL_RCC_OscConfig+0xd8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0xc0>
 8003aa6:	4b76      	ldr	r3, [pc, #472]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a75      	ldr	r2, [pc, #468]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4b73      	ldr	r3, [pc, #460]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a72      	ldr	r2, [pc, #456]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e00b      	b.n	8003ad8 <HAL_RCC_OscConfig+0xd8>
 8003ac0:	4b6f      	ldr	r3, [pc, #444]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6e      	ldr	r2, [pc, #440]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	4b6c      	ldr	r3, [pc, #432]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a6b      	ldr	r2, [pc, #428]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d013      	beq.n	8003b08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fe f904 	bl	8001cec <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae8:	f7fe f900 	bl	8001cec <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	; 0x64
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e229      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	4b61      	ldr	r3, [pc, #388]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0xe8>
 8003b06:	e014      	b.n	8003b32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fe f8f0 	bl	8001cec <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b10:	f7fe f8ec 	bl	8001cec <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	; 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e215      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b22:	4b57      	ldr	r3, [pc, #348]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x110>
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d069      	beq.n	8003c12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b3e:	4b50      	ldr	r3, [pc, #320]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4a:	4b4d      	ldr	r3, [pc, #308]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d11c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x190>
 8003b56:	4b4a      	ldr	r3, [pc, #296]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d116      	bne.n	8003b90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b62:	4b47      	ldr	r3, [pc, #284]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_RCC_OscConfig+0x17a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d001      	beq.n	8003b7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e1e9      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	4b41      	ldr	r3, [pc, #260]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	493d      	ldr	r1, [pc, #244]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8e:	e040      	b.n	8003c12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d023      	beq.n	8003be0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b98:	4b39      	ldr	r3, [pc, #228]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a38      	ldr	r2, [pc, #224]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe f8a2 	bl	8001cec <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bac:	f7fe f89e 	bl	8001cec <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1c7      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbe:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bca:	4b2d      	ldr	r3, [pc, #180]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4929      	ldr	r1, [pc, #164]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]
 8003bde:	e018      	b.n	8003c12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be0:	4b27      	ldr	r3, [pc, #156]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a26      	ldr	r2, [pc, #152]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fe f87e 	bl	8001cec <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf4:	f7fe f87a 	bl	8001cec <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e1a3      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d038      	beq.n	8003c90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d019      	beq.n	8003c5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c26:	4b16      	ldr	r3, [pc, #88]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2a:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fe f85b 	bl	8001cec <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3a:	f7fe f857 	bl	8001cec <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e180      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x23a>
 8003c58:	e01a      	b.n	8003c90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <HAL_RCC_OscConfig+0x280>)
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c66:	f7fe f841 	bl	8001cec <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6c:	e00a      	b.n	8003c84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6e:	f7fe f83d 	bl	8001cec <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d903      	bls.n	8003c84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e166      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
 8003c80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c84:	4b92      	ldr	r3, [pc, #584]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1ee      	bne.n	8003c6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a4 	beq.w	8003de6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9e:	4b8c      	ldr	r3, [pc, #560]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10d      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	4b89      	ldr	r3, [pc, #548]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	4a88      	ldr	r2, [pc, #544]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb6:	4b86      	ldr	r3, [pc, #536]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc6:	4b83      	ldr	r3, [pc, #524]	; (8003ed4 <HAL_RCC_OscConfig+0x4d4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d118      	bne.n	8003d04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cd2:	4b80      	ldr	r3, [pc, #512]	; (8003ed4 <HAL_RCC_OscConfig+0x4d4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a7f      	ldr	r2, [pc, #508]	; (8003ed4 <HAL_RCC_OscConfig+0x4d4>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cde:	f7fe f805 	bl	8001cec <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce6:	f7fe f801 	bl	8001cec <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b64      	cmp	r3, #100	; 0x64
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e12a      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf8:	4b76      	ldr	r3, [pc, #472]	; (8003ed4 <HAL_RCC_OscConfig+0x4d4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d106      	bne.n	8003d1a <HAL_RCC_OscConfig+0x31a>
 8003d0c:	4b70      	ldr	r3, [pc, #448]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	4a6f      	ldr	r2, [pc, #444]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6713      	str	r3, [r2, #112]	; 0x70
 8003d18:	e02d      	b.n	8003d76 <HAL_RCC_OscConfig+0x376>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x33c>
 8003d22:	4b6b      	ldr	r3, [pc, #428]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	4a6a      	ldr	r2, [pc, #424]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2e:	4b68      	ldr	r3, [pc, #416]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	4a67      	ldr	r2, [pc, #412]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3a:	e01c      	b.n	8003d76 <HAL_RCC_OscConfig+0x376>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b05      	cmp	r3, #5
 8003d42:	d10c      	bne.n	8003d5e <HAL_RCC_OscConfig+0x35e>
 8003d44:	4b62      	ldr	r3, [pc, #392]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	4a61      	ldr	r2, [pc, #388]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d50:	4b5f      	ldr	r3, [pc, #380]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	4a5e      	ldr	r2, [pc, #376]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5c:	e00b      	b.n	8003d76 <HAL_RCC_OscConfig+0x376>
 8003d5e:	4b5c      	ldr	r3, [pc, #368]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	4a5b      	ldr	r2, [pc, #364]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6a:	4b59      	ldr	r3, [pc, #356]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	4a58      	ldr	r2, [pc, #352]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d015      	beq.n	8003daa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7e:	f7fd ffb5 	bl	8001cec <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fd ffb1 	bl	8001cec <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e0d8      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9c:	4b4c      	ldr	r3, [pc, #304]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ee      	beq.n	8003d86 <HAL_RCC_OscConfig+0x386>
 8003da8:	e014      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003daa:	f7fd ff9f 	bl	8001cec <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fd ff9b 	bl	8001cec <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e0c2      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc8:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ee      	bne.n	8003db2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d105      	bne.n	8003de6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dda:	4b3d      	ldr	r3, [pc, #244]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	4a3c      	ldr	r2, [pc, #240]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80ae 	beq.w	8003f4c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003df0:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 030c 	and.w	r3, r3, #12
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d06d      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d14b      	bne.n	8003e9c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e04:	4b32      	ldr	r3, [pc, #200]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a31      	ldr	r2, [pc, #196]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7fd ff6c 	bl	8001cec <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e18:	f7fd ff68 	bl	8001cec <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e091      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2a:	4b29      	ldr	r3, [pc, #164]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	019b      	lsls	r3, r3, #6
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	085b      	lsrs	r3, r3, #1
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	041b      	lsls	r3, r3, #16
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	061b      	lsls	r3, r3, #24
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	071b      	lsls	r3, r3, #28
 8003e62:	491b      	ldr	r1, [pc, #108]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e68:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd ff3a 	bl	8001cec <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fd ff36 	bl	8001cec <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e05f      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8e:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x47c>
 8003e9a:	e057      	b.n	8003f4c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a0b      	ldr	r2, [pc, #44]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fd ff20 	bl	8001cec <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fd ff1c 	bl	8001cec <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e045      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec2:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <HAL_RCC_OscConfig+0x4d0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4b0>
 8003ece:	e03d      	b.n	8003f4c <HAL_RCC_OscConfig+0x54c>
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ed8:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <HAL_RCC_OscConfig+0x558>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d030      	beq.n	8003f48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d129      	bne.n	8003f48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d122      	bne.n	8003f48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d119      	bne.n	8003f48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	3b01      	subs	r3, #1
 8003f22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d10f      	bne.n	8003f48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d107      	bne.n	8003f48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40023800 	.word	0x40023800

08003f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0d0      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f74:	4b6a      	ldr	r3, [pc, #424]	; (8004120 <HAL_RCC_ClockConfig+0x1c4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d910      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b67      	ldr	r3, [pc, #412]	; (8004120 <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 020f 	bic.w	r2, r3, #15
 8003f8a:	4965      	ldr	r1, [pc, #404]	; (8004120 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b63      	ldr	r3, [pc, #396]	; (8004120 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0b8      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d020      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fbc:	4b59      	ldr	r3, [pc, #356]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a58      	ldr	r2, [pc, #352]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fd4:	4b53      	ldr	r3, [pc, #332]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4a52      	ldr	r2, [pc, #328]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8003fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe0:	4b50      	ldr	r3, [pc, #320]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	494d      	ldr	r1, [pc, #308]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d040      	beq.n	8004080 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	4b47      	ldr	r3, [pc, #284]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d115      	bne.n	800403e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e07f      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d107      	bne.n	800402e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401e:	4b41      	ldr	r3, [pc, #260]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e073      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402e:	4b3d      	ldr	r3, [pc, #244]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e06b      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800403e:	4b39      	ldr	r3, [pc, #228]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 0203 	bic.w	r2, r3, #3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4936      	ldr	r1, [pc, #216]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 800404c:	4313      	orrs	r3, r2
 800404e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004050:	f7fd fe4c 	bl	8001cec <HAL_GetTick>
 8004054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	e00a      	b.n	800406e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004058:	f7fd fe48 	bl	8001cec <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	; 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e053      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	4b2d      	ldr	r3, [pc, #180]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 020c 	and.w	r2, r3, #12
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	429a      	cmp	r2, r3
 800407e:	d1eb      	bne.n	8004058 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004080:	4b27      	ldr	r3, [pc, #156]	; (8004120 <HAL_RCC_ClockConfig+0x1c4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d210      	bcs.n	80040b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408e:	4b24      	ldr	r3, [pc, #144]	; (8004120 <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 020f 	bic.w	r2, r3, #15
 8004096:	4922      	ldr	r1, [pc, #136]	; (8004120 <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	4313      	orrs	r3, r2
 800409c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b20      	ldr	r3, [pc, #128]	; (8004120 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e032      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4916      	ldr	r1, [pc, #88]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	490e      	ldr	r1, [pc, #56]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040ee:	f000 f821 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 80040f2:	4602      	mov	r2, r0
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	091b      	lsrs	r3, r3, #4
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	490a      	ldr	r1, [pc, #40]	; (8004128 <HAL_RCC_ClockConfig+0x1cc>)
 8004100:	5ccb      	ldrb	r3, [r1, r3]
 8004102:	fa22 f303 	lsr.w	r3, r2, r3
 8004106:	4a09      	ldr	r2, [pc, #36]	; (800412c <HAL_RCC_ClockConfig+0x1d0>)
 8004108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800410a:	4b09      	ldr	r3, [pc, #36]	; (8004130 <HAL_RCC_ClockConfig+0x1d4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7fd fda8 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40023c00 	.word	0x40023c00
 8004124:	40023800 	.word	0x40023800
 8004128:	08008468 	.word	0x08008468
 800412c:	20075314 	.word	0x20075314
 8004130:	20075318 	.word	0x20075318

08004134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004134:	b5b0      	push	{r4, r5, r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800413a:	2100      	movs	r1, #0
 800413c:	6079      	str	r1, [r7, #4]
 800413e:	2100      	movs	r1, #0
 8004140:	60f9      	str	r1, [r7, #12]
 8004142:	2100      	movs	r1, #0
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004146:	2100      	movs	r1, #0
 8004148:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800414a:	4952      	ldr	r1, [pc, #328]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 800414c:	6889      	ldr	r1, [r1, #8]
 800414e:	f001 010c 	and.w	r1, r1, #12
 8004152:	2908      	cmp	r1, #8
 8004154:	d00d      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x3e>
 8004156:	2908      	cmp	r1, #8
 8004158:	f200 8094 	bhi.w	8004284 <HAL_RCC_GetSysClockFreq+0x150>
 800415c:	2900      	cmp	r1, #0
 800415e:	d002      	beq.n	8004166 <HAL_RCC_GetSysClockFreq+0x32>
 8004160:	2904      	cmp	r1, #4
 8004162:	d003      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x38>
 8004164:	e08e      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004166:	4b4c      	ldr	r3, [pc, #304]	; (8004298 <HAL_RCC_GetSysClockFreq+0x164>)
 8004168:	60bb      	str	r3, [r7, #8]
      break;
 800416a:	e08e      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800416c:	4b4b      	ldr	r3, [pc, #300]	; (800429c <HAL_RCC_GetSysClockFreq+0x168>)
 800416e:	60bb      	str	r3, [r7, #8]
      break;
 8004170:	e08b      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004172:	4948      	ldr	r1, [pc, #288]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 8004174:	6849      	ldr	r1, [r1, #4]
 8004176:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800417a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800417c:	4945      	ldr	r1, [pc, #276]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 800417e:	6849      	ldr	r1, [r1, #4]
 8004180:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004184:	2900      	cmp	r1, #0
 8004186:	d024      	beq.n	80041d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004188:	4942      	ldr	r1, [pc, #264]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 800418a:	6849      	ldr	r1, [r1, #4]
 800418c:	0989      	lsrs	r1, r1, #6
 800418e:	4608      	mov	r0, r1
 8004190:	f04f 0100 	mov.w	r1, #0
 8004194:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004198:	f04f 0500 	mov.w	r5, #0
 800419c:	ea00 0204 	and.w	r2, r0, r4
 80041a0:	ea01 0305 	and.w	r3, r1, r5
 80041a4:	493d      	ldr	r1, [pc, #244]	; (800429c <HAL_RCC_GetSysClockFreq+0x168>)
 80041a6:	fb01 f003 	mul.w	r0, r1, r3
 80041aa:	2100      	movs	r1, #0
 80041ac:	fb01 f102 	mul.w	r1, r1, r2
 80041b0:	1844      	adds	r4, r0, r1
 80041b2:	493a      	ldr	r1, [pc, #232]	; (800429c <HAL_RCC_GetSysClockFreq+0x168>)
 80041b4:	fba2 0101 	umull	r0, r1, r2, r1
 80041b8:	1863      	adds	r3, r4, r1
 80041ba:	4619      	mov	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	461a      	mov	r2, r3
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	f7fc f838 	bl	8000238 <__aeabi_uldivmod>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4613      	mov	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e04a      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d2:	4b30      	ldr	r3, [pc, #192]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	461a      	mov	r2, r3
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041e2:	f04f 0100 	mov.w	r1, #0
 80041e6:	ea02 0400 	and.w	r4, r2, r0
 80041ea:	ea03 0501 	and.w	r5, r3, r1
 80041ee:	4620      	mov	r0, r4
 80041f0:	4629      	mov	r1, r5
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	014b      	lsls	r3, r1, #5
 80041fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004200:	0142      	lsls	r2, r0, #5
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	1b00      	subs	r0, r0, r4
 8004208:	eb61 0105 	sbc.w	r1, r1, r5
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	018b      	lsls	r3, r1, #6
 8004216:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800421a:	0182      	lsls	r2, r0, #6
 800421c:	1a12      	subs	r2, r2, r0
 800421e:	eb63 0301 	sbc.w	r3, r3, r1
 8004222:	f04f 0000 	mov.w	r0, #0
 8004226:	f04f 0100 	mov.w	r1, #0
 800422a:	00d9      	lsls	r1, r3, #3
 800422c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004230:	00d0      	lsls	r0, r2, #3
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	1912      	adds	r2, r2, r4
 8004238:	eb45 0303 	adc.w	r3, r5, r3
 800423c:	f04f 0000 	mov.w	r0, #0
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	0299      	lsls	r1, r3, #10
 8004246:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800424a:	0290      	lsls	r0, r2, #10
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	461a      	mov	r2, r3
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	f7fb ffec 	bl	8000238 <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4613      	mov	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	3301      	adds	r3, #1
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	60bb      	str	r3, [r7, #8]
      break;
 8004282:	e002      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004284:	4b04      	ldr	r3, [pc, #16]	; (8004298 <HAL_RCC_GetSysClockFreq+0x164>)
 8004286:	60bb      	str	r3, [r7, #8]
      break;
 8004288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800428a:	68bb      	ldr	r3, [r7, #8]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bdb0      	pop	{r4, r5, r7, pc}
 8004294:	40023800 	.word	0x40023800
 8004298:	00f42400 	.word	0x00f42400
 800429c:	017d7840 	.word	0x017d7840

080042a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a6:	681b      	ldr	r3, [r3, #0]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20075314 	.word	0x20075314

080042b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042bc:	f7ff fff0 	bl	80042a0 <HAL_RCC_GetHCLKFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	0a9b      	lsrs	r3, r3, #10
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	4903      	ldr	r1, [pc, #12]	; (80042dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40023800 	.word	0x40023800
 80042dc:	08008478 	.word	0x08008478

080042e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042e4:	f7ff ffdc 	bl	80042a0 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0b5b      	lsrs	r3, r3, #13
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4903      	ldr	r1, [pc, #12]	; (8004304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40023800 	.word	0x40023800
 8004304:	08008478 	.word	0x08008478

08004308 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d012      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004330:	4b69      	ldr	r3, [pc, #420]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4a68      	ldr	r2, [pc, #416]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004336:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800433a:	6093      	str	r3, [r2, #8]
 800433c:	4b66      	ldr	r3, [pc, #408]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004344:	4964      	ldr	r1, [pc, #400]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004352:	2301      	movs	r3, #1
 8004354:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d017      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004362:	4b5d      	ldr	r3, [pc, #372]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004368:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	4959      	ldr	r1, [pc, #356]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004380:	d101      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004382:	2301      	movs	r3, #1
 8004384:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800438e:	2301      	movs	r3, #1
 8004390:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d017      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800439e:	4b4e      	ldr	r3, [pc, #312]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	494a      	ldr	r1, [pc, #296]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043bc:	d101      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043be:	2301      	movs	r3, #1
 80043c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043ca:	2301      	movs	r3, #1
 80043cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80043da:	2301      	movs	r3, #1
 80043dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 808b 	beq.w	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ec:	4b3a      	ldr	r3, [pc, #232]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	4a39      	ldr	r2, [pc, #228]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f6:	6413      	str	r3, [r2, #64]	; 0x40
 80043f8:	4b37      	ldr	r3, [pc, #220]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004400:	60bb      	str	r3, [r7, #8]
 8004402:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004404:	4b35      	ldr	r3, [pc, #212]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a34      	ldr	r2, [pc, #208]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800440a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800440e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004410:	f7fd fc6c 	bl	8001cec <HAL_GetTick>
 8004414:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004418:	f7fd fc68 	bl	8001cec <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e38f      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800442a:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004436:	4b28      	ldr	r3, [pc, #160]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d035      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	429a      	cmp	r2, r3
 8004452:	d02e      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004454:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800445e:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004468:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800446a:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	4a1a      	ldr	r2, [pc, #104]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004474:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004476:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800447c:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b01      	cmp	r3, #1
 8004486:	d114      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fd fc30 	bl	8001cec <HAL_GetTick>
 800448c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448e:	e00a      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004490:	f7fd fc2c 	bl	8001cec <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	f241 3288 	movw	r2, #5000	; 0x1388
 800449e:	4293      	cmp	r3, r2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e351      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0ee      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044be:	d111      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044cc:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044ce:	400b      	ands	r3, r1
 80044d0:	4901      	ldr	r1, [pc, #4]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
 80044d6:	e00b      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40007000 	.word	0x40007000
 80044e0:	0ffffcff 	.word	0x0ffffcff
 80044e4:	4bb3      	ldr	r3, [pc, #716]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	4ab2      	ldr	r2, [pc, #712]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044ee:	6093      	str	r3, [r2, #8]
 80044f0:	4bb0      	ldr	r3, [pc, #704]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fc:	49ad      	ldr	r1, [pc, #692]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	d010      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800450e:	4ba9      	ldr	r3, [pc, #676]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004514:	4aa7      	ldr	r2, [pc, #668]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800451a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800451e:	4ba5      	ldr	r3, [pc, #660]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004520:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	49a2      	ldr	r1, [pc, #648]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800453c:	4b9d      	ldr	r3, [pc, #628]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800454a:	499a      	ldr	r1, [pc, #616]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800455e:	4b95      	ldr	r3, [pc, #596]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800456c:	4991      	ldr	r1, [pc, #580]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004580:	4b8c      	ldr	r3, [pc, #560]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004586:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800458e:	4989      	ldr	r1, [pc, #548]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045a2:	4b84      	ldr	r3, [pc, #528]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	4980      	ldr	r1, [pc, #512]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045c4:	4b7b      	ldr	r3, [pc, #492]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	4978      	ldr	r1, [pc, #480]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045e6:	4b73      	ldr	r3, [pc, #460]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ec:	f023 020c 	bic.w	r2, r3, #12
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f4:	496f      	ldr	r1, [pc, #444]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004608:	4b6a      	ldr	r3, [pc, #424]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004616:	4967      	ldr	r1, [pc, #412]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800462a:	4b62      	ldr	r3, [pc, #392]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004630:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004638:	495e      	ldr	r1, [pc, #376]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800464c:	4b59      	ldr	r3, [pc, #356]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004652:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465a:	4956      	ldr	r1, [pc, #344]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800466e:	4b51      	ldr	r3, [pc, #324]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467c:	494d      	ldr	r1, [pc, #308]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004690:	4b48      	ldr	r3, [pc, #288]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469e:	4945      	ldr	r1, [pc, #276]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046b2:	4b40      	ldr	r3, [pc, #256]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c0:	493c      	ldr	r1, [pc, #240]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046d4:	4b37      	ldr	r3, [pc, #220]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046e2:	4934      	ldr	r1, [pc, #208]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d011      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046f6:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004704:	492b      	ldr	r1, [pc, #172]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004710:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004714:	d101      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004716:	2301      	movs	r3, #1
 8004718:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004726:	2301      	movs	r3, #1
 8004728:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004736:	4b1f      	ldr	r3, [pc, #124]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004744:	491b      	ldr	r1, [pc, #108]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004758:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004768:	4912      	ldr	r1, [pc, #72]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800477c:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478c:	4909      	ldr	r1, [pc, #36]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00f      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047a0:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	e002      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80047b2:	bf00      	nop
 80047b4:	40023800 	.word	0x40023800
 80047b8:	4986      	ldr	r1, [pc, #536]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00b      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047cc:	4b81      	ldr	r3, [pc, #516]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047dc:	497d      	ldr	r1, [pc, #500]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d006      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 80d6 	beq.w	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047f8:	4b76      	ldr	r3, [pc, #472]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a75      	ldr	r2, [pc, #468]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004804:	f7fd fa72 	bl	8001cec <HAL_GetTick>
 8004808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800480c:	f7fd fa6e 	bl	8001cec <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e195      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800481e:	4b6d      	ldr	r3, [pc, #436]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d021      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11d      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800483e:	4b65      	ldr	r3, [pc, #404]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004844:	0c1b      	lsrs	r3, r3, #16
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800484c:	4b61      	ldr	r3, [pc, #388]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800484e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004852:	0e1b      	lsrs	r3, r3, #24
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	019a      	lsls	r2, r3, #6
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	041b      	lsls	r3, r3, #16
 8004864:	431a      	orrs	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	061b      	lsls	r3, r3, #24
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	071b      	lsls	r3, r3, #28
 8004872:	4958      	ldr	r1, [pc, #352]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d004      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004898:	2b00      	cmp	r3, #0
 800489a:	d02e      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a4:	d129      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048a6:	4b4b      	ldr	r3, [pc, #300]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ac:	0c1b      	lsrs	r3, r3, #16
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048b4:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ba:	0f1b      	lsrs	r3, r3, #28
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	019a      	lsls	r2, r3, #6
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	041b      	lsls	r3, r3, #16
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	061b      	lsls	r3, r3, #24
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	071b      	lsls	r3, r3, #28
 80048da:	493e      	ldr	r1, [pc, #248]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048e2:	4b3c      	ldr	r3, [pc, #240]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048e8:	f023 021f 	bic.w	r2, r3, #31
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	3b01      	subs	r3, #1
 80048f2:	4938      	ldr	r1, [pc, #224]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01d      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004906:	4b33      	ldr	r3, [pc, #204]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490c:	0e1b      	lsrs	r3, r3, #24
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004914:	4b2f      	ldr	r3, [pc, #188]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491a:	0f1b      	lsrs	r3, r3, #28
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	019a      	lsls	r2, r3, #6
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	041b      	lsls	r3, r3, #16
 800492e:	431a      	orrs	r2, r3
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	061b      	lsls	r3, r3, #24
 8004934:	431a      	orrs	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	071b      	lsls	r3, r3, #28
 800493a:	4926      	ldr	r1, [pc, #152]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d011      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	019a      	lsls	r2, r3, #6
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	061b      	lsls	r3, r3, #24
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	071b      	lsls	r3, r3, #28
 800496a:	491a      	ldr	r1, [pc, #104]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004972:	4b18      	ldr	r3, [pc, #96]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004978:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800497c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800497e:	f7fd f9b5 	bl	8001cec <HAL_GetTick>
 8004982:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004986:	f7fd f9b1 	bl	8001cec <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b64      	cmp	r3, #100	; 0x64
 8004992:	d901      	bls.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e0d8      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	f040 80ce 	bne.w	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049ac:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b8:	f7fd f998 	bl	8001cec <HAL_GetTick>
 80049bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049be:	e00b      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049c0:	f7fd f994 	bl	8001cec <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b64      	cmp	r3, #100	; 0x64
 80049cc:	d904      	bls.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e0bb      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049d8:	4b5e      	ldr	r3, [pc, #376]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e4:	d0ec      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d02e      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d12a      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a0e:	4b51      	ldr	r3, [pc, #324]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a1c:	4b4d      	ldr	r3, [pc, #308]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	0f1b      	lsrs	r3, r3, #28
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	019a      	lsls	r2, r3, #6
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	061b      	lsls	r3, r3, #24
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	071b      	lsls	r3, r3, #28
 8004a42:	4944      	ldr	r1, [pc, #272]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a4a:	4b42      	ldr	r3, [pc, #264]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	493d      	ldr	r1, [pc, #244]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d022      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a78:	d11d      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a7a:	4b36      	ldr	r3, [pc, #216]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a80:	0e1b      	lsrs	r3, r3, #24
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a88:	4b32      	ldr	r3, [pc, #200]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	0f1b      	lsrs	r3, r3, #28
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	019a      	lsls	r2, r3, #6
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	061b      	lsls	r3, r3, #24
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	071b      	lsls	r3, r3, #28
 8004aae:	4929      	ldr	r1, [pc, #164]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d028      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ac2:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac8:	0e1b      	lsrs	r3, r3, #24
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ad0:	4b20      	ldr	r3, [pc, #128]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	0c1b      	lsrs	r3, r3, #16
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	019a      	lsls	r2, r3, #6
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	071b      	lsls	r3, r3, #28
 8004af6:	4917      	ldr	r1, [pc, #92]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004afe:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	4911      	ldr	r1, [pc, #68]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b20:	f7fd f8e4 	bl	8001cec <HAL_GetTick>
 8004b24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b28:	f7fd f8e0 	bl	8001cec <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e007      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b46:	d1ef      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3720      	adds	r7, #32
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40023800 	.word	0x40023800

08004b58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b76:	f040 80a3 	bne.w	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004b7a:	4bac      	ldr	r3, [pc, #688]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b80:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b88:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b90:	f000 808a 	beq.w	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b9a:	f200 8093 	bhi.w	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ba4:	d07d      	beq.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bac:	f200 808a 	bhi.w	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d004      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bbc:	d039      	beq.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004bbe:	e081      	b.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004bc0:	4b9a      	ldr	r3, [pc, #616]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d108      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bcc:	4b97      	ldr	r3, [pc, #604]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bd4:	4a96      	ldr	r2, [pc, #600]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	e007      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004bde:	4b93      	ldr	r3, [pc, #588]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be6:	4a93      	ldr	r2, [pc, #588]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004bee:	4b8f      	ldr	r3, [pc, #572]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	0e1b      	lsrs	r3, r3, #24
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004bfc:	4b8b      	ldr	r3, [pc, #556]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c02:	099b      	lsrs	r3, r3, #6
 8004c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	fb02 f203 	mul.w	r2, r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004c16:	4b85      	ldr	r3, [pc, #532]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1c:	0a1b      	lsrs	r3, r3, #8
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	3301      	adds	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2e:	617b      	str	r3, [r7, #20]
        break;
 8004c30:	e049      	b.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004c32:	4b7e      	ldr	r3, [pc, #504]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d108      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c3e:	4b7b      	ldr	r3, [pc, #492]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c46:	4a7a      	ldr	r2, [pc, #488]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	e007      	b.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004c50:	4b76      	ldr	r3, [pc, #472]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c58:	4a76      	ldr	r2, [pc, #472]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004c60:	4b72      	ldr	r3, [pc, #456]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c66:	0e1b      	lsrs	r3, r3, #24
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004c6e:	4b6f      	ldr	r3, [pc, #444]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c74:	099b      	lsrs	r3, r3, #6
 8004c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	fb02 f203 	mul.w	r2, r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c86:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004c88:	4b68      	ldr	r3, [pc, #416]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	3301      	adds	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9e:	617b      	str	r3, [r7, #20]
        break;
 8004ca0:	e011      	b.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004ca2:	4b65      	ldr	r3, [pc, #404]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004ca4:	617b      	str	r3, [r7, #20]
        break;
 8004ca6:	e00e      	b.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004ca8:	4b60      	ldr	r3, [pc, #384]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8004cb4:	4b5e      	ldr	r3, [pc, #376]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004cb6:	617b      	str	r3, [r7, #20]
        break;
 8004cb8:	e005      	b.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8004cba:	4b5e      	ldr	r3, [pc, #376]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004cbc:	617b      	str	r3, [r7, #20]
        break;
 8004cbe:	e002      	b.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8004cc0:	bf00      	nop
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8004cc4:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ccc:	f040 80a3 	bne.w	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004cd0:	4b56      	ldr	r3, [pc, #344]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd6:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004cde:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ce6:	f000 808a 	beq.w	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cf0:	f200 8093 	bhi.w	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cfa:	d07d      	beq.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d02:	f200 808a 	bhi.w	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d004      	beq.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d12:	d039      	beq.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004d14:	e081      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004d16:	4b45      	ldr	r3, [pc, #276]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d108      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d22:	4b42      	ldr	r3, [pc, #264]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d2a:	4a41      	ldr	r2, [pc, #260]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	e007      	b.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004d34:	4b3d      	ldr	r3, [pc, #244]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d3c:	4a3d      	ldr	r2, [pc, #244]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004d44:	4b39      	ldr	r3, [pc, #228]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	0e1b      	lsrs	r3, r3, #24
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004d52:	4b36      	ldr	r3, [pc, #216]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d58:	099b      	lsrs	r3, r3, #6
 8004d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	fb02 f203 	mul.w	r2, r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004d6c:	4b2f      	ldr	r3, [pc, #188]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	3301      	adds	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]
        break;
 8004d86:	e049      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004d88:	4b28      	ldr	r3, [pc, #160]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d108      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d94:	4b25      	ldr	r3, [pc, #148]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d9c:	4a24      	ldr	r2, [pc, #144]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	e007      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004da6:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dae:	4a21      	ldr	r2, [pc, #132]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004db6:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dbc:	0e1b      	lsrs	r3, r3, #24
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004dc4:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dca:	099b      	lsrs	r3, r3, #6
 8004dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	fb02 f203 	mul.w	r2, r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004dde:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	3301      	adds	r3, #1
 8004dea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]
        break;
 8004df6:	e011      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004dfa:	617b      	str	r3, [r7, #20]
        break;
 8004dfc:	e00e      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8004e0a:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004e0c:	617b      	str	r3, [r7, #20]
        break;
 8004e0e:	e005      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 8004e10:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004e12:	617b      	str	r3, [r7, #20]
        break;
 8004e14:	e002      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 8004e1a:	bf00      	nop

  return frequency;
 8004e1c:	697b      	ldr	r3, [r7, #20]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	00f42400 	.word	0x00f42400
 8004e34:	017d7840 	.word	0x017d7840
 8004e38:	00bb8000 	.word	0x00bb8000

08004e3c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d904      	bls.n	8004e5e <HAL_SAI_InitProtocol+0x22>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	3b03      	subs	r3, #3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d812      	bhi.n	8004e82 <HAL_SAI_InitProtocol+0x46>
 8004e5c:	e008      	b.n	8004e70 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fa69 	bl	800533c <SAI_InitI2S>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e6e:	e00b      	b.n	8004e88 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fb0e 	bl	8005498 <SAI_InitPCM>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e80:	e002      	b.n	8004e88 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
      break;
 8004e86:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d104      	bne.n	8004e98 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f808 	bl	8004ea4 <HAL_SAI_Init>
 8004e94:	4603      	mov	r3, r0
 8004e96:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e156      	b.n	8005170 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fc fd6a 	bl	80019b0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fba5 	bl	8005634 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d00c      	beq.n	8004f0c <HAL_SAI_Init+0x68>
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d80d      	bhi.n	8004f12 <HAL_SAI_Init+0x6e>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_SAI_Init+0x5c>
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d003      	beq.n	8004f06 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004efe:	e008      	b.n	8004f12 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61fb      	str	r3, [r7, #28]
      break;
 8004f04:	e006      	b.n	8004f14 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004f06:	2310      	movs	r3, #16
 8004f08:	61fb      	str	r3, [r7, #28]
      break;
 8004f0a:	e003      	b.n	8004f14 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004f0c:	2320      	movs	r3, #32
 8004f0e:	61fb      	str	r3, [r7, #28]
      break;
 8004f10:	e000      	b.n	8004f14 <HAL_SAI_Init+0x70>
      break;
 8004f12:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d81e      	bhi.n	8004f5a <HAL_SAI_Init+0xb6>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <HAL_SAI_Init+0x80>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f3b 	.word	0x08004f3b
 8004f2c:	08004f43 	.word	0x08004f43
 8004f30:	08004f4b 	.word	0x08004f4b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
    }
    break;
 8004f38:	e010      	b.n	8004f5c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f3e:	617b      	str	r3, [r7, #20]
    }
    break;
 8004f40:	e00c      	b.n	8004f5c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f46:	617b      	str	r3, [r7, #20]
    }
    break;
 8004f48:	e008      	b.n	8004f5c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004f4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f4e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004f58:	e000      	b.n	8004f5c <HAL_SAI_Init+0xb8>
    default:
      break;
 8004f5a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a85      	ldr	r2, [pc, #532]	; (8005178 <HAL_SAI_Init+0x2d4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <HAL_SAI_Init+0xcc>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a84      	ldr	r2, [pc, #528]	; (800517c <HAL_SAI_Init+0x2d8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d103      	bne.n	8004f78 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004f70:	4a83      	ldr	r2, [pc, #524]	; (8005180 <HAL_SAI_Init+0x2dc>)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	e002      	b.n	8004f7e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004f78:	4a82      	ldr	r2, [pc, #520]	; (8005184 <HAL_SAI_Init+0x2e0>)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d04c      	beq.n	8005020 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a7a      	ldr	r2, [pc, #488]	; (8005178 <HAL_SAI_Init+0x2d4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_SAI_Init+0xfa>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a78      	ldr	r2, [pc, #480]	; (800517c <HAL_SAI_Init+0x2d8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d104      	bne.n	8004fa8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004f9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004fa2:	f7ff fdd9 	bl	8004b58 <HAL_RCCEx_GetPeriphCLKFreq>
 8004fa6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a76      	ldr	r2, [pc, #472]	; (8005188 <HAL_SAI_Init+0x2e4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_SAI_Init+0x118>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a75      	ldr	r2, [pc, #468]	; (800518c <HAL_SAI_Init+0x2e8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d104      	bne.n	8004fc6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004fbc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004fc0:	f7ff fdca 	bl	8004b58 <HAL_RCCEx_GetPeriphCLKFreq>
 8004fc4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	025b      	lsls	r3, r3, #9
 8004fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fdc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4a6b      	ldr	r2, [pc, #428]	; (8005190 <HAL_SAI_Init+0x2ec>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	08da      	lsrs	r2, r3, #3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004fec:	68f9      	ldr	r1, [r7, #12]
 8004fee:	4b68      	ldr	r3, [pc, #416]	; (8005190 <HAL_SAI_Init+0x2ec>)
 8004ff0:	fba3 2301 	umull	r2, r3, r3, r1
 8004ff4:	08da      	lsrs	r2, r3, #3
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	1aca      	subs	r2, r1, r3
 8005000:	2a08      	cmp	r2, #8
 8005002:	d904      	bls.n	800500e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	2b04      	cmp	r3, #4
 8005014:	d104      	bne.n	8005020 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	085a      	lsrs	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_SAI_Init+0x18c>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d109      	bne.n	8005044 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_SAI_Init+0x198>
 8005038:	2300      	movs	r3, #0
 800503a:	e001      	b.n	8005040 <HAL_SAI_Init+0x19c>
 800503c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	e008      	b.n	8005056 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d102      	bne.n	8005052 <HAL_SAI_Init+0x1ae>
 800504c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005050:	e000      	b.n	8005054 <HAL_SAI_Init+0x1b0>
 8005052:	2300      	movs	r3, #0
 8005054:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6819      	ldr	r1, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4b4c      	ldr	r3, [pc, #304]	; (8005194 <HAL_SAI_Init+0x2f0>)
 8005062:	400b      	ands	r3, r1
 8005064:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6819      	ldr	r1, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800507a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	431a      	orrs	r2, r3
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800508e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800509a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	051b      	lsls	r3, r3, #20
 80050a2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6859      	ldr	r1, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b38      	ldr	r3, [pc, #224]	; (8005198 <HAL_SAI_Init+0x2f4>)
 80050b8:	400b      	ands	r3, r1
 80050ba:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6899      	ldr	r1, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4b2d      	ldr	r3, [pc, #180]	; (800519c <HAL_SAI_Init+0x2f8>)
 80050e6:	400b      	ands	r3, r1
 80050e8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6899      	ldr	r1, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80050fa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005100:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005106:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510c:	3b01      	subs	r3, #1
 800510e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005110:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68d9      	ldr	r1, [r3, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005128:	400b      	ands	r3, r1
 800512a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68d9      	ldr	r1, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005140:	041b      	lsls	r3, r3, #16
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005148:	3b01      	subs	r3, #1
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3720      	adds	r7, #32
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40015804 	.word	0x40015804
 800517c:	40015824 	.word	0x40015824
 8005180:	40015800 	.word	0x40015800
 8005184:	40015c00 	.word	0x40015c00
 8005188:	40015c04 	.word	0x40015c04
 800518c:	40015c24 	.word	0x40015c24
 8005190:	cccccccd 	.word	0xcccccccd
 8005194:	ff05c010 	.word	0xff05c010
 8005198:	ffff1ff0 	.word	0xffff1ff0
 800519c:	fff88000 	.word	0xfff88000

080051a0 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	4613      	mov	r3, r2
 80051ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80051b0:	f7fc fd9c 	bl	8001cec <HAL_GetTick>
 80051b4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_SAI_Transmit+0x22>
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e0b6      	b.n	8005334 <HAL_SAI_Transmit+0x194>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	f040 80af 	bne.w	8005332 <HAL_SAI_Transmit+0x192>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_SAI_Transmit+0x42>
 80051de:	2302      	movs	r3, #2
 80051e0:	e0a8      	b.n	8005334 <HAL_SAI_Transmit+0x194>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->XferSize = Size;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	88fa      	ldrh	r2, [r7, #6]
 80051ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	88fa      	ldrh	r2, [r7, #6]
 80051f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2212      	movs	r2, #18
 8005204:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d17a      	bne.n	8005314 <HAL_SAI_Transmit+0x174>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f9ba 	bl	8005598 <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005232:	601a      	str	r2, [r3, #0]
    }

    while (hsai->XferCount > 0)
 8005234:	e06e      	b.n	8005314 <HAL_SAI_Transmit+0x174>
    {
      /* Write data if the FIFO is not full */
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005244:	d035      	beq.n	80052b2 <HAL_SAI_Transmit+0x112>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524a:	2b40      	cmp	r3, #64	; 0x40
 800524c:	d10d      	bne.n	800526a <HAL_SAI_Transmit+0xca>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	2b00      	cmp	r3, #0
 8005254:	d109      	bne.n	800526a <HAL_SAI_Transmit+0xca>
        {
          hsai->Instance->DR = (*hsai->pBuffPtr++);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800525a:	1c59      	adds	r1, r3, #1
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	6651      	str	r1, [r2, #100]	; 0x64
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	61da      	str	r2, [r3, #28]
 8005268:	e01a      	b.n	80052a0 <HAL_SAI_Transmit+0x100>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526e:	2b80      	cmp	r3, #128	; 0x80
 8005270:	d80b      	bhi.n	800528a <HAL_SAI_Transmit+0xea>
        {
          hsai->Instance->DR = *((uint16_t *)hsai->pBuffPtr);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005276:	881a      	ldrh	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 2;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005282:	1c9a      	adds	r2, r3, #2
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	665a      	str	r2, [r3, #100]	; 0x64
 8005288:	e00a      	b.n	80052a0 <HAL_SAI_Transmit+0x100>
        }
        else
        {
          hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 4;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800529a:	1d1a      	adds	r2, r3, #4
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        hsai->XferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80052b0:	e030      	b.n	8005314 <HAL_SAI_Transmit+0x174>
      }
      else
      {
        /* Check for the Timeout */
        if ((Timeout != HAL_MAX_DELAY) && ((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout)))
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d02c      	beq.n	8005314 <HAL_SAI_Transmit+0x174>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_SAI_Transmit+0x130>
 80052c0:	f7fc fd14 	bl	8001cec <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d221      	bcs.n	8005314 <HAL_SAI_Transmit+0x174>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f04f 32ff 	mov.w	r2, #4294967295
 80052e8:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f9a2 	bl	8005634 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0208 	orr.w	r2, r2, #8
 80052fe:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e00f      	b.n	8005334 <HAL_SAI_Transmit+0x194>
    while (hsai->XferCount > 0)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800531a:	2b00      	cmp	r3, #0
 800531c:	d18b      	bne.n	8005236 <HAL_SAI_Transmit+0x96>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e000      	b.n	8005334 <HAL_SAI_Transmit+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005332:	2302      	movs	r3, #2
  }
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <SAI_InitI2S+0x2a>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d103      	bne.n	800536e <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	63da      	str	r2, [r3, #60]	; 0x3c
 800536c:	e002      	b.n	8005374 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800537a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005382:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e076      	b.n	800548c <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d107      	bne.n	80053b4 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80053b0:	651a      	str	r2, [r3, #80]	; 0x50
 80053b2:	e006      	b.n	80053c2 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	651a      	str	r2, [r3, #80]	; 0x50
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d84f      	bhi.n	8005468 <SAI_InitI2S+0x12c>
 80053c8:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <SAI_InitI2S+0x94>)
 80053ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ce:	bf00      	nop
 80053d0:	080053e1 	.word	0x080053e1
 80053d4:	08005403 	.word	0x08005403
 80053d8:	08005425 	.word	0x08005425
 80053dc:	08005447 	.word	0x08005447

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2280      	movs	r2, #128	; 0x80
 80053e4:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	085b      	lsrs	r3, r3, #1
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	011a      	lsls	r2, r3, #4
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2240      	movs	r2, #64	; 0x40
 80053fe:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005400:	e034      	b.n	800546c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2280      	movs	r2, #128	; 0x80
 8005406:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	085b      	lsrs	r3, r3, #1
 800540c:	019a      	lsls	r2, r3, #6
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	085b      	lsrs	r3, r3, #1
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2280      	movs	r2, #128	; 0x80
 8005420:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005422:	e023      	b.n	800546c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	22c0      	movs	r2, #192	; 0xc0
 8005428:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	019a      	lsls	r2, r3, #6
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2280      	movs	r2, #128	; 0x80
 8005442:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005444:	e012      	b.n	800546c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	22e0      	movs	r2, #224	; 0xe0
 800544a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	019a      	lsls	r2, r3, #6
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	085b      	lsrs	r3, r3, #1
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2280      	movs	r2, #128	; 0x80
 8005464:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005466:	e001      	b.n	800546c <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e00f      	b.n	800548c <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d10b      	bne.n	800548a <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d102      	bne.n	800547e <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2210      	movs	r2, #16
 800547c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d102      	bne.n	800548a <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2208      	movs	r2, #8
 8005488:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <SAI_InitPCM+0x2a>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d103      	bne.n	80054ca <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80054c8:	e002      	b.n	80054d0 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80054e4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054f8:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d103      	bne.n	8005508 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	645a      	str	r2, [r3, #68]	; 0x44
 8005506:	e002      	b.n	800550e <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	220d      	movs	r2, #13
 800550c:	645a      	str	r2, [r3, #68]	; 0x44
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b03      	cmp	r3, #3
 8005512:	d837      	bhi.n	8005584 <SAI_InitPCM+0xec>
 8005514:	a201      	add	r2, pc, #4	; (adr r2, 800551c <SAI_InitPCM+0x84>)
 8005516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551a:	bf00      	nop
 800551c:	0800552d 	.word	0x0800552d
 8005520:	08005543 	.word	0x08005543
 8005524:	08005559 	.word	0x08005559
 8005528:	0800556f 	.word	0x0800556f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2280      	movs	r2, #128	; 0x80
 8005530:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	011a      	lsls	r2, r3, #4
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2240      	movs	r2, #64	; 0x40
 800553e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005540:	e022      	b.n	8005588 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2280      	movs	r2, #128	; 0x80
 8005546:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2280      	movs	r2, #128	; 0x80
 8005554:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005556:	e017      	b.n	8005588 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	22c0      	movs	r2, #192	; 0xc0
 800555c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2280      	movs	r2, #128	; 0x80
 800556a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800556c:	e00c      	b.n	8005588 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	22e0      	movs	r2, #224	; 0xe0
 8005572:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2280      	movs	r2, #128	; 0x80
 8005580:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005582:	e001      	b.n	8005588 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop

08005598 <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* fill the fifo with data before to enabled the SAI */
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 80055a0:	e034      	b.n	800560c <SAI_FillFifo+0x74>
  {
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d10d      	bne.n	80055c6 <SAI_FillFifo+0x2e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d109      	bne.n	80055c6 <SAI_FillFifo+0x2e>
    {
      hsai->Instance->DR = (*hsai->pBuffPtr++);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055b6:	1c59      	adds	r1, r3, #1
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6651      	str	r1, [r2, #100]	; 0x64
 80055bc:	781a      	ldrb	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	61da      	str	r2, [r3, #28]
 80055c4:	e01a      	b.n	80055fc <SAI_FillFifo+0x64>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ca:	2b80      	cmp	r3, #128	; 0x80
 80055cc:	d80b      	bhi.n	80055e6 <SAI_FillFifo+0x4e>
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6812      	ldr	r2, [r2, #0]
 80055d8:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055de:	1c9a      	adds	r2, r3, #2
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	665a      	str	r2, [r3, #100]	; 0x64
 80055e4:	e00a      	b.n	80055fc <SAI_FillFifo+0x64>
    }
    else
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 4;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f6:	1d1a      	adds	r2, r3, #4
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	665a      	str	r2, [r3, #100]	; 0x64
    }
    hsai->XferCount--;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005616:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800561a:	d004      	beq.n	8005626 <SAI_FillFifo+0x8e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1bd      	bne.n	80055a2 <SAI_FillFifo+0xa>
  }
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800563c:	4b17      	ldr	r3, [pc, #92]	; (800569c <SAI_Disable+0x68>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a17      	ldr	r2, [pc, #92]	; (80056a0 <SAI_Disable+0x6c>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	0b1b      	lsrs	r3, r3, #12
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800565e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1e5a      	subs	r2, r3, #1
 8005664:	60fa      	str	r2, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10a      	bne.n	8005680 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005670:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	72fb      	strb	r3, [r7, #11]
      break;
 800567e:	e006      	b.n	800568e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e8      	bne.n	8005660 <SAI_Disable+0x2c>

  return status;
 800568e:	7afb      	ldrb	r3, [r7, #11]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	20075314 	.word	0x20075314
 80056a0:	95cbec1b 	.word	0x95cbec1b

080056a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e040      	b.n	8005738 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fc f8dc 	bl	8001884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	; 0x24
 80056d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f912 	bl	800590c <UART_SetConfig>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e022      	b.n	8005738 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fb68 	bl	8005dd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800570e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800571e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fbef 	bl	8005f14 <UART_CheckIdleState>
 8005736:	4603      	mov	r3, r0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	; 0x28
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4613      	mov	r3, r2
 800574e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005754:	2b20      	cmp	r3, #32
 8005756:	f040 8081 	bne.w	800585c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <HAL_UART_Transmit+0x26>
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e079      	b.n	800585e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_UART_Transmit+0x38>
 8005774:	2302      	movs	r3, #2
 8005776:	e072      	b.n	800585e <HAL_UART_Transmit+0x11e>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2221      	movs	r2, #33	; 0x21
 800578c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800578e:	f7fc faad 	bl	8001cec <HAL_GetTick>
 8005792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	88fa      	ldrh	r2, [r7, #6]
 8005798:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	88fa      	ldrh	r2, [r7, #6]
 80057a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ac:	d108      	bne.n	80057c0 <HAL_UART_Transmit+0x80>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d104      	bne.n	80057c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	e003      	b.n	80057c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80057d0:	e02c      	b.n	800582c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2200      	movs	r2, #0
 80057da:	2180      	movs	r1, #128	; 0x80
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fbe2 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e038      	b.n	800585e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10b      	bne.n	800580a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005800:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	3302      	adds	r3, #2
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	e007      	b.n	800581a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	3301      	adds	r3, #1
 8005818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1cc      	bne.n	80057d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2200      	movs	r2, #0
 8005840:	2140      	movs	r1, #64	; 0x40
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fbaf 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e005      	b.n	800585e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	e000      	b.n	800585e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800585c:	2302      	movs	r3, #2
  }
}
 800585e:	4618      	mov	r0, r3
 8005860:	3720      	adds	r7, #32
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	4613      	mov	r3, r2
 8005872:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005878:	2b20      	cmp	r3, #32
 800587a:	d12c      	bne.n	80058d6 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_UART_Receive_DMA+0x22>
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e025      	b.n	80058d8 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_UART_Receive_DMA+0x34>
 8005896:	2302      	movs	r3, #2
 8005898:	e01e      	b.n	80058d8 <HAL_UART_Receive_DMA+0x72>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80058c4:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80058c6:	88fb      	ldrh	r3, [r7, #6]
 80058c8:	461a      	mov	r2, r3
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fbe7 	bl	80060a0 <UART_Start_Receive_DMA>
 80058d2:	4603      	mov	r3, r0
 80058d4:	e000      	b.n	80058d8 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
  }
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4ba7      	ldr	r3, [pc, #668]	; (8005bd4 <UART_SetConfig+0x2c8>)
 8005938:	4013      	ands	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	6979      	ldr	r1, [r7, #20]
 8005940:	430b      	orrs	r3, r1
 8005942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	430a      	orrs	r2, r1
 800597c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a95      	ldr	r2, [pc, #596]	; (8005bd8 <UART_SetConfig+0x2cc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d120      	bne.n	80059ca <UART_SetConfig+0xbe>
 8005988:	4b94      	ldr	r3, [pc, #592]	; (8005bdc <UART_SetConfig+0x2d0>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	2b03      	cmp	r3, #3
 8005994:	d816      	bhi.n	80059c4 <UART_SetConfig+0xb8>
 8005996:	a201      	add	r2, pc, #4	; (adr r2, 800599c <UART_SetConfig+0x90>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	080059ad 	.word	0x080059ad
 80059a0:	080059b9 	.word	0x080059b9
 80059a4:	080059b3 	.word	0x080059b3
 80059a8:	080059bf 	.word	0x080059bf
 80059ac:	2301      	movs	r3, #1
 80059ae:	77fb      	strb	r3, [r7, #31]
 80059b0:	e14f      	b.n	8005c52 <UART_SetConfig+0x346>
 80059b2:	2302      	movs	r3, #2
 80059b4:	77fb      	strb	r3, [r7, #31]
 80059b6:	e14c      	b.n	8005c52 <UART_SetConfig+0x346>
 80059b8:	2304      	movs	r3, #4
 80059ba:	77fb      	strb	r3, [r7, #31]
 80059bc:	e149      	b.n	8005c52 <UART_SetConfig+0x346>
 80059be:	2308      	movs	r3, #8
 80059c0:	77fb      	strb	r3, [r7, #31]
 80059c2:	e146      	b.n	8005c52 <UART_SetConfig+0x346>
 80059c4:	2310      	movs	r3, #16
 80059c6:	77fb      	strb	r3, [r7, #31]
 80059c8:	e143      	b.n	8005c52 <UART_SetConfig+0x346>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a84      	ldr	r2, [pc, #528]	; (8005be0 <UART_SetConfig+0x2d4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d132      	bne.n	8005a3a <UART_SetConfig+0x12e>
 80059d4:	4b81      	ldr	r3, [pc, #516]	; (8005bdc <UART_SetConfig+0x2d0>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	f003 030c 	and.w	r3, r3, #12
 80059de:	2b0c      	cmp	r3, #12
 80059e0:	d828      	bhi.n	8005a34 <UART_SetConfig+0x128>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <UART_SetConfig+0xdc>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a1d 	.word	0x08005a1d
 80059ec:	08005a35 	.word	0x08005a35
 80059f0:	08005a35 	.word	0x08005a35
 80059f4:	08005a35 	.word	0x08005a35
 80059f8:	08005a29 	.word	0x08005a29
 80059fc:	08005a35 	.word	0x08005a35
 8005a00:	08005a35 	.word	0x08005a35
 8005a04:	08005a35 	.word	0x08005a35
 8005a08:	08005a23 	.word	0x08005a23
 8005a0c:	08005a35 	.word	0x08005a35
 8005a10:	08005a35 	.word	0x08005a35
 8005a14:	08005a35 	.word	0x08005a35
 8005a18:	08005a2f 	.word	0x08005a2f
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	77fb      	strb	r3, [r7, #31]
 8005a20:	e117      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a22:	2302      	movs	r3, #2
 8005a24:	77fb      	strb	r3, [r7, #31]
 8005a26:	e114      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a28:	2304      	movs	r3, #4
 8005a2a:	77fb      	strb	r3, [r7, #31]
 8005a2c:	e111      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a2e:	2308      	movs	r3, #8
 8005a30:	77fb      	strb	r3, [r7, #31]
 8005a32:	e10e      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a34:	2310      	movs	r3, #16
 8005a36:	77fb      	strb	r3, [r7, #31]
 8005a38:	e10b      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a69      	ldr	r2, [pc, #420]	; (8005be4 <UART_SetConfig+0x2d8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d120      	bne.n	8005a86 <UART_SetConfig+0x17a>
 8005a44:	4b65      	ldr	r3, [pc, #404]	; (8005bdc <UART_SetConfig+0x2d0>)
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a4e:	2b30      	cmp	r3, #48	; 0x30
 8005a50:	d013      	beq.n	8005a7a <UART_SetConfig+0x16e>
 8005a52:	2b30      	cmp	r3, #48	; 0x30
 8005a54:	d814      	bhi.n	8005a80 <UART_SetConfig+0x174>
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d009      	beq.n	8005a6e <UART_SetConfig+0x162>
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d810      	bhi.n	8005a80 <UART_SetConfig+0x174>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <UART_SetConfig+0x15c>
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d006      	beq.n	8005a74 <UART_SetConfig+0x168>
 8005a66:	e00b      	b.n	8005a80 <UART_SetConfig+0x174>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e0f1      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e0ee      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a74:	2304      	movs	r3, #4
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e0eb      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e0e8      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a80:	2310      	movs	r3, #16
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	e0e5      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a57      	ldr	r2, [pc, #348]	; (8005be8 <UART_SetConfig+0x2dc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d120      	bne.n	8005ad2 <UART_SetConfig+0x1c6>
 8005a90:	4b52      	ldr	r3, [pc, #328]	; (8005bdc <UART_SetConfig+0x2d0>)
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a9c:	d013      	beq.n	8005ac6 <UART_SetConfig+0x1ba>
 8005a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8005aa0:	d814      	bhi.n	8005acc <UART_SetConfig+0x1c0>
 8005aa2:	2b80      	cmp	r3, #128	; 0x80
 8005aa4:	d009      	beq.n	8005aba <UART_SetConfig+0x1ae>
 8005aa6:	2b80      	cmp	r3, #128	; 0x80
 8005aa8:	d810      	bhi.n	8005acc <UART_SetConfig+0x1c0>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <UART_SetConfig+0x1a8>
 8005aae:	2b40      	cmp	r3, #64	; 0x40
 8005ab0:	d006      	beq.n	8005ac0 <UART_SetConfig+0x1b4>
 8005ab2:	e00b      	b.n	8005acc <UART_SetConfig+0x1c0>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	77fb      	strb	r3, [r7, #31]
 8005ab8:	e0cb      	b.n	8005c52 <UART_SetConfig+0x346>
 8005aba:	2302      	movs	r3, #2
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e0c8      	b.n	8005c52 <UART_SetConfig+0x346>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e0c5      	b.n	8005c52 <UART_SetConfig+0x346>
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	77fb      	strb	r3, [r7, #31]
 8005aca:	e0c2      	b.n	8005c52 <UART_SetConfig+0x346>
 8005acc:	2310      	movs	r3, #16
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e0bf      	b.n	8005c52 <UART_SetConfig+0x346>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a45      	ldr	r2, [pc, #276]	; (8005bec <UART_SetConfig+0x2e0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d125      	bne.n	8005b28 <UART_SetConfig+0x21c>
 8005adc:	4b3f      	ldr	r3, [pc, #252]	; (8005bdc <UART_SetConfig+0x2d0>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aea:	d017      	beq.n	8005b1c <UART_SetConfig+0x210>
 8005aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af0:	d817      	bhi.n	8005b22 <UART_SetConfig+0x216>
 8005af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af6:	d00b      	beq.n	8005b10 <UART_SetConfig+0x204>
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afc:	d811      	bhi.n	8005b22 <UART_SetConfig+0x216>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <UART_SetConfig+0x1fe>
 8005b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b06:	d006      	beq.n	8005b16 <UART_SetConfig+0x20a>
 8005b08:	e00b      	b.n	8005b22 <UART_SetConfig+0x216>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	77fb      	strb	r3, [r7, #31]
 8005b0e:	e0a0      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b10:	2302      	movs	r3, #2
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e09d      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b16:	2304      	movs	r3, #4
 8005b18:	77fb      	strb	r3, [r7, #31]
 8005b1a:	e09a      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b1c:	2308      	movs	r3, #8
 8005b1e:	77fb      	strb	r3, [r7, #31]
 8005b20:	e097      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b22:	2310      	movs	r3, #16
 8005b24:	77fb      	strb	r3, [r7, #31]
 8005b26:	e094      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a30      	ldr	r2, [pc, #192]	; (8005bf0 <UART_SetConfig+0x2e4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d125      	bne.n	8005b7e <UART_SetConfig+0x272>
 8005b32:	4b2a      	ldr	r3, [pc, #168]	; (8005bdc <UART_SetConfig+0x2d0>)
 8005b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b40:	d017      	beq.n	8005b72 <UART_SetConfig+0x266>
 8005b42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b46:	d817      	bhi.n	8005b78 <UART_SetConfig+0x26c>
 8005b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4c:	d00b      	beq.n	8005b66 <UART_SetConfig+0x25a>
 8005b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b52:	d811      	bhi.n	8005b78 <UART_SetConfig+0x26c>
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <UART_SetConfig+0x254>
 8005b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b5c:	d006      	beq.n	8005b6c <UART_SetConfig+0x260>
 8005b5e:	e00b      	b.n	8005b78 <UART_SetConfig+0x26c>
 8005b60:	2301      	movs	r3, #1
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	e075      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b66:	2302      	movs	r3, #2
 8005b68:	77fb      	strb	r3, [r7, #31]
 8005b6a:	e072      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	77fb      	strb	r3, [r7, #31]
 8005b70:	e06f      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b72:	2308      	movs	r3, #8
 8005b74:	77fb      	strb	r3, [r7, #31]
 8005b76:	e06c      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e069      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <UART_SetConfig+0x2e8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d137      	bne.n	8005bf8 <UART_SetConfig+0x2ec>
 8005b88:	4b14      	ldr	r3, [pc, #80]	; (8005bdc <UART_SetConfig+0x2d0>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b96:	d017      	beq.n	8005bc8 <UART_SetConfig+0x2bc>
 8005b98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b9c:	d817      	bhi.n	8005bce <UART_SetConfig+0x2c2>
 8005b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba2:	d00b      	beq.n	8005bbc <UART_SetConfig+0x2b0>
 8005ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba8:	d811      	bhi.n	8005bce <UART_SetConfig+0x2c2>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <UART_SetConfig+0x2aa>
 8005bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb2:	d006      	beq.n	8005bc2 <UART_SetConfig+0x2b6>
 8005bb4:	e00b      	b.n	8005bce <UART_SetConfig+0x2c2>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	77fb      	strb	r3, [r7, #31]
 8005bba:	e04a      	b.n	8005c52 <UART_SetConfig+0x346>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e047      	b.n	8005c52 <UART_SetConfig+0x346>
 8005bc2:	2304      	movs	r3, #4
 8005bc4:	77fb      	strb	r3, [r7, #31]
 8005bc6:	e044      	b.n	8005c52 <UART_SetConfig+0x346>
 8005bc8:	2308      	movs	r3, #8
 8005bca:	77fb      	strb	r3, [r7, #31]
 8005bcc:	e041      	b.n	8005c52 <UART_SetConfig+0x346>
 8005bce:	2310      	movs	r3, #16
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	e03e      	b.n	8005c52 <UART_SetConfig+0x346>
 8005bd4:	efff69f3 	.word	0xefff69f3
 8005bd8:	40011000 	.word	0x40011000
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40004400 	.word	0x40004400
 8005be4:	40004800 	.word	0x40004800
 8005be8:	40004c00 	.word	0x40004c00
 8005bec:	40005000 	.word	0x40005000
 8005bf0:	40011400 	.word	0x40011400
 8005bf4:	40007800 	.word	0x40007800
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a71      	ldr	r2, [pc, #452]	; (8005dc4 <UART_SetConfig+0x4b8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d125      	bne.n	8005c4e <UART_SetConfig+0x342>
 8005c02:	4b71      	ldr	r3, [pc, #452]	; (8005dc8 <UART_SetConfig+0x4bc>)
 8005c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c10:	d017      	beq.n	8005c42 <UART_SetConfig+0x336>
 8005c12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c16:	d817      	bhi.n	8005c48 <UART_SetConfig+0x33c>
 8005c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1c:	d00b      	beq.n	8005c36 <UART_SetConfig+0x32a>
 8005c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c22:	d811      	bhi.n	8005c48 <UART_SetConfig+0x33c>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <UART_SetConfig+0x324>
 8005c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c2c:	d006      	beq.n	8005c3c <UART_SetConfig+0x330>
 8005c2e:	e00b      	b.n	8005c48 <UART_SetConfig+0x33c>
 8005c30:	2300      	movs	r3, #0
 8005c32:	77fb      	strb	r3, [r7, #31]
 8005c34:	e00d      	b.n	8005c52 <UART_SetConfig+0x346>
 8005c36:	2302      	movs	r3, #2
 8005c38:	77fb      	strb	r3, [r7, #31]
 8005c3a:	e00a      	b.n	8005c52 <UART_SetConfig+0x346>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	77fb      	strb	r3, [r7, #31]
 8005c40:	e007      	b.n	8005c52 <UART_SetConfig+0x346>
 8005c42:	2308      	movs	r3, #8
 8005c44:	77fb      	strb	r3, [r7, #31]
 8005c46:	e004      	b.n	8005c52 <UART_SetConfig+0x346>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	77fb      	strb	r3, [r7, #31]
 8005c4c:	e001      	b.n	8005c52 <UART_SetConfig+0x346>
 8005c4e:	2310      	movs	r3, #16
 8005c50:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c5a:	d15b      	bne.n	8005d14 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005c5c:	7ffb      	ldrb	r3, [r7, #31]
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d827      	bhi.n	8005cb2 <UART_SetConfig+0x3a6>
 8005c62:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <UART_SetConfig+0x35c>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c8d 	.word	0x08005c8d
 8005c6c:	08005c95 	.word	0x08005c95
 8005c70:	08005c9d 	.word	0x08005c9d
 8005c74:	08005cb3 	.word	0x08005cb3
 8005c78:	08005ca3 	.word	0x08005ca3
 8005c7c:	08005cb3 	.word	0x08005cb3
 8005c80:	08005cb3 	.word	0x08005cb3
 8005c84:	08005cb3 	.word	0x08005cb3
 8005c88:	08005cab 	.word	0x08005cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c8c:	f7fe fb14 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 8005c90:	61b8      	str	r0, [r7, #24]
        break;
 8005c92:	e013      	b.n	8005cbc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c94:	f7fe fb24 	bl	80042e0 <HAL_RCC_GetPCLK2Freq>
 8005c98:	61b8      	str	r0, [r7, #24]
        break;
 8005c9a:	e00f      	b.n	8005cbc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c9c:	4b4b      	ldr	r3, [pc, #300]	; (8005dcc <UART_SetConfig+0x4c0>)
 8005c9e:	61bb      	str	r3, [r7, #24]
        break;
 8005ca0:	e00c      	b.n	8005cbc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ca2:	f7fe fa47 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 8005ca6:	61b8      	str	r0, [r7, #24]
        break;
 8005ca8:	e008      	b.n	8005cbc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cae:	61bb      	str	r3, [r7, #24]
        break;
 8005cb0:	e004      	b.n	8005cbc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	77bb      	strb	r3, [r7, #30]
        break;
 8005cba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d074      	beq.n	8005dac <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	005a      	lsls	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	441a      	add	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b0f      	cmp	r3, #15
 8005cde:	d916      	bls.n	8005d0e <UART_SetConfig+0x402>
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce6:	d212      	bcs.n	8005d0e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f023 030f 	bic.w	r3, r3, #15
 8005cf0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	89fb      	ldrh	r3, [r7, #14]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	89fa      	ldrh	r2, [r7, #14]
 8005d0a:	60da      	str	r2, [r3, #12]
 8005d0c:	e04e      	b.n	8005dac <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	77bb      	strb	r3, [r7, #30]
 8005d12:	e04b      	b.n	8005dac <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d14:	7ffb      	ldrb	r3, [r7, #31]
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d827      	bhi.n	8005d6a <UART_SetConfig+0x45e>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0x414>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	08005d6b 	.word	0x08005d6b
 8005d30:	08005d5b 	.word	0x08005d5b
 8005d34:	08005d6b 	.word	0x08005d6b
 8005d38:	08005d6b 	.word	0x08005d6b
 8005d3c:	08005d6b 	.word	0x08005d6b
 8005d40:	08005d63 	.word	0x08005d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d44:	f7fe fab8 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 8005d48:	61b8      	str	r0, [r7, #24]
        break;
 8005d4a:	e013      	b.n	8005d74 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d4c:	f7fe fac8 	bl	80042e0 <HAL_RCC_GetPCLK2Freq>
 8005d50:	61b8      	str	r0, [r7, #24]
        break;
 8005d52:	e00f      	b.n	8005d74 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d54:	4b1d      	ldr	r3, [pc, #116]	; (8005dcc <UART_SetConfig+0x4c0>)
 8005d56:	61bb      	str	r3, [r7, #24]
        break;
 8005d58:	e00c      	b.n	8005d74 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d5a:	f7fe f9eb 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 8005d5e:	61b8      	str	r0, [r7, #24]
        break;
 8005d60:	e008      	b.n	8005d74 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d66:	61bb      	str	r3, [r7, #24]
        break;
 8005d68:	e004      	b.n	8005d74 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	77bb      	strb	r3, [r7, #30]
        break;
 8005d72:	bf00      	nop
    }

    if (pclk != 0U)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d018      	beq.n	8005dac <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	085a      	lsrs	r2, r3, #1
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	441a      	add	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b0f      	cmp	r3, #15
 8005d94:	d908      	bls.n	8005da8 <UART_SetConfig+0x49c>
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9c:	d204      	bcs.n	8005da8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	60da      	str	r2, [r3, #12]
 8005da6:	e001      	b.n	8005dac <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005db8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40007c00 	.word	0x40007c00
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	00f42400 	.word	0x00f42400

08005dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01a      	beq.n	8005ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ece:	d10a      	bne.n	8005ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	605a      	str	r2, [r3, #4]
  }
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f24:	f7fb fee2 	bl	8001cec <HAL_GetTick>
 8005f28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d10e      	bne.n	8005f56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f82d 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e023      	b.n	8005f9e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d10e      	bne.n	8005f82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f817 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e00d      	b.n	8005f9e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	603b      	str	r3, [r7, #0]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb6:	e05e      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbe:	d05a      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc0:	f7fb fe94 	bl	8001cec <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d302      	bcc.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d11b      	bne.n	800600e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fe4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e043      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d02c      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602a:	d124      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006034:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006044:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e00f      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4013      	ands	r3, r2
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	429a      	cmp	r2, r3
 8006084:	bf0c      	ite	eq
 8006086:	2301      	moveq	r3, #1
 8006088:	2300      	movne	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	429a      	cmp	r2, r3
 8006092:	d091      	beq.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4613      	mov	r3, r2
 80060ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	88fa      	ldrh	r2, [r7, #6]
 80060b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2222      	movs	r2, #34	; 0x22
 80060c8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d02b      	beq.n	800612a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d6:	4a25      	ldr	r2, [pc, #148]	; (800616c <UART_Start_Receive_DMA+0xcc>)
 80060d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	4a24      	ldr	r2, [pc, #144]	; (8006170 <UART_Start_Receive_DMA+0xd0>)
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	4a23      	ldr	r2, [pc, #140]	; (8006174 <UART_Start_Receive_DMA+0xd4>)
 80060e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ee:	2200      	movs	r2, #0
 80060f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3324      	adds	r3, #36	; 0x24
 80060fc:	4619      	mov	r1, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006102:	461a      	mov	r2, r3
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	f7fb ffbd 	bl	8002084 <HAL_DMA_Start_IT>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00c      	beq.n	800612a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2210      	movs	r2, #16
 8006114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e01c      	b.n	8006164 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006140:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0201 	orr.w	r2, r2, #1
 8006150:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006160:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	08006201 	.word	0x08006201
 8006170:	08006295 	.word	0x08006295
 8006174:	080062cd 	.word	0x080062cd

08006178 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800618e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061b8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0201 	bic.w	r2, r2, #1
 80061c8:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d107      	bne.n	80061e2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0210 	bic.w	r2, r2, #16
 80061e0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2220      	movs	r2, #32
 80061e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006216:	d02a      	beq.n	800626e <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800622e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0201 	bic.w	r2, r2, #1
 800623e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625a:	2b01      	cmp	r3, #1
 800625c:	d107      	bne.n	800626e <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0210 	bic.w	r2, r2, #16
 800626c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006272:	2b01      	cmp	r3, #1
 8006274:	d107      	bne.n	8006286 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800627c:	4619      	mov	r1, r3
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f7ff fb38 	bl	80058f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006284:	e002      	b.n	800628c <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7fa ff14 	bl	80010b4 <HAL_UART_RxCpltCallback>
}
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d109      	bne.n	80062be <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062b0:	085b      	lsrs	r3, r3, #1
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	4619      	mov	r1, r3
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff fb1c 	bl	80058f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062bc:	e002      	b.n	80062c4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7fa fee0 	bl	8001084 <HAL_UART_RxHalfCpltCallback>
}
 80062c4:	bf00      	nop
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f0:	2b80      	cmp	r3, #128	; 0x80
 80062f2:	d109      	bne.n	8006308 <UART_DMAError+0x3c>
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b21      	cmp	r3, #33	; 0x21
 80062f8:	d106      	bne.n	8006308 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006302:	6978      	ldr	r0, [r7, #20]
 8006304:	f7ff ff38 	bl	8006178 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d109      	bne.n	800632a <UART_DMAError+0x5e>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b22      	cmp	r3, #34	; 0x22
 800631a:	d106      	bne.n	800632a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2200      	movs	r2, #0
 8006320:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006324:	6978      	ldr	r0, [r7, #20]
 8006326:	f7ff ff3c 	bl	80061a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006330:	f043 0210 	orr.w	r2, r3, #16
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800633a:	6978      	ldr	r0, [r7, #20]
 800633c:	f7ff fad0 	bl	80058e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006340:	bf00      	nop
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <__errno>:
 8006348:	4b01      	ldr	r3, [pc, #4]	; (8006350 <__errno+0x8>)
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	20075320 	.word	0x20075320

08006354 <__libc_init_array>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	4d0d      	ldr	r5, [pc, #52]	; (800638c <__libc_init_array+0x38>)
 8006358:	4c0d      	ldr	r4, [pc, #52]	; (8006390 <__libc_init_array+0x3c>)
 800635a:	1b64      	subs	r4, r4, r5
 800635c:	10a4      	asrs	r4, r4, #2
 800635e:	2600      	movs	r6, #0
 8006360:	42a6      	cmp	r6, r4
 8006362:	d109      	bne.n	8006378 <__libc_init_array+0x24>
 8006364:	4d0b      	ldr	r5, [pc, #44]	; (8006394 <__libc_init_array+0x40>)
 8006366:	4c0c      	ldr	r4, [pc, #48]	; (8006398 <__libc_init_array+0x44>)
 8006368:	f000 fcf6 	bl	8006d58 <_init>
 800636c:	1b64      	subs	r4, r4, r5
 800636e:	10a4      	asrs	r4, r4, #2
 8006370:	2600      	movs	r6, #0
 8006372:	42a6      	cmp	r6, r4
 8006374:	d105      	bne.n	8006382 <__libc_init_array+0x2e>
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	f855 3b04 	ldr.w	r3, [r5], #4
 800637c:	4798      	blx	r3
 800637e:	3601      	adds	r6, #1
 8006380:	e7ee      	b.n	8006360 <__libc_init_array+0xc>
 8006382:	f855 3b04 	ldr.w	r3, [r5], #4
 8006386:	4798      	blx	r3
 8006388:	3601      	adds	r6, #1
 800638a:	e7f2      	b.n	8006372 <__libc_init_array+0x1e>
 800638c:	080084f4 	.word	0x080084f4
 8006390:	080084f4 	.word	0x080084f4
 8006394:	080084f4 	.word	0x080084f4
 8006398:	080084f8 	.word	0x080084f8

0800639c <malloc>:
 800639c:	4b02      	ldr	r3, [pc, #8]	; (80063a8 <malloc+0xc>)
 800639e:	4601      	mov	r1, r0
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	f000 b863 	b.w	800646c <_malloc_r>
 80063a6:	bf00      	nop
 80063a8:	20075320 	.word	0x20075320

080063ac <free>:
 80063ac:	4b02      	ldr	r3, [pc, #8]	; (80063b8 <free+0xc>)
 80063ae:	4601      	mov	r1, r0
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	f000 b80b 	b.w	80063cc <_free_r>
 80063b6:	bf00      	nop
 80063b8:	20075320 	.word	0x20075320

080063bc <memset>:
 80063bc:	4402      	add	r2, r0
 80063be:	4603      	mov	r3, r0
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d100      	bne.n	80063c6 <memset+0xa>
 80063c4:	4770      	bx	lr
 80063c6:	f803 1b01 	strb.w	r1, [r3], #1
 80063ca:	e7f9      	b.n	80063c0 <memset+0x4>

080063cc <_free_r>:
 80063cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063ce:	2900      	cmp	r1, #0
 80063d0:	d048      	beq.n	8006464 <_free_r+0x98>
 80063d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063d6:	9001      	str	r0, [sp, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f1a1 0404 	sub.w	r4, r1, #4
 80063de:	bfb8      	it	lt
 80063e0:	18e4      	addlt	r4, r4, r3
 80063e2:	f000 fc01 	bl	8006be8 <__malloc_lock>
 80063e6:	4a20      	ldr	r2, [pc, #128]	; (8006468 <_free_r+0x9c>)
 80063e8:	9801      	ldr	r0, [sp, #4]
 80063ea:	6813      	ldr	r3, [r2, #0]
 80063ec:	4615      	mov	r5, r2
 80063ee:	b933      	cbnz	r3, 80063fe <_free_r+0x32>
 80063f0:	6063      	str	r3, [r4, #4]
 80063f2:	6014      	str	r4, [r2, #0]
 80063f4:	b003      	add	sp, #12
 80063f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063fa:	f000 bbfb 	b.w	8006bf4 <__malloc_unlock>
 80063fe:	42a3      	cmp	r3, r4
 8006400:	d90b      	bls.n	800641a <_free_r+0x4e>
 8006402:	6821      	ldr	r1, [r4, #0]
 8006404:	1862      	adds	r2, r4, r1
 8006406:	4293      	cmp	r3, r2
 8006408:	bf04      	itt	eq
 800640a:	681a      	ldreq	r2, [r3, #0]
 800640c:	685b      	ldreq	r3, [r3, #4]
 800640e:	6063      	str	r3, [r4, #4]
 8006410:	bf04      	itt	eq
 8006412:	1852      	addeq	r2, r2, r1
 8006414:	6022      	streq	r2, [r4, #0]
 8006416:	602c      	str	r4, [r5, #0]
 8006418:	e7ec      	b.n	80063f4 <_free_r+0x28>
 800641a:	461a      	mov	r2, r3
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	b10b      	cbz	r3, 8006424 <_free_r+0x58>
 8006420:	42a3      	cmp	r3, r4
 8006422:	d9fa      	bls.n	800641a <_free_r+0x4e>
 8006424:	6811      	ldr	r1, [r2, #0]
 8006426:	1855      	adds	r5, r2, r1
 8006428:	42a5      	cmp	r5, r4
 800642a:	d10b      	bne.n	8006444 <_free_r+0x78>
 800642c:	6824      	ldr	r4, [r4, #0]
 800642e:	4421      	add	r1, r4
 8006430:	1854      	adds	r4, r2, r1
 8006432:	42a3      	cmp	r3, r4
 8006434:	6011      	str	r1, [r2, #0]
 8006436:	d1dd      	bne.n	80063f4 <_free_r+0x28>
 8006438:	681c      	ldr	r4, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	6053      	str	r3, [r2, #4]
 800643e:	4421      	add	r1, r4
 8006440:	6011      	str	r1, [r2, #0]
 8006442:	e7d7      	b.n	80063f4 <_free_r+0x28>
 8006444:	d902      	bls.n	800644c <_free_r+0x80>
 8006446:	230c      	movs	r3, #12
 8006448:	6003      	str	r3, [r0, #0]
 800644a:	e7d3      	b.n	80063f4 <_free_r+0x28>
 800644c:	6825      	ldr	r5, [r4, #0]
 800644e:	1961      	adds	r1, r4, r5
 8006450:	428b      	cmp	r3, r1
 8006452:	bf04      	itt	eq
 8006454:	6819      	ldreq	r1, [r3, #0]
 8006456:	685b      	ldreq	r3, [r3, #4]
 8006458:	6063      	str	r3, [r4, #4]
 800645a:	bf04      	itt	eq
 800645c:	1949      	addeq	r1, r1, r5
 800645e:	6021      	streq	r1, [r4, #0]
 8006460:	6054      	str	r4, [r2, #4]
 8006462:	e7c7      	b.n	80063f4 <_free_r+0x28>
 8006464:	b003      	add	sp, #12
 8006466:	bd30      	pop	{r4, r5, pc}
 8006468:	200757c4 	.word	0x200757c4

0800646c <_malloc_r>:
 800646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646e:	1ccd      	adds	r5, r1, #3
 8006470:	f025 0503 	bic.w	r5, r5, #3
 8006474:	3508      	adds	r5, #8
 8006476:	2d0c      	cmp	r5, #12
 8006478:	bf38      	it	cc
 800647a:	250c      	movcc	r5, #12
 800647c:	2d00      	cmp	r5, #0
 800647e:	4606      	mov	r6, r0
 8006480:	db01      	blt.n	8006486 <_malloc_r+0x1a>
 8006482:	42a9      	cmp	r1, r5
 8006484:	d903      	bls.n	800648e <_malloc_r+0x22>
 8006486:	230c      	movs	r3, #12
 8006488:	6033      	str	r3, [r6, #0]
 800648a:	2000      	movs	r0, #0
 800648c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800648e:	f000 fbab 	bl	8006be8 <__malloc_lock>
 8006492:	4921      	ldr	r1, [pc, #132]	; (8006518 <_malloc_r+0xac>)
 8006494:	680a      	ldr	r2, [r1, #0]
 8006496:	4614      	mov	r4, r2
 8006498:	b99c      	cbnz	r4, 80064c2 <_malloc_r+0x56>
 800649a:	4f20      	ldr	r7, [pc, #128]	; (800651c <_malloc_r+0xb0>)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	b923      	cbnz	r3, 80064aa <_malloc_r+0x3e>
 80064a0:	4621      	mov	r1, r4
 80064a2:	4630      	mov	r0, r6
 80064a4:	f000 f8b2 	bl	800660c <_sbrk_r>
 80064a8:	6038      	str	r0, [r7, #0]
 80064aa:	4629      	mov	r1, r5
 80064ac:	4630      	mov	r0, r6
 80064ae:	f000 f8ad 	bl	800660c <_sbrk_r>
 80064b2:	1c43      	adds	r3, r0, #1
 80064b4:	d123      	bne.n	80064fe <_malloc_r+0x92>
 80064b6:	230c      	movs	r3, #12
 80064b8:	6033      	str	r3, [r6, #0]
 80064ba:	4630      	mov	r0, r6
 80064bc:	f000 fb9a 	bl	8006bf4 <__malloc_unlock>
 80064c0:	e7e3      	b.n	800648a <_malloc_r+0x1e>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	1b5b      	subs	r3, r3, r5
 80064c6:	d417      	bmi.n	80064f8 <_malloc_r+0x8c>
 80064c8:	2b0b      	cmp	r3, #11
 80064ca:	d903      	bls.n	80064d4 <_malloc_r+0x68>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	441c      	add	r4, r3
 80064d0:	6025      	str	r5, [r4, #0]
 80064d2:	e004      	b.n	80064de <_malloc_r+0x72>
 80064d4:	6863      	ldr	r3, [r4, #4]
 80064d6:	42a2      	cmp	r2, r4
 80064d8:	bf0c      	ite	eq
 80064da:	600b      	streq	r3, [r1, #0]
 80064dc:	6053      	strne	r3, [r2, #4]
 80064de:	4630      	mov	r0, r6
 80064e0:	f000 fb88 	bl	8006bf4 <__malloc_unlock>
 80064e4:	f104 000b 	add.w	r0, r4, #11
 80064e8:	1d23      	adds	r3, r4, #4
 80064ea:	f020 0007 	bic.w	r0, r0, #7
 80064ee:	1ac2      	subs	r2, r0, r3
 80064f0:	d0cc      	beq.n	800648c <_malloc_r+0x20>
 80064f2:	1a1b      	subs	r3, r3, r0
 80064f4:	50a3      	str	r3, [r4, r2]
 80064f6:	e7c9      	b.n	800648c <_malloc_r+0x20>
 80064f8:	4622      	mov	r2, r4
 80064fa:	6864      	ldr	r4, [r4, #4]
 80064fc:	e7cc      	b.n	8006498 <_malloc_r+0x2c>
 80064fe:	1cc4      	adds	r4, r0, #3
 8006500:	f024 0403 	bic.w	r4, r4, #3
 8006504:	42a0      	cmp	r0, r4
 8006506:	d0e3      	beq.n	80064d0 <_malloc_r+0x64>
 8006508:	1a21      	subs	r1, r4, r0
 800650a:	4630      	mov	r0, r6
 800650c:	f000 f87e 	bl	800660c <_sbrk_r>
 8006510:	3001      	adds	r0, #1
 8006512:	d1dd      	bne.n	80064d0 <_malloc_r+0x64>
 8006514:	e7cf      	b.n	80064b6 <_malloc_r+0x4a>
 8006516:	bf00      	nop
 8006518:	200757c4 	.word	0x200757c4
 800651c:	200757c8 	.word	0x200757c8

08006520 <_puts_r>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	460e      	mov	r6, r1
 8006524:	4605      	mov	r5, r0
 8006526:	b118      	cbz	r0, 8006530 <_puts_r+0x10>
 8006528:	6983      	ldr	r3, [r0, #24]
 800652a:	b90b      	cbnz	r3, 8006530 <_puts_r+0x10>
 800652c:	f000 fa58 	bl	80069e0 <__sinit>
 8006530:	69ab      	ldr	r3, [r5, #24]
 8006532:	68ac      	ldr	r4, [r5, #8]
 8006534:	b913      	cbnz	r3, 800653c <_puts_r+0x1c>
 8006536:	4628      	mov	r0, r5
 8006538:	f000 fa52 	bl	80069e0 <__sinit>
 800653c:	4b2c      	ldr	r3, [pc, #176]	; (80065f0 <_puts_r+0xd0>)
 800653e:	429c      	cmp	r4, r3
 8006540:	d120      	bne.n	8006584 <_puts_r+0x64>
 8006542:	686c      	ldr	r4, [r5, #4]
 8006544:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006546:	07db      	lsls	r3, r3, #31
 8006548:	d405      	bmi.n	8006556 <_puts_r+0x36>
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	0598      	lsls	r0, r3, #22
 800654e:	d402      	bmi.n	8006556 <_puts_r+0x36>
 8006550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006552:	f000 fae3 	bl	8006b1c <__retarget_lock_acquire_recursive>
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	0719      	lsls	r1, r3, #28
 800655a:	d51d      	bpl.n	8006598 <_puts_r+0x78>
 800655c:	6923      	ldr	r3, [r4, #16]
 800655e:	b1db      	cbz	r3, 8006598 <_puts_r+0x78>
 8006560:	3e01      	subs	r6, #1
 8006562:	68a3      	ldr	r3, [r4, #8]
 8006564:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006568:	3b01      	subs	r3, #1
 800656a:	60a3      	str	r3, [r4, #8]
 800656c:	bb39      	cbnz	r1, 80065be <_puts_r+0x9e>
 800656e:	2b00      	cmp	r3, #0
 8006570:	da38      	bge.n	80065e4 <_puts_r+0xc4>
 8006572:	4622      	mov	r2, r4
 8006574:	210a      	movs	r1, #10
 8006576:	4628      	mov	r0, r5
 8006578:	f000 f858 	bl	800662c <__swbuf_r>
 800657c:	3001      	adds	r0, #1
 800657e:	d011      	beq.n	80065a4 <_puts_r+0x84>
 8006580:	250a      	movs	r5, #10
 8006582:	e011      	b.n	80065a8 <_puts_r+0x88>
 8006584:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <_puts_r+0xd4>)
 8006586:	429c      	cmp	r4, r3
 8006588:	d101      	bne.n	800658e <_puts_r+0x6e>
 800658a:	68ac      	ldr	r4, [r5, #8]
 800658c:	e7da      	b.n	8006544 <_puts_r+0x24>
 800658e:	4b1a      	ldr	r3, [pc, #104]	; (80065f8 <_puts_r+0xd8>)
 8006590:	429c      	cmp	r4, r3
 8006592:	bf08      	it	eq
 8006594:	68ec      	ldreq	r4, [r5, #12]
 8006596:	e7d5      	b.n	8006544 <_puts_r+0x24>
 8006598:	4621      	mov	r1, r4
 800659a:	4628      	mov	r0, r5
 800659c:	f000 f898 	bl	80066d0 <__swsetup_r>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d0dd      	beq.n	8006560 <_puts_r+0x40>
 80065a4:	f04f 35ff 	mov.w	r5, #4294967295
 80065a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065aa:	07da      	lsls	r2, r3, #31
 80065ac:	d405      	bmi.n	80065ba <_puts_r+0x9a>
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	059b      	lsls	r3, r3, #22
 80065b2:	d402      	bmi.n	80065ba <_puts_r+0x9a>
 80065b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065b6:	f000 fab2 	bl	8006b1e <__retarget_lock_release_recursive>
 80065ba:	4628      	mov	r0, r5
 80065bc:	bd70      	pop	{r4, r5, r6, pc}
 80065be:	2b00      	cmp	r3, #0
 80065c0:	da04      	bge.n	80065cc <_puts_r+0xac>
 80065c2:	69a2      	ldr	r2, [r4, #24]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	dc06      	bgt.n	80065d6 <_puts_r+0xb6>
 80065c8:	290a      	cmp	r1, #10
 80065ca:	d004      	beq.n	80065d6 <_puts_r+0xb6>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	6022      	str	r2, [r4, #0]
 80065d2:	7019      	strb	r1, [r3, #0]
 80065d4:	e7c5      	b.n	8006562 <_puts_r+0x42>
 80065d6:	4622      	mov	r2, r4
 80065d8:	4628      	mov	r0, r5
 80065da:	f000 f827 	bl	800662c <__swbuf_r>
 80065de:	3001      	adds	r0, #1
 80065e0:	d1bf      	bne.n	8006562 <_puts_r+0x42>
 80065e2:	e7df      	b.n	80065a4 <_puts_r+0x84>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	250a      	movs	r5, #10
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	6022      	str	r2, [r4, #0]
 80065ec:	701d      	strb	r5, [r3, #0]
 80065ee:	e7db      	b.n	80065a8 <_puts_r+0x88>
 80065f0:	080084ac 	.word	0x080084ac
 80065f4:	080084cc 	.word	0x080084cc
 80065f8:	0800848c 	.word	0x0800848c

080065fc <puts>:
 80065fc:	4b02      	ldr	r3, [pc, #8]	; (8006608 <puts+0xc>)
 80065fe:	4601      	mov	r1, r0
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	f7ff bf8d 	b.w	8006520 <_puts_r>
 8006606:	bf00      	nop
 8006608:	20075320 	.word	0x20075320

0800660c <_sbrk_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4d06      	ldr	r5, [pc, #24]	; (8006628 <_sbrk_r+0x1c>)
 8006610:	2300      	movs	r3, #0
 8006612:	4604      	mov	r4, r0
 8006614:	4608      	mov	r0, r1
 8006616:	602b      	str	r3, [r5, #0]
 8006618:	f7fb faa6 	bl	8001b68 <_sbrk>
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	d102      	bne.n	8006626 <_sbrk_r+0x1a>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	b103      	cbz	r3, 8006626 <_sbrk_r+0x1a>
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	bd38      	pop	{r3, r4, r5, pc}
 8006628:	20075a18 	.word	0x20075a18

0800662c <__swbuf_r>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	460e      	mov	r6, r1
 8006630:	4614      	mov	r4, r2
 8006632:	4605      	mov	r5, r0
 8006634:	b118      	cbz	r0, 800663e <__swbuf_r+0x12>
 8006636:	6983      	ldr	r3, [r0, #24]
 8006638:	b90b      	cbnz	r3, 800663e <__swbuf_r+0x12>
 800663a:	f000 f9d1 	bl	80069e0 <__sinit>
 800663e:	4b21      	ldr	r3, [pc, #132]	; (80066c4 <__swbuf_r+0x98>)
 8006640:	429c      	cmp	r4, r3
 8006642:	d12b      	bne.n	800669c <__swbuf_r+0x70>
 8006644:	686c      	ldr	r4, [r5, #4]
 8006646:	69a3      	ldr	r3, [r4, #24]
 8006648:	60a3      	str	r3, [r4, #8]
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	071a      	lsls	r2, r3, #28
 800664e:	d52f      	bpl.n	80066b0 <__swbuf_r+0x84>
 8006650:	6923      	ldr	r3, [r4, #16]
 8006652:	b36b      	cbz	r3, 80066b0 <__swbuf_r+0x84>
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	6820      	ldr	r0, [r4, #0]
 8006658:	1ac0      	subs	r0, r0, r3
 800665a:	6963      	ldr	r3, [r4, #20]
 800665c:	b2f6      	uxtb	r6, r6
 800665e:	4283      	cmp	r3, r0
 8006660:	4637      	mov	r7, r6
 8006662:	dc04      	bgt.n	800666e <__swbuf_r+0x42>
 8006664:	4621      	mov	r1, r4
 8006666:	4628      	mov	r0, r5
 8006668:	f000 f926 	bl	80068b8 <_fflush_r>
 800666c:	bb30      	cbnz	r0, 80066bc <__swbuf_r+0x90>
 800666e:	68a3      	ldr	r3, [r4, #8]
 8006670:	3b01      	subs	r3, #1
 8006672:	60a3      	str	r3, [r4, #8]
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	6022      	str	r2, [r4, #0]
 800667a:	701e      	strb	r6, [r3, #0]
 800667c:	6963      	ldr	r3, [r4, #20]
 800667e:	3001      	adds	r0, #1
 8006680:	4283      	cmp	r3, r0
 8006682:	d004      	beq.n	800668e <__swbuf_r+0x62>
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	07db      	lsls	r3, r3, #31
 8006688:	d506      	bpl.n	8006698 <__swbuf_r+0x6c>
 800668a:	2e0a      	cmp	r6, #10
 800668c:	d104      	bne.n	8006698 <__swbuf_r+0x6c>
 800668e:	4621      	mov	r1, r4
 8006690:	4628      	mov	r0, r5
 8006692:	f000 f911 	bl	80068b8 <_fflush_r>
 8006696:	b988      	cbnz	r0, 80066bc <__swbuf_r+0x90>
 8006698:	4638      	mov	r0, r7
 800669a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669c:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <__swbuf_r+0x9c>)
 800669e:	429c      	cmp	r4, r3
 80066a0:	d101      	bne.n	80066a6 <__swbuf_r+0x7a>
 80066a2:	68ac      	ldr	r4, [r5, #8]
 80066a4:	e7cf      	b.n	8006646 <__swbuf_r+0x1a>
 80066a6:	4b09      	ldr	r3, [pc, #36]	; (80066cc <__swbuf_r+0xa0>)
 80066a8:	429c      	cmp	r4, r3
 80066aa:	bf08      	it	eq
 80066ac:	68ec      	ldreq	r4, [r5, #12]
 80066ae:	e7ca      	b.n	8006646 <__swbuf_r+0x1a>
 80066b0:	4621      	mov	r1, r4
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 f80c 	bl	80066d0 <__swsetup_r>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d0cb      	beq.n	8006654 <__swbuf_r+0x28>
 80066bc:	f04f 37ff 	mov.w	r7, #4294967295
 80066c0:	e7ea      	b.n	8006698 <__swbuf_r+0x6c>
 80066c2:	bf00      	nop
 80066c4:	080084ac 	.word	0x080084ac
 80066c8:	080084cc 	.word	0x080084cc
 80066cc:	0800848c 	.word	0x0800848c

080066d0 <__swsetup_r>:
 80066d0:	4b32      	ldr	r3, [pc, #200]	; (800679c <__swsetup_r+0xcc>)
 80066d2:	b570      	push	{r4, r5, r6, lr}
 80066d4:	681d      	ldr	r5, [r3, #0]
 80066d6:	4606      	mov	r6, r0
 80066d8:	460c      	mov	r4, r1
 80066da:	b125      	cbz	r5, 80066e6 <__swsetup_r+0x16>
 80066dc:	69ab      	ldr	r3, [r5, #24]
 80066de:	b913      	cbnz	r3, 80066e6 <__swsetup_r+0x16>
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 f97d 	bl	80069e0 <__sinit>
 80066e6:	4b2e      	ldr	r3, [pc, #184]	; (80067a0 <__swsetup_r+0xd0>)
 80066e8:	429c      	cmp	r4, r3
 80066ea:	d10f      	bne.n	800670c <__swsetup_r+0x3c>
 80066ec:	686c      	ldr	r4, [r5, #4]
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066f4:	0719      	lsls	r1, r3, #28
 80066f6:	d42c      	bmi.n	8006752 <__swsetup_r+0x82>
 80066f8:	06dd      	lsls	r5, r3, #27
 80066fa:	d411      	bmi.n	8006720 <__swsetup_r+0x50>
 80066fc:	2309      	movs	r3, #9
 80066fe:	6033      	str	r3, [r6, #0]
 8006700:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	f04f 30ff 	mov.w	r0, #4294967295
 800670a:	e03e      	b.n	800678a <__swsetup_r+0xba>
 800670c:	4b25      	ldr	r3, [pc, #148]	; (80067a4 <__swsetup_r+0xd4>)
 800670e:	429c      	cmp	r4, r3
 8006710:	d101      	bne.n	8006716 <__swsetup_r+0x46>
 8006712:	68ac      	ldr	r4, [r5, #8]
 8006714:	e7eb      	b.n	80066ee <__swsetup_r+0x1e>
 8006716:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <__swsetup_r+0xd8>)
 8006718:	429c      	cmp	r4, r3
 800671a:	bf08      	it	eq
 800671c:	68ec      	ldreq	r4, [r5, #12]
 800671e:	e7e6      	b.n	80066ee <__swsetup_r+0x1e>
 8006720:	0758      	lsls	r0, r3, #29
 8006722:	d512      	bpl.n	800674a <__swsetup_r+0x7a>
 8006724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006726:	b141      	cbz	r1, 800673a <__swsetup_r+0x6a>
 8006728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800672c:	4299      	cmp	r1, r3
 800672e:	d002      	beq.n	8006736 <__swsetup_r+0x66>
 8006730:	4630      	mov	r0, r6
 8006732:	f7ff fe4b 	bl	80063cc <_free_r>
 8006736:	2300      	movs	r3, #0
 8006738:	6363      	str	r3, [r4, #52]	; 0x34
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	2300      	movs	r3, #0
 8006744:	6063      	str	r3, [r4, #4]
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	f043 0308 	orr.w	r3, r3, #8
 8006750:	81a3      	strh	r3, [r4, #12]
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	b94b      	cbnz	r3, 800676a <__swsetup_r+0x9a>
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800675c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006760:	d003      	beq.n	800676a <__swsetup_r+0x9a>
 8006762:	4621      	mov	r1, r4
 8006764:	4630      	mov	r0, r6
 8006766:	f000 f9ff 	bl	8006b68 <__smakebuf_r>
 800676a:	89a0      	ldrh	r0, [r4, #12]
 800676c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006770:	f010 0301 	ands.w	r3, r0, #1
 8006774:	d00a      	beq.n	800678c <__swsetup_r+0xbc>
 8006776:	2300      	movs	r3, #0
 8006778:	60a3      	str	r3, [r4, #8]
 800677a:	6963      	ldr	r3, [r4, #20]
 800677c:	425b      	negs	r3, r3
 800677e:	61a3      	str	r3, [r4, #24]
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	b943      	cbnz	r3, 8006796 <__swsetup_r+0xc6>
 8006784:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006788:	d1ba      	bne.n	8006700 <__swsetup_r+0x30>
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	0781      	lsls	r1, r0, #30
 800678e:	bf58      	it	pl
 8006790:	6963      	ldrpl	r3, [r4, #20]
 8006792:	60a3      	str	r3, [r4, #8]
 8006794:	e7f4      	b.n	8006780 <__swsetup_r+0xb0>
 8006796:	2000      	movs	r0, #0
 8006798:	e7f7      	b.n	800678a <__swsetup_r+0xba>
 800679a:	bf00      	nop
 800679c:	20075320 	.word	0x20075320
 80067a0:	080084ac 	.word	0x080084ac
 80067a4:	080084cc 	.word	0x080084cc
 80067a8:	0800848c 	.word	0x0800848c

080067ac <__sflush_r>:
 80067ac:	898a      	ldrh	r2, [r1, #12]
 80067ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b2:	4605      	mov	r5, r0
 80067b4:	0710      	lsls	r0, r2, #28
 80067b6:	460c      	mov	r4, r1
 80067b8:	d458      	bmi.n	800686c <__sflush_r+0xc0>
 80067ba:	684b      	ldr	r3, [r1, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	dc05      	bgt.n	80067cc <__sflush_r+0x20>
 80067c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dc02      	bgt.n	80067cc <__sflush_r+0x20>
 80067c6:	2000      	movs	r0, #0
 80067c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067ce:	2e00      	cmp	r6, #0
 80067d0:	d0f9      	beq.n	80067c6 <__sflush_r+0x1a>
 80067d2:	2300      	movs	r3, #0
 80067d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067d8:	682f      	ldr	r7, [r5, #0]
 80067da:	602b      	str	r3, [r5, #0]
 80067dc:	d032      	beq.n	8006844 <__sflush_r+0x98>
 80067de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	075a      	lsls	r2, r3, #29
 80067e4:	d505      	bpl.n	80067f2 <__sflush_r+0x46>
 80067e6:	6863      	ldr	r3, [r4, #4]
 80067e8:	1ac0      	subs	r0, r0, r3
 80067ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067ec:	b10b      	cbz	r3, 80067f2 <__sflush_r+0x46>
 80067ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067f0:	1ac0      	subs	r0, r0, r3
 80067f2:	2300      	movs	r3, #0
 80067f4:	4602      	mov	r2, r0
 80067f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067f8:	6a21      	ldr	r1, [r4, #32]
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b0      	blx	r6
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	d106      	bne.n	8006812 <__sflush_r+0x66>
 8006804:	6829      	ldr	r1, [r5, #0]
 8006806:	291d      	cmp	r1, #29
 8006808:	d82c      	bhi.n	8006864 <__sflush_r+0xb8>
 800680a:	4a2a      	ldr	r2, [pc, #168]	; (80068b4 <__sflush_r+0x108>)
 800680c:	40ca      	lsrs	r2, r1
 800680e:	07d6      	lsls	r6, r2, #31
 8006810:	d528      	bpl.n	8006864 <__sflush_r+0xb8>
 8006812:	2200      	movs	r2, #0
 8006814:	6062      	str	r2, [r4, #4]
 8006816:	04d9      	lsls	r1, r3, #19
 8006818:	6922      	ldr	r2, [r4, #16]
 800681a:	6022      	str	r2, [r4, #0]
 800681c:	d504      	bpl.n	8006828 <__sflush_r+0x7c>
 800681e:	1c42      	adds	r2, r0, #1
 8006820:	d101      	bne.n	8006826 <__sflush_r+0x7a>
 8006822:	682b      	ldr	r3, [r5, #0]
 8006824:	b903      	cbnz	r3, 8006828 <__sflush_r+0x7c>
 8006826:	6560      	str	r0, [r4, #84]	; 0x54
 8006828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800682a:	602f      	str	r7, [r5, #0]
 800682c:	2900      	cmp	r1, #0
 800682e:	d0ca      	beq.n	80067c6 <__sflush_r+0x1a>
 8006830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006834:	4299      	cmp	r1, r3
 8006836:	d002      	beq.n	800683e <__sflush_r+0x92>
 8006838:	4628      	mov	r0, r5
 800683a:	f7ff fdc7 	bl	80063cc <_free_r>
 800683e:	2000      	movs	r0, #0
 8006840:	6360      	str	r0, [r4, #52]	; 0x34
 8006842:	e7c1      	b.n	80067c8 <__sflush_r+0x1c>
 8006844:	6a21      	ldr	r1, [r4, #32]
 8006846:	2301      	movs	r3, #1
 8006848:	4628      	mov	r0, r5
 800684a:	47b0      	blx	r6
 800684c:	1c41      	adds	r1, r0, #1
 800684e:	d1c7      	bne.n	80067e0 <__sflush_r+0x34>
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0c4      	beq.n	80067e0 <__sflush_r+0x34>
 8006856:	2b1d      	cmp	r3, #29
 8006858:	d001      	beq.n	800685e <__sflush_r+0xb2>
 800685a:	2b16      	cmp	r3, #22
 800685c:	d101      	bne.n	8006862 <__sflush_r+0xb6>
 800685e:	602f      	str	r7, [r5, #0]
 8006860:	e7b1      	b.n	80067c6 <__sflush_r+0x1a>
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006868:	81a3      	strh	r3, [r4, #12]
 800686a:	e7ad      	b.n	80067c8 <__sflush_r+0x1c>
 800686c:	690f      	ldr	r7, [r1, #16]
 800686e:	2f00      	cmp	r7, #0
 8006870:	d0a9      	beq.n	80067c6 <__sflush_r+0x1a>
 8006872:	0793      	lsls	r3, r2, #30
 8006874:	680e      	ldr	r6, [r1, #0]
 8006876:	bf08      	it	eq
 8006878:	694b      	ldreq	r3, [r1, #20]
 800687a:	600f      	str	r7, [r1, #0]
 800687c:	bf18      	it	ne
 800687e:	2300      	movne	r3, #0
 8006880:	eba6 0807 	sub.w	r8, r6, r7
 8006884:	608b      	str	r3, [r1, #8]
 8006886:	f1b8 0f00 	cmp.w	r8, #0
 800688a:	dd9c      	ble.n	80067c6 <__sflush_r+0x1a>
 800688c:	6a21      	ldr	r1, [r4, #32]
 800688e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006890:	4643      	mov	r3, r8
 8006892:	463a      	mov	r2, r7
 8006894:	4628      	mov	r0, r5
 8006896:	47b0      	blx	r6
 8006898:	2800      	cmp	r0, #0
 800689a:	dc06      	bgt.n	80068aa <__sflush_r+0xfe>
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a2:	81a3      	strh	r3, [r4, #12]
 80068a4:	f04f 30ff 	mov.w	r0, #4294967295
 80068a8:	e78e      	b.n	80067c8 <__sflush_r+0x1c>
 80068aa:	4407      	add	r7, r0
 80068ac:	eba8 0800 	sub.w	r8, r8, r0
 80068b0:	e7e9      	b.n	8006886 <__sflush_r+0xda>
 80068b2:	bf00      	nop
 80068b4:	20400001 	.word	0x20400001

080068b8 <_fflush_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	690b      	ldr	r3, [r1, #16]
 80068bc:	4605      	mov	r5, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	b913      	cbnz	r3, 80068c8 <_fflush_r+0x10>
 80068c2:	2500      	movs	r5, #0
 80068c4:	4628      	mov	r0, r5
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	b118      	cbz	r0, 80068d2 <_fflush_r+0x1a>
 80068ca:	6983      	ldr	r3, [r0, #24]
 80068cc:	b90b      	cbnz	r3, 80068d2 <_fflush_r+0x1a>
 80068ce:	f000 f887 	bl	80069e0 <__sinit>
 80068d2:	4b14      	ldr	r3, [pc, #80]	; (8006924 <_fflush_r+0x6c>)
 80068d4:	429c      	cmp	r4, r3
 80068d6:	d11b      	bne.n	8006910 <_fflush_r+0x58>
 80068d8:	686c      	ldr	r4, [r5, #4]
 80068da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0ef      	beq.n	80068c2 <_fflush_r+0xa>
 80068e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068e4:	07d0      	lsls	r0, r2, #31
 80068e6:	d404      	bmi.n	80068f2 <_fflush_r+0x3a>
 80068e8:	0599      	lsls	r1, r3, #22
 80068ea:	d402      	bmi.n	80068f2 <_fflush_r+0x3a>
 80068ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ee:	f000 f915 	bl	8006b1c <__retarget_lock_acquire_recursive>
 80068f2:	4628      	mov	r0, r5
 80068f4:	4621      	mov	r1, r4
 80068f6:	f7ff ff59 	bl	80067ac <__sflush_r>
 80068fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068fc:	07da      	lsls	r2, r3, #31
 80068fe:	4605      	mov	r5, r0
 8006900:	d4e0      	bmi.n	80068c4 <_fflush_r+0xc>
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	059b      	lsls	r3, r3, #22
 8006906:	d4dd      	bmi.n	80068c4 <_fflush_r+0xc>
 8006908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800690a:	f000 f908 	bl	8006b1e <__retarget_lock_release_recursive>
 800690e:	e7d9      	b.n	80068c4 <_fflush_r+0xc>
 8006910:	4b05      	ldr	r3, [pc, #20]	; (8006928 <_fflush_r+0x70>)
 8006912:	429c      	cmp	r4, r3
 8006914:	d101      	bne.n	800691a <_fflush_r+0x62>
 8006916:	68ac      	ldr	r4, [r5, #8]
 8006918:	e7df      	b.n	80068da <_fflush_r+0x22>
 800691a:	4b04      	ldr	r3, [pc, #16]	; (800692c <_fflush_r+0x74>)
 800691c:	429c      	cmp	r4, r3
 800691e:	bf08      	it	eq
 8006920:	68ec      	ldreq	r4, [r5, #12]
 8006922:	e7da      	b.n	80068da <_fflush_r+0x22>
 8006924:	080084ac 	.word	0x080084ac
 8006928:	080084cc 	.word	0x080084cc
 800692c:	0800848c 	.word	0x0800848c

08006930 <std>:
 8006930:	2300      	movs	r3, #0
 8006932:	b510      	push	{r4, lr}
 8006934:	4604      	mov	r4, r0
 8006936:	e9c0 3300 	strd	r3, r3, [r0]
 800693a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800693e:	6083      	str	r3, [r0, #8]
 8006940:	8181      	strh	r1, [r0, #12]
 8006942:	6643      	str	r3, [r0, #100]	; 0x64
 8006944:	81c2      	strh	r2, [r0, #14]
 8006946:	6183      	str	r3, [r0, #24]
 8006948:	4619      	mov	r1, r3
 800694a:	2208      	movs	r2, #8
 800694c:	305c      	adds	r0, #92	; 0x5c
 800694e:	f7ff fd35 	bl	80063bc <memset>
 8006952:	4b05      	ldr	r3, [pc, #20]	; (8006968 <std+0x38>)
 8006954:	6263      	str	r3, [r4, #36]	; 0x24
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <std+0x3c>)
 8006958:	62a3      	str	r3, [r4, #40]	; 0x28
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <std+0x40>)
 800695c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800695e:	4b05      	ldr	r3, [pc, #20]	; (8006974 <std+0x44>)
 8006960:	6224      	str	r4, [r4, #32]
 8006962:	6323      	str	r3, [r4, #48]	; 0x30
 8006964:	bd10      	pop	{r4, pc}
 8006966:	bf00      	nop
 8006968:	08006c01 	.word	0x08006c01
 800696c:	08006c23 	.word	0x08006c23
 8006970:	08006c5b 	.word	0x08006c5b
 8006974:	08006c7f 	.word	0x08006c7f

08006978 <_cleanup_r>:
 8006978:	4901      	ldr	r1, [pc, #4]	; (8006980 <_cleanup_r+0x8>)
 800697a:	f000 b8af 	b.w	8006adc <_fwalk_reent>
 800697e:	bf00      	nop
 8006980:	080068b9 	.word	0x080068b9

08006984 <__sfmoreglue>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	1e4a      	subs	r2, r1, #1
 8006988:	2568      	movs	r5, #104	; 0x68
 800698a:	4355      	muls	r5, r2
 800698c:	460e      	mov	r6, r1
 800698e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006992:	f7ff fd6b 	bl	800646c <_malloc_r>
 8006996:	4604      	mov	r4, r0
 8006998:	b140      	cbz	r0, 80069ac <__sfmoreglue+0x28>
 800699a:	2100      	movs	r1, #0
 800699c:	e9c0 1600 	strd	r1, r6, [r0]
 80069a0:	300c      	adds	r0, #12
 80069a2:	60a0      	str	r0, [r4, #8]
 80069a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069a8:	f7ff fd08 	bl	80063bc <memset>
 80069ac:	4620      	mov	r0, r4
 80069ae:	bd70      	pop	{r4, r5, r6, pc}

080069b0 <__sfp_lock_acquire>:
 80069b0:	4801      	ldr	r0, [pc, #4]	; (80069b8 <__sfp_lock_acquire+0x8>)
 80069b2:	f000 b8b3 	b.w	8006b1c <__retarget_lock_acquire_recursive>
 80069b6:	bf00      	nop
 80069b8:	20075a14 	.word	0x20075a14

080069bc <__sfp_lock_release>:
 80069bc:	4801      	ldr	r0, [pc, #4]	; (80069c4 <__sfp_lock_release+0x8>)
 80069be:	f000 b8ae 	b.w	8006b1e <__retarget_lock_release_recursive>
 80069c2:	bf00      	nop
 80069c4:	20075a14 	.word	0x20075a14

080069c8 <__sinit_lock_acquire>:
 80069c8:	4801      	ldr	r0, [pc, #4]	; (80069d0 <__sinit_lock_acquire+0x8>)
 80069ca:	f000 b8a7 	b.w	8006b1c <__retarget_lock_acquire_recursive>
 80069ce:	bf00      	nop
 80069d0:	20075a0f 	.word	0x20075a0f

080069d4 <__sinit_lock_release>:
 80069d4:	4801      	ldr	r0, [pc, #4]	; (80069dc <__sinit_lock_release+0x8>)
 80069d6:	f000 b8a2 	b.w	8006b1e <__retarget_lock_release_recursive>
 80069da:	bf00      	nop
 80069dc:	20075a0f 	.word	0x20075a0f

080069e0 <__sinit>:
 80069e0:	b510      	push	{r4, lr}
 80069e2:	4604      	mov	r4, r0
 80069e4:	f7ff fff0 	bl	80069c8 <__sinit_lock_acquire>
 80069e8:	69a3      	ldr	r3, [r4, #24]
 80069ea:	b11b      	cbz	r3, 80069f4 <__sinit+0x14>
 80069ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f0:	f7ff bff0 	b.w	80069d4 <__sinit_lock_release>
 80069f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069f8:	6523      	str	r3, [r4, #80]	; 0x50
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <__sinit+0x68>)
 80069fc:	4a13      	ldr	r2, [pc, #76]	; (8006a4c <__sinit+0x6c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a02:	42a3      	cmp	r3, r4
 8006a04:	bf04      	itt	eq
 8006a06:	2301      	moveq	r3, #1
 8006a08:	61a3      	streq	r3, [r4, #24]
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 f820 	bl	8006a50 <__sfp>
 8006a10:	6060      	str	r0, [r4, #4]
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 f81c 	bl	8006a50 <__sfp>
 8006a18:	60a0      	str	r0, [r4, #8]
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f000 f818 	bl	8006a50 <__sfp>
 8006a20:	2200      	movs	r2, #0
 8006a22:	60e0      	str	r0, [r4, #12]
 8006a24:	2104      	movs	r1, #4
 8006a26:	6860      	ldr	r0, [r4, #4]
 8006a28:	f7ff ff82 	bl	8006930 <std>
 8006a2c:	68a0      	ldr	r0, [r4, #8]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	2109      	movs	r1, #9
 8006a32:	f7ff ff7d 	bl	8006930 <std>
 8006a36:	68e0      	ldr	r0, [r4, #12]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	2112      	movs	r1, #18
 8006a3c:	f7ff ff78 	bl	8006930 <std>
 8006a40:	2301      	movs	r3, #1
 8006a42:	61a3      	str	r3, [r4, #24]
 8006a44:	e7d2      	b.n	80069ec <__sinit+0xc>
 8006a46:	bf00      	nop
 8006a48:	08008488 	.word	0x08008488
 8006a4c:	08006979 	.word	0x08006979

08006a50 <__sfp>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	4607      	mov	r7, r0
 8006a54:	f7ff ffac 	bl	80069b0 <__sfp_lock_acquire>
 8006a58:	4b1e      	ldr	r3, [pc, #120]	; (8006ad4 <__sfp+0x84>)
 8006a5a:	681e      	ldr	r6, [r3, #0]
 8006a5c:	69b3      	ldr	r3, [r6, #24]
 8006a5e:	b913      	cbnz	r3, 8006a66 <__sfp+0x16>
 8006a60:	4630      	mov	r0, r6
 8006a62:	f7ff ffbd 	bl	80069e0 <__sinit>
 8006a66:	3648      	adds	r6, #72	; 0x48
 8006a68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	d503      	bpl.n	8006a78 <__sfp+0x28>
 8006a70:	6833      	ldr	r3, [r6, #0]
 8006a72:	b30b      	cbz	r3, 8006ab8 <__sfp+0x68>
 8006a74:	6836      	ldr	r6, [r6, #0]
 8006a76:	e7f7      	b.n	8006a68 <__sfp+0x18>
 8006a78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a7c:	b9d5      	cbnz	r5, 8006ab4 <__sfp+0x64>
 8006a7e:	4b16      	ldr	r3, [pc, #88]	; (8006ad8 <__sfp+0x88>)
 8006a80:	60e3      	str	r3, [r4, #12]
 8006a82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a86:	6665      	str	r5, [r4, #100]	; 0x64
 8006a88:	f000 f847 	bl	8006b1a <__retarget_lock_init_recursive>
 8006a8c:	f7ff ff96 	bl	80069bc <__sfp_lock_release>
 8006a90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a98:	6025      	str	r5, [r4, #0]
 8006a9a:	61a5      	str	r5, [r4, #24]
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006aa4:	f7ff fc8a 	bl	80063bc <memset>
 8006aa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006aac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab4:	3468      	adds	r4, #104	; 0x68
 8006ab6:	e7d9      	b.n	8006a6c <__sfp+0x1c>
 8006ab8:	2104      	movs	r1, #4
 8006aba:	4638      	mov	r0, r7
 8006abc:	f7ff ff62 	bl	8006984 <__sfmoreglue>
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	6030      	str	r0, [r6, #0]
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d1d5      	bne.n	8006a74 <__sfp+0x24>
 8006ac8:	f7ff ff78 	bl	80069bc <__sfp_lock_release>
 8006acc:	230c      	movs	r3, #12
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	e7ee      	b.n	8006ab0 <__sfp+0x60>
 8006ad2:	bf00      	nop
 8006ad4:	08008488 	.word	0x08008488
 8006ad8:	ffff0001 	.word	0xffff0001

08006adc <_fwalk_reent>:
 8006adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	4688      	mov	r8, r1
 8006ae4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ae8:	2700      	movs	r7, #0
 8006aea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006aee:	f1b9 0901 	subs.w	r9, r9, #1
 8006af2:	d505      	bpl.n	8006b00 <_fwalk_reent+0x24>
 8006af4:	6824      	ldr	r4, [r4, #0]
 8006af6:	2c00      	cmp	r4, #0
 8006af8:	d1f7      	bne.n	8006aea <_fwalk_reent+0xe>
 8006afa:	4638      	mov	r0, r7
 8006afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b00:	89ab      	ldrh	r3, [r5, #12]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d907      	bls.n	8006b16 <_fwalk_reent+0x3a>
 8006b06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	d003      	beq.n	8006b16 <_fwalk_reent+0x3a>
 8006b0e:	4629      	mov	r1, r5
 8006b10:	4630      	mov	r0, r6
 8006b12:	47c0      	blx	r8
 8006b14:	4307      	orrs	r7, r0
 8006b16:	3568      	adds	r5, #104	; 0x68
 8006b18:	e7e9      	b.n	8006aee <_fwalk_reent+0x12>

08006b1a <__retarget_lock_init_recursive>:
 8006b1a:	4770      	bx	lr

08006b1c <__retarget_lock_acquire_recursive>:
 8006b1c:	4770      	bx	lr

08006b1e <__retarget_lock_release_recursive>:
 8006b1e:	4770      	bx	lr

08006b20 <__swhatbuf_r>:
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	460e      	mov	r6, r1
 8006b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	b096      	sub	sp, #88	; 0x58
 8006b2c:	4614      	mov	r4, r2
 8006b2e:	461d      	mov	r5, r3
 8006b30:	da07      	bge.n	8006b42 <__swhatbuf_r+0x22>
 8006b32:	2300      	movs	r3, #0
 8006b34:	602b      	str	r3, [r5, #0]
 8006b36:	89b3      	ldrh	r3, [r6, #12]
 8006b38:	061a      	lsls	r2, r3, #24
 8006b3a:	d410      	bmi.n	8006b5e <__swhatbuf_r+0x3e>
 8006b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b40:	e00e      	b.n	8006b60 <__swhatbuf_r+0x40>
 8006b42:	466a      	mov	r2, sp
 8006b44:	f000 f8c2 	bl	8006ccc <_fstat_r>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	dbf2      	blt.n	8006b32 <__swhatbuf_r+0x12>
 8006b4c:	9a01      	ldr	r2, [sp, #4]
 8006b4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b56:	425a      	negs	r2, r3
 8006b58:	415a      	adcs	r2, r3
 8006b5a:	602a      	str	r2, [r5, #0]
 8006b5c:	e7ee      	b.n	8006b3c <__swhatbuf_r+0x1c>
 8006b5e:	2340      	movs	r3, #64	; 0x40
 8006b60:	2000      	movs	r0, #0
 8006b62:	6023      	str	r3, [r4, #0]
 8006b64:	b016      	add	sp, #88	; 0x58
 8006b66:	bd70      	pop	{r4, r5, r6, pc}

08006b68 <__smakebuf_r>:
 8006b68:	898b      	ldrh	r3, [r1, #12]
 8006b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b6c:	079d      	lsls	r5, r3, #30
 8006b6e:	4606      	mov	r6, r0
 8006b70:	460c      	mov	r4, r1
 8006b72:	d507      	bpl.n	8006b84 <__smakebuf_r+0x1c>
 8006b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	6123      	str	r3, [r4, #16]
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	6163      	str	r3, [r4, #20]
 8006b80:	b002      	add	sp, #8
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
 8006b84:	ab01      	add	r3, sp, #4
 8006b86:	466a      	mov	r2, sp
 8006b88:	f7ff ffca 	bl	8006b20 <__swhatbuf_r>
 8006b8c:	9900      	ldr	r1, [sp, #0]
 8006b8e:	4605      	mov	r5, r0
 8006b90:	4630      	mov	r0, r6
 8006b92:	f7ff fc6b 	bl	800646c <_malloc_r>
 8006b96:	b948      	cbnz	r0, 8006bac <__smakebuf_r+0x44>
 8006b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b9c:	059a      	lsls	r2, r3, #22
 8006b9e:	d4ef      	bmi.n	8006b80 <__smakebuf_r+0x18>
 8006ba0:	f023 0303 	bic.w	r3, r3, #3
 8006ba4:	f043 0302 	orr.w	r3, r3, #2
 8006ba8:	81a3      	strh	r3, [r4, #12]
 8006baa:	e7e3      	b.n	8006b74 <__smakebuf_r+0xc>
 8006bac:	4b0d      	ldr	r3, [pc, #52]	; (8006be4 <__smakebuf_r+0x7c>)
 8006bae:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	6020      	str	r0, [r4, #0]
 8006bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb8:	81a3      	strh	r3, [r4, #12]
 8006bba:	9b00      	ldr	r3, [sp, #0]
 8006bbc:	6163      	str	r3, [r4, #20]
 8006bbe:	9b01      	ldr	r3, [sp, #4]
 8006bc0:	6120      	str	r0, [r4, #16]
 8006bc2:	b15b      	cbz	r3, 8006bdc <__smakebuf_r+0x74>
 8006bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f000 f891 	bl	8006cf0 <_isatty_r>
 8006bce:	b128      	cbz	r0, 8006bdc <__smakebuf_r+0x74>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	f043 0301 	orr.w	r3, r3, #1
 8006bda:	81a3      	strh	r3, [r4, #12]
 8006bdc:	89a0      	ldrh	r0, [r4, #12]
 8006bde:	4305      	orrs	r5, r0
 8006be0:	81a5      	strh	r5, [r4, #12]
 8006be2:	e7cd      	b.n	8006b80 <__smakebuf_r+0x18>
 8006be4:	08006979 	.word	0x08006979

08006be8 <__malloc_lock>:
 8006be8:	4801      	ldr	r0, [pc, #4]	; (8006bf0 <__malloc_lock+0x8>)
 8006bea:	f7ff bf97 	b.w	8006b1c <__retarget_lock_acquire_recursive>
 8006bee:	bf00      	nop
 8006bf0:	20075a10 	.word	0x20075a10

08006bf4 <__malloc_unlock>:
 8006bf4:	4801      	ldr	r0, [pc, #4]	; (8006bfc <__malloc_unlock+0x8>)
 8006bf6:	f7ff bf92 	b.w	8006b1e <__retarget_lock_release_recursive>
 8006bfa:	bf00      	nop
 8006bfc:	20075a10 	.word	0x20075a10

08006c00 <__sread>:
 8006c00:	b510      	push	{r4, lr}
 8006c02:	460c      	mov	r4, r1
 8006c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c08:	f000 f894 	bl	8006d34 <_read_r>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	bfab      	itete	ge
 8006c10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c12:	89a3      	ldrhlt	r3, [r4, #12]
 8006c14:	181b      	addge	r3, r3, r0
 8006c16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c1a:	bfac      	ite	ge
 8006c1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c1e:	81a3      	strhlt	r3, [r4, #12]
 8006c20:	bd10      	pop	{r4, pc}

08006c22 <__swrite>:
 8006c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c26:	461f      	mov	r7, r3
 8006c28:	898b      	ldrh	r3, [r1, #12]
 8006c2a:	05db      	lsls	r3, r3, #23
 8006c2c:	4605      	mov	r5, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	4616      	mov	r6, r2
 8006c32:	d505      	bpl.n	8006c40 <__swrite+0x1e>
 8006c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c38:	2302      	movs	r3, #2
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f000 f868 	bl	8006d10 <_lseek_r>
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c4a:	81a3      	strh	r3, [r4, #12]
 8006c4c:	4632      	mov	r2, r6
 8006c4e:	463b      	mov	r3, r7
 8006c50:	4628      	mov	r0, r5
 8006c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c56:	f000 b817 	b.w	8006c88 <_write_r>

08006c5a <__sseek>:
 8006c5a:	b510      	push	{r4, lr}
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c62:	f000 f855 	bl	8006d10 <_lseek_r>
 8006c66:	1c43      	adds	r3, r0, #1
 8006c68:	89a3      	ldrh	r3, [r4, #12]
 8006c6a:	bf15      	itete	ne
 8006c6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c76:	81a3      	strheq	r3, [r4, #12]
 8006c78:	bf18      	it	ne
 8006c7a:	81a3      	strhne	r3, [r4, #12]
 8006c7c:	bd10      	pop	{r4, pc}

08006c7e <__sclose>:
 8006c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c82:	f000 b813 	b.w	8006cac <_close_r>
	...

08006c88 <_write_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d07      	ldr	r5, [pc, #28]	; (8006ca8 <_write_r+0x20>)
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	4608      	mov	r0, r1
 8006c90:	4611      	mov	r1, r2
 8006c92:	2200      	movs	r2, #0
 8006c94:	602a      	str	r2, [r5, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f7fa ff15 	bl	8001ac6 <_write>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_write_r+0x1e>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_write_r+0x1e>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	20075a18 	.word	0x20075a18

08006cac <_close_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d06      	ldr	r5, [pc, #24]	; (8006cc8 <_close_r+0x1c>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	f7fa ff21 	bl	8001afe <_close>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_close_r+0x1a>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_close_r+0x1a>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	20075a18 	.word	0x20075a18

08006ccc <_fstat_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4d07      	ldr	r5, [pc, #28]	; (8006cec <_fstat_r+0x20>)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	602b      	str	r3, [r5, #0]
 8006cda:	f7fa ff1c 	bl	8001b16 <_fstat>
 8006cde:	1c43      	adds	r3, r0, #1
 8006ce0:	d102      	bne.n	8006ce8 <_fstat_r+0x1c>
 8006ce2:	682b      	ldr	r3, [r5, #0]
 8006ce4:	b103      	cbz	r3, 8006ce8 <_fstat_r+0x1c>
 8006ce6:	6023      	str	r3, [r4, #0]
 8006ce8:	bd38      	pop	{r3, r4, r5, pc}
 8006cea:	bf00      	nop
 8006cec:	20075a18 	.word	0x20075a18

08006cf0 <_isatty_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d06      	ldr	r5, [pc, #24]	; (8006d0c <_isatty_r+0x1c>)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	f7fa ff1b 	bl	8001b36 <_isatty>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_isatty_r+0x1a>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_isatty_r+0x1a>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	20075a18 	.word	0x20075a18

08006d10 <_lseek_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4d07      	ldr	r5, [pc, #28]	; (8006d30 <_lseek_r+0x20>)
 8006d14:	4604      	mov	r4, r0
 8006d16:	4608      	mov	r0, r1
 8006d18:	4611      	mov	r1, r2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	602a      	str	r2, [r5, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f7fa ff14 	bl	8001b4c <_lseek>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	d102      	bne.n	8006d2e <_lseek_r+0x1e>
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	b103      	cbz	r3, 8006d2e <_lseek_r+0x1e>
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	bd38      	pop	{r3, r4, r5, pc}
 8006d30:	20075a18 	.word	0x20075a18

08006d34 <_read_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4d07      	ldr	r5, [pc, #28]	; (8006d54 <_read_r+0x20>)
 8006d38:	4604      	mov	r4, r0
 8006d3a:	4608      	mov	r0, r1
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	2200      	movs	r2, #0
 8006d40:	602a      	str	r2, [r5, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	f7fa fea2 	bl	8001a8c <_read>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d102      	bne.n	8006d52 <_read_r+0x1e>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	b103      	cbz	r3, 8006d52 <_read_r+0x1e>
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	20075a18 	.word	0x20075a18

08006d58 <_init>:
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	bf00      	nop
 8006d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5e:	bc08      	pop	{r3}
 8006d60:	469e      	mov	lr, r3
 8006d62:	4770      	bx	lr

08006d64 <_fini>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	bf00      	nop
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr
