
STM32_dax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000622c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000067f8  08006424  08006424  00016424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc1c  0800cc1c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc1c  0800cc1c  0001cc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc24  0800cc24  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc24  0800cc24  0001cc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc28  0800cc28  0001cc28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800cc2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046fc  20000094  0800ccc0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004790  0800ccc0  00024790  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014adc  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce3  00000000  00000000  00034b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00037888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  00038bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c92  00000000  00000000  00039df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a16  00000000  00000000  00062a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f830e  00000000  00000000  000764a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016e7ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fdc  00000000  00000000  0016e804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000094 	.word	0x20000094
 8000214:	00000000 	.word	0x00000000
 8000218:	0800640c 	.word	0x0800640c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000098 	.word	0x20000098
 8000234:	0800640c 	.word	0x0800640c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <add_note_last>:

// Add a note at the end of the list
// ---------------------------------

llist add_note_last(llist list, uint8_t midi_note, uint8_t velocity)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
 800053c:	4613      	mov	r3, r2
 800053e:	70bb      	strb	r3, [r7, #2]
    // Add a new element in memory

    note* new_note = malloc(sizeof(note));
 8000540:	2008      	movs	r0, #8
 8000542:	f005 fe83 	bl	800624c <malloc>
 8000546:	4603      	mov	r3, r0
 8000548:	60bb      	str	r3, [r7, #8]

    // Set the new element values

    new_note->midi_note = midi_note;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	701a      	strb	r2, [r3, #0]
    new_note->velocity = velocity;
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	78ba      	ldrb	r2, [r7, #2]
 8000554:	705a      	strb	r2, [r3, #1]

    // There is no next element

    new_note->nxt = NULL;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]

    // If list is empty, then simply return the newly created element

    if(list == NULL)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <add_note_last+0x36>
    {
        return new_note;
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	e00d      	b.n	8000582 <add_note_last+0x52>

    // Else, walk through the list to find the actual last element

    else
    {
    	note* temp=list;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 800056a:	e002      	b.n	8000572 <add_note_last+0x42>
        {
            temp = temp->nxt;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1f8      	bne.n	800056c <add_note_last+0x3c>
        }
        temp->nxt = new_note;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	605a      	str	r2, [r3, #4]
        return list;
 8000580:	687b      	ldr	r3, [r7, #4]
    }
}
 8000582:	4618      	mov	r0, r3
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <delete_note>:

// Delete a note based on the midi_note
// ------------------------------------

llist delete_note(llist list, uint8_t midi_note)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	70fb      	strb	r3, [r7, #3]
    // If list is empty, then just returns

    if(list == NULL)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d101      	bne.n	80005a0 <delete_note+0x16>
        return NULL;
 800059c:	2300      	movs	r3, #0
 800059e:	e01d      	b.n	80005dc <delete_note+0x52>

    // If the current element is the one to delete

    if(list->midi_note == midi_note)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	78fa      	ldrb	r2, [r7, #3]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d10d      	bne.n	80005c6 <delete_note+0x3c>
    {
        note* tmp = list->nxt;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	60fb      	str	r3, [r7, #12]
        free(list);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f005 fe53 	bl	800625c <free>
        tmp = delete_note(tmp, midi_note);
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	4619      	mov	r1, r3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f7ff ffe5 	bl	800058a <delete_note>
 80005c0:	60f8      	str	r0, [r7, #12]
        return tmp;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	e00a      	b.n	80005dc <delete_note+0x52>

    // Else, the current element is not the one to delete

    else
    {
        list->nxt = delete_note(list->nxt, midi_note);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ffdb 	bl	800058a <delete_note>
 80005d4:	4602      	mov	r2, r0
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	605a      	str	r2, [r3, #4]
        return list;
 80005da:	687b      	ldr	r3, [r7, #4]
    }
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <get_last_note>:

// Get pointer to last note in the list
// ------------------------------------

note* get_last_note(llist list)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

    if(list == NULL)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <get_last_note+0x12>
    {
        return NULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e00a      	b.n	800060c <get_last_note+0x28>
    }

    else
        {
        	note* temp=list;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 80005fa:	e002      	b.n	8000602 <get_last_note+0x1e>
            {
                temp = temp->nxt;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f8      	bne.n	80005fc <get_last_note+0x18>
            }
            return temp;
 800060a:	68fb      	ldr	r3, [r7, #12]
        }
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
	int screenOn;
	note* play_note;
	//for dma counting
	//uint8_t	nb_MIDI_bytes;

	int i = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
	for (i=0; i<AUDIO_BUFFER_LENGTH; i=i+2)
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	e00d      	b.n	8000644 <main+0x2c>
		{
			sendBuff[i] = (uint16_t)((int16_t) 0.0f);			// Left Channel value
 8000628:	4a3c      	ldr	r2, [pc, #240]	; (800071c <main+0x104>)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2100      	movs	r1, #0
 800062e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			sendBuff[i+1] = (uint16_t)((int16_t) 0.0f);		// Right Channel Value
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	3301      	adds	r3, #1
 8000636:	4a39      	ldr	r2, [pc, #228]	; (800071c <main+0x104>)
 8000638:	2100      	movs	r1, #0
 800063a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=0; i<AUDIO_BUFFER_LENGTH; i=i+2)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	3302      	adds	r3, #2
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800064a:	dbed      	blt.n	8000628 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f001 fcb7 	bl	8001fbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f878 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 fa2a 	bl	8000aac <MX_GPIO_Init>
  MX_I2S1_Init();
 8000658:	f000 f966 	bl	8000928 <MX_I2S1_Init>
  MX_DMA_Init();
 800065c:	f000 f9f4 	bl	8000a48 <MX_DMA_Init>
  MX_UART4_Init();
 8000660:	f000 f9c2 	bl	80009e8 <MX_UART4_Init>
  MX_I2C2_Init();
 8000664:	f000 f920 	bl	80008a8 <MX_I2C2_Init>
  MX_SAI1_Init();
 8000668:	f000 f988 	bl	800097c <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  //Setting up the interupt case/callback
	//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);
  //AUDIO_BUFFER_LENGTH = DATA NEEDED TO TRIGGER INTERUPT
	HAL_SAI_Transmit_DMA(&hsai_BlockA1,(uint16_t *) sendBuff, AUDIO_BUFFER_LENGTH);
 800066c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000670:	492a      	ldr	r1, [pc, #168]	; (800071c <main+0x104>)
 8000672:	482b      	ldr	r0, [pc, #172]	; (8000720 <main+0x108>)
 8000674:	f004 fd3a 	bl	80050ec <HAL_SAI_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 8000678:	2206      	movs	r2, #6
 800067a:	492a      	ldr	r1, [pc, #168]	; (8000724 <main+0x10c>)
 800067c:	482a      	ldr	r0, [pc, #168]	; (8000728 <main+0x110>)
 800067e:	f005 f84a 	bl	8005716 <HAL_UART_Receive_DMA>
	SSD1306_Init(); // initialize the LCD screen display
 8000682:	f000 ff47 	bl	8001514 <SSD1306_Init>
	SSD1306_Menu();
 8000686:	f001 f9ef 	bl	8001a68 <SSD1306_Menu>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// HAL_I2S_Transmit(&hi2s1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);

		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 800068a:	f000 fa95 	bl	8000bb8 <MIDI_GetNbNewBytes>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <main+0x114>)
 8000694:	701a      	strb	r2, [r3, #0]


		if(nb_MIDI_bytes){
 8000696:	4b25      	ldr	r3, [pc, #148]	; (800072c <main+0x114>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00f      	beq.n	80006be <main+0xa6>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	4823      	ldr	r0, [pc, #140]	; (8000730 <main+0x118>)
 80006a4:	f002 fb1e 	bl	8002ce4 <HAL_GPIO_WritePin>
			processBuffer(UART4_rxBuffer,nb_MIDI_bytes);
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <main+0x114>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	481d      	ldr	r0, [pc, #116]	; (8000724 <main+0x10c>)
 80006b0:	f000 fab0 	bl	8000c14 <processBuffer>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	481d      	ldr	r0, [pc, #116]	; (8000730 <main+0x118>)
 80006ba:	f002 fb13 	bl	8002ce4 <HAL_GPIO_WritePin>
		}

		play_note = get_last_note(note_list);
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <main+0x11c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff8e 	bl	80005e4 <get_last_note>
 80006c8:	6078      	str	r0, [r7, #4]

		if (play_note == NULL){ //no notes in the list
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d107      	bne.n	80006e0 <main+0xc8>
			pitch = 0;
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <main+0x120>)
 80006d2:	f04f 0200 	mov.w	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			trig = 0;
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <main+0x124>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	e010      	b.n	8000702 <main+0xea>
		}
		else {
			//set the pitch and trigger the notes
			pitch = pitch_table[(play_note->midi_note)-18];
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	3b12      	subs	r3, #18
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <main+0x128>)
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <main+0x120>)
 80006f0:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <main+0x118>)
 80006f8:	f002 faf4 	bl	8002ce4 <HAL_GPIO_WritePin>
			trig = 1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <main+0x124>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
		}
		//test code
		if ( trig == 1)
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <main+0x124>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d005      	beq.n	8000716 <main+0xfe>
		{
			//HAL_SAI_Transmit(&hsai_BlockA1, tone_c, sizeof(tone_c) / sizeof(tone_c[0]), 1000);
			if (screenOn == 0)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1bc      	bne.n	800068a <main+0x72>
			{
				//SSD1306_Note0();
				screenOn = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	e7b9      	b.n	800068a <main+0x72>
			}
		}
		else
		{
			screenOn = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
		nb_MIDI_bytes = MIDI_GetNbNewBytes();
 800071a:	e7b6      	b.n	800068a <main+0x72>
 800071c:	200000c0 	.word	0x200000c0
 8000720:	200046f4 	.word	0x200046f4
 8000724:	200040c0 	.word	0x200040c0
 8000728:	2000466c 	.word	0x2000466c
 800072c:	2000477a 	.word	0x2000477a
 8000730:	40020400 	.word	0x40020400
 8000734:	200000bc 	.word	0x200000bc
 8000738:	200000b8 	.word	0x200000b8
 800073c:	20004595 	.word	0x20004595
 8000740:	0800ca0c 	.word	0x0800ca0c

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b0b8      	sub	sp, #224	; 0xe0
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800074e:	2234      	movs	r2, #52	; 0x34
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f005 fd8a 	bl	800626c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2290      	movs	r2, #144	; 0x90
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f005 fd7b 	bl	800626c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b49      	ldr	r3, [pc, #292]	; (800089c <SystemClock_Config+0x158>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a48      	ldr	r2, [pc, #288]	; (800089c <SystemClock_Config+0x158>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b46      	ldr	r3, [pc, #280]	; (800089c <SystemClock_Config+0x158>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800078e:	4b44      	ldr	r3, [pc, #272]	; (80008a0 <SystemClock_Config+0x15c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000796:	4a42      	ldr	r2, [pc, #264]	; (80008a0 <SystemClock_Config+0x15c>)
 8000798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	4b40      	ldr	r3, [pc, #256]	; (80008a0 <SystemClock_Config+0x15c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b6:	2310      	movs	r3, #16
 80007b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	2302      	movs	r3, #2
 80007be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c8:	2308      	movs	r3, #8
 80007ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007ce:	2360      	movs	r3, #96	; 0x60
 80007d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 f8ae 	bl	800394c <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007f6:	f000 fe87 	bl	8001508 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007fa:	f003 f857 	bl	80038ac <HAL_PWREx_EnableOverDrive>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000804:	f000 fe80 	bl	8001508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2302      	movs	r3, #2
 8000810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800082a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800082e:	2103      	movs	r1, #3
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fb39 	bl	8003ea8 <HAL_RCC_ClockConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800083c:	f000 fe64 	bl	8001508 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SAI1
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <SystemClock_Config+0x160>)
 8000842:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000844:	2360      	movs	r3, #96	; 0x60
 8000846:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000854:	23c0      	movs	r3, #192	; 0xc0
 8000856:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 800085c:	2306      	movs	r3, #6
 800085e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000864:	2301      	movs	r3, #1
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000868:	2301      	movs	r3, #1
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000870:	2300      	movs	r3, #0
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000874:	2300      	movs	r3, #0
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000878:	2300      	movs	r3, #0
 800087a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800087c:	2300      	movs	r3, #0
 800087e:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	4618      	mov	r0, r3
 8000886:	f003 fce5 	bl	8004254 <HAL_RCCEx_PeriphCLKConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8000890:	f000 fe3a 	bl	8001508 <Error_Handler>
  }
}
 8000894:	bf00      	nop
 8000896:	37e0      	adds	r7, #224	; 0xe0
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000
 80008a4:	00088201 	.word	0x00088201

080008a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_I2C2_Init+0x74>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <MX_I2C2_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_I2C2_Init+0x74>)
 80008b4:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <MX_I2C2_Init+0x7c>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_I2C2_Init+0x74>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_I2C2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_I2C2_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_I2C2_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_I2C2_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_I2C2_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <MX_I2C2_Init+0x74>)
 80008e4:	f002 fa18 	bl	8002d18 <HAL_I2C_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ee:	f000 fe0b 	bl	8001508 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4809      	ldr	r0, [pc, #36]	; (800091c <MX_I2C2_Init+0x74>)
 80008f6:	f002 fe0f 	bl	8003518 <HAL_I2CEx_ConfigAnalogFilter>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000900:	f000 fe02 	bl	8001508 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_I2C2_Init+0x74>)
 8000908:	f002 fe51 	bl	80035ae <HAL_I2CEx_ConfigDigitalFilter>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000912:	f000 fdf9 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20004548 	.word	0x20004548
 8000920:	40005800 	.word	0x40005800
 8000924:	0090194b 	.word	0x0090194b

08000928 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2S1_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_I2S1_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_I2S1_Init+0x4c>)
 8000934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000938:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_I2S1_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_I2S1_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_I2S1_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_I2S1_Init+0x4c>)
 800094e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000952:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_I2S1_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_I2S1_Init+0x4c>)
 800095c:	2202      	movs	r2, #2
 800095e:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_I2S1_Init+0x4c>)
 8000962:	f002 fe71 	bl	8003648 <HAL_I2S_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 800096c:	f000 fdcc 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000462c 	.word	0x2000462c
 8000978:	40013000 	.word	0x40013000

0800097c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_SAI1_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_SAI1_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_SAI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_SAI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_SAI1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_SAI1_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009a6:	f64a 4244 	movw	r2, #44100	; 0xac44
 80009aa:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80009c4:	2302      	movs	r3, #2
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_SAI1_Init+0x64>)
 80009cc:	f004 f9dc 	bl	8004d88 <HAL_SAI_InitProtocol>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80009d6:	f000 fd97 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200046f4 	.word	0x200046f4
 80009e4:	40015804 	.word	0x40015804

080009e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_UART4_Init+0x58>)
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <MX_UART4_Init+0x5c>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_UART4_Init+0x58>)
 80009f4:	f647 2212 	movw	r2, #31250	; 0x7a12
 80009f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_UART4_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_UART4_Init+0x58>)
 8000a2c:	f004 fe25 	bl	800567a <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a36:	f000 fd67 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000466c 	.word	0x2000466c
 8000a44:	40004c00 	.word	0x40004c00

08000a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_DMA_Init+0x60>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <MX_DMA_Init+0x60>)
 8000a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_DMA_Init+0x60>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_DMA_Init+0x60>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <MX_DMA_Init+0x60>)
 8000a6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_DMA_Init+0x60>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	200d      	movs	r0, #13
 8000a84:	f001 fbd3 	bl	800222e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a88:	200d      	movs	r0, #13
 8000a8a:	f001 fbec 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2039      	movs	r0, #57	; 0x39
 8000a94:	f001 fbcb 	bl	800222e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a98:	2039      	movs	r0, #57	; 0x39
 8000a9a:	f001 fbe4 	bl	8002266 <HAL_NVIC_EnableIRQ>

}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac2:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a28      	ldr	r2, [pc, #160]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ada:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000ae0:	f043 0320 	orr.w	r3, r3, #32
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0320 	and.w	r3, r3, #32
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_GPIO_Init+0xbc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0xc0>)
 8000b40:	f002 f8d0 	bl	8002ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_GPIO_Init+0xc0>)
 8000b5c:	f001 ff16 	bl	800298c <HAL_GPIO_Init>

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400

08000b70 <HAL_SAI_TxHalfCpltCallback>:
	HAL_I2S_Receive(&hi2s1, sendBuff, 8, 100);
	//HAL_I2S_(hi2s1, sendBuff, 16, 100);
	HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, 8);
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	make_sound(0);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 fc8d 	bl	8001498 <make_sound>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	make_sound(AUDIO_BUFFER_LENGTH_DIV2);
 8000b8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b92:	f000 fc81 	bl	8001498 <make_sound>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <DMA_GetCurrDataCounter>:
//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);

//}

uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	b29b      	uxth	r3, r3
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <MIDI_GetNbNewBytes>:


uint8_t MIDI_GetNbNewBytes()
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	static uint16_t dma_cpt_prev = MIDI_BUFFER_LENGTH;
	uint16_t dma_cpt, n = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	// Get current DMA counter
	dma_cpt = DMA_GetCurrDataCounter(DMA1_Stream2);
 8000bc2:	4812      	ldr	r0, [pc, #72]	; (8000c0c <MIDI_GetNbNewBytes+0x54>)
 8000bc4:	f7ff ffeb 	bl	8000b9e <DMA_GetCurrDataCounter>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	80bb      	strh	r3, [r7, #4]

	// If DMA counter has changed, compute the number of received MIDI bytes
	if (dma_cpt != dma_cpt_prev)
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MIDI_GetNbNewBytes+0x58>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	88ba      	ldrh	r2, [r7, #4]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d014      	beq.n	8000c00 <MIDI_GetNbNewBytes+0x48>
	{
		if (dma_cpt < dma_cpt_prev)
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MIDI_GetNbNewBytes+0x58>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	88ba      	ldrh	r2, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d205      	bcs.n	8000bec <MIDI_GetNbNewBytes+0x34>
		{
			n = dma_cpt_prev - dma_cpt;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MIDI_GetNbNewBytes+0x58>)
 8000be2:	881a      	ldrh	r2, [r3, #0]
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	80fb      	strh	r3, [r7, #6]
 8000bea:	e006      	b.n	8000bfa <MIDI_GetNbNewBytes+0x42>
		}
		else
		{
			n = dma_cpt_prev - (dma_cpt - MIDI_BUFFER_LENGTH);
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MIDI_GetNbNewBytes+0x58>)
 8000bee:	881a      	ldrh	r2, [r3, #0]
 8000bf0:	88bb      	ldrh	r3, [r7, #4]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	3306      	adds	r3, #6
 8000bf8:	80fb      	strh	r3, [r7, #6]
		}
		// Store the new DMA counter
		dma_cpt_prev = dma_cpt;
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <MIDI_GetNbNewBytes+0x58>)
 8000bfc:	88bb      	ldrh	r3, [r7, #4]
 8000bfe:	8013      	strh	r3, [r2, #0]
	}
	return (n);
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	b2db      	uxtb	r3, r3
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40026040 	.word	0x40026040
 8000c10:	20000020 	.word	0x20000020

08000c14 <processBuffer>:

//Author: Synthol Project, Adjusted to fit projec
void processBuffer(uint8_t* MIDI_buffer, uint8_t nb_MIDI_bytes)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
	__IO uint32_t received_char;

	static uint8_t i = 0;
	static uint8_t state = 0;

	while (nb_MIDI_bytes != 0)
 8000c20:	bf00      	nop
 8000c22:	e1f9      	b.n	8001018 <processBuffer+0x404>
	{
		//reading a byte from the buffer
		received_char = UART4_rxBuffer[i];
 8000c24:	4ba6      	ldr	r3, [pc, #664]	; (8000ec0 <processBuffer+0x2ac>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4ba6      	ldr	r3, [pc, #664]	; (8000ec4 <processBuffer+0x2b0>)
 8000c2c:	5c9b      	ldrb	r3, [r3, r2]
 8000c2e:	60fb      	str	r3, [r7, #12]
		switch (state)
 8000c30:	4ba5      	ldr	r3, [pc, #660]	; (8000ec8 <processBuffer+0x2b4>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b29      	cmp	r3, #41	; 0x29
 8000c36:	f200 81ef 	bhi.w	8001018 <processBuffer+0x404>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <processBuffer+0x2c>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000ce9 	.word	0x08000ce9
 8000c44:	08001019 	.word	0x08001019
 8000c48:	08001019 	.word	0x08001019
 8000c4c:	08001019 	.word	0x08001019
 8000c50:	08001019 	.word	0x08001019
 8000c54:	08001019 	.word	0x08001019
 8000c58:	08001019 	.word	0x08001019
 8000c5c:	08001019 	.word	0x08001019
 8000c60:	08001019 	.word	0x08001019
 8000c64:	08001019 	.word	0x08001019
 8000c68:	08000dbf 	.word	0x08000dbf
 8000c6c:	08000e07 	.word	0x08000e07
 8000c70:	08001019 	.word	0x08001019
 8000c74:	08001019 	.word	0x08001019
 8000c78:	08001019 	.word	0x08001019
 8000c7c:	08001019 	.word	0x08001019
 8000c80:	08001019 	.word	0x08001019
 8000c84:	08001019 	.word	0x08001019
 8000c88:	08001019 	.word	0x08001019
 8000c8c:	08001019 	.word	0x08001019
 8000c90:	08000e79 	.word	0x08000e79
 8000c94:	08000ee1 	.word	0x08000ee1
 8000c98:	08001019 	.word	0x08001019
 8000c9c:	08001019 	.word	0x08001019
 8000ca0:	08001019 	.word	0x08001019
 8000ca4:	08001019 	.word	0x08001019
 8000ca8:	08001019 	.word	0x08001019
 8000cac:	08001019 	.word	0x08001019
 8000cb0:	08001019 	.word	0x08001019
 8000cb4:	08001019 	.word	0x08001019
 8000cb8:	08000f31 	.word	0x08000f31
 8000cbc:	08000f71 	.word	0x08000f71
 8000cc0:	08001019 	.word	0x08001019
 8000cc4:	08001019 	.word	0x08001019
 8000cc8:	08001019 	.word	0x08001019
 8000ccc:	08001019 	.word	0x08001019
 8000cd0:	08001019 	.word	0x08001019
 8000cd4:	08001019 	.word	0x08001019
 8000cd8:	08001019 	.word	0x08001019
 8000cdc:	08001019 	.word	0x08001019
 8000ce0:	08000fa7 	.word	0x08000fa7
 8000ce4:	08000fe7 	.word	0x08000fe7
		{
		// State 0 = Starting point for a new MIDI message
		case 0:
		{
			switch (received_char & 0xF0)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cee:	2be0      	cmp	r3, #224	; 0xe0
 8000cf0:	d048      	beq.n	8000d84 <processBuffer+0x170>
 8000cf2:	2be0      	cmp	r3, #224	; 0xe0
 8000cf4:	d85b      	bhi.n	8000dae <processBuffer+0x19a>
 8000cf6:	2bb0      	cmp	r3, #176	; 0xb0
 8000cf8:	d02f      	beq.n	8000d5a <processBuffer+0x146>
 8000cfa:	2bb0      	cmp	r3, #176	; 0xb0
 8000cfc:	d857      	bhi.n	8000dae <processBuffer+0x19a>
 8000cfe:	2b80      	cmp	r3, #128	; 0x80
 8000d00:	d016      	beq.n	8000d30 <processBuffer+0x11c>
 8000d02:	2b90      	cmp	r3, #144	; 0x90
 8000d04:	d153      	bne.n	8000dae <processBuffer+0x19a>
			{
			case 0x90: // Note ON message
			{
				state = 10; // Next state is 10
 8000d06:	4b70      	ldr	r3, [pc, #448]	; (8000ec8 <processBuffer+0x2b4>)
 8000d08:	220a      	movs	r2, #10
 8000d0a:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d0c:	4b6c      	ldr	r3, [pc, #432]	; (8000ec0 <processBuffer+0x2ac>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b05      	cmp	r3, #5
 8000d12:	d103      	bne.n	8000d1c <processBuffer+0x108>
					i = 0;				// Move to next MIDI byte
 8000d14:	4b6a      	ldr	r3, [pc, #424]	; (8000ec0 <processBuffer+0x2ac>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e005      	b.n	8000d28 <processBuffer+0x114>
				}
				else {
					i++;
 8000d1c:	4b68      	ldr	r3, [pc, #416]	; (8000ec0 <processBuffer+0x2ac>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b66      	ldr	r3, [pc, #408]	; (8000ec0 <processBuffer+0x2ac>)
 8000d26:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	70fb      	strb	r3, [r7, #3]
				break;
 8000d2e:	e045      	b.n	8000dbc <processBuffer+0x1a8>
			}
			case 0x80: // Note OFF message
			{
				state = 20; // Next state is 20
 8000d30:	4b65      	ldr	r3, [pc, #404]	; (8000ec8 <processBuffer+0x2b4>)
 8000d32:	2214      	movs	r2, #20
 8000d34:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d36:	4b62      	ldr	r3, [pc, #392]	; (8000ec0 <processBuffer+0x2ac>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b05      	cmp	r3, #5
 8000d3c:	d103      	bne.n	8000d46 <processBuffer+0x132>
					i = 0;				// Move to next MIDI byte
 8000d3e:	4b60      	ldr	r3, [pc, #384]	; (8000ec0 <processBuffer+0x2ac>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
 8000d44:	e005      	b.n	8000d52 <processBuffer+0x13e>
				}
				else {
					i++;
 8000d46:	4b5e      	ldr	r3, [pc, #376]	; (8000ec0 <processBuffer+0x2ac>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b5c      	ldr	r3, [pc, #368]	; (8000ec0 <processBuffer+0x2ac>)
 8000d50:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	70fb      	strb	r3, [r7, #3]
				break;
 8000d58:	e030      	b.n	8000dbc <processBuffer+0x1a8>
			}
			case 0xB0: // CC message
			{
				state = 30; // Next state is 30
 8000d5a:	4b5b      	ldr	r3, [pc, #364]	; (8000ec8 <processBuffer+0x2b4>)
 8000d5c:	221e      	movs	r2, #30
 8000d5e:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d60:	4b57      	ldr	r3, [pc, #348]	; (8000ec0 <processBuffer+0x2ac>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b05      	cmp	r3, #5
 8000d66:	d103      	bne.n	8000d70 <processBuffer+0x15c>
					i = 0;				// Move to next MIDI byte
 8000d68:	4b55      	ldr	r3, [pc, #340]	; (8000ec0 <processBuffer+0x2ac>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	e005      	b.n	8000d7c <processBuffer+0x168>
				}
				else {
					i++;
 8000d70:	4b53      	ldr	r3, [pc, #332]	; (8000ec0 <processBuffer+0x2ac>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b51      	ldr	r3, [pc, #324]	; (8000ec0 <processBuffer+0x2ac>)
 8000d7a:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	70fb      	strb	r3, [r7, #3]
				break;
 8000d82:	e01b      	b.n	8000dbc <processBuffer+0x1a8>
			}

			case 0xE0: // Pitch Bend message
			{
				state = 40; // Next state is 40
 8000d84:	4b50      	ldr	r3, [pc, #320]	; (8000ec8 <processBuffer+0x2b4>)
 8000d86:	2228      	movs	r2, #40	; 0x28
 8000d88:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000d8a:	4b4d      	ldr	r3, [pc, #308]	; (8000ec0 <processBuffer+0x2ac>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b05      	cmp	r3, #5
 8000d90:	d103      	bne.n	8000d9a <processBuffer+0x186>
					i = 0;				// Move to next MIDI byte
 8000d92:	4b4b      	ldr	r3, [pc, #300]	; (8000ec0 <processBuffer+0x2ac>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e005      	b.n	8000da6 <processBuffer+0x192>
				}
				else {
					i++;
 8000d9a:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <processBuffer+0x2ac>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b47      	ldr	r3, [pc, #284]	; (8000ec0 <processBuffer+0x2ac>)
 8000da4:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	70fb      	strb	r3, [r7, #3]
				break;
 8000dac:	e006      	b.n	8000dbc <processBuffer+0x1a8>
			}
			default: // Other type of message, move to next byte but stays in state 0
			{
				//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
				i++;
 8000dae:	4b44      	ldr	r3, [pc, #272]	; (8000ec0 <processBuffer+0x2ac>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b42      	ldr	r3, [pc, #264]	; (8000ec0 <processBuffer+0x2ac>)
 8000db8:	701a      	strb	r2, [r3, #0]
				break;
 8000dba:	bf00      	nop
			}
			}
			break;
 8000dbc:	e12c      	b.n	8001018 <processBuffer+0x404>
		}
		// State 10 & 11 : Note ON command
		case 10:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc2:	d903      	bls.n	8000dcc <processBuffer+0x1b8>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000dc4:	4b40      	ldr	r3, [pc, #256]	; (8000ec8 <processBuffer+0x2b4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e125      	b.n	8001018 <processBuffer+0x404>
			}
			else
			{ // Save MIDI note
				ctrl = key = received_char;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <processBuffer+0x2b8>)
 8000dd2:	701a      	strb	r2, [r3, #0]
 8000dd4:	4b3d      	ldr	r3, [pc, #244]	; (8000ecc <processBuffer+0x2b8>)
 8000dd6:	781a      	ldrb	r2, [r3, #0]
 8000dd8:	4b3d      	ldr	r3, [pc, #244]	; (8000ed0 <processBuffer+0x2bc>)
 8000dda:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000ddc:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <processBuffer+0x2ac>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b05      	cmp	r3, #5
 8000de2:	d103      	bne.n	8000dec <processBuffer+0x1d8>
					i = 0;				// Move to next MIDI byte
 8000de4:	4b36      	ldr	r3, [pc, #216]	; (8000ec0 <processBuffer+0x2ac>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e005      	b.n	8000df8 <processBuffer+0x1e4>
				}
				else {
					i++;
 8000dec:	4b34      	ldr	r3, [pc, #208]	; (8000ec0 <processBuffer+0x2ac>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <processBuffer+0x2ac>)
 8000df6:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	70fb      	strb	r3, [r7, #3]
				state = 11; // Next state is 11
 8000dfe:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <processBuffer+0x2b4>)
 8000e00:	220b      	movs	r2, #11
 8000e02:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000e04:	e108      	b.n	8001018 <processBuffer+0x404>
		}
		case 11:
		{
			data = velocity = received_char; //will only ever get velocity in this section i think
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <processBuffer+0x2c0>)
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <processBuffer+0x2c0>)
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <processBuffer+0x2c4>)
 8000e14:	701a      	strb	r2, [r3, #0]

			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <processBuffer+0x2ac>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b05      	cmp	r3, #5
 8000e1c:	d103      	bne.n	8000e26 <processBuffer+0x212>
				i = 0;				// Move to next MIDI byte
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <processBuffer+0x2ac>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	e005      	b.n	8000e32 <processBuffer+0x21e>
			}
			else {
				i++;
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <processBuffer+0x2ac>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <processBuffer+0x2ac>)
 8000e30:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	70fb      	strb	r3, [r7, #3]

			state = 10; // Next state is 10
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <processBuffer+0x2b4>)
 8000e3a:	220a      	movs	r2, #10
 8000e3c:	701a      	strb	r2, [r3, #0]

			if (velocity > 0)
 8000e3e:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <processBuffer+0x2c0>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00c      	beq.n	8000e60 <processBuffer+0x24c>
			{

				note_list = add_note_last(note_list, key, velocity);
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <processBuffer+0x2c8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <processBuffer+0x2b8>)
 8000e4c:	7811      	ldrb	r1, [r2, #0]
 8000e4e:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <processBuffer+0x2c0>)
 8000e50:	7812      	ldrb	r2, [r2, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fb6c 	bl	8000530 <add_note_last>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a20      	ldr	r2, [pc, #128]	; (8000edc <processBuffer+0x2c8>)
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	e0db      	b.n	8001018 <processBuffer+0x404>
				//play_note(midimsg, velocity);
			}
			else
			{
				//find the key and deletes it
				note_list = delete_note(note_list, key);
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <processBuffer+0x2c8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <processBuffer+0x2b8>)
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fb8d 	bl	800058a <delete_note>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <processBuffer+0x2c8>)
 8000e74:	6013      	str	r3, [r2, #0]
			}
			break;
 8000e76:	e0cf      	b.n	8001018 <processBuffer+0x404>
		}
		// State 20 & 21 : Note OFF command
		case 20:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e7c:	d903      	bls.n	8000e86 <processBuffer+0x272>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <processBuffer+0x2b4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e0c8      	b.n	8001018 <processBuffer+0x404>
			}

			else
			{
				ctrl = key = received_char; // Save MIDI note
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <processBuffer+0x2b8>)
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <processBuffer+0x2b8>)
 8000e90:	781a      	ldrb	r2, [r3, #0]
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <processBuffer+0x2bc>)
 8000e94:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <processBuffer+0x2ac>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	d103      	bne.n	8000ea6 <processBuffer+0x292>
					i = 0;				// Move to next MIDI byte
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <processBuffer+0x2ac>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e005      	b.n	8000eb2 <processBuffer+0x29e>
				}
				else {
					i++;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <processBuffer+0x2ac>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <processBuffer+0x2ac>)
 8000eb0:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	70fb      	strb	r3, [r7, #3]

				state = 21; // Next state is 21
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <processBuffer+0x2b4>)
 8000eba:	2215      	movs	r2, #21
 8000ebc:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ebe:	e0ab      	b.n	8001018 <processBuffer+0x404>
 8000ec0:	200040c6 	.word	0x200040c6
 8000ec4:	200040c0 	.word	0x200040c0
 8000ec8:	200040c7 	.word	0x200040c7
 8000ecc:	20004629 	.word	0x20004629
 8000ed0:	20004594 	.word	0x20004594
 8000ed4:	20004626 	.word	0x20004626
 8000ed8:	20004628 	.word	0x20004628
 8000edc:	200000bc 	.word	0x200000bc
		}
		case 21:
		{
			velocity = data = received_char; // Save MIDI velocity
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b51      	ldr	r3, [pc, #324]	; (800102c <processBuffer+0x418>)
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	4b50      	ldr	r3, [pc, #320]	; (800102c <processBuffer+0x418>)
 8000eea:	781a      	ldrb	r2, [r3, #0]
 8000eec:	4b50      	ldr	r3, [pc, #320]	; (8001030 <processBuffer+0x41c>)
 8000eee:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000ef0:	4b50      	ldr	r3, [pc, #320]	; (8001034 <processBuffer+0x420>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d103      	bne.n	8000f00 <processBuffer+0x2ec>
				i = 0;				// Move to next MIDI byte
 8000ef8:	4b4e      	ldr	r3, [pc, #312]	; (8001034 <processBuffer+0x420>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	e005      	b.n	8000f0c <processBuffer+0x2f8>
			}
			else {
				i++;
 8000f00:	4b4c      	ldr	r3, [pc, #304]	; (8001034 <processBuffer+0x420>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b4a      	ldr	r3, [pc, #296]	; (8001034 <processBuffer+0x420>)
 8000f0a:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	70fb      	strb	r3, [r7, #3]

			state = 20; // Next state is 20
 8000f12:	4b49      	ldr	r3, [pc, #292]	; (8001038 <processBuffer+0x424>)
 8000f14:	2214      	movs	r2, #20
 8000f16:	701a      	strb	r2, [r3, #0]

			note_list = delete_note(note_list, key);
 8000f18:	4b48      	ldr	r3, [pc, #288]	; (800103c <processBuffer+0x428>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a48      	ldr	r2, [pc, #288]	; (8001040 <processBuffer+0x42c>)
 8000f1e:	7812      	ldrb	r2, [r2, #0]
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fb31 	bl	800058a <delete_note>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a44      	ldr	r2, [pc, #272]	; (800103c <processBuffer+0x428>)
 8000f2c:	6013      	str	r3, [r2, #0]
			break;
 8000f2e:	e073      	b.n	8001018 <processBuffer+0x404>
		}
		// State 30 & 31 : CC command
		case 30:
		{
			if (received_char > 0x7F) // If the following byte is not a CC number
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b7f      	cmp	r3, #127	; 0x7f
 8000f34:	d903      	bls.n	8000f3e <processBuffer+0x32a>
			{
				state = 0; // Return to state 0 without moving to next byte
 8000f36:	4b40      	ldr	r3, [pc, #256]	; (8001038 <processBuffer+0x424>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e06c      	b.n	8001018 <processBuffer+0x404>
			}
			else
			{
				paramNum = received_char; // Save MIDI CC number
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b40      	ldr	r3, [pc, #256]	; (8001044 <processBuffer+0x430>)
 8000f44:	701a      	strb	r2, [r3, #0]

				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f46:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <processBuffer+0x420>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	d103      	bne.n	8000f56 <processBuffer+0x342>
					i = 0;				// Move to next MIDI byte
 8000f4e:	4b39      	ldr	r3, [pc, #228]	; (8001034 <processBuffer+0x420>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	e005      	b.n	8000f62 <processBuffer+0x34e>
				}
				else {
					i++;
 8000f56:	4b37      	ldr	r3, [pc, #220]	; (8001034 <processBuffer+0x420>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b35      	ldr	r3, [pc, #212]	; (8001034 <processBuffer+0x420>)
 8000f60:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	70fb      	strb	r3, [r7, #3]
				state = 31; // Next state is 31
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <processBuffer+0x424>)
 8000f6a:	221f      	movs	r2, #31
 8000f6c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f6e:	e053      	b.n	8001018 <processBuffer+0x404>
		}
		case 31:
		{
			paramVal = received_char; // Save MIDI velocity
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <processBuffer+0x434>)
 8000f76:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000f78:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <processBuffer+0x420>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d103      	bne.n	8000f88 <processBuffer+0x374>
				i = 0;				// Move to next MIDI byte
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <processBuffer+0x420>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e005      	b.n	8000f94 <processBuffer+0x380>
			}
			else {
				i++;
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <processBuffer+0x420>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b28      	ldr	r3, [pc, #160]	; (8001034 <processBuffer+0x420>)
 8000f92:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	70fb      	strb	r3, [r7, #3]
			state = 30;
 8000f9a:	4b27      	ldr	r3, [pc, #156]	; (8001038 <processBuffer+0x424>)
 8000f9c:	221e      	movs	r2, #30
 8000f9e:	701a      	strb	r2, [r3, #0]

			setParams();
 8000fa0:	f000 f856 	bl	8001050 <setParams>

			break;
 8000fa4:	e038      	b.n	8001018 <processBuffer+0x404>
		}
		// State 40 & 41 : Pitch Bend message
		case 40:
		{
			if (received_char > 0x7F) // If following byte is note a PB value
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8000faa:	d903      	bls.n	8000fb4 <processBuffer+0x3a0>
			{
				state = 0; // Return to state 0
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <processBuffer+0x424>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e031      	b.n	8001018 <processBuffer+0x404>
			}
			else
			{
				param = received_char; // Save MIDI CC number
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b24      	ldr	r3, [pc, #144]	; (800104c <processBuffer+0x438>)
 8000fba:	701a      	strb	r2, [r3, #0]
				if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <processBuffer+0x420>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	d103      	bne.n	8000fcc <processBuffer+0x3b8>
					i = 0;				// Move to next MIDI byte
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <processBuffer+0x420>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e005      	b.n	8000fd8 <processBuffer+0x3c4>
				}
				else {
					i++;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <processBuffer+0x420>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <processBuffer+0x420>)
 8000fd6:	701a      	strb	r2, [r3, #0]
				}
				nb_MIDI_bytes--;
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	70fb      	strb	r3, [r7, #3]
				state = 41; // Next state is 41
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <processBuffer+0x424>)
 8000fe0:	2229      	movs	r2, #41	; 0x29
 8000fe2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000fe4:	e018      	b.n	8001018 <processBuffer+0x404>
		}
		case 41:
		{
			param = received_char; // Save MIDI velocity
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <processBuffer+0x438>)
 8000fec:	701a      	strb	r2, [r3, #0]
			if (i == (MIDI_BUFFER_LENGTH-1)) {
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <processBuffer+0x420>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	d103      	bne.n	8000ffe <processBuffer+0x3ea>
				i = 0;				// Move to next MIDI byte
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <processBuffer+0x420>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	e005      	b.n	800100a <processBuffer+0x3f6>
			}
			else {
				i++;
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <processBuffer+0x420>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <processBuffer+0x420>)
 8001008:	701a      	strb	r2, [r3, #0]
			}
			nb_MIDI_bytes--;
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	3b01      	subs	r3, #1
 800100e:	70fb      	strb	r3, [r7, #3]
			state = 40; // Next state is 00
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <processBuffer+0x424>)
 8001012:	2228      	movs	r2, #40	; 0x28
 8001014:	701a      	strb	r2, [r3, #0]
			break;
 8001016:	bf00      	nop
	while (nb_MIDI_bytes != 0)
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f47f ae02 	bne.w	8000c24 <processBuffer+0x10>
		}
	}
	}
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20004628 	.word	0x20004628
 8001030:	20004626 	.word	0x20004626
 8001034:	200040c6 	.word	0x200040c6
 8001038:	200040c7 	.word	0x200040c7
 800103c:	200000bc 	.word	0x200000bc
 8001040:	20004629 	.word	0x20004629
 8001044:	20004602 	.word	0x20004602
 8001048:	20004596 	.word	0x20004596
 800104c:	20004542 	.word	0x20004542

08001050 <setParams>:

//TODO:logic for ADSR as well as DSP
void setParams(){
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	switch (paramNum){
 8001054:	4b52      	ldr	r3, [pc, #328]	; (80011a0 <setParams+0x150>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b11      	cmp	r3, #17
 800105a:	d063      	beq.n	8001124 <setParams+0xd4>
 800105c:	2b11      	cmp	r3, #17
 800105e:	f2c0 809a 	blt.w	8001196 <setParams+0x146>
 8001062:	2b4f      	cmp	r3, #79	; 0x4f
 8001064:	f300 8097 	bgt.w	8001196 <setParams+0x146>
 8001068:	2b48      	cmp	r3, #72	; 0x48
 800106a:	f2c0 8094 	blt.w	8001196 <setParams+0x146>
 800106e:	3b48      	subs	r3, #72	; 0x48
 8001070:	2b07      	cmp	r3, #7
 8001072:	f200 8090 	bhi.w	8001196 <setParams+0x146>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <setParams+0x2c>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	08001101 	.word	0x08001101
 8001080:	0800109d 	.word	0x0800109d
 8001084:	08001197 	.word	0x08001197
 8001088:	080010c1 	.word	0x080010c1
 800108c:	08001197 	.word	0x08001197
 8001090:	08001197 	.word	0x08001197
 8001094:	08001197 	.word	0x08001197
 8001098:	080010e5 	.word	0x080010e5
	case 73:								// ADRS Attack Time
		{
			adsrAttack = 0.001f + (float_t) paramVal / 127;
 800109c:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <setParams+0x154>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010a8:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80011a8 <setParams+0x158>
 80010ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80011ac <setParams+0x15c>
 80010b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010b8:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <setParams+0x160>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]
			break;
 80010be:	e06a      	b.n	8001196 <setParams+0x146>
		}

	case 75:								// ADRS Decay Time
		{
			adsrDecay = 0.001f + (float_t) paramVal / 127;
 80010c0:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <setParams+0x154>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010cc:	eddf 6a36 	vldr	s13, [pc, #216]	; 80011a8 <setParams+0x158>
 80010d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80011ac <setParams+0x15c>
 80010d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <setParams+0x164>)
 80010de:	edc3 7a00 	vstr	s15, [r3]
			break;
 80010e2:	e058      	b.n	8001196 <setParams+0x146>
		}

	case 79:								// ADRS Sustain Level
		{
			adsrSus = (float_t) paramVal / 127;
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <setParams+0x154>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010f0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80011a8 <setParams+0x158>
 80010f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <setParams+0x168>)
 80010fa:	edc3 7a00 	vstr	s15, [r3]
			break;
 80010fe:	e04a      	b.n	8001196 <setParams+0x146>
		}

	case 72:								// ADRS Release Time
		{
			adsrRel = 0.001f + (float_t) paramVal / 127;
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <setParams+0x154>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110c:	eddf 6a26 	vldr	s13, [pc, #152]	; 80011a8 <setParams+0x158>
 8001110:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001114:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80011ac <setParams+0x15c>
 8001118:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <setParams+0x16c>)
 800111e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001122:	e038      	b.n	8001196 <setParams+0x146>


	//Waveform Select OSC1
	case 17:
			{
				if (paramVal >= 0 && paramVal < 32)	{
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <setParams+0x154>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b1f      	cmp	r3, #31
 800112a:	d803      	bhi.n	8001134 <setParams+0xe4>
					osc1Waveform = 0;
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <setParams+0x170>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
				}
				else {
					osc1Waveform = 0;
				}

				break;
 8001132:	e02f      	b.n	8001194 <setParams+0x144>
				else if (paramVal >= 32 && paramVal < 64)	{
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <setParams+0x154>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b1f      	cmp	r3, #31
 800113a:	d907      	bls.n	800114c <setParams+0xfc>
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <setParams+0x154>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b3f      	cmp	r3, #63	; 0x3f
 8001142:	d803      	bhi.n	800114c <setParams+0xfc>
					osc1Waveform = 1;
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <setParams+0x170>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e023      	b.n	8001194 <setParams+0x144>
				else if (paramVal >= 64 && paramVal < 96)	{
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <setParams+0x154>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b3f      	cmp	r3, #63	; 0x3f
 8001152:	d907      	bls.n	8001164 <setParams+0x114>
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <setParams+0x154>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b5f      	cmp	r3, #95	; 0x5f
 800115a:	d803      	bhi.n	8001164 <setParams+0x114>
					osc1Waveform = 2;
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <setParams+0x170>)
 800115e:	2202      	movs	r2, #2
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	e017      	b.n	8001194 <setParams+0x144>
				else if (paramVal >= 96 && paramVal < 125){
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <setParams+0x154>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b5f      	cmp	r3, #95	; 0x5f
 800116a:	d907      	bls.n	800117c <setParams+0x12c>
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <setParams+0x154>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b7c      	cmp	r3, #124	; 0x7c
 8001172:	d803      	bhi.n	800117c <setParams+0x12c>
					osc1Waveform = 3;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <setParams+0x170>)
 8001176:	2203      	movs	r2, #3
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e00b      	b.n	8001194 <setParams+0x144>
				else if (paramVal >= 125 ){
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <setParams+0x154>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b7c      	cmp	r3, #124	; 0x7c
 8001182:	d903      	bls.n	800118c <setParams+0x13c>
					osc1Waveform = 4;
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <setParams+0x170>)
 8001186:	2204      	movs	r2, #4
 8001188:	701a      	strb	r2, [r3, #0]
				break;
 800118a:	e003      	b.n	8001194 <setParams+0x144>
					osc1Waveform = 0;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <setParams+0x170>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
				break;
 8001192:	e7ff      	b.n	8001194 <setParams+0x144>
 8001194:	bf00      	nop
			}
	}
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	20004602 	.word	0x20004602
 80011a4:	20004596 	.word	0x20004596
 80011a8:	42fe0000 	.word	0x42fe0000
 80011ac:	3a83126f 	.word	0x3a83126f
 80011b0:	20000010 	.word	0x20000010
 80011b4:	20000014 	.word	0x20000014
 80011b8:	20000018 	.word	0x20000018
 80011bc:	2000001c 	.word	0x2000001c
 80011c0:	20004541 	.word	0x20004541

080011c4 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	//HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
	//new version dose not call here
		//processBuffer();
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	//HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
	//once MIDI buffer is full we send to the process buffer function
	//new version dose not call here
	//processBuffer();
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <calcSynth>:

float calcSynth(){
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
	uint16_t a,b;
	float da, db;

	float osc_wtb_incr = WAVETABLE_LENGTH * (pitch) / SAMPLE_RATE;
 80011f2:	4b99      	ldr	r3, [pc, #612]	; (8001458 <calcSynth+0x26c>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800145c <calcSynth+0x270>
 80011fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001200:	eddf 6a97 	vldr	s13, [pc, #604]	; 8001460 <calcSynth+0x274>
 8001204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001208:	edc7 7a04 	vstr	s15, [r7, #16]
	osc_wtb_pointer = osc_wtb_pointer + osc_wtb_incr;
 800120c:	4b95      	ldr	r3, [pc, #596]	; (8001464 <calcSynth+0x278>)
 800120e:	ed93 7a00 	vldr	s14, [r3]
 8001212:	edd7 7a04 	vldr	s15, [r7, #16]
 8001216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121a:	4b92      	ldr	r3, [pc, #584]	; (8001464 <calcSynth+0x278>)
 800121c:	edc3 7a00 	vstr	s15, [r3]

	if(osc_wtb_pointer > WAVETABLE_LENGTH){
 8001220:	4b90      	ldr	r3, [pc, #576]	; (8001464 <calcSynth+0x278>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800145c <calcSynth+0x270>
 800122a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001232:	dd09      	ble.n	8001248 <calcSynth+0x5c>
		osc_wtb_pointer = osc_wtb_pointer - WAVETABLE_LENGTH;
 8001234:	4b8b      	ldr	r3, [pc, #556]	; (8001464 <calcSynth+0x278>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800145c <calcSynth+0x270>
 800123e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001242:	4b88      	ldr	r3, [pc, #544]	; (8001464 <calcSynth+0x278>)
 8001244:	edc3 7a00 	vstr	s15, [r3]
	}

	a = (int)osc_wtb_pointer;
 8001248:	4b86      	ldr	r3, [pc, #536]	; (8001464 <calcSynth+0x278>)
 800124a:	edd3 7a00 	vldr	s15, [r3]
 800124e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001252:	ee17 3a90 	vmov	r3, s15
 8001256:	81fb      	strh	r3, [r7, #14]
	da = osc_wtb_pointer -a;
 8001258:	4b82      	ldr	r3, [pc, #520]	; (8001464 <calcSynth+0x278>)
 800125a:	ed93 7a00 	vldr	s14, [r3]
 800125e:	89fb      	ldrh	r3, [r7, #14]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126c:	edc7 7a02 	vstr	s15, [r7, #8]
	b= a+1;
 8001270:	89fb      	ldrh	r3, [r7, #14]
 8001272:	3301      	adds	r3, #1
 8001274:	82fb      	strh	r3, [r7, #22]
	db = b - osc_wtb_pointer;
 8001276:	8afb      	ldrh	r3, [r7, #22]
 8001278:	ee07 3a90 	vmov	s15, r3
 800127c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001280:	4b78      	ldr	r3, [pc, #480]	; (8001464 <calcSynth+0x278>)
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800128a:	edc7 7a01 	vstr	s15, [r7, #4]

	if (b>= WAVETABLE_LENGTH){
 800128e:	8afb      	ldrh	r3, [r7, #22]
 8001290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001294:	d301      	bcc.n	800129a <calcSynth+0xae>
		b = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	82fb      	strh	r3, [r7, #22]
	}


	switch (osc1Waveform)
 800129a:	4b73      	ldr	r3, [pc, #460]	; (8001468 <calcSynth+0x27c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b04      	cmp	r3, #4
 80012a0:	f200 8090 	bhi.w	80013c4 <calcSynth+0x1d8>
 80012a4:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <calcSynth+0xc0>)
 80012a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012aa:	bf00      	nop
 80012ac:	080012c1 	.word	0x080012c1
 80012b0:	080012f5 	.word	0x080012f5
 80012b4:	08001329 	.word	0x08001329
 80012b8:	0800135d 	.word	0x0800135d
 80012bc:	08001391 	.word	0x08001391
	{
		case 0 :
		{
			osc = db*square[a] + da*square[b];					// Linear interpolation (same as weighted average)
 80012c0:	89fb      	ldrh	r3, [r7, #14]
 80012c2:	4a6a      	ldr	r2, [pc, #424]	; (800146c <calcSynth+0x280>)
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	ed93 7a00 	vldr	s14, [r3]
 80012cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d4:	8afb      	ldrh	r3, [r7, #22]
 80012d6:	4a65      	ldr	r2, [pc, #404]	; (800146c <calcSynth+0x280>)
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	edd3 6a00 	vldr	s13, [r3]
 80012e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	4b60      	ldr	r3, [pc, #384]	; (8001470 <calcSynth+0x284>)
 80012ee:	edc3 7a00 	vstr	s15, [r3]
			break;
 80012f2:	e081      	b.n	80013f8 <calcSynth+0x20c>
		}

		case 1 :
		{
			osc = db*triangle[a] + da*triangle[b];
 80012f4:	89fb      	ldrh	r3, [r7, #14]
 80012f6:	4a5f      	ldr	r2, [pc, #380]	; (8001474 <calcSynth+0x288>)
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	ed93 7a00 	vldr	s14, [r3]
 8001300:	edd7 7a01 	vldr	s15, [r7, #4]
 8001304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4a5a      	ldr	r2, [pc, #360]	; (8001474 <calcSynth+0x288>)
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	edd3 6a00 	vldr	s13, [r3]
 8001314:	edd7 7a02 	vldr	s15, [r7, #8]
 8001318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <calcSynth+0x284>)
 8001322:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001326:	e067      	b.n	80013f8 <calcSynth+0x20c>
		}

		case 2 :
		{
			osc = db*sawtooth[a] + da*sawtooth[b];
 8001328:	89fb      	ldrh	r3, [r7, #14]
 800132a:	4a53      	ldr	r2, [pc, #332]	; (8001478 <calcSynth+0x28c>)
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	ed93 7a00 	vldr	s14, [r3]
 8001334:	edd7 7a01 	vldr	s15, [r7, #4]
 8001338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800133c:	8afb      	ldrh	r3, [r7, #22]
 800133e:	4a4e      	ldr	r2, [pc, #312]	; (8001478 <calcSynth+0x28c>)
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	edd3 6a00 	vldr	s13, [r3]
 8001348:	edd7 7a02 	vldr	s15, [r7, #8]
 800134c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001354:	4b46      	ldr	r3, [pc, #280]	; (8001470 <calcSynth+0x284>)
 8001356:	edc3 7a00 	vstr	s15, [r3]
			break;
 800135a:	e04d      	b.n	80013f8 <calcSynth+0x20c>
		}

		case 3 :
		{
			osc = db*distosine[a] + da*distosine[b];
 800135c:	89fb      	ldrh	r3, [r7, #14]
 800135e:	4a47      	ldr	r2, [pc, #284]	; (800147c <calcSynth+0x290>)
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	ed93 7a00 	vldr	s14, [r3]
 8001368:	edd7 7a01 	vldr	s15, [r7, #4]
 800136c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001370:	8afb      	ldrh	r3, [r7, #22]
 8001372:	4a42      	ldr	r2, [pc, #264]	; (800147c <calcSynth+0x290>)
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	edd3 6a00 	vldr	s13, [r3]
 800137c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001388:	4b39      	ldr	r3, [pc, #228]	; (8001470 <calcSynth+0x284>)
 800138a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800138e:	e033      	b.n	80013f8 <calcSynth+0x20c>
		}
		case 4 :
		{
			osc = db*sinewave[a] + da*sinewave[b];
 8001390:	89fb      	ldrh	r3, [r7, #14]
 8001392:	4a3b      	ldr	r2, [pc, #236]	; (8001480 <calcSynth+0x294>)
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	ed93 7a00 	vldr	s14, [r3]
 800139c:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a4:	8afb      	ldrh	r3, [r7, #22]
 80013a6:	4a36      	ldr	r2, [pc, #216]	; (8001480 <calcSynth+0x294>)
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	edd3 6a00 	vldr	s13, [r3]
 80013b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013bc:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <calcSynth+0x284>)
 80013be:	edc3 7a00 	vstr	s15, [r3]
			break;
 80013c2:	e019      	b.n	80013f8 <calcSynth+0x20c>
		}

		default :
		{
			osc = db*sinewave[a] + da*sinewave[b];
 80013c4:	89fb      	ldrh	r3, [r7, #14]
 80013c6:	4a2e      	ldr	r2, [pc, #184]	; (8001480 <calcSynth+0x294>)
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	ed93 7a00 	vldr	s14, [r3]
 80013d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d8:	8afb      	ldrh	r3, [r7, #22]
 80013da:	4a29      	ldr	r2, [pc, #164]	; (8001480 <calcSynth+0x294>)
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	edd3 6a00 	vldr	s13, [r3]
 80013e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <calcSynth+0x284>)
 80013f2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80013f6:	bf00      	nop
		}
	}

	signal = osc * 32767.0f;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <calcSynth+0x284>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001484 <calcSynth+0x298>
 8001402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <calcSynth+0x29c>)
 8001408:	edc3 7a00 	vstr	s15, [r3]
	if (signal > 32767.0f){
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <calcSynth+0x29c>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001484 <calcSynth+0x298>
 8001416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	dd02      	ble.n	8001426 <calcSynth+0x23a>
		signal = 32767.0f;
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <calcSynth+0x29c>)
 8001422:	4a1a      	ldr	r2, [pc, #104]	; (800148c <calcSynth+0x2a0>)
 8001424:	601a      	str	r2, [r3, #0]
	}
	if (signal < -32767.0f){
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <calcSynth+0x29c>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001490 <calcSynth+0x2a4>
 8001430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	d502      	bpl.n	8001440 <calcSynth+0x254>
		signal = -32767.0f;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <calcSynth+0x29c>)
 800143c:	4a15      	ldr	r2, [pc, #84]	; (8001494 <calcSynth+0x2a8>)
 800143e:	601a      	str	r2, [r3, #0]
	}
	return signal;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <calcSynth+0x29c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	ee07 3a90 	vmov	s15, r3
}
 8001448:	eeb0 0a67 	vmov.f32	s0, s15
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200000b8 	.word	0x200000b8
 800145c:	44800000 	.word	0x44800000
 8001460:	472c4400 	.word	0x472c4400
 8001464:	200000b0 	.word	0x200000b0
 8001468:	20004541 	.word	0x20004541
 800146c:	08007a0c 	.word	0x08007a0c
 8001470:	20004598 	.word	0x20004598
 8001474:	08008a0c 	.word	0x08008a0c
 8001478:	08009a0c 	.word	0x08009a0c
 800147c:	0800aa0c 	.word	0x0800aa0c
 8001480:	0800ba0c 	.word	0x0800ba0c
 8001484:	46fffe00 	.word	0x46fffe00
 8001488:	200000b4 	.word	0x200000b4
 800148c:	46fffe00 	.word	0x46fffe00
 8001490:	c6fffe00 	.word	0xc6fffe00
 8001494:	c6fffe00 	.word	0xc6fffe00

08001498 <make_sound>:

void make_sound(uint16_t start_index) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < AUDIO_BUFFER_LENGTH_DIV2 ;  i=i+2) {
 80014a2:	2300      	movs	r3, #0
 80014a4:	81fb      	strh	r3, [r7, #14]
 80014a6:	e023      	b.n	80014f0 <make_sound+0x58>
		float signal = calcSynth();
 80014a8:	f7ff fea0 	bl	80011ec <calcSynth>
 80014ac:	ed87 0a02 	vstr	s0, [r7, #8]
		sendBuff[start_index + i] = (int16_t)signal;
 80014b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b8:	ee17 3a90 	vmov	r3, s15
 80014bc:	b219      	sxth	r1, r3
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	89fb      	ldrh	r3, [r7, #14]
 80014c2:	4413      	add	r3, r2
 80014c4:	b289      	uxth	r1, r1
 80014c6:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <make_sound+0x6c>)
 80014c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sendBuff[start_index + i + 1] = (int16_t)signal;
 80014cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d4:	ee17 3a90 	vmov	r3, s15
 80014d8:	b219      	sxth	r1, r3
 80014da:	88fa      	ldrh	r2, [r7, #6]
 80014dc:	89fb      	ldrh	r3, [r7, #14]
 80014de:	4413      	add	r3, r2
 80014e0:	3301      	adds	r3, #1
 80014e2:	b289      	uxth	r1, r1
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <make_sound+0x6c>)
 80014e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < AUDIO_BUFFER_LENGTH_DIV2 ;  i=i+2) {
 80014ea:	89fb      	ldrh	r3, [r7, #14]
 80014ec:	3302      	adds	r3, #2
 80014ee:	81fb      	strh	r3, [r7, #14]
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014f6:	d3d7      	bcc.n	80014a8 <make_sound+0x10>
	}
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200000c0 	.word	0x200000c0

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
	...

08001514 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800151a:	f000 fa29 	bl	8001970 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800151e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001522:	2201      	movs	r2, #1
 8001524:	2178      	movs	r1, #120	; 0x78
 8001526:	485b      	ldr	r0, [pc, #364]	; (8001694 <SSD1306_Init+0x180>)
 8001528:	f001 fd7a 	bl	8003020 <HAL_I2C_IsDeviceReady>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001532:	2300      	movs	r3, #0
 8001534:	e0a9      	b.n	800168a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001536:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800153a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800153c:	e002      	b.n	8001544 <SSD1306_Init+0x30>
		p--;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3b01      	subs	r3, #1
 8001542:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f9      	bne.n	800153e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800154a:	22ae      	movs	r2, #174	; 0xae
 800154c:	2100      	movs	r1, #0
 800154e:	2078      	movs	r0, #120	; 0x78
 8001550:	f000 fa6c 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001554:	2220      	movs	r2, #32
 8001556:	2100      	movs	r1, #0
 8001558:	2078      	movs	r0, #120	; 0x78
 800155a:	f000 fa67 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800155e:	2210      	movs	r2, #16
 8001560:	2100      	movs	r1, #0
 8001562:	2078      	movs	r0, #120	; 0x78
 8001564:	f000 fa62 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001568:	22b0      	movs	r2, #176	; 0xb0
 800156a:	2100      	movs	r1, #0
 800156c:	2078      	movs	r0, #120	; 0x78
 800156e:	f000 fa5d 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001572:	22c8      	movs	r2, #200	; 0xc8
 8001574:	2100      	movs	r1, #0
 8001576:	2078      	movs	r0, #120	; 0x78
 8001578:	f000 fa58 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2078      	movs	r0, #120	; 0x78
 8001582:	f000 fa53 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001586:	2210      	movs	r2, #16
 8001588:	2100      	movs	r1, #0
 800158a:	2078      	movs	r0, #120	; 0x78
 800158c:	f000 fa4e 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001590:	2240      	movs	r2, #64	; 0x40
 8001592:	2100      	movs	r1, #0
 8001594:	2078      	movs	r0, #120	; 0x78
 8001596:	f000 fa49 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800159a:	2281      	movs	r2, #129	; 0x81
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	; 0x78
 80015a0:	f000 fa44 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80015a4:	22ff      	movs	r2, #255	; 0xff
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	; 0x78
 80015aa:	f000 fa3f 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80015ae:	22a1      	movs	r2, #161	; 0xa1
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	; 0x78
 80015b4:	f000 fa3a 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80015b8:	22a6      	movs	r2, #166	; 0xa6
 80015ba:	2100      	movs	r1, #0
 80015bc:	2078      	movs	r0, #120	; 0x78
 80015be:	f000 fa35 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80015c2:	22a8      	movs	r2, #168	; 0xa8
 80015c4:	2100      	movs	r1, #0
 80015c6:	2078      	movs	r0, #120	; 0x78
 80015c8:	f000 fa30 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80015cc:	223f      	movs	r2, #63	; 0x3f
 80015ce:	2100      	movs	r1, #0
 80015d0:	2078      	movs	r0, #120	; 0x78
 80015d2:	f000 fa2b 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015d6:	22a4      	movs	r2, #164	; 0xa4
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	; 0x78
 80015dc:	f000 fa26 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80015e0:	22d3      	movs	r2, #211	; 0xd3
 80015e2:	2100      	movs	r1, #0
 80015e4:	2078      	movs	r0, #120	; 0x78
 80015e6:	f000 fa21 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	; 0x78
 80015f0:	f000 fa1c 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80015f4:	22d5      	movs	r2, #213	; 0xd5
 80015f6:	2100      	movs	r1, #0
 80015f8:	2078      	movs	r0, #120	; 0x78
 80015fa:	f000 fa17 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80015fe:	22f0      	movs	r2, #240	; 0xf0
 8001600:	2100      	movs	r1, #0
 8001602:	2078      	movs	r0, #120	; 0x78
 8001604:	f000 fa12 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001608:	22d9      	movs	r2, #217	; 0xd9
 800160a:	2100      	movs	r1, #0
 800160c:	2078      	movs	r0, #120	; 0x78
 800160e:	f000 fa0d 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001612:	2222      	movs	r2, #34	; 0x22
 8001614:	2100      	movs	r1, #0
 8001616:	2078      	movs	r0, #120	; 0x78
 8001618:	f000 fa08 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800161c:	22da      	movs	r2, #218	; 0xda
 800161e:	2100      	movs	r1, #0
 8001620:	2078      	movs	r0, #120	; 0x78
 8001622:	f000 fa03 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001626:	2212      	movs	r2, #18
 8001628:	2100      	movs	r1, #0
 800162a:	2078      	movs	r0, #120	; 0x78
 800162c:	f000 f9fe 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001630:	22db      	movs	r2, #219	; 0xdb
 8001632:	2100      	movs	r1, #0
 8001634:	2078      	movs	r0, #120	; 0x78
 8001636:	f000 f9f9 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800163a:	2220      	movs	r2, #32
 800163c:	2100      	movs	r1, #0
 800163e:	2078      	movs	r0, #120	; 0x78
 8001640:	f000 f9f4 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001644:	228d      	movs	r2, #141	; 0x8d
 8001646:	2100      	movs	r1, #0
 8001648:	2078      	movs	r0, #120	; 0x78
 800164a:	f000 f9ef 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800164e:	2214      	movs	r2, #20
 8001650:	2100      	movs	r1, #0
 8001652:	2078      	movs	r0, #120	; 0x78
 8001654:	f000 f9ea 	bl	8001a2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001658:	22af      	movs	r2, #175	; 0xaf
 800165a:	2100      	movs	r1, #0
 800165c:	2078      	movs	r0, #120	; 0x78
 800165e:	f000 f9e5 	bl	8001a2c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001662:	222e      	movs	r2, #46	; 0x2e
 8001664:	2100      	movs	r1, #0
 8001666:	2078      	movs	r0, #120	; 0x78
 8001668:	f000 f9e0 	bl	8001a2c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800166c:	2000      	movs	r0, #0
 800166e:	f000 f843 	bl	80016f8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001672:	f000 f813 	bl	800169c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <SSD1306_Init+0x184>)
 8001678:	2200      	movs	r2, #0
 800167a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <SSD1306_Init+0x184>)
 800167e:	2200      	movs	r2, #0
 8001680:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <SSD1306_Init+0x184>)
 8001684:	2201      	movs	r2, #1
 8001686:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20004548 	.word	0x20004548
 8001698:	200044c8 	.word	0x200044c8

0800169c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80016a2:	2300      	movs	r3, #0
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	e01d      	b.n	80016e4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	3b50      	subs	r3, #80	; 0x50
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	2100      	movs	r1, #0
 80016b2:	2078      	movs	r0, #120	; 0x78
 80016b4:	f000 f9ba 	bl	8001a2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2078      	movs	r0, #120	; 0x78
 80016be:	f000 f9b5 	bl	8001a2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80016c2:	2210      	movs	r2, #16
 80016c4:	2100      	movs	r1, #0
 80016c6:	2078      	movs	r0, #120	; 0x78
 80016c8:	f000 f9b0 	bl	8001a2c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	01db      	lsls	r3, r3, #7
 80016d0:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <SSD1306_UpdateScreen+0x58>)
 80016d2:	441a      	add	r2, r3
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	2140      	movs	r1, #64	; 0x40
 80016d8:	2078      	movs	r0, #120	; 0x78
 80016da:	f000 f95f 	bl	800199c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	3301      	adds	r3, #1
 80016e2:	71fb      	strb	r3, [r7, #7]
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	2b07      	cmp	r3, #7
 80016e8:	d9de      	bls.n	80016a8 <SSD1306_UpdateScreen+0xc>
	}
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200040c8 	.word	0x200040c8

080016f8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <SSD1306_Fill+0x14>
 8001708:	2300      	movs	r3, #0
 800170a:	e000      	b.n	800170e <SSD1306_Fill+0x16>
 800170c:	23ff      	movs	r3, #255	; 0xff
 800170e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001712:	4619      	mov	r1, r3
 8001714:	4803      	ldr	r0, [pc, #12]	; (8001724 <SSD1306_Fill+0x2c>)
 8001716:	f004 fda9 	bl	800626c <memset>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200040c8 	.word	0x200040c8

08001728 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
 8001732:	460b      	mov	r3, r1
 8001734:	80bb      	strh	r3, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	70fb      	strb	r3, [r7, #3]
	if (
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	2b7f      	cmp	r3, #127	; 0x7f
 800173e:	d848      	bhi.n	80017d2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	2b3f      	cmp	r3, #63	; 0x3f
 8001744:	d845      	bhi.n	80017d2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <SSD1306_DrawPixel+0xb8>)
 8001748:	791b      	ldrb	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d11a      	bne.n	8001798 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001762:	88fa      	ldrh	r2, [r7, #6]
 8001764:	88bb      	ldrh	r3, [r7, #4]
 8001766:	08db      	lsrs	r3, r3, #3
 8001768:	b298      	uxth	r0, r3
 800176a:	4603      	mov	r3, r0
 800176c:	01db      	lsls	r3, r3, #7
 800176e:	4413      	add	r3, r2
 8001770:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <SSD1306_DrawPixel+0xbc>)
 8001772:	5cd3      	ldrb	r3, [r2, r3]
 8001774:	b25a      	sxtb	r2, r3
 8001776:	88bb      	ldrh	r3, [r7, #4]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	b25b      	sxtb	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b259      	sxtb	r1, r3
 8001788:	88fa      	ldrh	r2, [r7, #6]
 800178a:	4603      	mov	r3, r0
 800178c:	01db      	lsls	r3, r3, #7
 800178e:	4413      	add	r3, r2
 8001790:	b2c9      	uxtb	r1, r1
 8001792:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <SSD1306_DrawPixel+0xbc>)
 8001794:	54d1      	strb	r1, [r2, r3]
 8001796:	e01d      	b.n	80017d4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001798:	88fa      	ldrh	r2, [r7, #6]
 800179a:	88bb      	ldrh	r3, [r7, #4]
 800179c:	08db      	lsrs	r3, r3, #3
 800179e:	b298      	uxth	r0, r3
 80017a0:	4603      	mov	r3, r0
 80017a2:	01db      	lsls	r3, r3, #7
 80017a4:	4413      	add	r3, r2
 80017a6:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <SSD1306_DrawPixel+0xbc>)
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	b25a      	sxtb	r2, r3
 80017ac:	88bb      	ldrh	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	2101      	movs	r1, #1
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	4013      	ands	r3, r2
 80017c0:	b259      	sxtb	r1, r3
 80017c2:	88fa      	ldrh	r2, [r7, #6]
 80017c4:	4603      	mov	r3, r0
 80017c6:	01db      	lsls	r3, r3, #7
 80017c8:	4413      	add	r3, r2
 80017ca:	b2c9      	uxtb	r1, r1
 80017cc:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <SSD1306_DrawPixel+0xbc>)
 80017ce:	54d1      	strb	r1, [r2, r3]
 80017d0:	e000      	b.n	80017d4 <SSD1306_DrawPixel+0xac>
		return;
 80017d2:	bf00      	nop
	}
}
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	200044c8 	.word	0x200044c8
 80017e4:	200040c8 	.word	0x200040c8

080017e8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	460a      	mov	r2, r1
 80017f2:	80fb      	strh	r3, [r7, #6]
 80017f4:	4613      	mov	r3, r2
 80017f6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80017f8:	4a05      	ldr	r2, [pc, #20]	; (8001810 <SSD1306_GotoXY+0x28>)
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <SSD1306_GotoXY+0x28>)
 8001800:	88bb      	ldrh	r3, [r7, #4]
 8001802:	8053      	strh	r3, [r2, #2]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	200044c8 	.word	0x200044c8

08001814 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
 8001820:	4613      	mov	r3, r2
 8001822:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001824:	4b3a      	ldr	r3, [pc, #232]	; (8001910 <SSD1306_Putc+0xfc>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
	if (
 8001830:	2b7f      	cmp	r3, #127	; 0x7f
 8001832:	dc07      	bgt.n	8001844 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <SSD1306_Putc+0xfc>)
 8001836:	885b      	ldrh	r3, [r3, #2]
 8001838:	461a      	mov	r2, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	785b      	ldrb	r3, [r3, #1]
 800183e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001840:	2b3f      	cmp	r3, #63	; 0x3f
 8001842:	dd01      	ble.n	8001848 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001844:	2300      	movs	r3, #0
 8001846:	e05e      	b.n	8001906 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e04b      	b.n	80018e6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	3b20      	subs	r3, #32
 8001856:	6839      	ldr	r1, [r7, #0]
 8001858:	7849      	ldrb	r1, [r1, #1]
 800185a:	fb01 f303 	mul.w	r3, r1, r3
 800185e:	4619      	mov	r1, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	440b      	add	r3, r1
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	e030      	b.n	80018d4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d010      	beq.n	80018a4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001882:	4b23      	ldr	r3, [pc, #140]	; (8001910 <SSD1306_Putc+0xfc>)
 8001884:	881a      	ldrh	r2, [r3, #0]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	b29b      	uxth	r3, r3
 800188a:	4413      	add	r3, r2
 800188c:	b298      	uxth	r0, r3
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <SSD1306_Putc+0xfc>)
 8001890:	885a      	ldrh	r2, [r3, #2]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	79ba      	ldrb	r2, [r7, #6]
 800189c:	4619      	mov	r1, r3
 800189e:	f7ff ff43 	bl	8001728 <SSD1306_DrawPixel>
 80018a2:	e014      	b.n	80018ce <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <SSD1306_Putc+0xfc>)
 80018a6:	881a      	ldrh	r2, [r3, #0]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	b298      	uxth	r0, r3
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <SSD1306_Putc+0xfc>)
 80018b2:	885a      	ldrh	r2, [r3, #2]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	b299      	uxth	r1, r3
 80018bc:	79bb      	ldrb	r3, [r7, #6]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bf0c      	ite	eq
 80018c2:	2301      	moveq	r3, #1
 80018c4:	2300      	movne	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	f7ff ff2d 	bl	8001728 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	3301      	adds	r3, #1
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4293      	cmp	r3, r2
 80018de:	d3c8      	bcc.n	8001872 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3301      	adds	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	785b      	ldrb	r3, [r3, #1]
 80018ea:	461a      	mov	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d3ad      	bcc.n	800184e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <SSD1306_Putc+0xfc>)
 80018f4:	881a      	ldrh	r2, [r3, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <SSD1306_Putc+0xfc>)
 8001902:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001904:	79fb      	ldrb	r3, [r7, #7]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200044c8 	.word	0x200044c8

08001914 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	4613      	mov	r3, r2
 8001920:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001922:	e012      	b.n	800194a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	79fa      	ldrb	r2, [r7, #7]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff71 	bl	8001814 <SSD1306_Putc>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d002      	beq.n	8001944 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	e008      	b.n	8001956 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3301      	adds	r3, #1
 8001948:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1e8      	bne.n	8001924 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	781b      	ldrb	r3, [r3, #0]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff fec8 	bl	80016f8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001968:	f7ff fe98 	bl	800169c <SSD1306_UpdateScreen>
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <ssd1306_I2C_Init+0x28>)
 8001978:	607b      	str	r3, [r7, #4]
	while(p>0)
 800197a:	e002      	b.n	8001982 <ssd1306_I2C_Init+0x12>
		p--;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f9      	bne.n	800197c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	0003d090 	.word	0x0003d090

0800199c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b0c7      	sub	sp, #284	; 0x11c
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	4604      	mov	r4, r0
 80019a4:	4608      	mov	r0, r1
 80019a6:	4639      	mov	r1, r7
 80019a8:	600a      	str	r2, [r1, #0]
 80019aa:	4619      	mov	r1, r3
 80019ac:	1dfb      	adds	r3, r7, #7
 80019ae:	4622      	mov	r2, r4
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	1dbb      	adds	r3, r7, #6
 80019b4:	4602      	mov	r2, r0
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	460a      	mov	r2, r1
 80019bc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	1dba      	adds	r2, r7, #6
 80019c4:	7812      	ldrb	r2, [r2, #0]
 80019c6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019ce:	e010      	b.n	80019f2 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80019d0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019d4:	463a      	mov	r2, r7
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	441a      	add	r2, r3
 80019da:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019de:	3301      	adds	r3, #1
 80019e0:	7811      	ldrb	r1, [r2, #0]
 80019e2:	f107 020c 	add.w	r2, r7, #12
 80019e6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019e8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019ec:	3301      	adds	r3, #1
 80019ee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	1d3a      	adds	r2, r7, #4
 80019fa:	8812      	ldrh	r2, [r2, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8e7      	bhi.n	80019d0 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8001a00:	1dfb      	adds	r3, r7, #7
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b299      	uxth	r1, r3
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	f107 020c 	add.w	r2, r7, #12
 8001a12:	200a      	movs	r0, #10
 8001a14:	9000      	str	r0, [sp, #0]
 8001a16:	4804      	ldr	r0, [pc, #16]	; (8001a28 <ssd1306_I2C_WriteMulti+0x8c>)
 8001a18:	f001 fa0e 	bl	8002e38 <HAL_I2C_Master_Transmit>
}
 8001a1c:	bf00      	nop
 8001a1e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd90      	pop	{r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20004548 	.word	0x20004548

08001a2c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	460b      	mov	r3, r1
 8001a38:	71bb      	strb	r3, [r7, #6]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a3e:	79bb      	ldrb	r3, [r7, #6]
 8001a40:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a42:	797b      	ldrb	r3, [r7, #5]
 8001a44:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	f107 020c 	add.w	r2, r7, #12
 8001a4e:	230a      	movs	r3, #10
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2302      	movs	r3, #2
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <ssd1306_I2C_Write+0x38>)
 8001a56:	f001 f9ef 	bl	8002e38 <HAL_I2C_Master_Transmit>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20004548 	.word	0x20004548

08001a68 <SSD1306_Menu>:

/////////////////////////////////////////////////////////////////////////////////////////
//////////////////////[BASE MENU SCREEN]////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
void SSD1306_Menu()
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	SSD1306_Init (); 								// initialize the OLED screen
 8001a6c:	f7ff fd52 	bl	8001514 <SSD1306_Init>
	SSD1306_Clear();								// clear screen of any previous input information
 8001a70:	f7ff ff75 	bl	800195e <SSD1306_Clear>
	SSD1306_GotoXY (0, 0); 							// go to 0, 0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff feb6 	bl	80017e8 <SSD1306_GotoXY>
	SSD1306_Puts ("Music Synth", &Font_11x18, 1); 	// print Music Synth
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4916      	ldr	r1, [pc, #88]	; (8001ad8 <SSD1306_Menu+0x70>)
 8001a80:	4816      	ldr	r0, [pc, #88]	; (8001adc <SSD1306_Menu+0x74>)
 8001a82:	f7ff ff47 	bl	8001914 <SSD1306_Puts>
	SSD1306_GotoXY (0, 20); 						// go to 0, 20
 8001a86:	2114      	movs	r1, #20
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff fead 	bl	80017e8 <SSD1306_GotoXY>
	SSD1306_Puts ("By:", &Font_7x10, 1); 			// print by
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4913      	ldr	r1, [pc, #76]	; (8001ae0 <SSD1306_Menu+0x78>)
 8001a92:	4814      	ldr	r0, [pc, #80]	; (8001ae4 <SSD1306_Menu+0x7c>)
 8001a94:	f7ff ff3e 	bl	8001914 <SSD1306_Puts>
	SSD1306_GotoXY (0, 30);							// go to 0, 30
 8001a98:	211e      	movs	r1, #30
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fea4 	bl	80017e8 <SSD1306_GotoXY>
	SSD1306_Puts ("Joshua Mendoza", &Font_7x10, 1);	// print group member 1
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	490f      	ldr	r1, [pc, #60]	; (8001ae0 <SSD1306_Menu+0x78>)
 8001aa4:	4810      	ldr	r0, [pc, #64]	; (8001ae8 <SSD1306_Menu+0x80>)
 8001aa6:	f7ff ff35 	bl	8001914 <SSD1306_Puts>
	SSD1306_GotoXY (0, 40);							// go to 0, 40
 8001aaa:	2128      	movs	r1, #40	; 0x28
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff fe9b 	bl	80017e8 <SSD1306_GotoXY>
	SSD1306_Puts ("Megan Abundo", &Font_7x10, 1);	// print group member 2
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	490a      	ldr	r1, [pc, #40]	; (8001ae0 <SSD1306_Menu+0x78>)
 8001ab6:	480d      	ldr	r0, [pc, #52]	; (8001aec <SSD1306_Menu+0x84>)
 8001ab8:	f7ff ff2c 	bl	8001914 <SSD1306_Puts>
	SSD1306_GotoXY (0, 50);							// go to 0,50
 8001abc:	2132      	movs	r1, #50	; 0x32
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fe92 	bl	80017e8 <SSD1306_GotoXY>
	SSD1306_Puts ("Paris Villarrial", &Font_7x10, 1);// print group member 3
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4906      	ldr	r1, [pc, #24]	; (8001ae0 <SSD1306_Menu+0x78>)
 8001ac8:	4809      	ldr	r0, [pc, #36]	; (8001af0 <SSD1306_Menu+0x88>)
 8001aca:	f7ff ff23 	bl	8001914 <SSD1306_Puts>
	SSD1306_UpdateScreen(); 						// update screen with new input information
 8001ace:	f7ff fde5 	bl	800169c <SSD1306_UpdateScreen>

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	08006424 	.word	0x08006424
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	08006430 	.word	0x08006430
 8001ae8:	08006434 	.word	0x08006434
 8001aec:	08006444 	.word	0x08006444
 8001af0:	08006454 	.word	0x08006454

08001af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_MspInit+0x44>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <HAL_MspInit+0x44>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <HAL_MspInit+0x44>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_MspInit+0x44>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_MspInit+0x44>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_MspInit+0x44>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <HAL_I2C_MspInit+0x7c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d127      	bne.n	8001bae <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <HAL_I2C_MspInit+0x80>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a16      	ldr	r2, [pc, #88]	; (8001bbc <HAL_I2C_MspInit+0x80>)
 8001b64:	f043 0320 	orr.w	r3, r3, #32
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <HAL_I2C_MspInit+0x80>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b76:	2303      	movs	r3, #3
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b7a:	2312      	movs	r3, #18
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b86:	2304      	movs	r3, #4
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <HAL_I2C_MspInit+0x84>)
 8001b92:	f000 fefb 	bl	800298c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_I2C_MspInit+0x80>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <HAL_I2C_MspInit+0x80>)
 8001b9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_I2C_MspInit+0x80>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	; 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40005800 	.word	0x40005800
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40021400 	.word	0x40021400

08001bc4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <HAL_I2S_MspInit+0x7c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d127      	bne.n	8001c36 <HAL_I2S_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_I2S_MspInit+0x80>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a16      	ldr	r2, [pc, #88]	; (8001c44 <HAL_I2S_MspInit+0x80>)
 8001bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <HAL_I2S_MspInit+0x80>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_I2S_MspInit+0x80>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <HAL_I2S_MspInit+0x80>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_I2S_MspInit+0x80>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001c16:	23b0      	movs	r3, #176	; 0xb0
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c26:	2305      	movs	r3, #5
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4805      	ldr	r0, [pc, #20]	; (8001c48 <HAL_I2S_MspInit+0x84>)
 8001c32:	f000 feab 	bl	800298c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40013000 	.word	0x40013000
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000

08001c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a3d      	ldr	r2, [pc, #244]	; (8001d60 <HAL_UART_MspInit+0x114>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d173      	bne.n	8001d56 <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <HAL_UART_MspInit+0x118>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a3c      	ldr	r2, [pc, #240]	; (8001d64 <HAL_UART_MspInit+0x118>)
 8001c74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <HAL_UART_MspInit+0x118>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <HAL_UART_MspInit+0x118>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a36      	ldr	r2, [pc, #216]	; (8001d64 <HAL_UART_MspInit+0x118>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <HAL_UART_MspInit+0x118>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <HAL_UART_MspInit+0x118>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a30      	ldr	r2, [pc, #192]	; (8001d64 <HAL_UART_MspInit+0x118>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_UART_MspInit+0x118>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4825      	ldr	r0, [pc, #148]	; (8001d68 <HAL_UART_MspInit+0x11c>)
 8001cd2:	f000 fe5b 	bl	800298c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481e      	ldr	r0, [pc, #120]	; (8001d6c <HAL_UART_MspInit+0x120>)
 8001cf4:	f000 fe4a 	bl	800298c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <HAL_UART_MspInit+0x128>)
 8001cfc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001d00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d04:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d18:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d2c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001d3a:	480d      	ldr	r0, [pc, #52]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001d3c:	f000 faae 	bl	800229c <HAL_DMA_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8001d46:	f7ff fbdf 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a08      	ldr	r2, [pc, #32]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001d4e:	671a      	str	r2, [r3, #112]	; 0x70
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40004c00 	.word	0x40004c00
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	200044e0 	.word	0x200044e0
 8001d74:	40026040 	.word	0x40026040

08001d78 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a30      	ldr	r2, [pc, #192]	; (8001e48 <HAL_SAI_MspInit+0xd0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d15a      	bne.n	8001e40 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001d8a:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <HAL_SAI_MspInit+0xd4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10b      	bne.n	8001daa <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001d92:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <HAL_SAI_MspInit+0xd8>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a2e      	ldr	r2, [pc, #184]	; (8001e50 <HAL_SAI_MspInit+0xd8>)
 8001d98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <HAL_SAI_MspInit+0xd8>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001daa:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <HAL_SAI_MspInit+0xd4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	4a26      	ldr	r2, [pc, #152]	; (8001e4c <HAL_SAI_MspInit+0xd4>)
 8001db2:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001db4:	2370      	movs	r3, #112	; 0x70
 8001db6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001dc4:	2306      	movs	r3, #6
 8001dc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4821      	ldr	r0, [pc, #132]	; (8001e54 <HAL_SAI_MspInit+0xdc>)
 8001dd0:	f000 fddc 	bl	800298c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001dd6:	4a21      	ldr	r2, [pc, #132]	; (8001e5c <HAL_SAI_MspInit+0xe4>)
 8001dd8:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001dec:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df2:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001df6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dfa:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e02:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0a:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001e18:	480f      	ldr	r0, [pc, #60]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001e1a:	f000 fa3f 	bl	800229c <HAL_DMA_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_SAI_MspInit+0xb0>
    {
      Error_Handler();
 8001e24:	f7ff fb70 	bl	8001508 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001e2c:	671a      	str	r2, [r3, #112]	; 0x70
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001e38:	66da      	str	r2, [r3, #108]	; 0x6c
 8001e3a:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_SAI_MspInit+0xe0>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8001e40:	bf00      	nop
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40015804 	.word	0x40015804
 8001e4c:	200044d0 	.word	0x200044d0
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40021000 	.word	0x40021000
 8001e58:	200045a0 	.word	0x200045a0
 8001e5c:	40026428 	.word	0x40026428

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <NMI_Handler+0x4>

08001e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler+0x4>

08001e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f000 f8c4 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <DMA1_Stream2_IRQHandler+0x10>)
 8001eba:	f000 fafd 	bl	80024b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200044e0 	.word	0x200044e0

08001ec8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <DMA2_Stream1_IRQHandler+0x10>)
 8001ece:	f000 faf3 	bl	80024b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200045a0 	.word	0x200045a0

08001edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <_sbrk+0x5c>)
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <_sbrk+0x60>)
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <_sbrk+0x64>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <_sbrk+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d207      	bcs.n	8001f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f0c:	f004 f974 	bl	80061f8 <__errno>
 8001f10:	4603      	mov	r3, r0
 8001f12:	220c      	movs	r2, #12
 8001f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	e009      	b.n	8001f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <_sbrk+0x64>)
 8001f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20080000 	.word	0x20080000
 8001f3c:	00000400 	.word	0x00000400
 8001f40:	200044d4 	.word	0x200044d4
 8001f44:	20004790 	.word	0x20004790

08001f48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <SystemInit+0x20>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <SystemInit+0x20>)
 8001f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f72:	490e      	ldr	r1, [pc, #56]	; (8001fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f74:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f88:	4c0b      	ldr	r4, [pc, #44]	; (8001fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f96:	f7ff ffd7 	bl	8001f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f9a:	f004 f933 	bl	8006204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9e:	f7fe fb3b 	bl	8000618 <main>
  bx  lr    
 8001fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fa4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fac:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001fb0:	0800cc2c 	.word	0x0800cc2c
  ldr r2, =_sbss
 8001fb4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001fb8:	20004790 	.word	0x20004790

08001fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fbc:	e7fe      	b.n	8001fbc <ADC_IRQHandler>

08001fbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc2:	2003      	movs	r0, #3
 8001fc4:	f000 f928 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc8:	200f      	movs	r0, #15
 8001fca:	f000 f805 	bl	8001fd8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001fce:	f7ff fd91 	bl	8001af4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f943 	bl	8002282 <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f000 f90b 	bl	800222e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000024 	.word	0x20000024
 8002030:	2000002c 	.word	0x2000002c
 8002034:	20000028 	.word	0x20000028

08002038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000002c 	.word	0x2000002c
 800205c:	2000477c 	.word	0x2000477c

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	2000477c 	.word	0x2000477c

08002078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <__NVIC_SetPriorityGrouping+0x40>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a6:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <__NVIC_SetPriorityGrouping+0x40>)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	60d3      	str	r3, [r2, #12]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00
 80020bc:	05fa0000 	.word	0x05fa0000

080020c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db0b      	blt.n	8002106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	4907      	ldr	r1, [pc, #28]	; (8002114 <__NVIC_EnableIRQ+0x38>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2001      	movs	r0, #1
 80020fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100

08002118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	db0a      	blt.n	8002142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	490c      	ldr	r1, [pc, #48]	; (8002164 <__NVIC_SetPriority+0x4c>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	440b      	add	r3, r1
 800213c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002140:	e00a      	b.n	8002158 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4908      	ldr	r1, [pc, #32]	; (8002168 <__NVIC_SetPriority+0x50>)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	3b04      	subs	r3, #4
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	440b      	add	r3, r1
 8002156:	761a      	strb	r2, [r3, #24]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000e100 	.word	0xe000e100
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f1c3 0307 	rsb	r3, r3, #7
 8002186:	2b04      	cmp	r3, #4
 8002188:	bf28      	it	cs
 800218a:	2304      	movcs	r3, #4
 800218c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3304      	adds	r3, #4
 8002192:	2b06      	cmp	r3, #6
 8002194:	d902      	bls.n	800219c <NVIC_EncodePriority+0x30>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3b03      	subs	r3, #3
 800219a:	e000      	b.n	800219e <NVIC_EncodePriority+0x32>
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43d9      	mvns	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	4313      	orrs	r3, r2
         );
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f7ff ff8e 	bl	8002118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff29 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff3e 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff8e 	bl	800216c <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5d 	bl	8002118 <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff31 	bl	80020dc <__NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa2 	bl	80021d4 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff feda 	bl	8002060 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e099      	b.n	80023ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d8:	e00f      	b.n	80022fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022da:	f7ff fec1 	bl	8002060 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d908      	bls.n	80022fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2203      	movs	r2, #3
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e078      	b.n	80023ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1e8      	bne.n	80022da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <HAL_DMA_Init+0x158>)
 8002314:	4013      	ands	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002326:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	2b04      	cmp	r3, #4
 8002352:	d107      	bne.n	8002364 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	4313      	orrs	r3, r2
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f023 0307 	bic.w	r3, r3, #7
 800237a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	2b04      	cmp	r3, #4
 800238c:	d117      	bne.n	80023be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00e      	beq.n	80023be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fa77 	bl	8002894 <DMA_CheckFifoParam>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2240      	movs	r2, #64	; 0x40
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023ba:	2301      	movs	r3, #1
 80023bc:	e016      	b.n	80023ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fa2e 	bl	8002828 <DMA_CalcBaseAndBitshift>
 80023cc:	4603      	mov	r3, r0
 80023ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	223f      	movs	r2, #63	; 0x3f
 80023d6:	409a      	lsls	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	e010803f 	.word	0xe010803f

080023f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_DMA_Start_IT+0x26>
 800241a:	2302      	movs	r3, #2
 800241c:	e048      	b.n	80024b0 <HAL_DMA_Start_IT+0xb8>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d137      	bne.n	80024a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2202      	movs	r2, #2
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f9c0 	bl	80027cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	223f      	movs	r2, #63	; 0x3f
 8002452:	409a      	lsls	r2, r3
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0216 	orr.w	r2, r2, #22
 8002466:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002476:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0208 	orr.w	r2, r2, #8
 800248e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e005      	b.n	80024ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
 80024ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80024c4:	4b92      	ldr	r3, [pc, #584]	; (8002710 <HAL_DMA_IRQHandler+0x258>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a92      	ldr	r2, [pc, #584]	; (8002714 <HAL_DMA_IRQHandler+0x25c>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	0a9b      	lsrs	r3, r3, #10
 80024d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	2208      	movs	r2, #8
 80024e4:	409a      	lsls	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d01a      	beq.n	8002524 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0204 	bic.w	r2, r2, #4
 800250a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	2208      	movs	r2, #8
 8002512:	409a      	lsls	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251c:	f043 0201 	orr.w	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	2201      	movs	r2, #1
 800252a:	409a      	lsls	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d012      	beq.n	800255a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002546:	2201      	movs	r2, #1
 8002548:	409a      	lsls	r2, r3
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	f043 0202 	orr.w	r2, r3, #2
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255e:	2204      	movs	r2, #4
 8002560:	409a      	lsls	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d012      	beq.n	8002590 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00b      	beq.n	8002590 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	2204      	movs	r2, #4
 800257e:	409a      	lsls	r2, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	f043 0204 	orr.w	r2, r3, #4
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	2210      	movs	r2, #16
 8002596:	409a      	lsls	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d043      	beq.n	8002628 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d03c      	beq.n	8002628 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	2210      	movs	r2, #16
 80025b4:	409a      	lsls	r2, r3
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d018      	beq.n	80025fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d108      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d024      	beq.n	8002628 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
 80025e6:	e01f      	b.n	8002628 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01b      	beq.n	8002628 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
 80025f8:	e016      	b.n	8002628 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d107      	bne.n	8002618 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0208 	bic.w	r2, r2, #8
 8002616:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	2220      	movs	r2, #32
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 808e 	beq.w	8002756 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8086 	beq.w	8002756 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	2220      	movs	r2, #32
 8002650:	409a      	lsls	r2, r3
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b05      	cmp	r3, #5
 8002660:	d136      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0216 	bic.w	r2, r2, #22
 8002670:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002680:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <HAL_DMA_IRQHandler+0x1da>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0208 	bic.w	r2, r2, #8
 80026a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a6:	223f      	movs	r2, #63	; 0x3f
 80026a8:	409a      	lsls	r2, r3
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d07d      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	4798      	blx	r3
        }
        return;
 80026ce:	e078      	b.n	80027c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01c      	beq.n	8002718 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d108      	bne.n	80026fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d030      	beq.n	8002756 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
 80026fc:	e02b      	b.n	8002756 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d027      	beq.n	8002756 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
 800270e:	e022      	b.n	8002756 <HAL_DMA_IRQHandler+0x29e>
 8002710:	20000024 	.word	0x20000024
 8002714:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0210 	bic.w	r2, r2, #16
 8002734:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	2b00      	cmp	r3, #0
 800275c:	d032      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d022      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2205      	movs	r2, #5
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3301      	adds	r3, #1
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	429a      	cmp	r2, r3
 800278c:	d307      	bcc.n	800279e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f2      	bne.n	8002782 <HAL_DMA_IRQHandler+0x2ca>
 800279c:	e000      	b.n	80027a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800279e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
 80027c0:	e000      	b.n	80027c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80027c2:	bf00      	nop
    }
  }
}
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop

080027cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b40      	cmp	r3, #64	; 0x40
 80027f8:	d108      	bne.n	800280c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800280a:	e007      	b.n	800281c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	3b10      	subs	r3, #16
 8002838:	4a13      	ldr	r2, [pc, #76]	; (8002888 <DMA_CalcBaseAndBitshift+0x60>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002842:	4a12      	ldr	r2, [pc, #72]	; (800288c <DMA_CalcBaseAndBitshift+0x64>)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d908      	bls.n	8002868 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <DMA_CalcBaseAndBitshift+0x68>)
 800285e:	4013      	ands	r3, r2
 8002860:	1d1a      	adds	r2, r3, #4
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	659a      	str	r2, [r3, #88]	; 0x58
 8002866:	e006      	b.n	8002876 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <DMA_CalcBaseAndBitshift+0x68>)
 8002870:	4013      	ands	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	aaaaaaab 	.word	0xaaaaaaab
 800288c:	0800cbb4 	.word	0x0800cbb4
 8002890:	fffffc00 	.word	0xfffffc00

08002894 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d11f      	bne.n	80028ee <DMA_CheckFifoParam+0x5a>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d856      	bhi.n	8002962 <DMA_CheckFifoParam+0xce>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <DMA_CheckFifoParam+0x28>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028df 	.word	0x080028df
 80028c4:	080028cd 	.word	0x080028cd
 80028c8:	08002963 	.word	0x08002963
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d046      	beq.n	8002966 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028dc:	e043      	b.n	8002966 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028e6:	d140      	bne.n	800296a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ec:	e03d      	b.n	800296a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f6:	d121      	bne.n	800293c <DMA_CheckFifoParam+0xa8>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d837      	bhi.n	800296e <DMA_CheckFifoParam+0xda>
 80028fe:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <DMA_CheckFifoParam+0x70>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	08002915 	.word	0x08002915
 8002908:	0800291b 	.word	0x0800291b
 800290c:	08002915 	.word	0x08002915
 8002910:	0800292d 	.word	0x0800292d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      break;
 8002918:	e030      	b.n	800297c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d025      	beq.n	8002972 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292a:	e022      	b.n	8002972 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002934:	d11f      	bne.n	8002976 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800293a:	e01c      	b.n	8002976 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d903      	bls.n	800294a <DMA_CheckFifoParam+0xb6>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d003      	beq.n	8002950 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002948:	e018      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      break;
 800294e:	e015      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00e      	beq.n	800297a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
      break;
 8002960:	e00b      	b.n	800297a <DMA_CheckFifoParam+0xe6>
      break;
 8002962:	bf00      	nop
 8002964:	e00a      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 8002966:	bf00      	nop
 8002968:	e008      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
 800296c:	e006      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 800296e:	bf00      	nop
 8002970:	e004      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
 8002974:	e002      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;   
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 800297a:	bf00      	nop
    }
  } 
  
  return status; 
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop

0800298c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	; 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	e175      	b.n	8002c98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029ac:	2201      	movs	r2, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	f040 8164 	bne.w	8002c92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d00b      	beq.n	80029ea <HAL_GPIO_Init+0x5e>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d007      	beq.n	80029ea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029de:	2b11      	cmp	r3, #17
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b12      	cmp	r3, #18
 80029e8:	d130      	bne.n	8002a4c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	2203      	movs	r2, #3
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a20:	2201      	movs	r2, #1
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 0201 	and.w	r2, r3, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	2203      	movs	r2, #3
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x100>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b12      	cmp	r3, #18
 8002a8a:	d123      	bne.n	8002ad4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	08da      	lsrs	r2, r3, #3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	08da      	lsrs	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3208      	adds	r2, #8
 8002ace:	69b9      	ldr	r1, [r7, #24]
 8002ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0203 	and.w	r2, r3, #3
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80be 	beq.w	8002c92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b16:	4b66      	ldr	r3, [pc, #408]	; (8002cb0 <HAL_GPIO_Init+0x324>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	4a65      	ldr	r2, [pc, #404]	; (8002cb0 <HAL_GPIO_Init+0x324>)
 8002b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b20:	6453      	str	r3, [r2, #68]	; 0x44
 8002b22:	4b63      	ldr	r3, [pc, #396]	; (8002cb0 <HAL_GPIO_Init+0x324>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b2e:	4a61      	ldr	r2, [pc, #388]	; (8002cb4 <HAL_GPIO_Init+0x328>)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	3302      	adds	r3, #2
 8002b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	220f      	movs	r2, #15
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a58      	ldr	r2, [pc, #352]	; (8002cb8 <HAL_GPIO_Init+0x32c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d037      	beq.n	8002bca <HAL_GPIO_Init+0x23e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a57      	ldr	r2, [pc, #348]	; (8002cbc <HAL_GPIO_Init+0x330>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d031      	beq.n	8002bc6 <HAL_GPIO_Init+0x23a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a56      	ldr	r2, [pc, #344]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d02b      	beq.n	8002bc2 <HAL_GPIO_Init+0x236>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a55      	ldr	r2, [pc, #340]	; (8002cc4 <HAL_GPIO_Init+0x338>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d025      	beq.n	8002bbe <HAL_GPIO_Init+0x232>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a54      	ldr	r2, [pc, #336]	; (8002cc8 <HAL_GPIO_Init+0x33c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d01f      	beq.n	8002bba <HAL_GPIO_Init+0x22e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a53      	ldr	r2, [pc, #332]	; (8002ccc <HAL_GPIO_Init+0x340>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d019      	beq.n	8002bb6 <HAL_GPIO_Init+0x22a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a52      	ldr	r2, [pc, #328]	; (8002cd0 <HAL_GPIO_Init+0x344>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_GPIO_Init+0x226>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a51      	ldr	r2, [pc, #324]	; (8002cd4 <HAL_GPIO_Init+0x348>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00d      	beq.n	8002bae <HAL_GPIO_Init+0x222>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a50      	ldr	r2, [pc, #320]	; (8002cd8 <HAL_GPIO_Init+0x34c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <HAL_GPIO_Init+0x21e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4f      	ldr	r2, [pc, #316]	; (8002cdc <HAL_GPIO_Init+0x350>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_GPIO_Init+0x21a>
 8002ba2:	2309      	movs	r3, #9
 8002ba4:	e012      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002ba6:	230a      	movs	r3, #10
 8002ba8:	e010      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002baa:	2308      	movs	r3, #8
 8002bac:	e00e      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bae:	2307      	movs	r3, #7
 8002bb0:	e00c      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bb2:	2306      	movs	r3, #6
 8002bb4:	e00a      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	e008      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e004      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e002      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	f002 0203 	and.w	r2, r2, #3
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4093      	lsls	r3, r2
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bdc:	4935      	ldr	r1, [pc, #212]	; (8002cb4 <HAL_GPIO_Init+0x328>)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <HAL_GPIO_Init+0x354>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c0e:	4a34      	ldr	r2, [pc, #208]	; (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c14:	4b32      	ldr	r3, [pc, #200]	; (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c38:	4a29      	ldr	r2, [pc, #164]	; (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3e:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c62:	4a1f      	ldr	r2, [pc, #124]	; (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c68:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c8c:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b0f      	cmp	r3, #15
 8002c9c:	f67f ae86 	bls.w	80029ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	40020400 	.word	0x40020400
 8002cc0:	40020800 	.word	0x40020800
 8002cc4:	40020c00 	.word	0x40020c00
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40021400 	.word	0x40021400
 8002cd0:	40021800 	.word	0x40021800
 8002cd4:	40021c00 	.word	0x40021c00
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	40022400 	.word	0x40022400
 8002ce0:	40013c00 	.word	0x40013c00

08002ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cf4:	787b      	ldrb	r3, [r7, #1]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfa:	887a      	ldrh	r2, [r7, #2]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d00:	e003      	b.n	8002d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	041a      	lsls	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	619a      	str	r2, [r3, #24]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e07f      	b.n	8002e2a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fe fefc 	bl	8001b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d107      	bne.n	8002d92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	e006      	b.n	8002da0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d104      	bne.n	8002db2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002db0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_I2C_Init+0x11c>)
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	ea42 0103 	orr.w	r1, r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	021a      	lsls	r2, r3, #8
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69d9      	ldr	r1, [r3, #28]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1a      	ldr	r2, [r3, #32]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	02008000 	.word	0x02008000

08002e38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	461a      	mov	r2, r3
 8002e44:	460b      	mov	r3, r1
 8002e46:	817b      	strh	r3, [r7, #10]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	f040 80da 	bne.w	800300e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_I2C_Master_Transmit+0x30>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e0d3      	b.n	8003010 <HAL_I2C_Master_Transmit+0x1d8>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e70:	f7ff f8f6 	bl	8002060 <HAL_GetTick>
 8002e74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	2319      	movs	r3, #25
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f9f8 	bl	8003278 <I2C_WaitOnFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0be      	b.n	8003010 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2221      	movs	r2, #33	; 0x21
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2210      	movs	r2, #16
 8002e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	893a      	ldrh	r2, [r7, #8]
 8002eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2bff      	cmp	r3, #255	; 0xff
 8002ec2:	d90e      	bls.n	8002ee2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	22ff      	movs	r2, #255	; 0xff
 8002ec8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	8979      	ldrh	r1, [r7, #10]
 8002ed2:	4b51      	ldr	r3, [pc, #324]	; (8003018 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 faee 	bl	80034bc <I2C_TransferConfig>
 8002ee0:	e06c      	b.n	8002fbc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	8979      	ldrh	r1, [r7, #10]
 8002ef4:	4b48      	ldr	r3, [pc, #288]	; (8003018 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fadd 	bl	80034bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002f02:	e05b      	b.n	8002fbc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	6a39      	ldr	r1, [r7, #32]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f9f5 	bl	80032f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e07b      	b.n	8003010 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	781a      	ldrb	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d034      	beq.n	8002fbc <HAL_I2C_Master_Transmit+0x184>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d130      	bne.n	8002fbc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	2200      	movs	r2, #0
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f987 	bl	8003278 <I2C_WaitOnFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e04d      	b.n	8003010 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2bff      	cmp	r3, #255	; 0xff
 8002f7c:	d90e      	bls.n	8002f9c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	22ff      	movs	r2, #255	; 0xff
 8002f82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	8979      	ldrh	r1, [r7, #10]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fa91 	bl	80034bc <I2C_TransferConfig>
 8002f9a:	e00f      	b.n	8002fbc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	8979      	ldrh	r1, [r7, #10]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fa80 	bl	80034bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d19e      	bne.n	8002f04 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	6a39      	ldr	r1, [r7, #32]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f9d4 	bl	8003378 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e01a      	b.n	8003010 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_I2C_Master_Transmit+0x1e4>)
 8002fee:	400b      	ands	r3, r1
 8002ff0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	80002000 	.word	0x80002000
 800301c:	fe00e800 	.word	0xfe00e800

08003020 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	460b      	mov	r3, r1
 800302e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b20      	cmp	r3, #32
 800303e:	f040 80ef 	bne.w	8003220 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800304c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003050:	d101      	bne.n	8003056 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	e0e5      	b.n	8003222 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_I2C_IsDeviceReady+0x44>
 8003060:	2302      	movs	r3, #2
 8003062:	e0de      	b.n	8003222 <HAL_I2C_IsDeviceReady+0x202>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2224      	movs	r2, #36	; 0x24
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_I2C_IsDeviceReady+0x6e>
 8003082:	897b      	ldrh	r3, [r7, #10]
 8003084:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003088:	4b68      	ldr	r3, [pc, #416]	; (800322c <HAL_I2C_IsDeviceReady+0x20c>)
 800308a:	4313      	orrs	r3, r2
 800308c:	e004      	b.n	8003098 <HAL_I2C_IsDeviceReady+0x78>
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003094:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800309e:	f7fe ffdf 	bl	8002060 <HAL_GetTick>
 80030a2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	bf0c      	ite	eq
 80030b2:	2301      	moveq	r3, #1
 80030b4:	2300      	movne	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80030d0:	e034      	b.n	800313c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d01a      	beq.n	8003110 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030da:	f7fe ffc1 	bl	8002060 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d302      	bcc.n	80030f0 <HAL_I2C_IsDeviceReady+0xd0>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10f      	bne.n	8003110 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e088      	b.n	8003222 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b20      	cmp	r3, #32
 800311c:	bf0c      	ite	eq
 800311e:	2301      	moveq	r3, #1
 8003120:	2300      	movne	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b10      	cmp	r3, #16
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800313c:	7ffb      	ldrb	r3, [r7, #31]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <HAL_I2C_IsDeviceReady+0x128>
 8003142:	7fbb      	ldrb	r3, [r7, #30]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0c4      	beq.n	80030d2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b10      	cmp	r3, #16
 8003154:	d01a      	beq.n	800318c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2200      	movs	r2, #0
 800315e:	2120      	movs	r1, #32
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f889 	bl	8003278 <I2C_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e058      	b.n	8003222 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2220      	movs	r2, #32
 8003176:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e04a      	b.n	8003222 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	2120      	movs	r1, #32
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f86e 	bl	8003278 <I2C_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e03d      	b.n	8003222 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2210      	movs	r2, #16
 80031ac:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2220      	movs	r2, #32
 80031b4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d118      	bne.n	80031f0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031cc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2200      	movs	r2, #0
 80031d6:	2120      	movs	r1, #32
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f84d 	bl	8003278 <I2C_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e01c      	b.n	8003222 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2220      	movs	r2, #32
 80031ee:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3301      	adds	r3, #1
 80031f4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	f63f af3d 	bhi.w	800307a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003220:	2302      	movs	r3, #2
  }
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	02002000 	.word	0x02002000

08003230 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b02      	cmp	r3, #2
 8003244:	d103      	bne.n	800324e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2200      	movs	r2, #0
 800324c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d007      	beq.n	800326c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	619a      	str	r2, [r3, #24]
  }
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003288:	e022      	b.n	80032d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d01e      	beq.n	80032d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003292:	f7fe fee5 	bl	8002060 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d302      	bcc.n	80032a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d113      	bne.n	80032d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e00f      	b.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4013      	ands	r3, r2
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	429a      	cmp	r2, r3
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d0cd      	beq.n	800328a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003304:	e02c      	b.n	8003360 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f870 	bl	80033f0 <I2C_IsAcknowledgeFailed>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e02a      	b.n	8003370 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d01e      	beq.n	8003360 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003322:	f7fe fe9d 	bl	8002060 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	429a      	cmp	r2, r3
 8003330:	d302      	bcc.n	8003338 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d113      	bne.n	8003360 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e007      	b.n	8003370 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b02      	cmp	r3, #2
 800336c:	d1cb      	bne.n	8003306 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003384:	e028      	b.n	80033d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f830 	bl	80033f0 <I2C_IsAcknowledgeFailed>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e026      	b.n	80033e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7fe fe61 	bl	8002060 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d113      	bne.n	80033d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e007      	b.n	80033e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d1cf      	bne.n	8003386 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b10      	cmp	r3, #16
 8003408:	d151      	bne.n	80034ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800340a:	e022      	b.n	8003452 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d01e      	beq.n	8003452 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003414:	f7fe fe24 	bl	8002060 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	429a      	cmp	r2, r3
 8003422:	d302      	bcc.n	800342a <I2C_IsAcknowledgeFailed+0x3a>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d113      	bne.n	8003452 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f043 0220 	orr.w	r2, r3, #32
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e02e      	b.n	80034b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b20      	cmp	r3, #32
 800345e:	d1d5      	bne.n	800340c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2210      	movs	r2, #16
 8003466:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2220      	movs	r2, #32
 800346e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7ff fedd 	bl	8003230 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003482:	400b      	ands	r3, r1
 8003484:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	f043 0204 	orr.w	r2, r3, #4
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	fe00e800 	.word	0xfe00e800

080034bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	817b      	strh	r3, [r7, #10]
 80034ca:	4613      	mov	r3, r2
 80034cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	0d5b      	lsrs	r3, r3, #21
 80034d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034dc:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <I2C_TransferConfig+0x58>)
 80034de:	430b      	orrs	r3, r1
 80034e0:	43db      	mvns	r3, r3
 80034e2:	ea02 0103 	and.w	r1, r2, r3
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034ec:	7a7b      	ldrb	r3, [r7, #9]
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	431a      	orrs	r2, r3
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	03ff63ff 	.word	0x03ff63ff

08003518 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b20      	cmp	r3, #32
 800352c:	d138      	bne.n	80035a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003538:	2302      	movs	r3, #2
 800353a:	e032      	b.n	80035a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2224      	movs	r2, #36	; 0x24
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0201 	bic.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800356a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	e000      	b.n	80035a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d139      	bne.n	8003638 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e033      	b.n	800363a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2224      	movs	r2, #36	; 0x24
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003600:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003638:	2302      	movs	r3, #2
  }
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e0d2      	b.n	8003800 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fe faa8 	bl	8001bc4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	69d9      	ldr	r1, [r3, #28]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b60      	ldr	r3, [pc, #384]	; (8003808 <HAL_I2S_Init+0x1c0>)
 8003688:	400b      	ands	r3, r1
 800368a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2202      	movs	r2, #2
 8003692:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d067      	beq.n	800376c <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d102      	bne.n	80036aa <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80036a4:	2310      	movs	r3, #16
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	e001      	b.n	80036ae <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80036aa:	2320      	movs	r3, #32
 80036ac:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d802      	bhi.n	80036bc <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d102      	bne.n	80036ca <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 80036c4:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_I2S_Init+0x1c4>)
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	e003      	b.n	80036d2 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f8a2 	bl	8003814 <I2S_GetClockFreq>
 80036d0:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036da:	d125      	bne.n	8003728 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d010      	beq.n	8003706 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	461a      	mov	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	3305      	adds	r3, #5
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	e01f      	b.n	8003746 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	461a      	mov	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003722:	3305      	adds	r3, #5
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	e00e      	b.n	8003746 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	461a      	mov	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	3305      	adds	r3, #5
 8003744:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4a31      	ldr	r2, [pc, #196]	; (8003810 <HAL_I2S_Init+0x1c8>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	08db      	lsrs	r3, r3, #3
 8003750:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	e003      	b.n	8003774 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800376c:	2302      	movs	r3, #2
 800376e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d902      	bls.n	8003780 <HAL_I2S_Init+0x138>
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	2bff      	cmp	r3, #255	; 0xff
 800377e:	d907      	bls.n	8003790 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003784:	f043 0210 	orr.w	r2, r3, #16
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e037      	b.n	8003800 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	ea42 0103 	orr.w	r1, r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69da      	ldr	r2, [r3, #28]
 80037aa:	4b17      	ldr	r3, [pc, #92]	; (8003808 <HAL_I2S_Init+0x1c0>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6851      	ldr	r1, [r2, #4]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6892      	ldr	r2, [r2, #8]
 80037b6:	4311      	orrs	r1, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	68d2      	ldr	r2, [r2, #12]
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6992      	ldr	r2, [r2, #24]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ce:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b30      	cmp	r3, #48	; 0x30
 80037d6:	d003      	beq.n	80037e0 <HAL_I2S_Init+0x198>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2bb0      	cmp	r3, #176	; 0xb0
 80037de:	d107      	bne.n	80037f0 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69da      	ldr	r2, [r3, #28]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	fffff040 	.word	0xfffff040
 800380c:	00bb8000 	.word	0x00bb8000
 8003810:	cccccccd 	.word	0xcccccccd

08003814 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d02d      	beq.n	8003880 <I2S_GetClockFreq+0x6c>
 8003824:	2b02      	cmp	r3, #2
 8003826:	d12e      	bne.n	8003886 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003828:	4b1c      	ldr	r3, [pc, #112]	; (800389c <I2S_GetClockFreq+0x88>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d108      	bne.n	8003846 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <I2S_GetClockFreq+0x88>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800383c:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <I2S_GetClockFreq+0x8c>)
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	e007      	b.n	8003856 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003846:	4b15      	ldr	r3, [pc, #84]	; (800389c <I2S_GetClockFreq+0x88>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800384e:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <I2S_GetClockFreq+0x90>)
 8003850:	fbb2 f3f3 	udiv	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8003856:	4b11      	ldr	r3, [pc, #68]	; (800389c <I2S_GetClockFreq+0x88>)
 8003858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385c:	0f1b      	lsrs	r3, r3, #28
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8003864:	4b0d      	ldr	r3, [pc, #52]	; (800389c <I2S_GetClockFreq+0x88>)
 8003866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800386a:	099b      	lsrs	r3, r3, #6
 800386c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	fb02 f203 	mul.w	r2, r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	fbb2 f3f3 	udiv	r3, r2, r3
 800387c:	613b      	str	r3, [r7, #16]

      break;
 800387e:	e005      	b.n	800388c <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <I2S_GetClockFreq+0x94>)
 8003882:	613b      	str	r3, [r7, #16]
      break;
 8003884:	e002      	b.n	800388c <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
      break;
 800388a:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 800388c:	693b      	ldr	r3, [r7, #16]
}
 800388e:	4618      	mov	r0, r3
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	00f42400 	.word	0x00f42400
 80038a4:	017d7840 	.word	0x017d7840
 80038a8:	00bb8000 	.word	0x00bb8000

080038ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <HAL_PWREx_EnableOverDrive+0x98>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4a22      	ldr	r2, [pc, #136]	; (8003944 <HAL_PWREx_EnableOverDrive+0x98>)
 80038bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c0:	6413      	str	r3, [r2, #64]	; 0x40
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <HAL_PWREx_EnableOverDrive+0x98>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038ce:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038da:	f7fe fbc1 	bl	8002060 <HAL_GetTick>
 80038de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038e0:	e009      	b.n	80038f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038e2:	f7fe fbbd 	bl	8002060 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038f0:	d901      	bls.n	80038f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e022      	b.n	800393c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038f6:	4b14      	ldr	r3, [pc, #80]	; (8003948 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003902:	d1ee      	bne.n	80038e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003904:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a0f      	ldr	r2, [pc, #60]	; (8003948 <HAL_PWREx_EnableOverDrive+0x9c>)
 800390a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003910:	f7fe fba6 	bl	8002060 <HAL_GetTick>
 8003914:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003916:	e009      	b.n	800392c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003918:	f7fe fba2 	bl	8002060 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003926:	d901      	bls.n	800392c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e007      	b.n	800393c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_PWREx_EnableOverDrive+0x9c>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003938:	d1ee      	bne.n	8003918 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40023800 	.word	0x40023800
 8003948:	40007000 	.word	0x40007000

0800394c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003954:	2300      	movs	r3, #0
 8003956:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e29b      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8087 	beq.w	8003a7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003970:	4b96      	ldr	r3, [pc, #600]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b04      	cmp	r3, #4
 800397a:	d00c      	beq.n	8003996 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397c:	4b93      	ldr	r3, [pc, #588]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b08      	cmp	r3, #8
 8003986:	d112      	bne.n	80039ae <HAL_RCC_OscConfig+0x62>
 8003988:	4b90      	ldr	r3, [pc, #576]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003994:	d10b      	bne.n	80039ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003996:	4b8d      	ldr	r3, [pc, #564]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d06c      	beq.n	8003a7c <HAL_RCC_OscConfig+0x130>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d168      	bne.n	8003a7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e275      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x7a>
 80039b8:	4b84      	ldr	r3, [pc, #528]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a83      	ldr	r2, [pc, #524]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e02e      	b.n	8003a24 <HAL_RCC_OscConfig+0xd8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x9c>
 80039ce:	4b7f      	ldr	r3, [pc, #508]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7e      	ldr	r2, [pc, #504]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b7c      	ldr	r3, [pc, #496]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7b      	ldr	r2, [pc, #492]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e01d      	b.n	8003a24 <HAL_RCC_OscConfig+0xd8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0xc0>
 80039f2:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a75      	ldr	r2, [pc, #468]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b73      	ldr	r3, [pc, #460]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a72      	ldr	r2, [pc, #456]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0xd8>
 8003a0c:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6e      	ldr	r2, [pc, #440]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b6c      	ldr	r3, [pc, #432]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a6b      	ldr	r2, [pc, #428]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fb18 	bl	8002060 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fe fb14 	bl	8002060 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e229      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b61      	ldr	r3, [pc, #388]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe8>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fe fb04 	bl	8002060 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fb00 	bl	8002060 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e215      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	4b57      	ldr	r3, [pc, #348]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x110>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d069      	beq.n	8003b5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a8a:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a96:	4b4d      	ldr	r3, [pc, #308]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d11c      	bne.n	8003adc <HAL_RCC_OscConfig+0x190>
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d116      	bne.n	8003adc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x17a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e1e9      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac6:	4b41      	ldr	r3, [pc, #260]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	493d      	ldr	r1, [pc, #244]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	e040      	b.n	8003b5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d023      	beq.n	8003b2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae4:	4b39      	ldr	r3, [pc, #228]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a38      	ldr	r2, [pc, #224]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe fab6 	bl	8002060 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af8:	f7fe fab2 	bl	8002060 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1c7      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0a:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b16:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4929      	ldr	r1, [pc, #164]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
 8003b2a:	e018      	b.n	8003b5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2c:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fe fa92 	bl	8002060 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b40:	f7fe fa8e 	bl	8002060 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e1a3      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d038      	beq.n	8003bdc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d019      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b76:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7e:	f7fe fa6f 	bl	8002060 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b86:	f7fe fa6b 	bl	8002060 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e180      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x23a>
 8003ba4:	e01a      	b.n	8003bdc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003baa:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb2:	f7fe fa55 	bl	8002060 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bba:	f7fe fa51 	bl	8002060 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d903      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e166      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
 8003bcc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd0:	4b92      	ldr	r3, [pc, #584]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ee      	bne.n	8003bba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80a4 	beq.w	8003d32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bea:	4b8c      	ldr	r3, [pc, #560]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	4b89      	ldr	r3, [pc, #548]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	4a88      	ldr	r2, [pc, #544]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6413      	str	r3, [r2, #64]	; 0x40
 8003c02:	4b86      	ldr	r3, [pc, #536]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c12:	4b83      	ldr	r3, [pc, #524]	; (8003e20 <HAL_RCC_OscConfig+0x4d4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d118      	bne.n	8003c50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c1e:	4b80      	ldr	r3, [pc, #512]	; (8003e20 <HAL_RCC_OscConfig+0x4d4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a7f      	ldr	r2, [pc, #508]	; (8003e20 <HAL_RCC_OscConfig+0x4d4>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2a:	f7fe fa19 	bl	8002060 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c32:	f7fe fa15 	bl	8002060 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b64      	cmp	r3, #100	; 0x64
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e12a      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c44:	4b76      	ldr	r3, [pc, #472]	; (8003e20 <HAL_RCC_OscConfig+0x4d4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d106      	bne.n	8003c66 <HAL_RCC_OscConfig+0x31a>
 8003c58:	4b70      	ldr	r3, [pc, #448]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a6f      	ldr	r2, [pc, #444]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	e02d      	b.n	8003cc2 <HAL_RCC_OscConfig+0x376>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x33c>
 8003c6e:	4b6b      	ldr	r3, [pc, #428]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a6a      	ldr	r2, [pc, #424]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	4b68      	ldr	r3, [pc, #416]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a67      	ldr	r2, [pc, #412]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c80:	f023 0304 	bic.w	r3, r3, #4
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
 8003c86:	e01c      	b.n	8003cc2 <HAL_RCC_OscConfig+0x376>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b05      	cmp	r3, #5
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCC_OscConfig+0x35e>
 8003c90:	4b62      	ldr	r3, [pc, #392]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	4a61      	ldr	r2, [pc, #388]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c96:	f043 0304 	orr.w	r3, r3, #4
 8003c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9c:	4b5f      	ldr	r3, [pc, #380]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	4a5e      	ldr	r2, [pc, #376]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca8:	e00b      	b.n	8003cc2 <HAL_RCC_OscConfig+0x376>
 8003caa:	4b5c      	ldr	r3, [pc, #368]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a5b      	ldr	r2, [pc, #364]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb6:	4b59      	ldr	r3, [pc, #356]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	4a58      	ldr	r2, [pc, #352]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003cbc:	f023 0304 	bic.w	r3, r3, #4
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d015      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fe f9c9 	bl	8002060 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fe f9c5 	bl	8002060 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e0d8      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce8:	4b4c      	ldr	r3, [pc, #304]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0ee      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x386>
 8003cf4:	e014      	b.n	8003d20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fe f9b3 	bl	8002060 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfc:	e00a      	b.n	8003d14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfe:	f7fe f9af 	bl	8002060 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e0c2      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d14:	4b41      	ldr	r3, [pc, #260]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1ee      	bne.n	8003cfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d105      	bne.n	8003d32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d26:	4b3d      	ldr	r3, [pc, #244]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	4a3c      	ldr	r2, [pc, #240]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80ae 	beq.w	8003e98 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d3c:	4b37      	ldr	r3, [pc, #220]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d06d      	beq.n	8003e24 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d14b      	bne.n	8003de8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d50:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a31      	ldr	r2, [pc, #196]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe f980 	bl	8002060 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fe f97c 	bl	8002060 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e091      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	019b      	lsls	r3, r3, #6
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	071b      	lsls	r3, r3, #28
 8003dae:	491b      	ldr	r1, [pc, #108]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fe f94e 	bl	8002060 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fe f94a 	bl	8002060 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e05f      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x47c>
 8003de6:	e057      	b.n	8003e98 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fe f934 	bl	8002060 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fe f930 	bl	8002060 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e045      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x4b0>
 8003e1a:	e03d      	b.n	8003e98 <HAL_RCC_OscConfig+0x54c>
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e24:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <HAL_RCC_OscConfig+0x558>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d030      	beq.n	8003e94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d129      	bne.n	8003e94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d122      	bne.n	8003e94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e54:	4013      	ands	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d119      	bne.n	8003e94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d10f      	bne.n	8003e94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d107      	bne.n	8003e94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800

08003ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0d0      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec0:	4b6a      	ldr	r3, [pc, #424]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d910      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ece:	4b67      	ldr	r3, [pc, #412]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 020f 	bic.w	r2, r3, #15
 8003ed6:	4965      	ldr	r1, [pc, #404]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ede:	4b63      	ldr	r3, [pc, #396]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0b8      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d020      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f08:	4b59      	ldr	r3, [pc, #356]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4a58      	ldr	r2, [pc, #352]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f20:	4b53      	ldr	r3, [pc, #332]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4a52      	ldr	r2, [pc, #328]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8003f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f2c:	4b50      	ldr	r3, [pc, #320]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	494d      	ldr	r1, [pc, #308]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d040      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	4b47      	ldr	r3, [pc, #284]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d115      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e07f      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d107      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6a:	4b41      	ldr	r3, [pc, #260]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e073      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7a:	4b3d      	ldr	r3, [pc, #244]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e06b      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f8a:	4b39      	ldr	r3, [pc, #228]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f023 0203 	bic.w	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4936      	ldr	r1, [pc, #216]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9c:	f7fe f860 	bl	8002060 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	e00a      	b.n	8003fba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa4:	f7fe f85c 	bl	8002060 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e053      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 020c 	and.w	r2, r3, #12
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d1eb      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b27      	ldr	r3, [pc, #156]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d210      	bcs.n	8003ffc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b24      	ldr	r3, [pc, #144]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 020f 	bic.w	r2, r3, #15
 8003fe2:	4922      	ldr	r1, [pc, #136]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b20      	ldr	r3, [pc, #128]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e032      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004008:	4b19      	ldr	r3, [pc, #100]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4916      	ldr	r1, [pc, #88]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	490e      	ldr	r1, [pc, #56]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800403a:	f000 f821 	bl	8004080 <HAL_RCC_GetSysClockFreq>
 800403e:	4602      	mov	r2, r0
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	490a      	ldr	r1, [pc, #40]	; (8004074 <HAL_RCC_ClockConfig+0x1cc>)
 800404c:	5ccb      	ldrb	r3, [r1, r3]
 800404e:	fa22 f303 	lsr.w	r3, r2, r3
 8004052:	4a09      	ldr	r2, [pc, #36]	; (8004078 <HAL_RCC_ClockConfig+0x1d0>)
 8004054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <HAL_RCC_ClockConfig+0x1d4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7fd ffbc 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40023c00 	.word	0x40023c00
 8004070:	40023800 	.word	0x40023800
 8004074:	0800cb9c 	.word	0x0800cb9c
 8004078:	20000024 	.word	0x20000024
 800407c:	20000028 	.word	0x20000028

08004080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004080:	b5b0      	push	{r4, r5, r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004086:	2100      	movs	r1, #0
 8004088:	6079      	str	r1, [r7, #4]
 800408a:	2100      	movs	r1, #0
 800408c:	60f9      	str	r1, [r7, #12]
 800408e:	2100      	movs	r1, #0
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004092:	2100      	movs	r1, #0
 8004094:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004096:	4952      	ldr	r1, [pc, #328]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004098:	6889      	ldr	r1, [r1, #8]
 800409a:	f001 010c 	and.w	r1, r1, #12
 800409e:	2908      	cmp	r1, #8
 80040a0:	d00d      	beq.n	80040be <HAL_RCC_GetSysClockFreq+0x3e>
 80040a2:	2908      	cmp	r1, #8
 80040a4:	f200 8094 	bhi.w	80041d0 <HAL_RCC_GetSysClockFreq+0x150>
 80040a8:	2900      	cmp	r1, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_RCC_GetSysClockFreq+0x32>
 80040ac:	2904      	cmp	r1, #4
 80040ae:	d003      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x38>
 80040b0:	e08e      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b2:	4b4c      	ldr	r3, [pc, #304]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80040b4:	60bb      	str	r3, [r7, #8]
      break;
 80040b6:	e08e      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040b8:	4b4b      	ldr	r3, [pc, #300]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80040ba:	60bb      	str	r3, [r7, #8]
      break;
 80040bc:	e08b      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040be:	4948      	ldr	r1, [pc, #288]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80040c0:	6849      	ldr	r1, [r1, #4]
 80040c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80040c6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040c8:	4945      	ldr	r1, [pc, #276]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80040ca:	6849      	ldr	r1, [r1, #4]
 80040cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80040d0:	2900      	cmp	r1, #0
 80040d2:	d024      	beq.n	800411e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d4:	4942      	ldr	r1, [pc, #264]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80040d6:	6849      	ldr	r1, [r1, #4]
 80040d8:	0989      	lsrs	r1, r1, #6
 80040da:	4608      	mov	r0, r1
 80040dc:	f04f 0100 	mov.w	r1, #0
 80040e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80040e4:	f04f 0500 	mov.w	r5, #0
 80040e8:	ea00 0204 	and.w	r2, r0, r4
 80040ec:	ea01 0305 	and.w	r3, r1, r5
 80040f0:	493d      	ldr	r1, [pc, #244]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80040f2:	fb01 f003 	mul.w	r0, r1, r3
 80040f6:	2100      	movs	r1, #0
 80040f8:	fb01 f102 	mul.w	r1, r1, r2
 80040fc:	1844      	adds	r4, r0, r1
 80040fe:	493a      	ldr	r1, [pc, #232]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004100:	fba2 0101 	umull	r0, r1, r2, r1
 8004104:	1863      	adds	r3, r4, r1
 8004106:	4619      	mov	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	461a      	mov	r2, r3
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	f7fc f892 	bl	8000238 <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4613      	mov	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e04a      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411e:	4b30      	ldr	r3, [pc, #192]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	099b      	lsrs	r3, r3, #6
 8004124:	461a      	mov	r2, r3
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	ea02 0400 	and.w	r4, r2, r0
 8004136:	ea03 0501 	and.w	r5, r3, r1
 800413a:	4620      	mov	r0, r4
 800413c:	4629      	mov	r1, r5
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	014b      	lsls	r3, r1, #5
 8004148:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800414c:	0142      	lsls	r2, r0, #5
 800414e:	4610      	mov	r0, r2
 8004150:	4619      	mov	r1, r3
 8004152:	1b00      	subs	r0, r0, r4
 8004154:	eb61 0105 	sbc.w	r1, r1, r5
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	018b      	lsls	r3, r1, #6
 8004162:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004166:	0182      	lsls	r2, r0, #6
 8004168:	1a12      	subs	r2, r2, r0
 800416a:	eb63 0301 	sbc.w	r3, r3, r1
 800416e:	f04f 0000 	mov.w	r0, #0
 8004172:	f04f 0100 	mov.w	r1, #0
 8004176:	00d9      	lsls	r1, r3, #3
 8004178:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800417c:	00d0      	lsls	r0, r2, #3
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	1912      	adds	r2, r2, r4
 8004184:	eb45 0303 	adc.w	r3, r5, r3
 8004188:	f04f 0000 	mov.w	r0, #0
 800418c:	f04f 0100 	mov.w	r1, #0
 8004190:	0299      	lsls	r1, r3, #10
 8004192:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004196:	0290      	lsls	r0, r2, #10
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	f7fc f846 	bl	8000238 <__aeabi_uldivmod>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4613      	mov	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	3301      	adds	r3, #1
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	60bb      	str	r3, [r7, #8]
      break;
 80041ce:	e002      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d0:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80041d2:	60bb      	str	r3, [r7, #8]
      break;
 80041d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041d6:	68bb      	ldr	r3, [r7, #8]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bdb0      	pop	{r4, r5, r7, pc}
 80041e0:	40023800 	.word	0x40023800
 80041e4:	00f42400 	.word	0x00f42400
 80041e8:	017d7840 	.word	0x017d7840

080041ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <HAL_RCC_GetHCLKFreq+0x14>)
 80041f2:	681b      	ldr	r3, [r3, #0]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20000024 	.word	0x20000024

08004204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004208:	f7ff fff0 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0a9b      	lsrs	r3, r3, #10
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4903      	ldr	r1, [pc, #12]	; (8004228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40023800 	.word	0x40023800
 8004228:	0800cbac 	.word	0x0800cbac

0800422c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004230:	f7ff ffdc 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0b5b      	lsrs	r3, r3, #13
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	; (8004250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	0800cbac 	.word	0x0800cbac

08004254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d012      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800427c:	4b69      	ldr	r3, [pc, #420]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4a68      	ldr	r2, [pc, #416]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004282:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004286:	6093      	str	r3, [r2, #8]
 8004288:	4b66      	ldr	r3, [pc, #408]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004290:	4964      	ldr	r1, [pc, #400]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800429e:	2301      	movs	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d017      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042ae:	4b5d      	ldr	r3, [pc, #372]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	4959      	ldr	r1, [pc, #356]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042cc:	d101      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042da:	2301      	movs	r3, #1
 80042dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d017      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042ea:	4b4e      	ldr	r3, [pc, #312]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	494a      	ldr	r1, [pc, #296]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004308:	d101      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004316:	2301      	movs	r3, #1
 8004318:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004326:	2301      	movs	r3, #1
 8004328:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 808b 	beq.w	800444e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004338:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	4a39      	ldr	r2, [pc, #228]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004342:	6413      	str	r3, [r2, #64]	; 0x40
 8004344:	4b37      	ldr	r3, [pc, #220]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004350:	4b35      	ldr	r3, [pc, #212]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a34      	ldr	r2, [pc, #208]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435c:	f7fd fe80 	bl	8002060 <HAL_GetTick>
 8004360:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004364:	f7fd fe7c 	bl	8002060 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e38f      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004376:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004382:	4b28      	ldr	r3, [pc, #160]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d035      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	429a      	cmp	r2, r3
 800439e:	d02e      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a0:	4b20      	ldr	r3, [pc, #128]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043aa:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b6:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	4a1a      	ldr	r2, [pc, #104]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043c2:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043c8:	4b16      	ldr	r3, [pc, #88]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d114      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fd fe44 	bl	8002060 <HAL_GetTick>
 80043d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043da:	e00a      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043dc:	f7fd fe40 	bl	8002060 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e351      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f2:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0ee      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800440a:	d111      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800441a:	400b      	ands	r3, r1
 800441c:	4901      	ldr	r1, [pc, #4]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441e:	4313      	orrs	r3, r2
 8004420:	608b      	str	r3, [r1, #8]
 8004422:	e00b      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004424:	40023800 	.word	0x40023800
 8004428:	40007000 	.word	0x40007000
 800442c:	0ffffcff 	.word	0x0ffffcff
 8004430:	4bb3      	ldr	r3, [pc, #716]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4ab2      	ldr	r2, [pc, #712]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004436:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800443a:	6093      	str	r3, [r2, #8]
 800443c:	4bb0      	ldr	r3, [pc, #704]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800443e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004448:	49ad      	ldr	r1, [pc, #692]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800444a:	4313      	orrs	r3, r2
 800444c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b00      	cmp	r3, #0
 8004458:	d010      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800445a:	4ba9      	ldr	r3, [pc, #676]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800445c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004460:	4aa7      	ldr	r2, [pc, #668]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004466:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800446a:	4ba5      	ldr	r3, [pc, #660]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800446c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	49a2      	ldr	r1, [pc, #648]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004488:	4b9d      	ldr	r3, [pc, #628]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004496:	499a      	ldr	r1, [pc, #616]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044aa:	4b95      	ldr	r3, [pc, #596]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b8:	4991      	ldr	r1, [pc, #580]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044cc:	4b8c      	ldr	r3, [pc, #560]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044da:	4989      	ldr	r1, [pc, #548]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044ee:	4b84      	ldr	r3, [pc, #528]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	4980      	ldr	r1, [pc, #512]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004510:	4b7b      	ldr	r3, [pc, #492]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f023 0203 	bic.w	r2, r3, #3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	4978      	ldr	r1, [pc, #480]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004532:	4b73      	ldr	r3, [pc, #460]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f023 020c 	bic.w	r2, r3, #12
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004540:	496f      	ldr	r1, [pc, #444]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004554:	4b6a      	ldr	r3, [pc, #424]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004562:	4967      	ldr	r1, [pc, #412]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004576:	4b62      	ldr	r3, [pc, #392]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	495e      	ldr	r1, [pc, #376]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004598:	4b59      	ldr	r3, [pc, #356]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800459a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	4956      	ldr	r1, [pc, #344]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045ba:	4b51      	ldr	r3, [pc, #324]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	494d      	ldr	r1, [pc, #308]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045dc:	4b48      	ldr	r3, [pc, #288]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ea:	4945      	ldr	r1, [pc, #276]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045fe:	4b40      	ldr	r3, [pc, #256]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004604:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460c:	493c      	ldr	r1, [pc, #240]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004620:	4b37      	ldr	r3, [pc, #220]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800462e:	4934      	ldr	r1, [pc, #208]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d011      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004642:	4b2f      	ldr	r3, [pc, #188]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004648:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004650:	492b      	ldr	r1, [pc, #172]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004660:	d101      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004662:	2301      	movs	r3, #1
 8004664:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004672:	2301      	movs	r3, #1
 8004674:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004682:	4b1f      	ldr	r3, [pc, #124]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004690:	491b      	ldr	r1, [pc, #108]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046a4:	4b16      	ldr	r3, [pc, #88]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b4:	4912      	ldr	r1, [pc, #72]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00b      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80046c8:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d8:	4909      	ldr	r1, [pc, #36]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00f      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046ec:	4b04      	ldr	r3, [pc, #16]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	e002      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80046fe:	bf00      	nop
 8004700:	40023800 	.word	0x40023800
 8004704:	4986      	ldr	r1, [pc, #536]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004718:	4b81      	ldr	r3, [pc, #516]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800471a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800471e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004728:	497d      	ldr	r1, [pc, #500]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d006      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80d6 	beq.w	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004744:	4b76      	ldr	r3, [pc, #472]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a75      	ldr	r2, [pc, #468]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800474a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800474e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004750:	f7fd fc86 	bl	8002060 <HAL_GetTick>
 8004754:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004758:	f7fd fc82 	bl	8002060 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	; 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e195      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800476a:	4b6d      	ldr	r3, [pc, #436]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d021      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004786:	2b00      	cmp	r3, #0
 8004788:	d11d      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800478a:	4b65      	ldr	r3, [pc, #404]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800478c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004798:	4b61      	ldr	r3, [pc, #388]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800479a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479e:	0e1b      	lsrs	r3, r3, #24
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	019a      	lsls	r2, r3, #6
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	061b      	lsls	r3, r3, #24
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	071b      	lsls	r3, r3, #28
 80047be:	4958      	ldr	r1, [pc, #352]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d004      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d02e      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047f0:	d129      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047f2:	4b4b      	ldr	r3, [pc, #300]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f8:	0c1b      	lsrs	r3, r3, #16
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004800:	4b47      	ldr	r3, [pc, #284]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004806:	0f1b      	lsrs	r3, r3, #28
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	019a      	lsls	r2, r3, #6
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	061b      	lsls	r3, r3, #24
 8004820:	431a      	orrs	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	071b      	lsls	r3, r3, #28
 8004826:	493e      	ldr	r1, [pc, #248]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800482e:	4b3c      	ldr	r3, [pc, #240]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004834:	f023 021f 	bic.w	r2, r3, #31
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	3b01      	subs	r3, #1
 800483e:	4938      	ldr	r1, [pc, #224]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01d      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004852:	4b33      	ldr	r3, [pc, #204]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004858:	0e1b      	lsrs	r3, r3, #24
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004860:	4b2f      	ldr	r3, [pc, #188]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004866:	0f1b      	lsrs	r3, r3, #28
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	019a      	lsls	r2, r3, #6
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	041b      	lsls	r3, r3, #16
 800487a:	431a      	orrs	r2, r3
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	061b      	lsls	r3, r3, #24
 8004880:	431a      	orrs	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	071b      	lsls	r3, r3, #28
 8004886:	4926      	ldr	r1, [pc, #152]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d011      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	019a      	lsls	r2, r3, #6
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	041b      	lsls	r3, r3, #16
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	061b      	lsls	r3, r3, #24
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	071b      	lsls	r3, r3, #28
 80048b6:	491a      	ldr	r1, [pc, #104]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048be:	4b18      	ldr	r3, [pc, #96]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a17      	ldr	r2, [pc, #92]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ca:	f7fd fbc9 	bl	8002060 <HAL_GetTick>
 80048ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048d2:	f7fd fbc5 	bl	8002060 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b64      	cmp	r3, #100	; 0x64
 80048de:	d901      	bls.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e0d8      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048e4:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	f040 80ce 	bne.w	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a08      	ldr	r2, [pc, #32]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004904:	f7fd fbac 	bl	8002060 <HAL_GetTick>
 8004908:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800490a:	e00b      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800490c:	f7fd fba8 	bl	8002060 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d904      	bls.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0bb      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800491e:	bf00      	nop
 8004920:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004924:	4b5e      	ldr	r3, [pc, #376]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800492c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004930:	d0ec      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800494e:	2b00      	cmp	r3, #0
 8004950:	d02e      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d12a      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800495a:	4b51      	ldr	r3, [pc, #324]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004968:	4b4d      	ldr	r3, [pc, #308]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496e:	0f1b      	lsrs	r3, r3, #28
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	019a      	lsls	r2, r3, #6
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	041b      	lsls	r3, r3, #16
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	061b      	lsls	r3, r3, #24
 8004988:	431a      	orrs	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	071b      	lsls	r3, r3, #28
 800498e:	4944      	ldr	r1, [pc, #272]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004996:	4b42      	ldr	r3, [pc, #264]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800499c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	3b01      	subs	r3, #1
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	493d      	ldr	r1, [pc, #244]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d022      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049c4:	d11d      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049c6:	4b36      	ldr	r3, [pc, #216]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	0e1b      	lsrs	r3, r3, #24
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049d4:	4b32      	ldr	r3, [pc, #200]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	0f1b      	lsrs	r3, r3, #28
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	019a      	lsls	r2, r3, #6
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	041b      	lsls	r3, r3, #16
 80049ee:	431a      	orrs	r2, r3
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	061b      	lsls	r3, r3, #24
 80049f4:	431a      	orrs	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	071b      	lsls	r3, r3, #28
 80049fa:	4929      	ldr	r1, [pc, #164]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d028      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a0e:	4b24      	ldr	r3, [pc, #144]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	0e1b      	lsrs	r3, r3, #24
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a1c:	4b20      	ldr	r3, [pc, #128]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	0c1b      	lsrs	r3, r3, #16
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	019a      	lsls	r2, r3, #6
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	431a      	orrs	r2, r3
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	061b      	lsls	r3, r3, #24
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	071b      	lsls	r3, r3, #28
 8004a42:	4917      	ldr	r1, [pc, #92]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a4a:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	4911      	ldr	r1, [pc, #68]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a60:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a0e      	ldr	r2, [pc, #56]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6c:	f7fd faf8 	bl	8002060 <HAL_GetTick>
 8004a70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a74:	f7fd faf4 	bl	8002060 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e007      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a86:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a92:	d1ef      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800

08004aa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ac2:	f040 80a3 	bne.w	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004ac6:	4bac      	ldr	r3, [pc, #688]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004acc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004ad4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004adc:	f000 808a 	beq.w	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ae6:	f200 8093 	bhi.w	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004af0:	d07d      	beq.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004af8:	f200 808a 	bhi.w	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d004      	beq.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b08:	d039      	beq.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004b0a:	e081      	b.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004b0c:	4b9a      	ldr	r3, [pc, #616]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d108      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b18:	4b97      	ldr	r3, [pc, #604]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b20:	4a96      	ldr	r2, [pc, #600]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	e007      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004b2a:	4b93      	ldr	r3, [pc, #588]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b32:	4a93      	ldr	r2, [pc, #588]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004b3a:	4b8f      	ldr	r3, [pc, #572]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	0e1b      	lsrs	r3, r3, #24
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004b48:	4b8b      	ldr	r3, [pc, #556]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	099b      	lsrs	r3, r3, #6
 8004b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	fb02 f203 	mul.w	r2, r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004b62:	4b85      	ldr	r3, [pc, #532]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	f003 031f 	and.w	r3, r3, #31
 8004b6e:	3301      	adds	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	617b      	str	r3, [r7, #20]
        break;
 8004b7c:	e049      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004b7e:	4b7e      	ldr	r3, [pc, #504]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d108      	bne.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b8a:	4b7b      	ldr	r3, [pc, #492]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b92:	4a7a      	ldr	r2, [pc, #488]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	e007      	b.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004b9c:	4b76      	ldr	r3, [pc, #472]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba4:	4a76      	ldr	r2, [pc, #472]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004bac:	4b72      	ldr	r3, [pc, #456]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb2:	0e1b      	lsrs	r3, r3, #24
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004bba:	4b6f      	ldr	r3, [pc, #444]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc0:	099b      	lsrs	r3, r3, #6
 8004bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	fb02 f203 	mul.w	r2, r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004bd4:	4b68      	ldr	r3, [pc, #416]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	3301      	adds	r3, #1
 8004be0:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	617b      	str	r3, [r7, #20]
        break;
 8004bec:	e011      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004bee:	4b65      	ldr	r3, [pc, #404]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004bf0:	617b      	str	r3, [r7, #20]
        break;
 8004bf2:	e00e      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004bf4:	4b60      	ldr	r3, [pc, #384]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d102      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8004c00:	4b5e      	ldr	r3, [pc, #376]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004c02:	617b      	str	r3, [r7, #20]
        break;
 8004c04:	e005      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8004c06:	4b5e      	ldr	r3, [pc, #376]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004c08:	617b      	str	r3, [r7, #20]
        break;
 8004c0a:	e002      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8004c0c:	bf00      	nop
 8004c0e:	e000      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8004c10:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c18:	f040 80a3 	bne.w	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004c1c:	4b56      	ldr	r3, [pc, #344]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c22:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004c2a:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c32:	f000 808a 	beq.w	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c3c:	f200 8093 	bhi.w	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c46:	d07d      	beq.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c4e:	f200 808a 	bhi.w	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d004      	beq.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c5e:	d039      	beq.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004c60:	e081      	b.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004c62:	4b45      	ldr	r3, [pc, #276]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d108      	bne.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c6e:	4b42      	ldr	r3, [pc, #264]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c76:	4a41      	ldr	r2, [pc, #260]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	e007      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004c80:	4b3d      	ldr	r3, [pc, #244]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c88:	4a3d      	ldr	r2, [pc, #244]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004c90:	4b39      	ldr	r3, [pc, #228]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c96:	0e1b      	lsrs	r3, r3, #24
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004c9e:	4b36      	ldr	r3, [pc, #216]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	099b      	lsrs	r3, r3, #6
 8004ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	fb02 f203 	mul.w	r2, r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004cb8:	4b2f      	ldr	r3, [pc, #188]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
        break;
 8004cd2:	e049      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004cd4:	4b28      	ldr	r3, [pc, #160]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d108      	bne.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ce8:	4a24      	ldr	r2, [pc, #144]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	e007      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004cf2:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cfa:	4a21      	ldr	r2, [pc, #132]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d00:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004d02:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d08:	0e1b      	lsrs	r3, r3, #24
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	fb02 f203 	mul.w	r2, r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004d2a:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	3301      	adds	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	617b      	str	r3, [r7, #20]
        break;
 8004d42:	e011      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004d44:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d46:	617b      	str	r3, [r7, #20]
        break;
 8004d48:	e00e      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d102      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8004d56:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004d58:	617b      	str	r3, [r7, #20]
        break;
 8004d5a:	e005      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 8004d5c:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004d5e:	617b      	str	r3, [r7, #20]
        break;
 8004d60:	e002      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 8004d62:	bf00      	nop
 8004d64:	e000      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 8004d66:	bf00      	nop

  return frequency;
 8004d68:	697b      	ldr	r3, [r7, #20]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	00f42400 	.word	0x00f42400
 8004d80:	017d7840 	.word	0x017d7840
 8004d84:	00bb8000 	.word	0x00bb8000

08004d88 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d904      	bls.n	8004daa <HAL_SAI_InitProtocol+0x22>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	3b03      	subs	r3, #3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d812      	bhi.n	8004dce <HAL_SAI_InitProtocol+0x46>
 8004da8:	e008      	b.n	8004dbc <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fa55 	bl	8005260 <SAI_InitI2S>
 8004db6:	4603      	mov	r3, r0
 8004db8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dba:	e00b      	b.n	8004dd4 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 fafa 	bl	80053bc <SAI_InitPCM>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	75fb      	strb	r3, [r7, #23]
      break;
 8004dcc:	e002      	b.n	8004dd4 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd2:	bf00      	nop
  }

  if (status == HAL_OK)
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f808 	bl	8004df0 <HAL_SAI_Init>
 8004de0:	4603      	mov	r3, r0
 8004de2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e156      	b.n	80050bc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc ffa8 	bl	8001d78 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fb79 	bl	8005528 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d00c      	beq.n	8004e58 <HAL_SAI_Init+0x68>
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d80d      	bhi.n	8004e5e <HAL_SAI_Init+0x6e>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_SAI_Init+0x5c>
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d003      	beq.n	8004e52 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004e4a:	e008      	b.n	8004e5e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
      break;
 8004e50:	e006      	b.n	8004e60 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004e52:	2310      	movs	r3, #16
 8004e54:	61fb      	str	r3, [r7, #28]
      break;
 8004e56:	e003      	b.n	8004e60 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004e58:	2320      	movs	r3, #32
 8004e5a:	61fb      	str	r3, [r7, #28]
      break;
 8004e5c:	e000      	b.n	8004e60 <HAL_SAI_Init+0x70>
      break;
 8004e5e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d81e      	bhi.n	8004ea6 <HAL_SAI_Init+0xb6>
 8004e68:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <HAL_SAI_Init+0x80>)
 8004e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6e:	bf00      	nop
 8004e70:	08004e81 	.word	0x08004e81
 8004e74:	08004e87 	.word	0x08004e87
 8004e78:	08004e8f 	.word	0x08004e8f
 8004e7c:	08004e97 	.word	0x08004e97
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
    }
    break;
 8004e84:	e010      	b.n	8004ea8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e8a:	617b      	str	r3, [r7, #20]
    }
    break;
 8004e8c:	e00c      	b.n	8004ea8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e92:	617b      	str	r3, [r7, #20]
    }
    break;
 8004e94:	e008      	b.n	8004ea8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e9a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004ea4:	e000      	b.n	8004ea8 <HAL_SAI_Init+0xb8>
    default:
      break;
 8004ea6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a85      	ldr	r2, [pc, #532]	; (80050c4 <HAL_SAI_Init+0x2d4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <HAL_SAI_Init+0xcc>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a84      	ldr	r2, [pc, #528]	; (80050c8 <HAL_SAI_Init+0x2d8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d103      	bne.n	8004ec4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004ebc:	4a83      	ldr	r2, [pc, #524]	; (80050cc <HAL_SAI_Init+0x2dc>)
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e002      	b.n	8004eca <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004ec4:	4a82      	ldr	r2, [pc, #520]	; (80050d0 <HAL_SAI_Init+0x2e0>)
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d04c      	beq.n	8004f6c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a7a      	ldr	r2, [pc, #488]	; (80050c4 <HAL_SAI_Init+0x2d4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_SAI_Init+0xfa>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a78      	ldr	r2, [pc, #480]	; (80050c8 <HAL_SAI_Init+0x2d8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d104      	bne.n	8004ef4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004eea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004eee:	f7ff fdd9 	bl	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ef2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a76      	ldr	r2, [pc, #472]	; (80050d4 <HAL_SAI_Init+0x2e4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d004      	beq.n	8004f08 <HAL_SAI_Init+0x118>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a75      	ldr	r2, [pc, #468]	; (80050d8 <HAL_SAI_Init+0x2e8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d104      	bne.n	8004f12 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004f08:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004f0c:	f7ff fdca 	bl	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f10:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	025b      	lsls	r3, r3, #9
 8004f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f28:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4a6b      	ldr	r2, [pc, #428]	; (80050dc <HAL_SAI_Init+0x2ec>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	08da      	lsrs	r2, r3, #3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	4b68      	ldr	r3, [pc, #416]	; (80050dc <HAL_SAI_Init+0x2ec>)
 8004f3c:	fba3 2301 	umull	r2, r3, r3, r1
 8004f40:	08da      	lsrs	r2, r3, #3
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	1aca      	subs	r2, r1, r3
 8004f4c:	2a08      	cmp	r2, #8
 8004f4e:	d904      	bls.n	8004f5a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d104      	bne.n	8004f6c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	085a      	lsrs	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_SAI_Init+0x18c>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d109      	bne.n	8004f90 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_SAI_Init+0x198>
 8004f84:	2300      	movs	r3, #0
 8004f86:	e001      	b.n	8004f8c <HAL_SAI_Init+0x19c>
 8004f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	e008      	b.n	8004fa2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d102      	bne.n	8004f9e <HAL_SAI_Init+0x1ae>
 8004f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f9c:	e000      	b.n	8004fa0 <HAL_SAI_Init+0x1b0>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6819      	ldr	r1, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4b4c      	ldr	r3, [pc, #304]	; (80050e0 <HAL_SAI_Init+0x2f0>)
 8004fae:	400b      	ands	r3, r1
 8004fb0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6819      	ldr	r1, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004fc6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8004fda:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004fe6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	051b      	lsls	r3, r3, #20
 8004fee:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b38      	ldr	r3, [pc, #224]	; (80050e4 <HAL_SAI_Init+0x2f4>)
 8005004:	400b      	ands	r3, r1
 8005006:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6899      	ldr	r1, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4b2d      	ldr	r3, [pc, #180]	; (80050e8 <HAL_SAI_Init+0x2f8>)
 8005032:	400b      	ands	r3, r1
 8005034:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6899      	ldr	r1, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005046:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800504c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005052:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005058:	3b01      	subs	r3, #1
 800505a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800505c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68d9      	ldr	r1, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005074:	400b      	ands	r3, r1
 8005076:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68d9      	ldr	r1, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508c:	041b      	lsls	r3, r3, #16
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005094:	3b01      	subs	r3, #1
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40015804 	.word	0x40015804
 80050c8:	40015824 	.word	0x40015824
 80050cc:	40015800 	.word	0x40015800
 80050d0:	40015c00 	.word	0x40015c00
 80050d4:	40015c04 	.word	0x40015c04
 80050d8:	40015c24 	.word	0x40015c24
 80050dc:	cccccccd 	.word	0xcccccccd
 80050e0:	ff05c010 	.word	0xff05c010
 80050e4:	ffff1ff0 	.word	0xffff1ff0
 80050e8:	fff88000 	.word	0xfff88000

080050ec <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80050fa:	f7fc ffb1 	bl	8002060 <HAL_GetTick>
 80050fe:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_SAI_Transmit_DMA+0x20>
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e093      	b.n	8005238 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	f040 808c 	bne.w	8005236 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_SAI_Transmit_DMA+0x40>
 8005128:	2302      	movs	r3, #2
 800512a:	e085      	b.n	8005238 <HAL_SAI_Transmit_DMA+0x14c>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	88fa      	ldrh	r2, [r7, #6]
 800513e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	88fa      	ldrh	r2, [r7, #6]
 8005146:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2212      	movs	r2, #18
 8005156:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800515e:	4a38      	ldr	r2, [pc, #224]	; (8005240 <HAL_SAI_Transmit_DMA+0x154>)
 8005160:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005166:	4a37      	ldr	r2, [pc, #220]	; (8005244 <HAL_SAI_Transmit_DMA+0x158>)
 8005168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516e:	4a36      	ldr	r2, [pc, #216]	; (8005248 <HAL_SAI_Transmit_DMA+0x15c>)
 8005170:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005176:	2200      	movs	r2, #0
 8005178:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005182:	4619      	mov	r1, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	331c      	adds	r3, #28
 800518a:	461a      	mov	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005192:	f7fd f931 	bl	80023f8 <HAL_DMA_Start_IT>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e047      	b.n	8005238 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80051a8:	2100      	movs	r1, #0
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f986 	bl	80054bc <SAI_InterruptFlag>
 80051b0:	4601      	mov	r1, r0
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80051ce:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80051d0:	e015      	b.n	80051fe <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80051d2:	f7fc ff45 	bl	8002060 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051e0:	d90d      	bls.n	80051fe <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e01c      	b.n	8005238 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0e2      	beq.n	80051d2 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d107      	bne.n	800522a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005228:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e000      	b.n	8005238 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8005236:	2302      	movs	r3, #2
  }
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	080055f9 	.word	0x080055f9
 8005244:	08005599 	.word	0x08005599
 8005248:	08005615 	.word	0x08005615

0800524c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <SAI_InitI2S+0x2a>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d103      	bne.n	8005292 <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005290:	e002      	b.n	8005298 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800529e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052a6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e076      	b.n	80053b0 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d107      	bne.n	80052d8 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80052d4:	651a      	str	r2, [r3, #80]	; 0x50
 80052d6:	e006      	b.n	80052e6 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052de:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	651a      	str	r2, [r3, #80]	; 0x50
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d84f      	bhi.n	800538c <SAI_InitI2S+0x12c>
 80052ec:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <SAI_InitI2S+0x94>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005305 	.word	0x08005305
 80052f8:	08005327 	.word	0x08005327
 80052fc:	08005349 	.word	0x08005349
 8005300:	0800536b 	.word	0x0800536b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2280      	movs	r2, #128	; 0x80
 8005308:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	011a      	lsls	r2, r3, #4
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2240      	movs	r2, #64	; 0x40
 8005322:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005324:	e034      	b.n	8005390 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2280      	movs	r2, #128	; 0x80
 800532a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	085b      	lsrs	r3, r3, #1
 8005330:	019a      	lsls	r2, r3, #6
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	085b      	lsrs	r3, r3, #1
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2280      	movs	r2, #128	; 0x80
 8005344:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005346:	e023      	b.n	8005390 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	22c0      	movs	r2, #192	; 0xc0
 800534c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	085b      	lsrs	r3, r3, #1
 8005352:	019a      	lsls	r2, r3, #6
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	085b      	lsrs	r3, r3, #1
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2280      	movs	r2, #128	; 0x80
 8005366:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005368:	e012      	b.n	8005390 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	22e0      	movs	r2, #224	; 0xe0
 800536e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	019a      	lsls	r2, r3, #6
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	085b      	lsrs	r3, r3, #1
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2280      	movs	r2, #128	; 0x80
 8005388:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800538a:	e001      	b.n	8005390 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e00f      	b.n	80053b0 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d10b      	bne.n	80053ae <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d102      	bne.n	80053a2 <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2210      	movs	r2, #16
 80053a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d102      	bne.n	80053ae <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2208      	movs	r2, #8
 80053ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <SAI_InitPCM+0x2a>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d103      	bne.n	80053ee <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80053ec:	e002      	b.n	80053f4 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005400:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005408:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800541c:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b04      	cmp	r3, #4
 8005422:	d103      	bne.n	800542c <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2201      	movs	r2, #1
 8005428:	645a      	str	r2, [r3, #68]	; 0x44
 800542a:	e002      	b.n	8005432 <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	220d      	movs	r2, #13
 8005430:	645a      	str	r2, [r3, #68]	; 0x44
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d837      	bhi.n	80054a8 <SAI_InitPCM+0xec>
 8005438:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <SAI_InitPCM+0x84>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005451 	.word	0x08005451
 8005444:	08005467 	.word	0x08005467
 8005448:	0800547d 	.word	0x0800547d
 800544c:	08005493 	.word	0x08005493
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2280      	movs	r2, #128	; 0x80
 8005454:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	011a      	lsls	r2, r3, #4
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2240      	movs	r2, #64	; 0x40
 8005462:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005464:	e022      	b.n	80054ac <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2280      	movs	r2, #128	; 0x80
 800546a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2280      	movs	r2, #128	; 0x80
 8005478:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800547a:	e017      	b.n	80054ac <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	22c0      	movs	r2, #192	; 0xc0
 8005480:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2280      	movs	r2, #128	; 0x80
 800548e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005490:	e00c      	b.n	80054ac <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	22e0      	movs	r2, #224	; 0xe0
 8005496:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2280      	movs	r2, #128	; 0x80
 80054a4:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80054a6:	e001      	b.n	80054ac <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop

080054bc <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d103      	bne.n	80054d8 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f043 0308 	orr.w	r3, r3, #8
 80054d6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d10b      	bne.n	80054f8 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d003      	beq.n	80054f0 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d103      	bne.n	80054f8 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f043 0310 	orr.w	r3, r3, #16
 80054f6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d003      	beq.n	8005508 <SAI_InterruptFlag+0x4c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d104      	bne.n	8005512 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	e003      	b.n	800551a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f043 0304 	orr.w	r3, r3, #4
 8005518:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800551a:	68fb      	ldr	r3, [r7, #12]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005530:	4b17      	ldr	r3, [pc, #92]	; (8005590 <SAI_Disable+0x68>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a17      	ldr	r2, [pc, #92]	; (8005594 <SAI_Disable+0x6c>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	0b1b      	lsrs	r3, r3, #12
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005552:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1e5a      	subs	r2, r3, #1
 8005558:	60fa      	str	r2, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005564:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	72fb      	strb	r3, [r7, #11]
      break;
 8005572:	e006      	b.n	8005582 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e8      	bne.n	8005554 <SAI_Disable+0x2c>

  return status;
 8005582:	7afb      	ldrb	r3, [r7, #11]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	20000024 	.word	0x20000024
 8005594:	95cbec1b 	.word	0x95cbec1b

08005598 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ae:	d01c      	beq.n	80055ea <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80055c6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80055c8:	2100      	movs	r1, #0
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f7ff ff76 	bl	80054bc <SAI_InterruptFlag>
 80055d0:	4603      	mov	r3, r0
 80055d2:	43d9      	mvns	r1, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	400a      	ands	r2, r1
 80055e0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f7fb facb 	bl	8000b86 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7fb fab2 	bl	8000b70 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005628:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005638:	2b01      	cmp	r3, #1
 800563a:	d004      	beq.n	8005646 <SAI_DMAError+0x32>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	2b01      	cmp	r3, #1
 8005644:	d112      	bne.n	800566c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005654:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff ff66 	bl	8005528 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff fded 	bl	800524c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e040      	b.n	800570e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005690:	2b00      	cmp	r3, #0
 8005692:	d106      	bne.n	80056a2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7fc fad5 	bl	8001c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2224      	movs	r2, #36	; 0x24
 80056a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0201 	bic.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f87f 	bl	80057bc <UART_SetConfig>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e022      	b.n	800570e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fad5 	bl	8005c80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0201 	orr.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fb5c 	bl	8005dc4 <UART_CheckIdleState>
 800570c:	4603      	mov	r3, r0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	4613      	mov	r3, r2
 8005722:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005728:	2b20      	cmp	r3, #32
 800572a:	d12c      	bne.n	8005786 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_UART_Receive_DMA+0x22>
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e025      	b.n	8005788 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_UART_Receive_DMA+0x34>
 8005746:	2302      	movs	r3, #2
 8005748:	e01e      	b.n	8005788 <HAL_UART_Receive_DMA+0x72>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005774:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	461a      	mov	r2, r3
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fbe7 	bl	8005f50 <UART_Start_Receive_DMA>
 8005782:	4603      	mov	r3, r0
 8005784:	e000      	b.n	8005788 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005786:	2302      	movs	r3, #2
  }
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	4ba7      	ldr	r3, [pc, #668]	; (8005a84 <UART_SetConfig+0x2c8>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	6979      	ldr	r1, [r7, #20]
 80057f0:	430b      	orrs	r3, r1
 80057f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	430a      	orrs	r2, r1
 800582c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a95      	ldr	r2, [pc, #596]	; (8005a88 <UART_SetConfig+0x2cc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d120      	bne.n	800587a <UART_SetConfig+0xbe>
 8005838:	4b94      	ldr	r3, [pc, #592]	; (8005a8c <UART_SetConfig+0x2d0>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	2b03      	cmp	r3, #3
 8005844:	d816      	bhi.n	8005874 <UART_SetConfig+0xb8>
 8005846:	a201      	add	r2, pc, #4	; (adr r2, 800584c <UART_SetConfig+0x90>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	0800585d 	.word	0x0800585d
 8005850:	08005869 	.word	0x08005869
 8005854:	08005863 	.word	0x08005863
 8005858:	0800586f 	.word	0x0800586f
 800585c:	2301      	movs	r3, #1
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e14f      	b.n	8005b02 <UART_SetConfig+0x346>
 8005862:	2302      	movs	r3, #2
 8005864:	77fb      	strb	r3, [r7, #31]
 8005866:	e14c      	b.n	8005b02 <UART_SetConfig+0x346>
 8005868:	2304      	movs	r3, #4
 800586a:	77fb      	strb	r3, [r7, #31]
 800586c:	e149      	b.n	8005b02 <UART_SetConfig+0x346>
 800586e:	2308      	movs	r3, #8
 8005870:	77fb      	strb	r3, [r7, #31]
 8005872:	e146      	b.n	8005b02 <UART_SetConfig+0x346>
 8005874:	2310      	movs	r3, #16
 8005876:	77fb      	strb	r3, [r7, #31]
 8005878:	e143      	b.n	8005b02 <UART_SetConfig+0x346>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a84      	ldr	r2, [pc, #528]	; (8005a90 <UART_SetConfig+0x2d4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d132      	bne.n	80058ea <UART_SetConfig+0x12e>
 8005884:	4b81      	ldr	r3, [pc, #516]	; (8005a8c <UART_SetConfig+0x2d0>)
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b0c      	cmp	r3, #12
 8005890:	d828      	bhi.n	80058e4 <UART_SetConfig+0x128>
 8005892:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <UART_SetConfig+0xdc>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058cd 	.word	0x080058cd
 800589c:	080058e5 	.word	0x080058e5
 80058a0:	080058e5 	.word	0x080058e5
 80058a4:	080058e5 	.word	0x080058e5
 80058a8:	080058d9 	.word	0x080058d9
 80058ac:	080058e5 	.word	0x080058e5
 80058b0:	080058e5 	.word	0x080058e5
 80058b4:	080058e5 	.word	0x080058e5
 80058b8:	080058d3 	.word	0x080058d3
 80058bc:	080058e5 	.word	0x080058e5
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058e5 	.word	0x080058e5
 80058c8:	080058df 	.word	0x080058df
 80058cc:	2300      	movs	r3, #0
 80058ce:	77fb      	strb	r3, [r7, #31]
 80058d0:	e117      	b.n	8005b02 <UART_SetConfig+0x346>
 80058d2:	2302      	movs	r3, #2
 80058d4:	77fb      	strb	r3, [r7, #31]
 80058d6:	e114      	b.n	8005b02 <UART_SetConfig+0x346>
 80058d8:	2304      	movs	r3, #4
 80058da:	77fb      	strb	r3, [r7, #31]
 80058dc:	e111      	b.n	8005b02 <UART_SetConfig+0x346>
 80058de:	2308      	movs	r3, #8
 80058e0:	77fb      	strb	r3, [r7, #31]
 80058e2:	e10e      	b.n	8005b02 <UART_SetConfig+0x346>
 80058e4:	2310      	movs	r3, #16
 80058e6:	77fb      	strb	r3, [r7, #31]
 80058e8:	e10b      	b.n	8005b02 <UART_SetConfig+0x346>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a69      	ldr	r2, [pc, #420]	; (8005a94 <UART_SetConfig+0x2d8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d120      	bne.n	8005936 <UART_SetConfig+0x17a>
 80058f4:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <UART_SetConfig+0x2d0>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058fe:	2b30      	cmp	r3, #48	; 0x30
 8005900:	d013      	beq.n	800592a <UART_SetConfig+0x16e>
 8005902:	2b30      	cmp	r3, #48	; 0x30
 8005904:	d814      	bhi.n	8005930 <UART_SetConfig+0x174>
 8005906:	2b20      	cmp	r3, #32
 8005908:	d009      	beq.n	800591e <UART_SetConfig+0x162>
 800590a:	2b20      	cmp	r3, #32
 800590c:	d810      	bhi.n	8005930 <UART_SetConfig+0x174>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <UART_SetConfig+0x15c>
 8005912:	2b10      	cmp	r3, #16
 8005914:	d006      	beq.n	8005924 <UART_SetConfig+0x168>
 8005916:	e00b      	b.n	8005930 <UART_SetConfig+0x174>
 8005918:	2300      	movs	r3, #0
 800591a:	77fb      	strb	r3, [r7, #31]
 800591c:	e0f1      	b.n	8005b02 <UART_SetConfig+0x346>
 800591e:	2302      	movs	r3, #2
 8005920:	77fb      	strb	r3, [r7, #31]
 8005922:	e0ee      	b.n	8005b02 <UART_SetConfig+0x346>
 8005924:	2304      	movs	r3, #4
 8005926:	77fb      	strb	r3, [r7, #31]
 8005928:	e0eb      	b.n	8005b02 <UART_SetConfig+0x346>
 800592a:	2308      	movs	r3, #8
 800592c:	77fb      	strb	r3, [r7, #31]
 800592e:	e0e8      	b.n	8005b02 <UART_SetConfig+0x346>
 8005930:	2310      	movs	r3, #16
 8005932:	77fb      	strb	r3, [r7, #31]
 8005934:	e0e5      	b.n	8005b02 <UART_SetConfig+0x346>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a57      	ldr	r2, [pc, #348]	; (8005a98 <UART_SetConfig+0x2dc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d120      	bne.n	8005982 <UART_SetConfig+0x1c6>
 8005940:	4b52      	ldr	r3, [pc, #328]	; (8005a8c <UART_SetConfig+0x2d0>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005946:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800594a:	2bc0      	cmp	r3, #192	; 0xc0
 800594c:	d013      	beq.n	8005976 <UART_SetConfig+0x1ba>
 800594e:	2bc0      	cmp	r3, #192	; 0xc0
 8005950:	d814      	bhi.n	800597c <UART_SetConfig+0x1c0>
 8005952:	2b80      	cmp	r3, #128	; 0x80
 8005954:	d009      	beq.n	800596a <UART_SetConfig+0x1ae>
 8005956:	2b80      	cmp	r3, #128	; 0x80
 8005958:	d810      	bhi.n	800597c <UART_SetConfig+0x1c0>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <UART_SetConfig+0x1a8>
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d006      	beq.n	8005970 <UART_SetConfig+0x1b4>
 8005962:	e00b      	b.n	800597c <UART_SetConfig+0x1c0>
 8005964:	2300      	movs	r3, #0
 8005966:	77fb      	strb	r3, [r7, #31]
 8005968:	e0cb      	b.n	8005b02 <UART_SetConfig+0x346>
 800596a:	2302      	movs	r3, #2
 800596c:	77fb      	strb	r3, [r7, #31]
 800596e:	e0c8      	b.n	8005b02 <UART_SetConfig+0x346>
 8005970:	2304      	movs	r3, #4
 8005972:	77fb      	strb	r3, [r7, #31]
 8005974:	e0c5      	b.n	8005b02 <UART_SetConfig+0x346>
 8005976:	2308      	movs	r3, #8
 8005978:	77fb      	strb	r3, [r7, #31]
 800597a:	e0c2      	b.n	8005b02 <UART_SetConfig+0x346>
 800597c:	2310      	movs	r3, #16
 800597e:	77fb      	strb	r3, [r7, #31]
 8005980:	e0bf      	b.n	8005b02 <UART_SetConfig+0x346>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a45      	ldr	r2, [pc, #276]	; (8005a9c <UART_SetConfig+0x2e0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d125      	bne.n	80059d8 <UART_SetConfig+0x21c>
 800598c:	4b3f      	ldr	r3, [pc, #252]	; (8005a8c <UART_SetConfig+0x2d0>)
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800599a:	d017      	beq.n	80059cc <UART_SetConfig+0x210>
 800599c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a0:	d817      	bhi.n	80059d2 <UART_SetConfig+0x216>
 80059a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a6:	d00b      	beq.n	80059c0 <UART_SetConfig+0x204>
 80059a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ac:	d811      	bhi.n	80059d2 <UART_SetConfig+0x216>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <UART_SetConfig+0x1fe>
 80059b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b6:	d006      	beq.n	80059c6 <UART_SetConfig+0x20a>
 80059b8:	e00b      	b.n	80059d2 <UART_SetConfig+0x216>
 80059ba:	2300      	movs	r3, #0
 80059bc:	77fb      	strb	r3, [r7, #31]
 80059be:	e0a0      	b.n	8005b02 <UART_SetConfig+0x346>
 80059c0:	2302      	movs	r3, #2
 80059c2:	77fb      	strb	r3, [r7, #31]
 80059c4:	e09d      	b.n	8005b02 <UART_SetConfig+0x346>
 80059c6:	2304      	movs	r3, #4
 80059c8:	77fb      	strb	r3, [r7, #31]
 80059ca:	e09a      	b.n	8005b02 <UART_SetConfig+0x346>
 80059cc:	2308      	movs	r3, #8
 80059ce:	77fb      	strb	r3, [r7, #31]
 80059d0:	e097      	b.n	8005b02 <UART_SetConfig+0x346>
 80059d2:	2310      	movs	r3, #16
 80059d4:	77fb      	strb	r3, [r7, #31]
 80059d6:	e094      	b.n	8005b02 <UART_SetConfig+0x346>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a30      	ldr	r2, [pc, #192]	; (8005aa0 <UART_SetConfig+0x2e4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d125      	bne.n	8005a2e <UART_SetConfig+0x272>
 80059e2:	4b2a      	ldr	r3, [pc, #168]	; (8005a8c <UART_SetConfig+0x2d0>)
 80059e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059f0:	d017      	beq.n	8005a22 <UART_SetConfig+0x266>
 80059f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059f6:	d817      	bhi.n	8005a28 <UART_SetConfig+0x26c>
 80059f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059fc:	d00b      	beq.n	8005a16 <UART_SetConfig+0x25a>
 80059fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a02:	d811      	bhi.n	8005a28 <UART_SetConfig+0x26c>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <UART_SetConfig+0x254>
 8005a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a0c:	d006      	beq.n	8005a1c <UART_SetConfig+0x260>
 8005a0e:	e00b      	b.n	8005a28 <UART_SetConfig+0x26c>
 8005a10:	2301      	movs	r3, #1
 8005a12:	77fb      	strb	r3, [r7, #31]
 8005a14:	e075      	b.n	8005b02 <UART_SetConfig+0x346>
 8005a16:	2302      	movs	r3, #2
 8005a18:	77fb      	strb	r3, [r7, #31]
 8005a1a:	e072      	b.n	8005b02 <UART_SetConfig+0x346>
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	77fb      	strb	r3, [r7, #31]
 8005a20:	e06f      	b.n	8005b02 <UART_SetConfig+0x346>
 8005a22:	2308      	movs	r3, #8
 8005a24:	77fb      	strb	r3, [r7, #31]
 8005a26:	e06c      	b.n	8005b02 <UART_SetConfig+0x346>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	77fb      	strb	r3, [r7, #31]
 8005a2c:	e069      	b.n	8005b02 <UART_SetConfig+0x346>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1c      	ldr	r2, [pc, #112]	; (8005aa4 <UART_SetConfig+0x2e8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d137      	bne.n	8005aa8 <UART_SetConfig+0x2ec>
 8005a38:	4b14      	ldr	r3, [pc, #80]	; (8005a8c <UART_SetConfig+0x2d0>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a46:	d017      	beq.n	8005a78 <UART_SetConfig+0x2bc>
 8005a48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a4c:	d817      	bhi.n	8005a7e <UART_SetConfig+0x2c2>
 8005a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a52:	d00b      	beq.n	8005a6c <UART_SetConfig+0x2b0>
 8005a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a58:	d811      	bhi.n	8005a7e <UART_SetConfig+0x2c2>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <UART_SetConfig+0x2aa>
 8005a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a62:	d006      	beq.n	8005a72 <UART_SetConfig+0x2b6>
 8005a64:	e00b      	b.n	8005a7e <UART_SetConfig+0x2c2>
 8005a66:	2300      	movs	r3, #0
 8005a68:	77fb      	strb	r3, [r7, #31]
 8005a6a:	e04a      	b.n	8005b02 <UART_SetConfig+0x346>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	77fb      	strb	r3, [r7, #31]
 8005a70:	e047      	b.n	8005b02 <UART_SetConfig+0x346>
 8005a72:	2304      	movs	r3, #4
 8005a74:	77fb      	strb	r3, [r7, #31]
 8005a76:	e044      	b.n	8005b02 <UART_SetConfig+0x346>
 8005a78:	2308      	movs	r3, #8
 8005a7a:	77fb      	strb	r3, [r7, #31]
 8005a7c:	e041      	b.n	8005b02 <UART_SetConfig+0x346>
 8005a7e:	2310      	movs	r3, #16
 8005a80:	77fb      	strb	r3, [r7, #31]
 8005a82:	e03e      	b.n	8005b02 <UART_SetConfig+0x346>
 8005a84:	efff69f3 	.word	0xefff69f3
 8005a88:	40011000 	.word	0x40011000
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	40004400 	.word	0x40004400
 8005a94:	40004800 	.word	0x40004800
 8005a98:	40004c00 	.word	0x40004c00
 8005a9c:	40005000 	.word	0x40005000
 8005aa0:	40011400 	.word	0x40011400
 8005aa4:	40007800 	.word	0x40007800
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a71      	ldr	r2, [pc, #452]	; (8005c74 <UART_SetConfig+0x4b8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d125      	bne.n	8005afe <UART_SetConfig+0x342>
 8005ab2:	4b71      	ldr	r3, [pc, #452]	; (8005c78 <UART_SetConfig+0x4bc>)
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005abc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ac0:	d017      	beq.n	8005af2 <UART_SetConfig+0x336>
 8005ac2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ac6:	d817      	bhi.n	8005af8 <UART_SetConfig+0x33c>
 8005ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005acc:	d00b      	beq.n	8005ae6 <UART_SetConfig+0x32a>
 8005ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad2:	d811      	bhi.n	8005af8 <UART_SetConfig+0x33c>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <UART_SetConfig+0x324>
 8005ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005adc:	d006      	beq.n	8005aec <UART_SetConfig+0x330>
 8005ade:	e00b      	b.n	8005af8 <UART_SetConfig+0x33c>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	77fb      	strb	r3, [r7, #31]
 8005ae4:	e00d      	b.n	8005b02 <UART_SetConfig+0x346>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	77fb      	strb	r3, [r7, #31]
 8005aea:	e00a      	b.n	8005b02 <UART_SetConfig+0x346>
 8005aec:	2304      	movs	r3, #4
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e007      	b.n	8005b02 <UART_SetConfig+0x346>
 8005af2:	2308      	movs	r3, #8
 8005af4:	77fb      	strb	r3, [r7, #31]
 8005af6:	e004      	b.n	8005b02 <UART_SetConfig+0x346>
 8005af8:	2310      	movs	r3, #16
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e001      	b.n	8005b02 <UART_SetConfig+0x346>
 8005afe:	2310      	movs	r3, #16
 8005b00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b0a:	d15b      	bne.n	8005bc4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005b0c:	7ffb      	ldrb	r3, [r7, #31]
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d827      	bhi.n	8005b62 <UART_SetConfig+0x3a6>
 8005b12:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <UART_SetConfig+0x35c>)
 8005b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b18:	08005b3d 	.word	0x08005b3d
 8005b1c:	08005b45 	.word	0x08005b45
 8005b20:	08005b4d 	.word	0x08005b4d
 8005b24:	08005b63 	.word	0x08005b63
 8005b28:	08005b53 	.word	0x08005b53
 8005b2c:	08005b63 	.word	0x08005b63
 8005b30:	08005b63 	.word	0x08005b63
 8005b34:	08005b63 	.word	0x08005b63
 8005b38:	08005b5b 	.word	0x08005b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b3c:	f7fe fb62 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 8005b40:	61b8      	str	r0, [r7, #24]
        break;
 8005b42:	e013      	b.n	8005b6c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b44:	f7fe fb72 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8005b48:	61b8      	str	r0, [r7, #24]
        break;
 8005b4a:	e00f      	b.n	8005b6c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b4c:	4b4b      	ldr	r3, [pc, #300]	; (8005c7c <UART_SetConfig+0x4c0>)
 8005b4e:	61bb      	str	r3, [r7, #24]
        break;
 8005b50:	e00c      	b.n	8005b6c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b52:	f7fe fa95 	bl	8004080 <HAL_RCC_GetSysClockFreq>
 8005b56:	61b8      	str	r0, [r7, #24]
        break;
 8005b58:	e008      	b.n	8005b6c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5e:	61bb      	str	r3, [r7, #24]
        break;
 8005b60:	e004      	b.n	8005b6c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	77bb      	strb	r3, [r7, #30]
        break;
 8005b6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d074      	beq.n	8005c5c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	005a      	lsls	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	441a      	add	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b0f      	cmp	r3, #15
 8005b8e:	d916      	bls.n	8005bbe <UART_SetConfig+0x402>
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b96:	d212      	bcs.n	8005bbe <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f023 030f 	bic.w	r3, r3, #15
 8005ba0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	89fb      	ldrh	r3, [r7, #14]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	89fa      	ldrh	r2, [r7, #14]
 8005bba:	60da      	str	r2, [r3, #12]
 8005bbc:	e04e      	b.n	8005c5c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	77bb      	strb	r3, [r7, #30]
 8005bc2:	e04b      	b.n	8005c5c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bc4:	7ffb      	ldrb	r3, [r7, #31]
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d827      	bhi.n	8005c1a <UART_SetConfig+0x45e>
 8005bca:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <UART_SetConfig+0x414>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005bfd 	.word	0x08005bfd
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	08005c1b 	.word	0x08005c1b
 8005be0:	08005c0b 	.word	0x08005c0b
 8005be4:	08005c1b 	.word	0x08005c1b
 8005be8:	08005c1b 	.word	0x08005c1b
 8005bec:	08005c1b 	.word	0x08005c1b
 8005bf0:	08005c13 	.word	0x08005c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7fe fb06 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 8005bf8:	61b8      	str	r0, [r7, #24]
        break;
 8005bfa:	e013      	b.n	8005c24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bfc:	f7fe fb16 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8005c00:	61b8      	str	r0, [r7, #24]
        break;
 8005c02:	e00f      	b.n	8005c24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c04:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <UART_SetConfig+0x4c0>)
 8005c06:	61bb      	str	r3, [r7, #24]
        break;
 8005c08:	e00c      	b.n	8005c24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0a:	f7fe fa39 	bl	8004080 <HAL_RCC_GetSysClockFreq>
 8005c0e:	61b8      	str	r0, [r7, #24]
        break;
 8005c10:	e008      	b.n	8005c24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c16:	61bb      	str	r3, [r7, #24]
        break;
 8005c18:	e004      	b.n	8005c24 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	77bb      	strb	r3, [r7, #30]
        break;
 8005c22:	bf00      	nop
    }

    if (pclk != 0U)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d018      	beq.n	8005c5c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	085a      	lsrs	r2, r3, #1
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	441a      	add	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	2b0f      	cmp	r3, #15
 8005c44:	d908      	bls.n	8005c58 <UART_SetConfig+0x49c>
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4c:	d204      	bcs.n	8005c58 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	60da      	str	r2, [r3, #12]
 8005c56:	e001      	b.n	8005c5c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c68:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40007c00 	.word	0x40007c00
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	00f42400 	.word	0x00f42400

08005c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	f003 0308 	and.w	r3, r3, #8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01a      	beq.n	8005d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d7e:	d10a      	bne.n	8005d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
  }
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dd4:	f7fc f944 	bl	8002060 <HAL_GetTick>
 8005dd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d10e      	bne.n	8005e06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f82d 	bl	8005e56 <UART_WaitOnFlagUntilTimeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e023      	b.n	8005e4e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d10e      	bne.n	8005e32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f817 	bl	8005e56 <UART_WaitOnFlagUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e00d      	b.n	8005e4e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	4613      	mov	r3, r2
 8005e64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e66:	e05e      	b.n	8005f26 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d05a      	beq.n	8005f26 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e70:	f7fc f8f6 	bl	8002060 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d302      	bcc.n	8005e86 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d11b      	bne.n	8005ebe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0201 	bic.w	r2, r2, #1
 8005ea4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e043      	b.n	8005f46 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d02c      	beq.n	8005f26 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eda:	d124      	bne.n	8005f26 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ee4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ef4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0201 	bic.w	r2, r2, #1
 8005f04:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e00f      	b.n	8005f46 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69da      	ldr	r2, [r3, #28]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	bf0c      	ite	eq
 8005f36:	2301      	moveq	r3, #1
 8005f38:	2300      	movne	r3, #0
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d091      	beq.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	88fa      	ldrh	r2, [r7, #6]
 8005f68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2222      	movs	r2, #34	; 0x22
 8005f78:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d02b      	beq.n	8005fda <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	4a25      	ldr	r2, [pc, #148]	; (800601c <UART_Start_Receive_DMA+0xcc>)
 8005f88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	4a24      	ldr	r2, [pc, #144]	; (8006020 <UART_Start_Receive_DMA+0xd0>)
 8005f90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f96:	4a23      	ldr	r2, [pc, #140]	; (8006024 <UART_Start_Receive_DMA+0xd4>)
 8005f98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3324      	adds	r3, #36	; 0x24
 8005fac:	4619      	mov	r1, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	88fb      	ldrh	r3, [r7, #6]
 8005fb6:	f7fc fa1f 	bl	80023f8 <HAL_DMA_Start_IT>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00c      	beq.n	8005fda <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2210      	movs	r2, #16
 8005fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e01c      	b.n	8006014 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f042 0201 	orr.w	r2, r2, #1
 8006000:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006010:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	080060b1 	.word	0x080060b1
 8006020:	08006145 	.word	0x08006145
 8006024:	0800617d 	.word	0x0800617d

08006028 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800603e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006068:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0201 	bic.w	r2, r2, #1
 8006078:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607e:	2b01      	cmp	r3, #1
 8006080:	d107      	bne.n	8006092 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0210 	bic.w	r2, r2, #16
 8006090:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2220      	movs	r2, #32
 8006096:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c6:	d02a      	beq.n	800611e <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060de:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0201 	bic.w	r2, r2, #1
 80060ee:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060fe:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610a:	2b01      	cmp	r3, #1
 800610c:	d107      	bne.n	800611e <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0210 	bic.w	r2, r2, #16
 800611c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006122:	2b01      	cmp	r3, #1
 8006124:	d107      	bne.n	8006136 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800612c:	4619      	mov	r1, r3
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f7ff fb38 	bl	80057a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006134:	e002      	b.n	800613c <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f7fb f84e 	bl	80011d8 <HAL_UART_RxCpltCallback>
}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006156:	2b01      	cmp	r3, #1
 8006158:	d109      	bne.n	800616e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006160:	085b      	lsrs	r3, r3, #1
 8006162:	b29b      	uxth	r3, r3
 8006164:	4619      	mov	r1, r3
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fb1c 	bl	80057a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800616c:	e002      	b.n	8006174 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7fb f828 	bl	80011c4 <HAL_UART_RxHalfCpltCallback>
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800618e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006194:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a0:	2b80      	cmp	r3, #128	; 0x80
 80061a2:	d109      	bne.n	80061b8 <UART_DMAError+0x3c>
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b21      	cmp	r3, #33	; 0x21
 80061a8:	d106      	bne.n	80061b8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80061b2:	6978      	ldr	r0, [r7, #20]
 80061b4:	f7ff ff38 	bl	8006028 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d109      	bne.n	80061da <UART_DMAError+0x5e>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b22      	cmp	r3, #34	; 0x22
 80061ca:	d106      	bne.n	80061da <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80061d4:	6978      	ldr	r0, [r7, #20]
 80061d6:	f7ff ff3c 	bl	8006052 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061e0:	f043 0210 	orr.w	r2, r3, #16
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061ea:	6978      	ldr	r0, [r7, #20]
 80061ec:	f7ff fad0 	bl	8005790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f0:	bf00      	nop
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <__errno>:
 80061f8:	4b01      	ldr	r3, [pc, #4]	; (8006200 <__errno+0x8>)
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	20000030 	.word	0x20000030

08006204 <__libc_init_array>:
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	4d0d      	ldr	r5, [pc, #52]	; (800623c <__libc_init_array+0x38>)
 8006208:	4c0d      	ldr	r4, [pc, #52]	; (8006240 <__libc_init_array+0x3c>)
 800620a:	1b64      	subs	r4, r4, r5
 800620c:	10a4      	asrs	r4, r4, #2
 800620e:	2600      	movs	r6, #0
 8006210:	42a6      	cmp	r6, r4
 8006212:	d109      	bne.n	8006228 <__libc_init_array+0x24>
 8006214:	4d0b      	ldr	r5, [pc, #44]	; (8006244 <__libc_init_array+0x40>)
 8006216:	4c0c      	ldr	r4, [pc, #48]	; (8006248 <__libc_init_array+0x44>)
 8006218:	f000 f8f8 	bl	800640c <_init>
 800621c:	1b64      	subs	r4, r4, r5
 800621e:	10a4      	asrs	r4, r4, #2
 8006220:	2600      	movs	r6, #0
 8006222:	42a6      	cmp	r6, r4
 8006224:	d105      	bne.n	8006232 <__libc_init_array+0x2e>
 8006226:	bd70      	pop	{r4, r5, r6, pc}
 8006228:	f855 3b04 	ldr.w	r3, [r5], #4
 800622c:	4798      	blx	r3
 800622e:	3601      	adds	r6, #1
 8006230:	e7ee      	b.n	8006210 <__libc_init_array+0xc>
 8006232:	f855 3b04 	ldr.w	r3, [r5], #4
 8006236:	4798      	blx	r3
 8006238:	3601      	adds	r6, #1
 800623a:	e7f2      	b.n	8006222 <__libc_init_array+0x1e>
 800623c:	0800cc24 	.word	0x0800cc24
 8006240:	0800cc24 	.word	0x0800cc24
 8006244:	0800cc24 	.word	0x0800cc24
 8006248:	0800cc28 	.word	0x0800cc28

0800624c <malloc>:
 800624c:	4b02      	ldr	r3, [pc, #8]	; (8006258 <malloc+0xc>)
 800624e:	4601      	mov	r1, r0
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	f000 b863 	b.w	800631c <_malloc_r>
 8006256:	bf00      	nop
 8006258:	20000030 	.word	0x20000030

0800625c <free>:
 800625c:	4b02      	ldr	r3, [pc, #8]	; (8006268 <free+0xc>)
 800625e:	4601      	mov	r1, r0
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	f000 b80b 	b.w	800627c <_free_r>
 8006266:	bf00      	nop
 8006268:	20000030 	.word	0x20000030

0800626c <memset>:
 800626c:	4402      	add	r2, r0
 800626e:	4603      	mov	r3, r0
 8006270:	4293      	cmp	r3, r2
 8006272:	d100      	bne.n	8006276 <memset+0xa>
 8006274:	4770      	bx	lr
 8006276:	f803 1b01 	strb.w	r1, [r3], #1
 800627a:	e7f9      	b.n	8006270 <memset+0x4>

0800627c <_free_r>:
 800627c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800627e:	2900      	cmp	r1, #0
 8006280:	d048      	beq.n	8006314 <_free_r+0x98>
 8006282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006286:	9001      	str	r0, [sp, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f1a1 0404 	sub.w	r4, r1, #4
 800628e:	bfb8      	it	lt
 8006290:	18e4      	addlt	r4, r4, r3
 8006292:	f000 f8af 	bl	80063f4 <__malloc_lock>
 8006296:	4a20      	ldr	r2, [pc, #128]	; (8006318 <_free_r+0x9c>)
 8006298:	9801      	ldr	r0, [sp, #4]
 800629a:	6813      	ldr	r3, [r2, #0]
 800629c:	4615      	mov	r5, r2
 800629e:	b933      	cbnz	r3, 80062ae <_free_r+0x32>
 80062a0:	6063      	str	r3, [r4, #4]
 80062a2:	6014      	str	r4, [r2, #0]
 80062a4:	b003      	add	sp, #12
 80062a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062aa:	f000 b8a9 	b.w	8006400 <__malloc_unlock>
 80062ae:	42a3      	cmp	r3, r4
 80062b0:	d90b      	bls.n	80062ca <_free_r+0x4e>
 80062b2:	6821      	ldr	r1, [r4, #0]
 80062b4:	1862      	adds	r2, r4, r1
 80062b6:	4293      	cmp	r3, r2
 80062b8:	bf04      	itt	eq
 80062ba:	681a      	ldreq	r2, [r3, #0]
 80062bc:	685b      	ldreq	r3, [r3, #4]
 80062be:	6063      	str	r3, [r4, #4]
 80062c0:	bf04      	itt	eq
 80062c2:	1852      	addeq	r2, r2, r1
 80062c4:	6022      	streq	r2, [r4, #0]
 80062c6:	602c      	str	r4, [r5, #0]
 80062c8:	e7ec      	b.n	80062a4 <_free_r+0x28>
 80062ca:	461a      	mov	r2, r3
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	b10b      	cbz	r3, 80062d4 <_free_r+0x58>
 80062d0:	42a3      	cmp	r3, r4
 80062d2:	d9fa      	bls.n	80062ca <_free_r+0x4e>
 80062d4:	6811      	ldr	r1, [r2, #0]
 80062d6:	1855      	adds	r5, r2, r1
 80062d8:	42a5      	cmp	r5, r4
 80062da:	d10b      	bne.n	80062f4 <_free_r+0x78>
 80062dc:	6824      	ldr	r4, [r4, #0]
 80062de:	4421      	add	r1, r4
 80062e0:	1854      	adds	r4, r2, r1
 80062e2:	42a3      	cmp	r3, r4
 80062e4:	6011      	str	r1, [r2, #0]
 80062e6:	d1dd      	bne.n	80062a4 <_free_r+0x28>
 80062e8:	681c      	ldr	r4, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	6053      	str	r3, [r2, #4]
 80062ee:	4421      	add	r1, r4
 80062f0:	6011      	str	r1, [r2, #0]
 80062f2:	e7d7      	b.n	80062a4 <_free_r+0x28>
 80062f4:	d902      	bls.n	80062fc <_free_r+0x80>
 80062f6:	230c      	movs	r3, #12
 80062f8:	6003      	str	r3, [r0, #0]
 80062fa:	e7d3      	b.n	80062a4 <_free_r+0x28>
 80062fc:	6825      	ldr	r5, [r4, #0]
 80062fe:	1961      	adds	r1, r4, r5
 8006300:	428b      	cmp	r3, r1
 8006302:	bf04      	itt	eq
 8006304:	6819      	ldreq	r1, [r3, #0]
 8006306:	685b      	ldreq	r3, [r3, #4]
 8006308:	6063      	str	r3, [r4, #4]
 800630a:	bf04      	itt	eq
 800630c:	1949      	addeq	r1, r1, r5
 800630e:	6021      	streq	r1, [r4, #0]
 8006310:	6054      	str	r4, [r2, #4]
 8006312:	e7c7      	b.n	80062a4 <_free_r+0x28>
 8006314:	b003      	add	sp, #12
 8006316:	bd30      	pop	{r4, r5, pc}
 8006318:	200044d8 	.word	0x200044d8

0800631c <_malloc_r>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	1ccd      	adds	r5, r1, #3
 8006320:	f025 0503 	bic.w	r5, r5, #3
 8006324:	3508      	adds	r5, #8
 8006326:	2d0c      	cmp	r5, #12
 8006328:	bf38      	it	cc
 800632a:	250c      	movcc	r5, #12
 800632c:	2d00      	cmp	r5, #0
 800632e:	4606      	mov	r6, r0
 8006330:	db01      	blt.n	8006336 <_malloc_r+0x1a>
 8006332:	42a9      	cmp	r1, r5
 8006334:	d903      	bls.n	800633e <_malloc_r+0x22>
 8006336:	230c      	movs	r3, #12
 8006338:	6033      	str	r3, [r6, #0]
 800633a:	2000      	movs	r0, #0
 800633c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800633e:	f000 f859 	bl	80063f4 <__malloc_lock>
 8006342:	4921      	ldr	r1, [pc, #132]	; (80063c8 <_malloc_r+0xac>)
 8006344:	680a      	ldr	r2, [r1, #0]
 8006346:	4614      	mov	r4, r2
 8006348:	b99c      	cbnz	r4, 8006372 <_malloc_r+0x56>
 800634a:	4f20      	ldr	r7, [pc, #128]	; (80063cc <_malloc_r+0xb0>)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	b923      	cbnz	r3, 800635a <_malloc_r+0x3e>
 8006350:	4621      	mov	r1, r4
 8006352:	4630      	mov	r0, r6
 8006354:	f000 f83c 	bl	80063d0 <_sbrk_r>
 8006358:	6038      	str	r0, [r7, #0]
 800635a:	4629      	mov	r1, r5
 800635c:	4630      	mov	r0, r6
 800635e:	f000 f837 	bl	80063d0 <_sbrk_r>
 8006362:	1c43      	adds	r3, r0, #1
 8006364:	d123      	bne.n	80063ae <_malloc_r+0x92>
 8006366:	230c      	movs	r3, #12
 8006368:	6033      	str	r3, [r6, #0]
 800636a:	4630      	mov	r0, r6
 800636c:	f000 f848 	bl	8006400 <__malloc_unlock>
 8006370:	e7e3      	b.n	800633a <_malloc_r+0x1e>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	1b5b      	subs	r3, r3, r5
 8006376:	d417      	bmi.n	80063a8 <_malloc_r+0x8c>
 8006378:	2b0b      	cmp	r3, #11
 800637a:	d903      	bls.n	8006384 <_malloc_r+0x68>
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	441c      	add	r4, r3
 8006380:	6025      	str	r5, [r4, #0]
 8006382:	e004      	b.n	800638e <_malloc_r+0x72>
 8006384:	6863      	ldr	r3, [r4, #4]
 8006386:	42a2      	cmp	r2, r4
 8006388:	bf0c      	ite	eq
 800638a:	600b      	streq	r3, [r1, #0]
 800638c:	6053      	strne	r3, [r2, #4]
 800638e:	4630      	mov	r0, r6
 8006390:	f000 f836 	bl	8006400 <__malloc_unlock>
 8006394:	f104 000b 	add.w	r0, r4, #11
 8006398:	1d23      	adds	r3, r4, #4
 800639a:	f020 0007 	bic.w	r0, r0, #7
 800639e:	1ac2      	subs	r2, r0, r3
 80063a0:	d0cc      	beq.n	800633c <_malloc_r+0x20>
 80063a2:	1a1b      	subs	r3, r3, r0
 80063a4:	50a3      	str	r3, [r4, r2]
 80063a6:	e7c9      	b.n	800633c <_malloc_r+0x20>
 80063a8:	4622      	mov	r2, r4
 80063aa:	6864      	ldr	r4, [r4, #4]
 80063ac:	e7cc      	b.n	8006348 <_malloc_r+0x2c>
 80063ae:	1cc4      	adds	r4, r0, #3
 80063b0:	f024 0403 	bic.w	r4, r4, #3
 80063b4:	42a0      	cmp	r0, r4
 80063b6:	d0e3      	beq.n	8006380 <_malloc_r+0x64>
 80063b8:	1a21      	subs	r1, r4, r0
 80063ba:	4630      	mov	r0, r6
 80063bc:	f000 f808 	bl	80063d0 <_sbrk_r>
 80063c0:	3001      	adds	r0, #1
 80063c2:	d1dd      	bne.n	8006380 <_malloc_r+0x64>
 80063c4:	e7cf      	b.n	8006366 <_malloc_r+0x4a>
 80063c6:	bf00      	nop
 80063c8:	200044d8 	.word	0x200044d8
 80063cc:	200044dc 	.word	0x200044dc

080063d0 <_sbrk_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4d06      	ldr	r5, [pc, #24]	; (80063ec <_sbrk_r+0x1c>)
 80063d4:	2300      	movs	r3, #0
 80063d6:	4604      	mov	r4, r0
 80063d8:	4608      	mov	r0, r1
 80063da:	602b      	str	r3, [r5, #0]
 80063dc:	f7fb fd7e 	bl	8001edc <_sbrk>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d102      	bne.n	80063ea <_sbrk_r+0x1a>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	b103      	cbz	r3, 80063ea <_sbrk_r+0x1a>
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	2000478c 	.word	0x2000478c

080063f0 <__retarget_lock_acquire_recursive>:
 80063f0:	4770      	bx	lr

080063f2 <__retarget_lock_release_recursive>:
 80063f2:	4770      	bx	lr

080063f4 <__malloc_lock>:
 80063f4:	4801      	ldr	r0, [pc, #4]	; (80063fc <__malloc_lock+0x8>)
 80063f6:	f7ff bffb 	b.w	80063f0 <__retarget_lock_acquire_recursive>
 80063fa:	bf00      	nop
 80063fc:	20004784 	.word	0x20004784

08006400 <__malloc_unlock>:
 8006400:	4801      	ldr	r0, [pc, #4]	; (8006408 <__malloc_unlock+0x8>)
 8006402:	f7ff bff6 	b.w	80063f2 <__retarget_lock_release_recursive>
 8006406:	bf00      	nop
 8006408:	20004784 	.word	0x20004784

0800640c <_init>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	bf00      	nop
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr

08006418 <_fini>:
 8006418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641a:	bf00      	nop
 800641c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641e:	bc08      	pop	{r3}
 8006420:	469e      	mov	lr, r3
 8006422:	4770      	bx	lr
