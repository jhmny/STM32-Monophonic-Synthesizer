
STM32_dax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cac  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001644  08005ea4  08005ea4  00015ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e8  080074e8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080074e8  080074e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074f0  080074f0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074f4  080074f4  000174f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080074f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e4  2000001c  08007514  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  08007514  00020800  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012aea  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ac  00000000  00000000  00032b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000353e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  000362a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028555  00000000  00000000  00037090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119ba  00000000  00000000  0005f5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7547  00000000  00000000  00070f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001684e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d28  00000000  00000000  0016853c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000001c 	.word	0x2000001c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005e8c 	.word	0x08005e8c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000020 	.word	0x20000020
 8000234:	08005e8c 	.word	0x08005e8c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f001 f8fe 	bl	8001736 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f83d 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f9db 	bl	80008f8 <MX_GPIO_Init>
  MX_I2S1_Init();
 8000542:	f000 f92b 	bl	800079c <MX_I2S1_Init>
  MX_DMA_Init();
 8000546:	f000 f9b9 	bl	80008bc <MX_DMA_Init>
  MX_UART4_Init();
 800054a:	f000 f987 	bl	800085c <MX_UART4_Init>
  MX_I2C2_Init();
 800054e:	f000 f8e5 	bl	800071c <MX_I2C2_Init>
  MX_SAI1_Init();
 8000552:	f000 f94d 	bl	80007f0 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);
 8000556:	2204      	movs	r2, #4
 8000558:	4910      	ldr	r1, [pc, #64]	; (800059c <main+0x6c>)
 800055a:	4811      	ldr	r0, [pc, #68]	; (80005a0 <main+0x70>)
 800055c:	f002 fde0 	bl	8003120 <HAL_I2S_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer,MIDI_BUFFER_LENGTH);
 8000560:	2208      	movs	r2, #8
 8000562:	4910      	ldr	r1, [pc, #64]	; (80005a4 <main+0x74>)
 8000564:	4810      	ldr	r0, [pc, #64]	; (80005a8 <main+0x78>)
 8000566:	f004 fef4 	bl	8005352 <HAL_UART_Receive_DMA>
  SSD1306_Init (); // initialize the LCD screen display
 800056a:	f000 fbdb 	bl	8000d24 <SSD1306_Init>
  SSD1306_Menu();
 800056e:	f000 fe83 	bl	8001278 <SSD1306_Menu>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	 // HAL_I2S_Transmit(&hi2s1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);
	  //nb_MIDI_bytes = MIDI_GetNbNewBytes();
	  if(playNoteB == 1){
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <main+0x7c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d10d      	bne.n	8000596 <main+0x66>
		  HAL_SAI_Transmit(&hsai_BlockA1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);
 800057a:	230a      	movs	r3, #10
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	490c      	ldr	r1, [pc, #48]	; (80005b0 <main+0x80>)
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <main+0x84>)
 8000582:	f004 fb83 	bl	8004c8c <HAL_SAI_Transmit>
		  if (screenOn == 0 ){
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f2      	bne.n	8000572 <main+0x42>
			  SSD1306_Note0();
 800058c:	f000 feba 	bl	8001304 <SSD1306_Note0>
			  screenOn = 1;
 8000590:	2301      	movs	r3, #1
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	e7ed      	b.n	8000572 <main+0x42>
		  }
	  }
	  else {
		  screenOn = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
	  if(playNoteB == 1){
 800059a:	e7ea      	b.n	8000572 <main+0x42>
 800059c:	20000038 	.word	0x20000038
 80005a0:	20000670 	.word	0x20000670
 80005a4:	20000040 	.word	0x20000040
 80005a8:	200006b0 	.word	0x200006b0
 80005ac:	200005ac 	.word	0x200005ac
 80005b0:	080073c8 	.word	0x080073c8
 80005b4:	2000073c 	.word	0x2000073c

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b0b8      	sub	sp, #224	; 0xe0
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005c2:	2234      	movs	r2, #52	; 0x34
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 fc58 	bl	8005e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	2290      	movs	r2, #144	; 0x90
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f005 fc49 	bl	8005e7c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b49      	ldr	r3, [pc, #292]	; (8000710 <SystemClock_Config+0x158>)
 80005ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ee:	4a48      	ldr	r2, [pc, #288]	; (8000710 <SystemClock_Config+0x158>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f4:	6413      	str	r3, [r2, #64]	; 0x40
 80005f6:	4b46      	ldr	r3, [pc, #280]	; (8000710 <SystemClock_Config+0x158>)
 80005f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000602:	4b44      	ldr	r3, [pc, #272]	; (8000714 <SystemClock_Config+0x15c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800060a:	4a42      	ldr	r2, [pc, #264]	; (8000714 <SystemClock_Config+0x15c>)
 800060c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000610:	6013      	str	r3, [r2, #0]
 8000612:	4b40      	ldr	r3, [pc, #256]	; (8000714 <SystemClock_Config+0x15c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2310      	movs	r3, #16
 800062c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2300      	movs	r3, #0
 8000638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 800063c:	2308      	movs	r3, #8
 800063e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000642:	2360      	movs	r3, #96	; 0x60
 8000644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800065e:	4618      	mov	r0, r3
 8000660:	f002 ff44 	bl	80034ec <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800066a:	f000 fb55 	bl	8000d18 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800066e:	f002 feed 	bl	800344c <HAL_PWREx_EnableOverDrive>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000678:	f000 fb4e 	bl	8000d18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800069e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006a2:	2103      	movs	r1, #3
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 f9cf 	bl	8003a48 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80006b0:	f000 fb32 	bl	8000d18 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SAI1
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <SystemClock_Config+0x160>)
 80006b6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 80006b8:	2360      	movs	r3, #96	; 0x60
 80006ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80006c8:	23c0      	movs	r3, #192	; 0xc0
 80006ca:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 80006d0:	2306      	movs	r3, #6
 80006d2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80006e0:	2300      	movs	r3, #0
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fb7b 	bl	8003df4 <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8000704:	f000 fb08 	bl	8000d18 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	37e0      	adds	r7, #224	; 0xe0
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000
 8000718:	00088201 	.word	0x00088201

0800071c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_I2C2_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_I2C2_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_I2C2_Init+0x74>)
 8000728:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <MX_I2C2_Init+0x7c>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_I2C2_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_I2C2_Init+0x74>)
 8000734:	2201      	movs	r2, #1
 8000736:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_I2C2_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_I2C2_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C2_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C2_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C2_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <MX_I2C2_Init+0x74>)
 8000758:	f001 fe9a 	bl	8002490 <HAL_I2C_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000762:	f000 fad9 	bl	8000d18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000766:	2100      	movs	r1, #0
 8000768:	4809      	ldr	r0, [pc, #36]	; (8000790 <MX_I2C2_Init+0x74>)
 800076a:	f002 fa91 	bl	8002c90 <HAL_I2CEx_ConfigAnalogFilter>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000774:	f000 fad0 	bl	8000d18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000778:	2100      	movs	r1, #0
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_I2C2_Init+0x74>)
 800077c:	f002 fad3 	bl	8002d26 <HAL_I2CEx_ConfigDigitalFilter>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 fac7 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000510 	.word	0x20000510
 8000794:	40005800 	.word	0x40005800
 8000798:	0090194b 	.word	0x0090194b

0800079c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_I2S1_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_I2S1_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_I2S1_Init+0x4c>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_I2S1_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_I2S1_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_I2S1_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_I2S1_Init+0x4c>)
 80007c2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80007c6:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_I2S1_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_I2S1_Init+0x4c>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_I2S1_Init+0x4c>)
 80007d6:	f002 faf3 	bl	8002dc0 <HAL_I2S_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 80007e0:	f000 fa9a 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000670 	.word	0x20000670
 80007ec:	40013000 	.word	0x40013000

080007f0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_SAI1_Init+0x64>)
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <MX_SAI1_Init+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_SAI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_SAI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_SAI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_SAI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_SAI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_SAI1_Init+0x64>)
 800081a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800081e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_SAI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_SAI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_SAI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_SAI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000838:	2302      	movs	r3, #2
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_SAI1_Init+0x64>)
 8000840:	f004 f872 	bl	8004928 <HAL_SAI_InitProtocol>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 800084a:	f000 fa65 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000073c 	.word	0x2000073c
 8000858:	40015804 	.word	0x40015804

0800085c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_UART4_Init+0x58>)
 8000862:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <MX_UART4_Init+0x5c>)
 8000864:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_UART4_Init+0x58>)
 8000868:	f647 2212 	movw	r2, #31250	; 0x7a12
 800086c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_UART4_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_UART4_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_UART4_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_UART4_Init+0x58>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_UART4_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_UART4_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_UART4_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_UART4_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_UART4_Init+0x58>)
 80008a0:	f004 fc76 	bl	8005190 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 fa35 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200006b0 	.word	0x200006b0
 80008b8:	40004c00 	.word	0x40004c00

080008bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_DMA_Init+0x38>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <MX_DMA_Init+0x38>)
 80008c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_DMA_Init+0x38>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	200d      	movs	r0, #13
 80008e0:	f001 f861 	bl	80019a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80008e4:	200d      	movs	r0, #13
 80008e6:	f001 f87a 	bl	80019de <HAL_NVIC_EnableIRQ>

}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090e:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MX_GPIO_Init+0xbc>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a28      	ldr	r2, [pc, #160]	; (80009b4 <MX_GPIO_Init+0xbc>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_GPIO_Init+0xbc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0310 	and.w	r3, r3, #16
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000926:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_GPIO_Init+0xbc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a22      	ldr	r2, [pc, #136]	; (80009b4 <MX_GPIO_Init+0xbc>)
 800092c:	f043 0320 	orr.w	r3, r3, #32
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_GPIO_Init+0xbc>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0320 	and.w	r3, r3, #32
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_GPIO_Init+0xbc>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_GPIO_Init+0xbc>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_GPIO_Init+0xbc>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_GPIO_Init+0xbc>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <MX_GPIO_Init+0xbc>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_GPIO_Init+0xbc>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_GPIO_Init+0xbc>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <MX_GPIO_Init+0xbc>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_GPIO_Init+0xbc>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	480b      	ldr	r0, [pc, #44]	; (80009b8 <MX_GPIO_Init+0xc0>)
 800098c:	f001 fd66 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_GPIO_Init+0xc0>)
 80009a8:	f001 fbac 	bl	8002104 <HAL_GPIO_Init>

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400

080009bc <HAL_I2S_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2S_TxCpltCallback( I2S_HandleTypeDef *hi2s1){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
		HAL_I2S_Receive(&hi2s1, sendBuff, 8, 100);
 80009c4:	1d38      	adds	r0, r7, #4
 80009c6:	2364      	movs	r3, #100	; 0x64
 80009c8:	2208      	movs	r2, #8
 80009ca:	4906      	ldr	r1, [pc, #24]	; (80009e4 <HAL_I2S_TxCpltCallback+0x28>)
 80009cc:	f002 fade 	bl	8002f8c <HAL_I2S_Receive>
		//HAL_I2S_(hi2s1, sendBuff, 16, 100);
		HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, 8);
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2208      	movs	r2, #8
 80009d4:	4903      	ldr	r1, [pc, #12]	; (80009e4 <HAL_I2S_TxCpltCallback+0x28>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fba2 	bl	8003120 <HAL_I2S_Transmit_DMA>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000038 	.word	0x20000038

080009e8 <processBuffer>:
		dma_cpt_prev = dma_cpt;
	}
	return(n);
}

void processBuffer(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
	__IO uint32_t received_char;

	int i = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
	int state = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]

	while(i < MIDI_BUFFER_LENGTH )
 80009f6:	bf00      	nop
 80009f8:	e115      	b.n	8000c26 <processBuffer+0x23e>
	{
		received_char = UART4_rxBuffer[i];
 80009fa:	4a8f      	ldr	r2, [pc, #572]	; (8000c38 <processBuffer+0x250>)
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	2b29      	cmp	r3, #41	; 0x29
 8000a08:	f200 810d 	bhi.w	8000c26 <processBuffer+0x23e>
 8000a0c:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <processBuffer+0x2c>)
 8000a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a12:	bf00      	nop
 8000a14:	08000abd 	.word	0x08000abd
 8000a18:	08000c27 	.word	0x08000c27
 8000a1c:	08000c27 	.word	0x08000c27
 8000a20:	08000c27 	.word	0x08000c27
 8000a24:	08000c27 	.word	0x08000c27
 8000a28:	08000c27 	.word	0x08000c27
 8000a2c:	08000c27 	.word	0x08000c27
 8000a30:	08000c27 	.word	0x08000c27
 8000a34:	08000c27 	.word	0x08000c27
 8000a38:	08000c27 	.word	0x08000c27
 8000a3c:	08000b1f 	.word	0x08000b1f
 8000a40:	08000b47 	.word	0x08000b47
 8000a44:	08000c27 	.word	0x08000c27
 8000a48:	08000c27 	.word	0x08000c27
 8000a4c:	08000c27 	.word	0x08000c27
 8000a50:	08000c27 	.word	0x08000c27
 8000a54:	08000c27 	.word	0x08000c27
 8000a58:	08000c27 	.word	0x08000c27
 8000a5c:	08000c27 	.word	0x08000c27
 8000a60:	08000c27 	.word	0x08000c27
 8000a64:	08000b7b 	.word	0x08000b7b
 8000a68:	08000ba3 	.word	0x08000ba3
 8000a6c:	08000c27 	.word	0x08000c27
 8000a70:	08000c27 	.word	0x08000c27
 8000a74:	08000c27 	.word	0x08000c27
 8000a78:	08000c27 	.word	0x08000c27
 8000a7c:	08000c27 	.word	0x08000c27
 8000a80:	08000c27 	.word	0x08000c27
 8000a84:	08000c27 	.word	0x08000c27
 8000a88:	08000c27 	.word	0x08000c27
 8000a8c:	08000bbf 	.word	0x08000bbf
 8000a90:	08000bdf 	.word	0x08000bdf
 8000a94:	08000c27 	.word	0x08000c27
 8000a98:	08000c27 	.word	0x08000c27
 8000a9c:	08000c27 	.word	0x08000c27
 8000aa0:	08000c27 	.word	0x08000c27
 8000aa4:	08000c27 	.word	0x08000c27
 8000aa8:	08000c27 	.word	0x08000c27
 8000aac:	08000c27 	.word	0x08000c27
 8000ab0:	08000c27 	.word	0x08000c27
 8000ab4:	08000bf3 	.word	0x08000bf3
 8000ab8:	08000c13 	.word	0x08000c13
	switch (state)
			{
				// State 0 = Starting point for a new MIDI message
				case 0 :
				{
					switch (received_char & 0xF0)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ac2:	2be0      	cmp	r3, #224	; 0xe0
 8000ac4:	d020      	beq.n	8000b08 <processBuffer+0x120>
 8000ac6:	2be0      	cmp	r3, #224	; 0xe0
 8000ac8:	d824      	bhi.n	8000b14 <processBuffer+0x12c>
 8000aca:	2bb0      	cmp	r3, #176	; 0xb0
 8000acc:	d016      	beq.n	8000afc <processBuffer+0x114>
 8000ace:	2bb0      	cmp	r3, #176	; 0xb0
 8000ad0:	d820      	bhi.n	8000b14 <processBuffer+0x12c>
 8000ad2:	2b80      	cmp	r3, #128	; 0x80
 8000ad4:	d007      	beq.n	8000ae6 <processBuffer+0xfe>
 8000ad6:	2b90      	cmp	r3, #144	; 0x90
 8000ad8:	d11c      	bne.n	8000b14 <processBuffer+0x12c>
					{
						case 0x90 :														// Note ON message
						{
							state = 10;													// Next state is 10
 8000ada:	230a      	movs	r3, #10
 8000adc:	60bb      	str	r3, [r7, #8]
							//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
							i ++;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
							break;
 8000ae4:	e01a      	b.n	8000b1c <processBuffer+0x134>
						}
						case 0x80 :														// Note OFF message
						{
							state = 20;	// Next state is 20
 8000ae6:	2314      	movs	r3, #20
 8000ae8:	60bb      	str	r3, [r7, #8]
							stop_note(midimsg);
 8000aea:	4b54      	ldr	r3, [pc, #336]	; (8000c3c <processBuffer+0x254>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f8fc 	bl	8000cec <stop_note>
							//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
							i++;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
							break;
 8000afa:	e00f      	b.n	8000b1c <processBuffer+0x134>
						}
						case 0xB0 :														// CC message
						{
							state = 30;													// Next state is 30
 8000afc:	231e      	movs	r3, #30
 8000afe:	60bb      	str	r3, [r7, #8]
							//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
							i++;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3301      	adds	r3, #1
 8000b04:	60fb      	str	r3, [r7, #12]
							break;
 8000b06:	e009      	b.n	8000b1c <processBuffer+0x134>
						}

						case 0xE0 :														// Pitch Bend message
						{
							state = 40;													// Next state is 40
 8000b08:	2328      	movs	r3, #40	; 0x28
 8000b0a:	60bb      	str	r3, [r7, #8]
							//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
							i++;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
							break;
 8000b12:	e003      	b.n	8000b1c <processBuffer+0x134>
						}
						default :														// Other type of message, move to next byte but stays in state 0
						{
							//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
							i++;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3301      	adds	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
							break;
 8000b1a:	bf00      	nop
						}
					}
					break;
 8000b1c:	e083      	b.n	8000c26 <processBuffer+0x23e>
				}
				// State 10 & 11 : Note ON command
				case 10 :
				{
					if (received_char>0x7F)												// If the following byte is not a note number
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b7f      	cmp	r3, #127	; 0x7f
 8000b22:	d902      	bls.n	8000b2a <processBuffer+0x142>
					{
						state = 0;													// Return to state 0 without moving to next byte
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	e07d      	b.n	8000c26 <processBuffer+0x23e>
					}
					else
					{	// Save MIDI note
						ctrl = key = received_char;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b44      	ldr	r3, [pc, #272]	; (8000c40 <processBuffer+0x258>)
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	4b43      	ldr	r3, [pc, #268]	; (8000c40 <processBuffer+0x258>)
 8000b34:	781a      	ldrb	r2, [r3, #0]
 8000b36:	4b43      	ldr	r3, [pc, #268]	; (8000c44 <processBuffer+0x25c>)
 8000b38:	701a      	strb	r2, [r3, #0]

						//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
						i++;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
						state = 11;													// Next state is 11
 8000b40:	230b      	movs	r3, #11
 8000b42:	60bb      	str	r3, [r7, #8]
					}
					break;
 8000b44:	e06f      	b.n	8000c26 <processBuffer+0x23e>
				}
				case 11 :
				{
					data=velocity = received_char;										// Save MIDI velocity
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <processBuffer+0x260>)
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	4b3e      	ldr	r3, [pc, #248]	; (8000c48 <processBuffer+0x260>)
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	4b3e      	ldr	r3, [pc, #248]	; (8000c4c <processBuffer+0x264>)
 8000b54:	701a      	strb	r2, [r3, #0]

					//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;					// Move to next MIDI byte
					i++;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]

					state = 10;											// Next state is 10
 8000b5c:	230a      	movs	r3, #10
 8000b5e:	60bb      	str	r3, [r7, #8]

					if (velocity > 0)
 8000b60:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <processBuffer+0x260>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d05e      	beq.n	8000c26 <processBuffer+0x23e>
					{
						play_note(midimsg,velocity);
 8000b68:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <processBuffer+0x254>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4a36      	ldr	r2, [pc, #216]	; (8000c48 <processBuffer+0x260>)
 8000b6e:	7812      	ldrb	r2, [r2, #0]
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f8a2 	bl	8000cbc <play_note>
					}
					else
					{
					}
					break;
 8000b78:	e055      	b.n	8000c26 <processBuffer+0x23e>
				}
				// State 20 & 21 : Note OFF command
				case 20 :
				{
					if (received_char>0x7F)												// If the following byte is not a note number
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b7e:	d902      	bls.n	8000b86 <processBuffer+0x19e>
					{
						state = 0;													// Return to state 0 without moving to next byte
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	e04f      	b.n	8000c26 <processBuffer+0x23e>
					}

					else
					{
						ctrl= key = received_char;										// Save MIDI note
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <processBuffer+0x258>)
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <processBuffer+0x258>)
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <processBuffer+0x25c>)
 8000b94:	701a      	strb	r2, [r3, #0]

						//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
						i++;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]

						state = 21;													// Next state is 21
 8000b9c:	2315      	movs	r3, #21
 8000b9e:	60bb      	str	r3, [r7, #8]
					}
					break;
 8000ba0:	e041      	b.n	8000c26 <processBuffer+0x23e>
				}
				case 21 :
				{
					velocity =data = received_char;										// Save MIDI velocity
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <processBuffer+0x264>)
 8000ba8:	701a      	strb	r2, [r3, #0]
 8000baa:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <processBuffer+0x264>)
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <processBuffer+0x260>)
 8000bb0:	701a      	strb	r2, [r3, #0]
					//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;					// Move to next MIDI byte
					i++;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]

					state = 20;														// Next state is 20
 8000bb8:	2314      	movs	r3, #20
 8000bba:	60bb      	str	r3, [r7, #8]
					break;
 8000bbc:	e033      	b.n	8000c26 <processBuffer+0x23e>
				}
				// State 30 & 31 : CC command
				case 30 :
				{
					if (received_char>0x7F)												// If the following byte is not a CC number
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b7f      	cmp	r3, #127	; 0x7f
 8000bc2:	d902      	bls.n	8000bca <processBuffer+0x1e2>
					{
						state = 0;													// Return to state 0 without moving to next byte
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	e02d      	b.n	8000c26 <processBuffer+0x23e>
					}
					else
					{
						param = received_char;									// Save MIDI CC number
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <processBuffer+0x268>)
 8000bd0:	701a      	strb	r2, [r3, #0]

						//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
						i++;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
						state = 31;													// Next state is 31
 8000bd8:	231f      	movs	r3, #31
 8000bda:	60bb      	str	r3, [r7, #8]
					}
					break;
 8000bdc:	e023      	b.n	8000c26 <processBuffer+0x23e>
				}
				case 31 :
				{
					param = received_char;										// Save MIDI velocity
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <processBuffer+0x268>)
 8000be4:	701a      	strb	r2, [r3, #0]
					//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;					// Move to next MIDI byte
					i++;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3301      	adds	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
					state = 30;														// Next state is 30
 8000bec:	231e      	movs	r3, #30
 8000bee:	60bb      	str	r3, [r7, #8]
					break;
 8000bf0:	e019      	b.n	8000c26 <processBuffer+0x23e>
				}
				// State 40 & 41 : Pitch Bend message
				case 40 :
				{
					if (received_char > 0x7F)												// If following byte is note a PB value
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf6:	d902      	bls.n	8000bfe <processBuffer+0x216>
					{
						state = 0;													// Return to state 0
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	e013      	b.n	8000c26 <processBuffer+0x23e>
					}
					else
					{
						param = received_char;									// Save MIDI CC number
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <processBuffer+0x268>)
 8000c04:	701a      	strb	r2, [r3, #0]
						//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
						i++;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
						state = 41;													// Next state is 41
 8000c0c:	2329      	movs	r3, #41	; 0x29
 8000c0e:	60bb      	str	r3, [r7, #8]
					}
					break;
 8000c10:	e009      	b.n	8000c26 <processBuffer+0x23e>
				}
				case 41 :
				{
					param = received_char;										// Save MIDI velocity
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <processBuffer+0x268>)
 8000c18:	701a      	strb	r2, [r3, #0]
					//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;					// Move to next MIDI byte
					i++;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
					state = 40;														// Next state is 00
 8000c20:	2328      	movs	r3, #40	; 0x28
 8000c22:	60bb      	str	r3, [r7, #8]
					break;
 8000c24:	bf00      	nop
	while(i < MIDI_BUFFER_LENGTH )
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	f77f aee6 	ble.w	80009fa <processBuffer+0x12>
				}
			}
	}
}
 8000c2e:	bf00      	nop
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000040 	.word	0x20000040
 8000c3c:	20000735 	.word	0x20000735
 8000c40:	20000650 	.word	0x20000650
 8000c44:	20000578 	.word	0x20000578
 8000c48:	200005fc 	.word	0x200005fc
 8000c4c:	20000619 	.word	0x20000619
 8000c50:	200004e5 	.word	0x200004e5

08000c54 <HAL_UART_RxHalfCpltCallback>:
				}

}
*/

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
 8000c5c:	2364      	movs	r3, #100	; 0x64
 8000c5e:	2208      	movs	r2, #8
 8000c60:	4907      	ldr	r1, [pc, #28]	; (8000c80 <HAL_UART_RxHalfCpltCallback+0x2c>)
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <HAL_UART_RxHalfCpltCallback+0x30>)
 8000c64:	f004 fae2 	bl	800522c <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 8000c68:	2208      	movs	r2, #8
 8000c6a:	4905      	ldr	r1, [pc, #20]	; (8000c80 <HAL_UART_RxHalfCpltCallback+0x2c>)
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_UART_RxHalfCpltCallback+0x30>)
 8000c6e:	f004 fb70 	bl	8005352 <HAL_UART_Receive_DMA>

	//once MIDI buffer is full we send to the process buffer function
	processBuffer();
 8000c72:	f7ff feb9 	bl	80009e8 <processBuffer>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000040 	.word	0x20000040
 8000c84:	200006b0 	.word	0x200006b0

08000c88 <HAL_UART_RxCpltCallback>:

//buffer is full here, do something when full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
 8000c90:	2364      	movs	r3, #100	; 0x64
 8000c92:	2208      	movs	r2, #8
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <HAL_UART_RxCpltCallback+0x2c>)
 8000c96:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <HAL_UART_RxCpltCallback+0x30>)
 8000c98:	f004 fac8 	bl	800522c <HAL_UART_Transmit>
    HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	4905      	ldr	r1, [pc, #20]	; (8000cb4 <HAL_UART_RxCpltCallback+0x2c>)
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <HAL_UART_RxCpltCallback+0x30>)
 8000ca2:	f004 fb56 	bl	8005352 <HAL_UART_Receive_DMA>

    //once MIDI buffer is full we send to the process buffer function
    processBuffer();
 8000ca6:	f7ff fe9f 	bl	80009e8 <processBuffer>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000040 	.word	0x20000040
 8000cb8:	200006b0 	.word	0x200006b0

08000cbc <play_note>:
				case (0xF0): // Parameter Change
					break;
	}
}

void play_note(uint8_t note, uint8_t velocity){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	460a      	mov	r2, r1
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <play_note+0x28>)
 8000cd2:	f001 fbc3 	bl	800245c <HAL_GPIO_WritePin>
	playNoteB = 1;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <play_note+0x2c>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]

}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40020400 	.word	0x40020400
 8000ce8:	200005ac 	.word	0x200005ac

08000cec <stop_note>:

void stop_note(uint8_t note){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <stop_note+0x24>)
 8000cfc:	f001 fbae 	bl	800245c <HAL_GPIO_WritePin>
	playNoteB = 0;
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <stop_note+0x28>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]

}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40020400 	.word	0x40020400
 8000d14:	200005ac 	.word	0x200005ac

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000d2a:	f000 fa29 	bl	8001180 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000d2e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000d32:	2201      	movs	r2, #1
 8000d34:	2178      	movs	r1, #120	; 0x78
 8000d36:	485b      	ldr	r0, [pc, #364]	; (8000ea4 <SSD1306_Init+0x180>)
 8000d38:	f001 fd2e 	bl	8002798 <HAL_I2C_IsDeviceReady>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e0a9      	b.n	8000e9a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000d46:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000d4a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d4c:	e002      	b.n	8000d54 <SSD1306_Init+0x30>
		p--;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f9      	bne.n	8000d4e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000d5a:	22ae      	movs	r2, #174	; 0xae
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	; 0x78
 8000d60:	f000 fa6c 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000d64:	2220      	movs	r2, #32
 8000d66:	2100      	movs	r1, #0
 8000d68:	2078      	movs	r0, #120	; 0x78
 8000d6a:	f000 fa67 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d6e:	2210      	movs	r2, #16
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	; 0x78
 8000d74:	f000 fa62 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d78:	22b0      	movs	r2, #176	; 0xb0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2078      	movs	r0, #120	; 0x78
 8000d7e:	f000 fa5d 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000d82:	22c8      	movs	r2, #200	; 0xc8
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	; 0x78
 8000d88:	f000 fa58 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2078      	movs	r0, #120	; 0x78
 8000d92:	f000 fa53 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d96:	2210      	movs	r2, #16
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2078      	movs	r0, #120	; 0x78
 8000d9c:	f000 fa4e 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000da0:	2240      	movs	r2, #64	; 0x40
 8000da2:	2100      	movs	r1, #0
 8000da4:	2078      	movs	r0, #120	; 0x78
 8000da6:	f000 fa49 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000daa:	2281      	movs	r2, #129	; 0x81
 8000dac:	2100      	movs	r1, #0
 8000dae:	2078      	movs	r0, #120	; 0x78
 8000db0:	f000 fa44 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000db4:	22ff      	movs	r2, #255	; 0xff
 8000db6:	2100      	movs	r1, #0
 8000db8:	2078      	movs	r0, #120	; 0x78
 8000dba:	f000 fa3f 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000dbe:	22a1      	movs	r2, #161	; 0xa1
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2078      	movs	r0, #120	; 0x78
 8000dc4:	f000 fa3a 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000dc8:	22a6      	movs	r2, #166	; 0xa6
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2078      	movs	r0, #120	; 0x78
 8000dce:	f000 fa35 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000dd2:	22a8      	movs	r2, #168	; 0xa8
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	; 0x78
 8000dd8:	f000 fa30 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000ddc:	223f      	movs	r2, #63	; 0x3f
 8000dde:	2100      	movs	r1, #0
 8000de0:	2078      	movs	r0, #120	; 0x78
 8000de2:	f000 fa2b 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000de6:	22a4      	movs	r2, #164	; 0xa4
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	; 0x78
 8000dec:	f000 fa26 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000df0:	22d3      	movs	r2, #211	; 0xd3
 8000df2:	2100      	movs	r1, #0
 8000df4:	2078      	movs	r0, #120	; 0x78
 8000df6:	f000 fa21 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2078      	movs	r0, #120	; 0x78
 8000e00:	f000 fa1c 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e04:	22d5      	movs	r2, #213	; 0xd5
 8000e06:	2100      	movs	r1, #0
 8000e08:	2078      	movs	r0, #120	; 0x78
 8000e0a:	f000 fa17 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000e0e:	22f0      	movs	r2, #240	; 0xf0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2078      	movs	r0, #120	; 0x78
 8000e14:	f000 fa12 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000e18:	22d9      	movs	r2, #217	; 0xd9
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2078      	movs	r0, #120	; 0x78
 8000e1e:	f000 fa0d 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000e22:	2222      	movs	r2, #34	; 0x22
 8000e24:	2100      	movs	r1, #0
 8000e26:	2078      	movs	r0, #120	; 0x78
 8000e28:	f000 fa08 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000e2c:	22da      	movs	r2, #218	; 0xda
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2078      	movs	r0, #120	; 0x78
 8000e32:	f000 fa03 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000e36:	2212      	movs	r2, #18
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2078      	movs	r0, #120	; 0x78
 8000e3c:	f000 f9fe 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000e40:	22db      	movs	r2, #219	; 0xdb
 8000e42:	2100      	movs	r1, #0
 8000e44:	2078      	movs	r0, #120	; 0x78
 8000e46:	f000 f9f9 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2078      	movs	r0, #120	; 0x78
 8000e50:	f000 f9f4 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000e54:	228d      	movs	r2, #141	; 0x8d
 8000e56:	2100      	movs	r1, #0
 8000e58:	2078      	movs	r0, #120	; 0x78
 8000e5a:	f000 f9ef 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000e5e:	2214      	movs	r2, #20
 8000e60:	2100      	movs	r1, #0
 8000e62:	2078      	movs	r0, #120	; 0x78
 8000e64:	f000 f9ea 	bl	800123c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000e68:	22af      	movs	r2, #175	; 0xaf
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2078      	movs	r0, #120	; 0x78
 8000e6e:	f000 f9e5 	bl	800123c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e72:	222e      	movs	r2, #46	; 0x2e
 8000e74:	2100      	movs	r1, #0
 8000e76:	2078      	movs	r0, #120	; 0x78
 8000e78:	f000 f9e0 	bl	800123c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f000 f843 	bl	8000f08 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000e82:	f000 f813 	bl	8000eac <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <SSD1306_Init+0x184>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <SSD1306_Init+0x184>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SSD1306_Init+0x184>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000e98:	2301      	movs	r3, #1
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000510 	.word	0x20000510
 8000ea8:	20000448 	.word	0x20000448

08000eac <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	71fb      	strb	r3, [r7, #7]
 8000eb6:	e01d      	b.n	8000ef4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	3b50      	subs	r3, #80	; 0x50
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2078      	movs	r0, #120	; 0x78
 8000ec4:	f000 f9ba 	bl	800123c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2078      	movs	r0, #120	; 0x78
 8000ece:	f000 f9b5 	bl	800123c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000ed2:	2210      	movs	r2, #16
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2078      	movs	r0, #120	; 0x78
 8000ed8:	f000 f9b0 	bl	800123c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	01db      	lsls	r3, r3, #7
 8000ee0:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <SSD1306_UpdateScreen+0x58>)
 8000ee2:	441a      	add	r2, r3
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	2140      	movs	r1, #64	; 0x40
 8000ee8:	2078      	movs	r0, #120	; 0x78
 8000eea:	f000 f95f 	bl	80011ac <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b07      	cmp	r3, #7
 8000ef8:	d9de      	bls.n	8000eb8 <SSD1306_UpdateScreen+0xc>
	}
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000048 	.word	0x20000048

08000f08 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <SSD1306_Fill+0x14>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e000      	b.n	8000f1e <SSD1306_Fill+0x16>
 8000f1c:	23ff      	movs	r3, #255	; 0xff
 8000f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f22:	4619      	mov	r1, r3
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <SSD1306_Fill+0x2c>)
 8000f26:	f004 ffa9 	bl	8005e7c <memset>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000048 	.word	0x20000048

08000f38 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	460b      	mov	r3, r1
 8000f44:	80bb      	strh	r3, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	70fb      	strb	r3, [r7, #3]
	if (
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f4e:	d848      	bhi.n	8000fe2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000f50:	88bb      	ldrh	r3, [r7, #4]
 8000f52:	2b3f      	cmp	r3, #63	; 0x3f
 8000f54:	d845      	bhi.n	8000fe2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <SSD1306_DrawPixel+0xb8>)
 8000f58:	791b      	ldrb	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bf0c      	ite	eq
 8000f64:	2301      	moveq	r3, #1
 8000f66:	2300      	movne	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d11a      	bne.n	8000fa8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f72:	88fa      	ldrh	r2, [r7, #6]
 8000f74:	88bb      	ldrh	r3, [r7, #4]
 8000f76:	08db      	lsrs	r3, r3, #3
 8000f78:	b298      	uxth	r0, r3
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	01db      	lsls	r3, r3, #7
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <SSD1306_DrawPixel+0xbc>)
 8000f82:	5cd3      	ldrb	r3, [r2, r3]
 8000f84:	b25a      	sxtb	r2, r3
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b259      	sxtb	r1, r3
 8000f98:	88fa      	ldrh	r2, [r7, #6]
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	01db      	lsls	r3, r3, #7
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b2c9      	uxtb	r1, r1
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <SSD1306_DrawPixel+0xbc>)
 8000fa4:	54d1      	strb	r1, [r2, r3]
 8000fa6:	e01d      	b.n	8000fe4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000fa8:	88fa      	ldrh	r2, [r7, #6]
 8000faa:	88bb      	ldrh	r3, [r7, #4]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	b298      	uxth	r0, r3
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	01db      	lsls	r3, r3, #7
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <SSD1306_DrawPixel+0xbc>)
 8000fb8:	5cd3      	ldrb	r3, [r2, r3]
 8000fba:	b25a      	sxtb	r2, r3
 8000fbc:	88bb      	ldrh	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	b25b      	sxtb	r3, r3
 8000fce:	4013      	ands	r3, r2
 8000fd0:	b259      	sxtb	r1, r3
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	01db      	lsls	r3, r3, #7
 8000fd8:	4413      	add	r3, r2
 8000fda:	b2c9      	uxtb	r1, r1
 8000fdc:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <SSD1306_DrawPixel+0xbc>)
 8000fde:	54d1      	strb	r1, [r2, r3]
 8000fe0:	e000      	b.n	8000fe4 <SSD1306_DrawPixel+0xac>
		return;
 8000fe2:	bf00      	nop
	}
}
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000448 	.word	0x20000448
 8000ff4:	20000048 	.word	0x20000048

08000ff8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	80fb      	strh	r3, [r7, #6]
 8001004:	4613      	mov	r3, r2
 8001006:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001008:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SSD1306_GotoXY+0x28>)
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <SSD1306_GotoXY+0x28>)
 8001010:	88bb      	ldrh	r3, [r7, #4]
 8001012:	8053      	strh	r3, [r2, #2]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	20000448 	.word	0x20000448

08001024 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <SSD1306_Putc+0xfc>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
	if (
 8001040:	2b7f      	cmp	r3, #127	; 0x7f
 8001042:	dc07      	bgt.n	8001054 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001044:	4b36      	ldr	r3, [pc, #216]	; (8001120 <SSD1306_Putc+0xfc>)
 8001046:	885b      	ldrh	r3, [r3, #2]
 8001048:	461a      	mov	r2, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	785b      	ldrb	r3, [r3, #1]
 800104e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001050:	2b3f      	cmp	r3, #63	; 0x3f
 8001052:	dd01      	ble.n	8001058 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001054:	2300      	movs	r3, #0
 8001056:	e05e      	b.n	8001116 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e04b      	b.n	80010f6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	3b20      	subs	r3, #32
 8001066:	6839      	ldr	r1, [r7, #0]
 8001068:	7849      	ldrb	r1, [r1, #1]
 800106a:	fb01 f303 	mul.w	r3, r1, r3
 800106e:	4619      	mov	r1, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	440b      	add	r3, r1
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	e030      	b.n	80010e4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d010      	beq.n	80010b4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <SSD1306_Putc+0xfc>)
 8001094:	881a      	ldrh	r2, [r3, #0]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	b29b      	uxth	r3, r3
 800109a:	4413      	add	r3, r2
 800109c:	b298      	uxth	r0, r3
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <SSD1306_Putc+0xfc>)
 80010a0:	885a      	ldrh	r2, [r3, #2]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4413      	add	r3, r2
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	79ba      	ldrb	r2, [r7, #6]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff ff43 	bl	8000f38 <SSD1306_DrawPixel>
 80010b2:	e014      	b.n	80010de <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <SSD1306_Putc+0xfc>)
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4413      	add	r3, r2
 80010be:	b298      	uxth	r0, r3
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <SSD1306_Putc+0xfc>)
 80010c2:	885a      	ldrh	r2, [r3, #2]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4413      	add	r3, r2
 80010ca:	b299      	uxth	r1, r3
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf0c      	ite	eq
 80010d2:	2301      	moveq	r3, #1
 80010d4:	2300      	movne	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f7ff ff2d 	bl	8000f38 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	3301      	adds	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d3c8      	bcc.n	8001082 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	785b      	ldrb	r3, [r3, #1]
 80010fa:	461a      	mov	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	4293      	cmp	r3, r2
 8001100:	d3ad      	bcc.n	800105e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <SSD1306_Putc+0xfc>)
 8001104:	881a      	ldrh	r2, [r3, #0]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	4413      	add	r3, r2
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <SSD1306_Putc+0xfc>)
 8001112:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001114:	79fb      	ldrb	r3, [r7, #7]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000448 	.word	0x20000448

08001124 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	4613      	mov	r3, r2
 8001130:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001132:	e012      	b.n	800115a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff71 	bl	8001024 <SSD1306_Putc>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d002      	beq.n	8001154 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	e008      	b.n	8001166 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1e8      	bne.n	8001134 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	781b      	ldrb	r3, [r3, #0]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fec8 	bl	8000f08 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001178:	f7ff fe98 	bl	8000eac <SSD1306_UpdateScreen>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <ssd1306_I2C_Init+0x28>)
 8001188:	607b      	str	r3, [r7, #4]
	while(p>0)
 800118a:	e002      	b.n	8001192 <ssd1306_I2C_Init+0x12>
		p--;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f9      	bne.n	800118c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	0003d090 	.word	0x0003d090

080011ac <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b0c7      	sub	sp, #284	; 0x11c
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	4604      	mov	r4, r0
 80011b4:	4608      	mov	r0, r1
 80011b6:	4639      	mov	r1, r7
 80011b8:	600a      	str	r2, [r1, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	4622      	mov	r2, r4
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	1dbb      	adds	r3, r7, #6
 80011c4:	4602      	mov	r2, r0
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	460a      	mov	r2, r1
 80011cc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	1dba      	adds	r2, r7, #6
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80011de:	e010      	b.n	8001202 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80011e0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011e4:	463a      	mov	r2, r7
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	441a      	add	r2, r3
 80011ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011ee:	3301      	adds	r3, #1
 80011f0:	7811      	ldrb	r1, [r2, #0]
 80011f2:	f107 020c 	add.w	r2, r7, #12
 80011f6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80011f8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011fc:	3301      	adds	r3, #1
 80011fe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001202:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001206:	b29b      	uxth	r3, r3
 8001208:	1d3a      	adds	r2, r7, #4
 800120a:	8812      	ldrh	r2, [r2, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8e7      	bhi.n	80011e0 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8001210:	1dfb      	adds	r3, r7, #7
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b299      	uxth	r1, r3
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	b29b      	uxth	r3, r3
 800121e:	f107 020c 	add.w	r2, r7, #12
 8001222:	200a      	movs	r0, #10
 8001224:	9000      	str	r0, [sp, #0]
 8001226:	4804      	ldr	r0, [pc, #16]	; (8001238 <ssd1306_I2C_WriteMulti+0x8c>)
 8001228:	f001 f9c2 	bl	80025b0 <HAL_I2C_Master_Transmit>
}
 800122c:	bf00      	nop
 800122e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001232:	46bd      	mov	sp, r7
 8001234:	bd90      	pop	{r4, r7, pc}
 8001236:	bf00      	nop
 8001238:	20000510 	.word	0x20000510

0800123c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af02      	add	r7, sp, #8
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	460b      	mov	r3, r1
 8001248:	71bb      	strb	r3, [r7, #6]
 800124a:	4613      	mov	r3, r2
 800124c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001252:	797b      	ldrb	r3, [r7, #5]
 8001254:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	b299      	uxth	r1, r3
 800125a:	f107 020c 	add.w	r2, r7, #12
 800125e:	230a      	movs	r3, #10
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2302      	movs	r3, #2
 8001264:	4803      	ldr	r0, [pc, #12]	; (8001274 <ssd1306_I2C_Write+0x38>)
 8001266:	f001 f9a3 	bl	80025b0 <HAL_I2C_Master_Transmit>
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000510 	.word	0x20000510

08001278 <SSD1306_Menu>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////


void SSD1306_Menu()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	SSD1306_Init (); // initialize the LCD screen display
 800127c:	f7ff fd52 	bl	8000d24 <SSD1306_Init>
	SSD1306_Clear();
 8001280:	f7ff ff75 	bl	800116e <SSD1306_Clear>
	SSD1306_GotoXY (0, 0); 					// goto 10, 10
 8001284:	2100      	movs	r1, #0
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff feb6 	bl	8000ff8 <SSD1306_GotoXY>
	SSD1306_Puts ("Music Synth", &Font_11x18, 1); // print ECE 186B & our names
 800128c:	2201      	movs	r2, #1
 800128e:	4916      	ldr	r1, [pc, #88]	; (80012e8 <SSD1306_Menu+0x70>)
 8001290:	4816      	ldr	r0, [pc, #88]	; (80012ec <SSD1306_Menu+0x74>)
 8001292:	f7ff ff47 	bl	8001124 <SSD1306_Puts>
	SSD1306_GotoXY (0, 20); 					// goto 10, 10
 8001296:	2114      	movs	r1, #20
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fead 	bl	8000ff8 <SSD1306_GotoXY>
	SSD1306_Puts ("By:", &Font_7x10, 1); // print ECE 186B & our names
 800129e:	2201      	movs	r2, #1
 80012a0:	4913      	ldr	r1, [pc, #76]	; (80012f0 <SSD1306_Menu+0x78>)
 80012a2:	4814      	ldr	r0, [pc, #80]	; (80012f4 <SSD1306_Menu+0x7c>)
 80012a4:	f7ff ff3e 	bl	8001124 <SSD1306_Puts>
	SSD1306_GotoXY (0, 30);
 80012a8:	211e      	movs	r1, #30
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff fea4 	bl	8000ff8 <SSD1306_GotoXY>
	SSD1306_Puts ("Joshua Mendoza", &Font_7x10, 1);
 80012b0:	2201      	movs	r2, #1
 80012b2:	490f      	ldr	r1, [pc, #60]	; (80012f0 <SSD1306_Menu+0x78>)
 80012b4:	4810      	ldr	r0, [pc, #64]	; (80012f8 <SSD1306_Menu+0x80>)
 80012b6:	f7ff ff35 	bl	8001124 <SSD1306_Puts>
	SSD1306_GotoXY (0, 40);
 80012ba:	2128      	movs	r1, #40	; 0x28
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fe9b 	bl	8000ff8 <SSD1306_GotoXY>
	SSD1306_Puts ("Megan Abundo", &Font_7x10, 1);
 80012c2:	2201      	movs	r2, #1
 80012c4:	490a      	ldr	r1, [pc, #40]	; (80012f0 <SSD1306_Menu+0x78>)
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <SSD1306_Menu+0x84>)
 80012c8:	f7ff ff2c 	bl	8001124 <SSD1306_Puts>
	SSD1306_GotoXY (0, 50);
 80012cc:	2132      	movs	r1, #50	; 0x32
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fe92 	bl	8000ff8 <SSD1306_GotoXY>
	SSD1306_Puts ("Paris Villarrial", &Font_7x10, 1);
 80012d4:	2201      	movs	r2, #1
 80012d6:	4906      	ldr	r1, [pc, #24]	; (80012f0 <SSD1306_Menu+0x78>)
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <SSD1306_Menu+0x88>)
 80012da:	f7ff ff23 	bl	8001124 <SSD1306_Puts>
	SSD1306_UpdateScreen(); 					// update screen [DISPLAY]
 80012de:	f7ff fde5 	bl	8000eac <SSD1306_UpdateScreen>

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008
 80012ec:	08005ea4 	.word	0x08005ea4
 80012f0:	20000000 	.word	0x20000000
 80012f4:	08005eb0 	.word	0x08005eb0
 80012f8:	08005eb4 	.word	0x08005eb4
 80012fc:	08005ec4 	.word	0x08005ec4
 8001300:	08005ed4 	.word	0x08005ed4

08001304 <SSD1306_Note0>:
//////////////////////////////////////////////////////////////////
/////////MUSIC FUNC//////////////////////////////////////////////
/////////////////////////////////////////////////////////////////


void SSD1306_Note0(){
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	SSD1306_Init (); // initialize the LCD screen display
 8001308:	f7ff fd0c 	bl	8000d24 <SSD1306_Init>
	SSD1306_Clear();
 800130c:	f7ff ff2f 	bl	800116e <SSD1306_Clear>
	SSD1306_GotoXY (0, 0); 					// goto 10, 10
 8001310:	2100      	movs	r1, #0
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fe70 	bl	8000ff8 <SSD1306_GotoXY>
	SSD1306_Puts ("Wave:", &Font_11x18, 1); // print ECE 186B & our names
 8001318:	2201      	movs	r2, #1
 800131a:	490d      	ldr	r1, [pc, #52]	; (8001350 <SSD1306_Note0+0x4c>)
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <SSD1306_Note0+0x50>)
 800131e:	f7ff ff01 	bl	8001124 <SSD1306_Puts>
	SSD1306_GotoXY (0,20); 					// goto 10, 10
 8001322:	2114      	movs	r1, #20
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff fe67 	bl	8000ff8 <SSD1306_GotoXY>
	SSD1306_Puts ("Note:", &Font_11x18, 1); // print ECE 186B & our names
 800132a:	2201      	movs	r2, #1
 800132c:	4908      	ldr	r1, [pc, #32]	; (8001350 <SSD1306_Note0+0x4c>)
 800132e:	480a      	ldr	r0, [pc, #40]	; (8001358 <SSD1306_Note0+0x54>)
 8001330:	f7ff fef8 	bl	8001124 <SSD1306_Puts>
	SSD1306_GotoXY (0, 40); 					// goto 10, 10
 8001334:	2128      	movs	r1, #40	; 0x28
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff fe5e 	bl	8000ff8 <SSD1306_GotoXY>
	SSD1306_Puts ("Octv:", &Font_11x18, 1); // print ECE 186B & our names
 800133c:	2201      	movs	r2, #1
 800133e:	4904      	ldr	r1, [pc, #16]	; (8001350 <SSD1306_Note0+0x4c>)
 8001340:	4806      	ldr	r0, [pc, #24]	; (800135c <SSD1306_Note0+0x58>)
 8001342:	f7ff feef 	bl	8001124 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001346:	f7ff fdb1 	bl	8000eac <SSD1306_UpdateScreen>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008
 8001354:	08005ee8 	.word	0x08005ee8
 8001358:	08005ef0 	.word	0x08005ef0
 800135c:	08005ef8 	.word	0x08005ef8

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_MspInit+0x44>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <HAL_MspInit+0x44>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_MspInit+0x44>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_MspInit+0x44>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_MspInit+0x44>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_MspInit+0x44>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a17      	ldr	r2, [pc, #92]	; (8001424 <HAL_I2C_MspInit+0x7c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d127      	bne.n	800141a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_I2C_MspInit+0x80>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a16      	ldr	r2, [pc, #88]	; (8001428 <HAL_I2C_MspInit+0x80>)
 80013d0:	f043 0320 	orr.w	r3, r3, #32
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_I2C_MspInit+0x80>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013e2:	2303      	movs	r3, #3
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e6:	2312      	movs	r3, #18
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013f2:	2304      	movs	r3, #4
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	480b      	ldr	r0, [pc, #44]	; (800142c <HAL_I2C_MspInit+0x84>)
 80013fe:	f000 fe81 	bl	8002104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_I2C_MspInit+0x80>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_I2C_MspInit+0x80>)
 8001408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_I2C_MspInit+0x80>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40005800 	.word	0x40005800
 8001428:	40023800 	.word	0x40023800
 800142c:	40021400 	.word	0x40021400

08001430 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a17      	ldr	r2, [pc, #92]	; (80014ac <HAL_I2S_MspInit+0x7c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d127      	bne.n	80014a2 <HAL_I2S_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_I2S_MspInit+0x80>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <HAL_I2S_MspInit+0x80>)
 8001458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_I2S_MspInit+0x80>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_I2S_MspInit+0x80>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <HAL_I2S_MspInit+0x80>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_I2S_MspInit+0x80>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001482:	23b0      	movs	r3, #176	; 0xb0
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001492:	2305      	movs	r3, #5
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_I2S_MspInit+0x84>)
 800149e:	f000 fe31 	bl	8002104 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40013000 	.word	0x40013000
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000

080014b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a3d      	ldr	r2, [pc, #244]	; (80015cc <HAL_UART_MspInit+0x114>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d173      	bne.n	80015c2 <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <HAL_UART_MspInit+0x118>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a3c      	ldr	r2, [pc, #240]	; (80015d0 <HAL_UART_MspInit+0x118>)
 80014e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <HAL_UART_MspInit+0x118>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <HAL_UART_MspInit+0x118>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a36      	ldr	r2, [pc, #216]	; (80015d0 <HAL_UART_MspInit+0x118>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <HAL_UART_MspInit+0x118>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <HAL_UART_MspInit+0x118>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a30      	ldr	r2, [pc, #192]	; (80015d0 <HAL_UART_MspInit+0x118>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <HAL_UART_MspInit+0x118>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001522:	2301      	movs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001532:	2308      	movs	r3, #8
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4825      	ldr	r0, [pc, #148]	; (80015d4 <HAL_UART_MspInit+0x11c>)
 800153e:	f000 fde1 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001554:	2308      	movs	r3, #8
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	481e      	ldr	r0, [pc, #120]	; (80015d8 <HAL_UART_MspInit+0x120>)
 8001560:	f000 fdd0 	bl	8002104 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_UART_MspInit+0x124>)
 8001566:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <HAL_UART_MspInit+0x128>)
 8001568:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <HAL_UART_MspInit+0x124>)
 800156c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001570:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_UART_MspInit+0x124>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_UART_MspInit+0x124>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_UART_MspInit+0x124>)
 8001580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001584:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_UART_MspInit+0x124>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_UART_MspInit+0x124>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_UART_MspInit+0x124>)
 8001594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001598:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_UART_MspInit+0x124>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_UART_MspInit+0x124>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <HAL_UART_MspInit+0x124>)
 80015a8:	f000 fa34 	bl	8001a14 <HAL_DMA_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80015b2:	f7ff fbb1 	bl	8000d18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_UART_MspInit+0x124>)
 80015ba:	671a      	str	r2, [r3, #112]	; 0x70
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_UART_MspInit+0x124>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40004c00 	.word	0x40004c00
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020800 	.word	0x40020800
 80015dc:	20000484 	.word	0x20000484
 80015e0:	40026040 	.word	0x40026040

080015e4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a15      	ldr	r2, [pc, #84]	; (8001648 <HAL_SAI_MspInit+0x64>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d124      	bne.n	8001640 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_SAI_MspInit+0x68>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10b      	bne.n	8001616 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_SAI_MspInit+0x6c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_SAI_MspInit+0x6c>)
 8001604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_SAI_MspInit+0x6c>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_SAI_MspInit+0x68>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	4a0b      	ldr	r2, [pc, #44]	; (800164c <HAL_SAI_MspInit+0x68>)
 800161e:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001620:	2370      	movs	r3, #112	; 0x70
 8001622:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001630:	2306      	movs	r3, #6
 8001632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <HAL_SAI_MspInit+0x70>)
 800163c:	f000 fd62 	bl	8002104 <HAL_GPIO_Init>

    }
}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40015804 	.word	0x40015804
 800164c:	20000450 	.word	0x20000450
 8001650:	40023800 	.word	0x40023800
 8001654:	40021000 	.word	0x40021000

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 f884 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <DMA1_Stream2_IRQHandler+0x10>)
 80016b2:	f000 fabd 	bl	8001c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000484 	.word	0x20000484

080016c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800171c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ea:	490e      	ldr	r1, [pc, #56]	; (8001724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001700:	4c0b      	ldr	r4, [pc, #44]	; (8001730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800170e:	f7ff ffd7 	bl	80016c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001712:	f004 fb8f 	bl	8005e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7fe ff0b 	bl	8000530 <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800171c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001728:	080074f8 	.word	0x080074f8
  ldr r2, =_sbss
 800172c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001730:	20000800 	.word	0x20000800

08001734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC_IRQHandler>

08001736 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173a:	2003      	movs	r0, #3
 800173c:	f000 f928 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001740:	200f      	movs	r0, #15
 8001742:	f000 f805 	bl	8001750 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001746:	f7ff fe0b 	bl	8001360 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f943 	bl	80019fa <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f90b 	bl	80019a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000010 	.word	0x20000010
 80017a8:	20000018 	.word	0x20000018
 80017ac:	20000014 	.word	0x20000014

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000018 	.word	0x20000018
 80017d4:	200007fc 	.word	0x200007fc

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	200007fc 	.word	0x200007fc

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <__NVIC_SetPriorityGrouping+0x40>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	4313      	orrs	r3, r2
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x40>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	05fa0000 	.word	0x05fa0000

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800195c:	d301      	bcc.n	8001962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195e:	2301      	movs	r3, #1
 8001960:	e00f      	b.n	8001982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <SysTick_Config+0x40>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196a:	210f      	movs	r1, #15
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f7ff ff8e 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <SysTick_Config+0x40>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <SysTick_Config+0x40>)
 800197c:	2207      	movs	r2, #7
 800197e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	e000e010 	.word	0xe000e010

08001990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff29 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b8:	f7ff ff3e 	bl	8001838 <__NVIC_GetPriorityGrouping>
 80019bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff ff8e 	bl	80018e4 <NVIC_EncodePriority>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5d 	bl	8001890 <__NVIC_SetPriority>
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff31 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffa2 	bl	800194c <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff feda 	bl	80017d8 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e099      	b.n	8001b64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0201 	bic.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a50:	e00f      	b.n	8001a72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a52:	f7ff fec1 	bl	80017d8 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d908      	bls.n	8001a72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2220      	movs	r2, #32
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e078      	b.n	8001b64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e8      	bne.n	8001a52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <HAL_DMA_Init+0x158>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d107      	bne.n	8001adc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f023 0307 	bic.w	r3, r3, #7
 8001af2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d117      	bne.n	8001b36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00e      	beq.n	8001b36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fa77 	bl	800200c <DMA_CheckFifoParam>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2240      	movs	r2, #64	; 0x40
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b32:	2301      	movs	r3, #1
 8001b34:	e016      	b.n	8001b64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fa2e 	bl	8001fa0 <DMA_CalcBaseAndBitshift>
 8001b44:	4603      	mov	r3, r0
 8001b46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4c:	223f      	movs	r2, #63	; 0x3f
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	e010803f 	.word	0xe010803f

08001b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_DMA_Start_IT+0x26>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e048      	b.n	8001c28 <HAL_DMA_Start_IT+0xb8>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d137      	bne.n	8001c1a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2202      	movs	r2, #2
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 f9c0 	bl	8001f44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc8:	223f      	movs	r2, #63	; 0x3f
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0216 	orr.w	r2, r2, #22
 8001bde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bee:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0208 	orr.w	r2, r2, #8
 8001c06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e005      	b.n	8001c26 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
 8001c24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001c3c:	4b92      	ldr	r3, [pc, #584]	; (8001e88 <HAL_DMA_IRQHandler+0x258>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a92      	ldr	r2, [pc, #584]	; (8001e8c <HAL_DMA_IRQHandler+0x25c>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	0a9b      	lsrs	r3, r3, #10
 8001c48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01a      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d013      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0204 	bic.w	r2, r2, #4
 8001c82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	2208      	movs	r2, #8
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d012      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	f043 0202 	orr.w	r2, r3, #2
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d012      	beq.n	8001d08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00b      	beq.n	8001d08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	f043 0204 	orr.w	r2, r3, #4
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d043      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d03c      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d018      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d108      	bne.n	8001d60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d024      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
 8001d5e:	e01f      	b.n	8001da0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01b      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	4798      	blx	r3
 8001d70:	e016      	b.n	8001da0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d107      	bne.n	8001d90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0208 	bic.w	r2, r2, #8
 8001d8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da4:	2220      	movs	r2, #32
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 808e 	beq.w	8001ece <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8086 	beq.w	8001ece <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d136      	bne.n	8001e48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0216 	bic.w	r2, r2, #22
 8001de8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <HAL_DMA_IRQHandler+0x1da>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0208 	bic.w	r2, r2, #8
 8001e18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	223f      	movs	r2, #63	; 0x3f
 8001e20:	409a      	lsls	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d07d      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	4798      	blx	r3
        }
        return;
 8001e46:	e078      	b.n	8001f3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01c      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d108      	bne.n	8001e76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d030      	beq.n	8001ece <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4798      	blx	r3
 8001e74:	e02b      	b.n	8001ece <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d027      	beq.n	8001ece <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
 8001e86:	e022      	b.n	8001ece <HAL_DMA_IRQHandler+0x29e>
 8001e88:	20000010 	.word	0x20000010
 8001e8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10f      	bne.n	8001ebe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0210 	bic.w	r2, r2, #16
 8001eac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d032      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d022      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2205      	movs	r2, #5
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3301      	adds	r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d307      	bcc.n	8001f16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f2      	bne.n	8001efa <HAL_DMA_IRQHandler+0x2ca>
 8001f14:	e000      	b.n	8001f18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
 8001f38:	e000      	b.n	8001f3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f3a:	bf00      	nop
    }
  }
}
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop

08001f44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b40      	cmp	r3, #64	; 0x40
 8001f70:	d108      	bne.n	8001f84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f82:	e007      	b.n	8001f94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	3b10      	subs	r3, #16
 8001fb0:	4a13      	ldr	r2, [pc, #76]	; (8002000 <DMA_CalcBaseAndBitshift+0x60>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	091b      	lsrs	r3, r3, #4
 8001fb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <DMA_CalcBaseAndBitshift+0x64>)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d908      	bls.n	8001fe0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <DMA_CalcBaseAndBitshift+0x68>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	1d1a      	adds	r2, r3, #4
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	659a      	str	r2, [r3, #88]	; 0x58
 8001fde:	e006      	b.n	8001fee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <DMA_CalcBaseAndBitshift+0x68>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	aaaaaaab 	.word	0xaaaaaaab
 8002004:	080074e0 	.word	0x080074e0
 8002008:	fffffc00 	.word	0xfffffc00

0800200c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d11f      	bne.n	8002066 <DMA_CheckFifoParam+0x5a>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d856      	bhi.n	80020da <DMA_CheckFifoParam+0xce>
 800202c:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <DMA_CheckFifoParam+0x28>)
 800202e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002032:	bf00      	nop
 8002034:	08002045 	.word	0x08002045
 8002038:	08002057 	.word	0x08002057
 800203c:	08002045 	.word	0x08002045
 8002040:	080020db 	.word	0x080020db
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d046      	beq.n	80020de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002054:	e043      	b.n	80020de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800205e:	d140      	bne.n	80020e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002064:	e03d      	b.n	80020e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800206e:	d121      	bne.n	80020b4 <DMA_CheckFifoParam+0xa8>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d837      	bhi.n	80020e6 <DMA_CheckFifoParam+0xda>
 8002076:	a201      	add	r2, pc, #4	; (adr r2, 800207c <DMA_CheckFifoParam+0x70>)
 8002078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207c:	0800208d 	.word	0x0800208d
 8002080:	08002093 	.word	0x08002093
 8002084:	0800208d 	.word	0x0800208d
 8002088:	080020a5 	.word	0x080020a5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
      break;
 8002090:	e030      	b.n	80020f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d025      	beq.n	80020ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a2:	e022      	b.n	80020ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020ac:	d11f      	bne.n	80020ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020b2:	e01c      	b.n	80020ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d903      	bls.n	80020c2 <DMA_CheckFifoParam+0xb6>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d003      	beq.n	80020c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020c0:	e018      	b.n	80020f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
      break;
 80020c6:	e015      	b.n	80020f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00e      	beq.n	80020f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
      break;
 80020d8:	e00b      	b.n	80020f2 <DMA_CheckFifoParam+0xe6>
      break;
 80020da:	bf00      	nop
 80020dc:	e00a      	b.n	80020f4 <DMA_CheckFifoParam+0xe8>
      break;
 80020de:	bf00      	nop
 80020e0:	e008      	b.n	80020f4 <DMA_CheckFifoParam+0xe8>
      break;
 80020e2:	bf00      	nop
 80020e4:	e006      	b.n	80020f4 <DMA_CheckFifoParam+0xe8>
      break;
 80020e6:	bf00      	nop
 80020e8:	e004      	b.n	80020f4 <DMA_CheckFifoParam+0xe8>
      break;
 80020ea:	bf00      	nop
 80020ec:	e002      	b.n	80020f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80020ee:	bf00      	nop
 80020f0:	e000      	b.n	80020f4 <DMA_CheckFifoParam+0xe8>
      break;
 80020f2:	bf00      	nop
    }
  } 
  
  return status; 
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop

08002104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	e175      	b.n	8002410 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002124:	2201      	movs	r2, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	429a      	cmp	r2, r3
 800213e:	f040 8164 	bne.w	800240a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d00b      	beq.n	8002162 <HAL_GPIO_Init+0x5e>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d007      	beq.n	8002162 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002156:	2b11      	cmp	r3, #17
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b12      	cmp	r3, #18
 8002160:	d130      	bne.n	80021c4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 0201 	and.w	r2, r3, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x100>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b12      	cmp	r3, #18
 8002202:	d123      	bne.n	800224c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	08da      	lsrs	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3208      	adds	r2, #8
 800220c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	08da      	lsrs	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3208      	adds	r2, #8
 8002246:	69b9      	ldr	r1, [r7, #24]
 8002248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0203 	and.w	r2, r3, #3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80be 	beq.w	800240a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228e:	4b66      	ldr	r3, [pc, #408]	; (8002428 <HAL_GPIO_Init+0x324>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4a65      	ldr	r2, [pc, #404]	; (8002428 <HAL_GPIO_Init+0x324>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6453      	str	r3, [r2, #68]	; 0x44
 800229a:	4b63      	ldr	r3, [pc, #396]	; (8002428 <HAL_GPIO_Init+0x324>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022a6:	4a61      	ldr	r2, [pc, #388]	; (800242c <HAL_GPIO_Init+0x328>)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	220f      	movs	r2, #15
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a58      	ldr	r2, [pc, #352]	; (8002430 <HAL_GPIO_Init+0x32c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d037      	beq.n	8002342 <HAL_GPIO_Init+0x23e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a57      	ldr	r2, [pc, #348]	; (8002434 <HAL_GPIO_Init+0x330>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d031      	beq.n	800233e <HAL_GPIO_Init+0x23a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a56      	ldr	r2, [pc, #344]	; (8002438 <HAL_GPIO_Init+0x334>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d02b      	beq.n	800233a <HAL_GPIO_Init+0x236>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a55      	ldr	r2, [pc, #340]	; (800243c <HAL_GPIO_Init+0x338>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d025      	beq.n	8002336 <HAL_GPIO_Init+0x232>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a54      	ldr	r2, [pc, #336]	; (8002440 <HAL_GPIO_Init+0x33c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01f      	beq.n	8002332 <HAL_GPIO_Init+0x22e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a53      	ldr	r2, [pc, #332]	; (8002444 <HAL_GPIO_Init+0x340>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d019      	beq.n	800232e <HAL_GPIO_Init+0x22a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a52      	ldr	r2, [pc, #328]	; (8002448 <HAL_GPIO_Init+0x344>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_GPIO_Init+0x226>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a51      	ldr	r2, [pc, #324]	; (800244c <HAL_GPIO_Init+0x348>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00d      	beq.n	8002326 <HAL_GPIO_Init+0x222>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a50      	ldr	r2, [pc, #320]	; (8002450 <HAL_GPIO_Init+0x34c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <HAL_GPIO_Init+0x21e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4f      	ldr	r2, [pc, #316]	; (8002454 <HAL_GPIO_Init+0x350>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_GPIO_Init+0x21a>
 800231a:	2309      	movs	r3, #9
 800231c:	e012      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800231e:	230a      	movs	r3, #10
 8002320:	e010      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002322:	2308      	movs	r3, #8
 8002324:	e00e      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002326:	2307      	movs	r3, #7
 8002328:	e00c      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800232a:	2306      	movs	r3, #6
 800232c:	e00a      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800232e:	2305      	movs	r3, #5
 8002330:	e008      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002332:	2304      	movs	r3, #4
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002336:	2303      	movs	r3, #3
 8002338:	e004      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800233a:	2302      	movs	r3, #2
 800233c:	e002      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002342:	2300      	movs	r3, #0
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	f002 0203 	and.w	r2, r2, #3
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	4093      	lsls	r3, r2
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002354:	4935      	ldr	r1, [pc, #212]	; (800242c <HAL_GPIO_Init+0x328>)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002362:	4b3d      	ldr	r3, [pc, #244]	; (8002458 <HAL_GPIO_Init+0x354>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002386:	4a34      	ldr	r2, [pc, #208]	; (8002458 <HAL_GPIO_Init+0x354>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800238c:	4b32      	ldr	r3, [pc, #200]	; (8002458 <HAL_GPIO_Init+0x354>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023b0:	4a29      	ldr	r2, [pc, #164]	; (8002458 <HAL_GPIO_Init+0x354>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b6:	4b28      	ldr	r3, [pc, #160]	; (8002458 <HAL_GPIO_Init+0x354>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023da:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <HAL_GPIO_Init+0x354>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_GPIO_Init+0x354>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_GPIO_Init+0x354>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3301      	adds	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b0f      	cmp	r3, #15
 8002414:	f67f ae86 	bls.w	8002124 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40013800 	.word	0x40013800
 8002430:	40020000 	.word	0x40020000
 8002434:	40020400 	.word	0x40020400
 8002438:	40020800 	.word	0x40020800
 800243c:	40020c00 	.word	0x40020c00
 8002440:	40021000 	.word	0x40021000
 8002444:	40021400 	.word	0x40021400
 8002448:	40021800 	.word	0x40021800
 800244c:	40021c00 	.word	0x40021c00
 8002450:	40022000 	.word	0x40022000
 8002454:	40022400 	.word	0x40022400
 8002458:	40013c00 	.word	0x40013c00

0800245c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	807b      	strh	r3, [r7, #2]
 8002468:	4613      	mov	r3, r2
 800246a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800246c:	787b      	ldrb	r3, [r7, #1]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002478:	e003      	b.n	8002482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800247a:	887b      	ldrh	r3, [r7, #2]
 800247c:	041a      	lsls	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	619a      	str	r2, [r3, #24]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e07f      	b.n	80025a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe ff76 	bl	80013a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	; 0x24
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	e006      	b.n	8002518 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002516:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d104      	bne.n	800252a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_I2C_Init+0x11c>)
 8002536:	430b      	orrs	r3, r1
 8002538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	ea42 0103 	orr.w	r1, r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	021a      	lsls	r2, r3, #8
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69d9      	ldr	r1, [r3, #28]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1a      	ldr	r2, [r3, #32]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	02008000 	.word	0x02008000

080025b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	461a      	mov	r2, r3
 80025bc:	460b      	mov	r3, r1
 80025be:	817b      	strh	r3, [r7, #10]
 80025c0:	4613      	mov	r3, r2
 80025c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	f040 80da 	bne.w	8002786 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_I2C_Master_Transmit+0x30>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0d3      	b.n	8002788 <HAL_I2C_Master_Transmit+0x1d8>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025e8:	f7ff f8f6 	bl	80017d8 <HAL_GetTick>
 80025ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2319      	movs	r3, #25
 80025f4:	2201      	movs	r2, #1
 80025f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f9f8 	bl	80029f0 <I2C_WaitOnFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0be      	b.n	8002788 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2221      	movs	r2, #33	; 0x21
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2210      	movs	r2, #16
 8002616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	893a      	ldrh	r2, [r7, #8]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	2bff      	cmp	r3, #255	; 0xff
 800263a:	d90e      	bls.n	800265a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	22ff      	movs	r2, #255	; 0xff
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002646:	b2da      	uxtb	r2, r3
 8002648:	8979      	ldrh	r1, [r7, #10]
 800264a:	4b51      	ldr	r3, [pc, #324]	; (8002790 <HAL_I2C_Master_Transmit+0x1e0>)
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 faee 	bl	8002c34 <I2C_TransferConfig>
 8002658:	e06c      	b.n	8002734 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	b2da      	uxtb	r2, r3
 800266a:	8979      	ldrh	r1, [r7, #10]
 800266c:	4b48      	ldr	r3, [pc, #288]	; (8002790 <HAL_I2C_Master_Transmit+0x1e0>)
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fadd 	bl	8002c34 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800267a:	e05b      	b.n	8002734 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	6a39      	ldr	r1, [r7, #32]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f9f5 	bl	8002a70 <I2C_WaitOnTXISFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e07b      	b.n	8002788 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d034      	beq.n	8002734 <HAL_I2C_Master_Transmit+0x184>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d130      	bne.n	8002734 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	2200      	movs	r2, #0
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f987 	bl	80029f0 <I2C_WaitOnFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e04d      	b.n	8002788 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2bff      	cmp	r3, #255	; 0xff
 80026f4:	d90e      	bls.n	8002714 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	22ff      	movs	r2, #255	; 0xff
 80026fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	b2da      	uxtb	r2, r3
 8002702:	8979      	ldrh	r1, [r7, #10]
 8002704:	2300      	movs	r3, #0
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 fa91 	bl	8002c34 <I2C_TransferConfig>
 8002712:	e00f      	b.n	8002734 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	b2da      	uxtb	r2, r3
 8002724:	8979      	ldrh	r1, [r7, #10]
 8002726:	2300      	movs	r3, #0
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fa80 	bl	8002c34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d19e      	bne.n	800267c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	6a39      	ldr	r1, [r7, #32]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f9d4 	bl	8002af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e01a      	b.n	8002788 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2220      	movs	r2, #32
 8002758:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_I2C_Master_Transmit+0x1e4>)
 8002766:	400b      	ands	r3, r1
 8002768:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e000      	b.n	8002788 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002786:	2302      	movs	r3, #2
  }
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	80002000 	.word	0x80002000
 8002794:	fe00e800 	.word	0xfe00e800

08002798 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	460b      	mov	r3, r1
 80027a6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	f040 80ef 	bne.w	8002998 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c8:	d101      	bne.n	80027ce <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0e5      	b.n	800299a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_I2C_IsDeviceReady+0x44>
 80027d8:	2302      	movs	r3, #2
 80027da:	e0de      	b.n	800299a <HAL_I2C_IsDeviceReady+0x202>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2224      	movs	r2, #36	; 0x24
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d105      	bne.n	8002806 <HAL_I2C_IsDeviceReady+0x6e>
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002800:	4b68      	ldr	r3, [pc, #416]	; (80029a4 <HAL_I2C_IsDeviceReady+0x20c>)
 8002802:	4313      	orrs	r3, r2
 8002804:	e004      	b.n	8002810 <HAL_I2C_IsDeviceReady+0x78>
 8002806:	897b      	ldrh	r3, [r7, #10]
 8002808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002816:	f7fe ffdf 	bl	80017d8 <HAL_GetTick>
 800281a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b20      	cmp	r3, #32
 8002828:	bf0c      	ite	eq
 800282a:	2301      	moveq	r3, #1
 800282c:	2300      	movne	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b10      	cmp	r3, #16
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002848:	e034      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d01a      	beq.n	8002888 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002852:	f7fe ffc1 	bl	80017d8 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d302      	bcc.n	8002868 <HAL_I2C_IsDeviceReady+0xd0>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10f      	bne.n	8002888 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e088      	b.n	800299a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b20      	cmp	r3, #32
 8002894:	bf0c      	ite	eq
 8002896:	2301      	moveq	r3, #1
 8002898:	2300      	movne	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b10      	cmp	r3, #16
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80028b4:	7ffb      	ldrb	r3, [r7, #31]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <HAL_I2C_IsDeviceReady+0x128>
 80028ba:	7fbb      	ldrb	r3, [r7, #30]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0c4      	beq.n	800284a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b10      	cmp	r3, #16
 80028cc:	d01a      	beq.n	8002904 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2200      	movs	r2, #0
 80028d6:	2120      	movs	r1, #32
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f889 	bl	80029f0 <I2C_WaitOnFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e058      	b.n	800299a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2220      	movs	r2, #32
 80028ee:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	e04a      	b.n	800299a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	2120      	movs	r1, #32
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f86e 	bl	80029f0 <I2C_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e03d      	b.n	800299a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2210      	movs	r2, #16
 8002924:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2220      	movs	r2, #32
 800292c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	429a      	cmp	r2, r3
 8002934:	d118      	bne.n	8002968 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002944:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2200      	movs	r2, #0
 800294e:	2120      	movs	r1, #32
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f84d 	bl	80029f0 <I2C_WaitOnFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e01c      	b.n	800299a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2220      	movs	r2, #32
 8002966:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3301      	adds	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	429a      	cmp	r2, r3
 8002974:	f63f af3d 	bhi.w	80027f2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	f043 0220 	orr.w	r2, r3, #32
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	02002000 	.word	0x02002000

080029a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d103      	bne.n	80029c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d007      	beq.n	80029e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	619a      	str	r2, [r3, #24]
  }
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a00:	e022      	b.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d01e      	beq.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0a:	f7fe fee5 	bl	80017d8 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d302      	bcc.n	8002a20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d113      	bne.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e00f      	b.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4013      	ands	r3, r2
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	bf0c      	ite	eq
 8002a58:	2301      	moveq	r3, #1
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d0cd      	beq.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a7c:	e02c      	b.n	8002ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f870 	bl	8002b68 <I2C_IsAcknowledgeFailed>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e02a      	b.n	8002ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d01e      	beq.n	8002ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9a:	f7fe fe9d 	bl	80017d8 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d302      	bcc.n	8002ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d113      	bne.n	8002ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e007      	b.n	8002ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d1cb      	bne.n	8002a7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002afc:	e028      	b.n	8002b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f830 	bl	8002b68 <I2C_IsAcknowledgeFailed>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e026      	b.n	8002b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b12:	f7fe fe61 	bl	80017d8 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d302      	bcc.n	8002b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d113      	bne.n	8002b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e007      	b.n	8002b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d1cf      	bne.n	8002afe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d151      	bne.n	8002c26 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b82:	e022      	b.n	8002bca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8a:	d01e      	beq.n	8002bca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8c:	f7fe fe24 	bl	80017d8 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d302      	bcc.n	8002ba2 <I2C_IsAcknowledgeFailed+0x3a>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d113      	bne.n	8002bca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	f043 0220 	orr.w	r2, r3, #32
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e02e      	b.n	8002c28 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d1d5      	bne.n	8002b84 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2220      	movs	r2, #32
 8002be6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f7ff fedd 	bl	80029a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <I2C_IsAcknowledgeFailed+0xc8>)
 8002bfa:	400b      	ands	r3, r1
 8002bfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f043 0204 	orr.w	r2, r3, #4
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	fe00e800 	.word	0xfe00e800

08002c34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	607b      	str	r3, [r7, #4]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	817b      	strh	r3, [r7, #10]
 8002c42:	4613      	mov	r3, r2
 8002c44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	0d5b      	lsrs	r3, r3, #21
 8002c50:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c54:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <I2C_TransferConfig+0x58>)
 8002c56:	430b      	orrs	r3, r1
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	ea02 0103 	and.w	r1, r2, r3
 8002c5e:	897b      	ldrh	r3, [r7, #10]
 8002c60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c64:	7a7b      	ldrb	r3, [r7, #9]
 8002c66:	041b      	lsls	r3, r3, #16
 8002c68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	03ff63ff 	.word	0x03ff63ff

08002c90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d138      	bne.n	8002d18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e032      	b.n	8002d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	; 0x24
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ce2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6819      	ldr	r1, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e000      	b.n	8002d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
  }
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d139      	bne.n	8002db0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e033      	b.n	8002db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2224      	movs	r2, #36	; 0x24
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e000      	b.n	8002db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0d2      	b.n	8002f78 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe fb22 	bl	8001430 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69d9      	ldr	r1, [r3, #28]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4b60      	ldr	r3, [pc, #384]	; (8002f80 <HAL_I2S_Init+0x1c0>)
 8002e00:	400b      	ands	r3, r1
 8002e02:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d067      	beq.n	8002ee4 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e001      	b.n	8002e26 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002e22:	2320      	movs	r3, #32
 8002e24:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d802      	bhi.n	8002e34 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d102      	bne.n	8002e42 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8002e3c:	4b51      	ldr	r3, [pc, #324]	; (8002f84 <HAL_I2S_Init+0x1c4>)
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e003      	b.n	8002e4a <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa28 	bl	8003298 <I2S_GetClockFreq>
 8002e48:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e52:	d125      	bne.n	8002ea0 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d010      	beq.n	8002e7e <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	461a      	mov	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	3305      	adds	r3, #5
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	e01f      	b.n	8002ebe <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	461a      	mov	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9a:	3305      	adds	r3, #5
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	e00e      	b.n	8002ebe <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	3305      	adds	r3, #5
 8002ebc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4a31      	ldr	r2, [pc, #196]	; (8002f88 <HAL_I2S_Init+0x1c8>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	08db      	lsrs	r3, r3, #3
 8002ec8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e003      	b.n	8002eec <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d902      	bls.n	8002ef8 <HAL_I2S_Init+0x138>
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	2bff      	cmp	r3, #255	; 0xff
 8002ef6:	d907      	bls.n	8002f08 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efc:	f043 0210 	orr.w	r2, r3, #16
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e037      	b.n	8002f78 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	ea42 0103 	orr.w	r1, r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <HAL_I2S_Init+0x1c0>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6851      	ldr	r1, [r2, #4]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6892      	ldr	r2, [r2, #8]
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	68d2      	ldr	r2, [r2, #12]
 8002f34:	4311      	orrs	r1, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6992      	ldr	r2, [r2, #24]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f46:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b30      	cmp	r3, #48	; 0x30
 8002f4e:	d003      	beq.n	8002f58 <HAL_I2S_Init+0x198>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2bb0      	cmp	r3, #176	; 0xb0
 8002f56:	d107      	bne.n	8002f68 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f66:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	fffff040 	.word	0xfffff040
 8002f84:	00bb8000 	.word	0x00bb8000
 8002f88:	cccccccd 	.word	0xcccccccd

08002f8c <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_I2S_Receive+0x1c>
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0b4      	b.n	8003116 <HAL_I2S_Receive+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_I2S_Receive+0x30>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e0ac      	b.n	8003116 <HAL_I2S_Receive+0x18a>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d005      	beq.n	8002fdc <HAL_I2S_Receive+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e09c      	b.n	8003116 <HAL_I2S_Receive+0x18a>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2204      	movs	r2, #4
 8002fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pRxBuffPtr = pData;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d002      	beq.n	8003008 <HAL_I2S_Receive+0x7c>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	2b05      	cmp	r3, #5
 8003006:	d10a      	bne.n	800301e <HAL_I2S_Receive+0x92>
  {
    hi2s->RxXferSize = (Size << 1U);
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800301c:	e005      	b.n	800302a <HAL_I2S_Receive+0x9e>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = Size;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	88fa      	ldrh	r2, [r7, #6]
 8003028:	85da      	strh	r2, [r3, #46]	; 0x2e
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003038:	d007      	beq.n	800304a <HAL_I2S_Receive+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003048:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003054:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003058:	d14f      	bne.n	80030fa <HAL_I2S_Receive+0x16e>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 8003070:	e043      	b.n	80030fa <HAL_I2S_Receive+0x16e>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2201      	movs	r2, #1
 8003076:	2101      	movs	r1, #1
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f9ae 	bl	80033da <I2S_WaitFlagStateUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00f      	beq.n	80030a4 <HAL_I2S_Receive+0x118>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	f043 0201 	orr.w	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      __HAL_UNLOCK(hi2s);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e038      	b.n	8003116 <HAL_I2S_Receive+0x18a>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	b292      	uxth	r2, r2
 80030b0:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b6:	1c9a      	adds	r2, r3, #2
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28
    hi2s->RxXferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d110      	bne.n	80030fa <HAL_I2S_Receive+0x16e>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f2:	f043 0202 	orr.w	r2, r3, #2
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	63da      	str	r2, [r3, #60]	; 0x3c
  while (hi2s->RxXferCount > 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1b6      	bne.n	8003072 <HAL_I2S_Receive+0xe6>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  __HAL_UNLOCK(hi2s);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3720      	adds	r7, #32
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_I2S_Transmit_DMA+0x1a>
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e08e      	b.n	800325c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_I2S_Transmit_DMA+0x2e>
 800314a:	2302      	movs	r3, #2
 800314c:	e086      	b.n	800325c <HAL_I2S_Transmit_DMA+0x13c>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d005      	beq.n	800316e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
 800316c:	e076      	b.n	800325c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2203      	movs	r2, #3
 8003172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pTxBuffPtr = pData;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	621a      	str	r2, [r3, #32]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d002      	beq.n	800319a <HAL_I2S_Transmit_DMA+0x7a>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2b05      	cmp	r3, #5
 8003198:	d10a      	bne.n	80031b0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = (Size << 1U);
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	84da      	strh	r2, [r3, #38]	; 0x26
 80031ae:	e005      	b.n	80031bc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	88fa      	ldrh	r2, [r7, #6]
 80031b4:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = Size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	88fa      	ldrh	r2, [r7, #6]
 80031ba:	84da      	strh	r2, [r3, #38]	; 0x26
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	4a28      	ldr	r2, [pc, #160]	; (8003264 <HAL_I2S_Transmit_DMA+0x144>)
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	4a27      	ldr	r2, [pc, #156]	; (8003268 <HAL_I2S_Transmit_DMA+0x148>)
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	4a26      	ldr	r2, [pc, #152]	; (800326c <HAL_I2S_Transmit_DMA+0x14c>)
 80031d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
                                 (uint32_t)hi2s->pTxBuffPtr,
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a1b      	ldr	r3, [r3, #32]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80031dc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80031e4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80031ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80031ec:	f7fe fcc0 	bl	8001b70 <HAL_DMA_Start_IT>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00f      	beq.n	8003216 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	f043 0208 	orr.w	r2, r3, #8
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e022      	b.n	800325c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003220:	2b00      	cmp	r3, #0
 8003222:	d107      	bne.n	8003234 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69da      	ldr	r2, [r3, #28]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003232:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d107      	bne.n	8003252 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0202 	orr.w	r2, r2, #2
 8003250:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	08003373 	.word	0x08003373
 8003268:	08003331 	.word	0x08003331
 800326c:	0800338f 	.word	0x0800338f

08003270 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d02d      	beq.n	8003304 <I2S_GetClockFreq+0x6c>
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d12e      	bne.n	800330a <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80032ac:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <I2S_GetClockFreq+0x88>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d108      	bne.n	80032ca <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <I2S_GetClockFreq+0x88>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c0:	4a18      	ldr	r2, [pc, #96]	; (8003324 <I2S_GetClockFreq+0x8c>)
 80032c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e007      	b.n	80032da <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <I2S_GetClockFreq+0x88>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d2:	4a15      	ldr	r2, [pc, #84]	; (8003328 <I2S_GetClockFreq+0x90>)
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <I2S_GetClockFreq+0x88>)
 80032dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e0:	0f1b      	lsrs	r3, r3, #28
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80032e8:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <I2S_GetClockFreq+0x88>)
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	fb02 f203 	mul.w	r2, r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	613b      	str	r3, [r7, #16]

      break;
 8003302:	e005      	b.n	8003310 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <I2S_GetClockFreq+0x94>)
 8003306:	613b      	str	r3, [r7, #16]
      break;
 8003308:	e002      	b.n	8003310 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
      break;
 800330e:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8003310:	693b      	ldr	r3, [r7, #16]
}
 8003312:	4618      	mov	r0, r3
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	00f42400 	.word	0x00f42400
 8003328:	017d7840 	.word	0x017d7840
 800332c:	00bb8000 	.word	0x00bb8000

08003330 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10e      	bne.n	8003364 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0202 	bic.w	r2, r2, #2
 8003354:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	84da      	strh	r2, [r3, #38]	; 0x26
    hi2s->State = HAL_I2S_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7fd fb29 	bl	80009bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7ff ff75 	bl	8003270 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b084      	sub	sp, #16
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0203 	bic.w	r2, r2, #3
 80033aa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	84da      	strh	r2, [r3, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	f043 0208 	orr.w	r2, r3, #8
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff ff59 	bl	8003284 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b086      	sub	sp, #24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80033ea:	f7fe f9f5 	bl	80017d8 <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80033f0:	e018      	b.n	8003424 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d014      	beq.n	8003424 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80033fa:	f7fe f9ed 	bl	80017d8 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d902      	bls.n	8003410 <I2S_WaitFlagStateUntilTimeout+0x36>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e00f      	b.n	8003444 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4013      	ands	r3, r2
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	429a      	cmp	r2, r3
 8003440:	d1d7      	bne.n	80033f2 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003456:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800345c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003460:	6413      	str	r3, [r2, #64]	; 0x40
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800347a:	f7fe f9ad 	bl	80017d8 <HAL_GetTick>
 800347e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003480:	e009      	b.n	8003496 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003482:	f7fe f9a9 	bl	80017d8 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003490:	d901      	bls.n	8003496 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e022      	b.n	80034dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a2:	d1ee      	bne.n	8003482 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0f      	ldr	r2, [pc, #60]	; (80034e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034b0:	f7fe f992 	bl	80017d8 <HAL_GetTick>
 80034b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034b6:	e009      	b.n	80034cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034b8:	f7fe f98e 	bl	80017d8 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034c6:	d901      	bls.n	80034cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e007      	b.n	80034dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034d8:	d1ee      	bne.n	80034b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40007000 	.word	0x40007000

080034ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034f4:	2300      	movs	r3, #0
 80034f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e29b      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8087 	beq.w	800361e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003510:	4b96      	ldr	r3, [pc, #600]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b04      	cmp	r3, #4
 800351a:	d00c      	beq.n	8003536 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351c:	4b93      	ldr	r3, [pc, #588]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b08      	cmp	r3, #8
 8003526:	d112      	bne.n	800354e <HAL_RCC_OscConfig+0x62>
 8003528:	4b90      	ldr	r3, [pc, #576]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003534:	d10b      	bne.n	800354e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003536:	4b8d      	ldr	r3, [pc, #564]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d06c      	beq.n	800361c <HAL_RCC_OscConfig+0x130>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d168      	bne.n	800361c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e275      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003556:	d106      	bne.n	8003566 <HAL_RCC_OscConfig+0x7a>
 8003558:	4b84      	ldr	r3, [pc, #528]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a83      	ldr	r2, [pc, #524]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800355e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	e02e      	b.n	80035c4 <HAL_RCC_OscConfig+0xd8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x9c>
 800356e:	4b7f      	ldr	r3, [pc, #508]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7e      	ldr	r2, [pc, #504]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b7c      	ldr	r3, [pc, #496]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a7b      	ldr	r2, [pc, #492]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e01d      	b.n	80035c4 <HAL_RCC_OscConfig+0xd8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0xc0>
 8003592:	4b76      	ldr	r3, [pc, #472]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a75      	ldr	r2, [pc, #468]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b73      	ldr	r3, [pc, #460]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a72      	ldr	r2, [pc, #456]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0xd8>
 80035ac:	4b6f      	ldr	r3, [pc, #444]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a6e      	ldr	r2, [pc, #440]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b6c      	ldr	r3, [pc, #432]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a6b      	ldr	r2, [pc, #428]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe f904 	bl	80017d8 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe f900 	bl	80017d8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e229      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b61      	ldr	r3, [pc, #388]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0xe8>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe f8f0 	bl	80017d8 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe f8ec 	bl	80017d8 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e215      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	4b57      	ldr	r3, [pc, #348]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x110>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d069      	beq.n	80036fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800362a:	4b50      	ldr	r3, [pc, #320]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003636:	4b4d      	ldr	r3, [pc, #308]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b08      	cmp	r3, #8
 8003640:	d11c      	bne.n	800367c <HAL_RCC_OscConfig+0x190>
 8003642:	4b4a      	ldr	r3, [pc, #296]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d116      	bne.n	800367c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_RCC_OscConfig+0x17a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d001      	beq.n	8003666 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e1e9      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003666:	4b41      	ldr	r3, [pc, #260]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	493d      	ldr	r1, [pc, #244]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	e040      	b.n	80036fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d023      	beq.n	80036cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003684:	4b39      	ldr	r3, [pc, #228]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a38      	ldr	r2, [pc, #224]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fe f8a2 	bl	80017d8 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003698:	f7fe f89e 	bl	80017d8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e1c7      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036aa:	4b30      	ldr	r3, [pc, #192]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b6:	4b2d      	ldr	r3, [pc, #180]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4929      	ldr	r1, [pc, #164]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]
 80036ca:	e018      	b.n	80036fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036cc:	4b27      	ldr	r3, [pc, #156]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a26      	ldr	r2, [pc, #152]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fe f87e 	bl	80017d8 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e0:	f7fe f87a 	bl	80017d8 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e1a3      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	4b1e      	ldr	r3, [pc, #120]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d038      	beq.n	800377c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d019      	beq.n	8003746 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003712:	4b16      	ldr	r3, [pc, #88]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003716:	4a15      	ldr	r2, [pc, #84]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371e:	f7fe f85b 	bl	80017d8 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003726:	f7fe f857 	bl	80017d8 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e180      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800373a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x23a>
 8003744:	e01a      	b.n	800377c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374a:	4a08      	ldr	r2, [pc, #32]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7fe f841 	bl	80017d8 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375a:	f7fe f83d 	bl	80017d8 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d903      	bls.n	8003770 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e166      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
 800376c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003770:	4b92      	ldr	r3, [pc, #584]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ee      	bne.n	800375a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80a4 	beq.w	80038d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378a:	4b8c      	ldr	r3, [pc, #560]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10d      	bne.n	80037b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	4b89      	ldr	r3, [pc, #548]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a88      	ldr	r2, [pc, #544]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b86      	ldr	r3, [pc, #536]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b2:	4b83      	ldr	r3, [pc, #524]	; (80039c0 <HAL_RCC_OscConfig+0x4d4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d118      	bne.n	80037f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037be:	4b80      	ldr	r3, [pc, #512]	; (80039c0 <HAL_RCC_OscConfig+0x4d4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a7f      	ldr	r2, [pc, #508]	; (80039c0 <HAL_RCC_OscConfig+0x4d4>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7fe f805 	bl	80017d8 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d2:	f7fe f801 	bl	80017d8 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b64      	cmp	r3, #100	; 0x64
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e12a      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e4:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <HAL_RCC_OscConfig+0x4d4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_OscConfig+0x31a>
 80037f8:	4b70      	ldr	r3, [pc, #448]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a6f      	ldr	r2, [pc, #444]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
 8003804:	e02d      	b.n	8003862 <HAL_RCC_OscConfig+0x376>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x33c>
 800380e:	4b6b      	ldr	r3, [pc, #428]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a6a      	ldr	r2, [pc, #424]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
 800381a:	4b68      	ldr	r3, [pc, #416]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a67      	ldr	r2, [pc, #412]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003820:	f023 0304 	bic.w	r3, r3, #4
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	e01c      	b.n	8003862 <HAL_RCC_OscConfig+0x376>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b05      	cmp	r3, #5
 800382e:	d10c      	bne.n	800384a <HAL_RCC_OscConfig+0x35e>
 8003830:	4b62      	ldr	r3, [pc, #392]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	4a61      	ldr	r2, [pc, #388]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003836:	f043 0304 	orr.w	r3, r3, #4
 800383a:	6713      	str	r3, [r2, #112]	; 0x70
 800383c:	4b5f      	ldr	r3, [pc, #380]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	4a5e      	ldr	r2, [pc, #376]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6713      	str	r3, [r2, #112]	; 0x70
 8003848:	e00b      	b.n	8003862 <HAL_RCC_OscConfig+0x376>
 800384a:	4b5c      	ldr	r3, [pc, #368]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	4a5b      	ldr	r2, [pc, #364]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	6713      	str	r3, [r2, #112]	; 0x70
 8003856:	4b59      	ldr	r3, [pc, #356]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	4a58      	ldr	r2, [pc, #352]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d015      	beq.n	8003896 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fd ffb5 	bl	80017d8 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003870:	e00a      	b.n	8003888 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003872:	f7fd ffb1 	bl	80017d8 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003880:	4293      	cmp	r3, r2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e0d8      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003888:	4b4c      	ldr	r3, [pc, #304]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ee      	beq.n	8003872 <HAL_RCC_OscConfig+0x386>
 8003894:	e014      	b.n	80038c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003896:	f7fd ff9f 	bl	80017d8 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fd ff9b 	bl	80017d8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e0c2      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b4:	4b41      	ldr	r3, [pc, #260]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ee      	bne.n	800389e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d105      	bne.n	80038d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c6:	4b3d      	ldr	r3, [pc, #244]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	4a3c      	ldr	r2, [pc, #240]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80038cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80ae 	beq.w	8003a38 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038dc:	4b37      	ldr	r3, [pc, #220]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d06d      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d14b      	bne.n	8003988 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f0:	4b32      	ldr	r3, [pc, #200]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a31      	ldr	r2, [pc, #196]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80038f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd ff6c 	bl	80017d8 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd ff68 	bl	80017d8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e091      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b29      	ldr	r3, [pc, #164]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	019b      	lsls	r3, r3, #6
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	3b01      	subs	r3, #1
 800393c:	041b      	lsls	r3, r3, #16
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	061b      	lsls	r3, r3, #24
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	071b      	lsls	r3, r3, #28
 800394e:	491b      	ldr	r1, [pc, #108]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003954:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a18      	ldr	r2, [pc, #96]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd ff3a 	bl	80017d8 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fd ff36 	bl	80017d8 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e05f      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397a:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x47c>
 8003986:	e057      	b.n	8003a38 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800398e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fd ff20 	bl	80017d8 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399c:	f7fd ff1c 	bl	80017d8 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e045      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ae:	4b03      	ldr	r3, [pc, #12]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x4b0>
 80039ba:	e03d      	b.n	8003a38 <HAL_RCC_OscConfig+0x54c>
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <HAL_RCC_OscConfig+0x558>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d030      	beq.n	8003a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d129      	bne.n	8003a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d122      	bne.n	8003a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d119      	bne.n	8003a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d10f      	bne.n	8003a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800

08003a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0d0      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a60:	4b6a      	ldr	r3, [pc, #424]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d910      	bls.n	8003a90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b67      	ldr	r3, [pc, #412]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 020f 	bic.w	r2, r3, #15
 8003a76:	4965      	ldr	r1, [pc, #404]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b63      	ldr	r3, [pc, #396]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0b8      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa8:	4b59      	ldr	r3, [pc, #356]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a58      	ldr	r2, [pc, #352]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac0:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a52      	ldr	r2, [pc, #328]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003acc:	4b50      	ldr	r3, [pc, #320]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	494d      	ldr	r1, [pc, #308]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d040      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d115      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e07f      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0a:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e073      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1a:	4b3d      	ldr	r3, [pc, #244]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e06b      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	4b39      	ldr	r3, [pc, #228]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4936      	ldr	r1, [pc, #216]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3c:	f7fd fe4c 	bl	80017d8 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7fd fe48 	bl	80017d8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e053      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	4b2d      	ldr	r3, [pc, #180]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 020c 	and.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1eb      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d210      	bcs.n	8003b9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 020f 	bic.w	r2, r3, #15
 8003b82:	4922      	ldr	r1, [pc, #136]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e032      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba8:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4916      	ldr	r1, [pc, #88]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	490e      	ldr	r1, [pc, #56]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bda:	f000 f821 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 8003bde:	4602      	mov	r2, r0
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	490a      	ldr	r1, [pc, #40]	; (8003c14 <HAL_RCC_ClockConfig+0x1cc>)
 8003bec:	5ccb      	ldrb	r3, [r1, r3]
 8003bee:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf2:	4a09      	ldr	r2, [pc, #36]	; (8003c18 <HAL_RCC_ClockConfig+0x1d0>)
 8003bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <HAL_RCC_ClockConfig+0x1d4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fd fda8 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023c00 	.word	0x40023c00
 8003c10:	40023800 	.word	0x40023800
 8003c14:	080074c8 	.word	0x080074c8
 8003c18:	20000010 	.word	0x20000010
 8003c1c:	20000014 	.word	0x20000014

08003c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c20:	b5b0      	push	{r4, r5, r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c26:	2100      	movs	r1, #0
 8003c28:	6079      	str	r1, [r7, #4]
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	60f9      	str	r1, [r7, #12]
 8003c2e:	2100      	movs	r1, #0
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003c32:	2100      	movs	r1, #0
 8003c34:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c36:	4952      	ldr	r1, [pc, #328]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c38:	6889      	ldr	r1, [r1, #8]
 8003c3a:	f001 010c 	and.w	r1, r1, #12
 8003c3e:	2908      	cmp	r1, #8
 8003c40:	d00d      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0x3e>
 8003c42:	2908      	cmp	r1, #8
 8003c44:	f200 8094 	bhi.w	8003d70 <HAL_RCC_GetSysClockFreq+0x150>
 8003c48:	2900      	cmp	r1, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0x32>
 8003c4c:	2904      	cmp	r1, #4
 8003c4e:	d003      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x38>
 8003c50:	e08e      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c52:	4b4c      	ldr	r3, [pc, #304]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c54:	60bb      	str	r3, [r7, #8]
      break;
 8003c56:	e08e      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c58:	4b4b      	ldr	r3, [pc, #300]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c5a:	60bb      	str	r3, [r7, #8]
      break;
 8003c5c:	e08b      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c5e:	4948      	ldr	r1, [pc, #288]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c60:	6849      	ldr	r1, [r1, #4]
 8003c62:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003c66:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c68:	4945      	ldr	r1, [pc, #276]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c6a:	6849      	ldr	r1, [r1, #4]
 8003c6c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003c70:	2900      	cmp	r1, #0
 8003c72:	d024      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c74:	4942      	ldr	r1, [pc, #264]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c76:	6849      	ldr	r1, [r1, #4]
 8003c78:	0989      	lsrs	r1, r1, #6
 8003c7a:	4608      	mov	r0, r1
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003c84:	f04f 0500 	mov.w	r5, #0
 8003c88:	ea00 0204 	and.w	r2, r0, r4
 8003c8c:	ea01 0305 	and.w	r3, r1, r5
 8003c90:	493d      	ldr	r1, [pc, #244]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c92:	fb01 f003 	mul.w	r0, r1, r3
 8003c96:	2100      	movs	r1, #0
 8003c98:	fb01 f102 	mul.w	r1, r1, r2
 8003c9c:	1844      	adds	r4, r0, r1
 8003c9e:	493a      	ldr	r1, [pc, #232]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ca0:	fba2 0101 	umull	r0, r1, r2, r1
 8003ca4:	1863      	adds	r3, r4, r1
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	f7fc fac2 	bl	8000238 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e04a      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cbe:	4b30      	ldr	r3, [pc, #192]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cce:	f04f 0100 	mov.w	r1, #0
 8003cd2:	ea02 0400 	and.w	r4, r2, r0
 8003cd6:	ea03 0501 	and.w	r5, r3, r1
 8003cda:	4620      	mov	r0, r4
 8003cdc:	4629      	mov	r1, r5
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	014b      	lsls	r3, r1, #5
 8003ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cec:	0142      	lsls	r2, r0, #5
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	1b00      	subs	r0, r0, r4
 8003cf4:	eb61 0105 	sbc.w	r1, r1, r5
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	018b      	lsls	r3, r1, #6
 8003d02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d06:	0182      	lsls	r2, r0, #6
 8003d08:	1a12      	subs	r2, r2, r0
 8003d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0e:	f04f 0000 	mov.w	r0, #0
 8003d12:	f04f 0100 	mov.w	r1, #0
 8003d16:	00d9      	lsls	r1, r3, #3
 8003d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d1c:	00d0      	lsls	r0, r2, #3
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	1912      	adds	r2, r2, r4
 8003d24:	eb45 0303 	adc.w	r3, r5, r3
 8003d28:	f04f 0000 	mov.w	r0, #0
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	0299      	lsls	r1, r3, #10
 8003d32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d36:	0290      	lsls	r0, r2, #10
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	f7fc fa76 	bl	8000238 <__aeabi_uldivmod>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4613      	mov	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	0c1b      	lsrs	r3, r3, #16
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	60bb      	str	r3, [r7, #8]
      break;
 8003d6e:	e002      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d72:	60bb      	str	r3, [r7, #8]
      break;
 8003d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d76:	68bb      	ldr	r3, [r7, #8]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003d80:	40023800 	.word	0x40023800
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	017d7840 	.word	0x017d7840

08003d8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000010 	.word	0x20000010

08003da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003da8:	f7ff fff0 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0a9b      	lsrs	r3, r3, #10
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	080074d8 	.word	0x080074d8

08003dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dd0:	f7ff ffdc 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0b5b      	lsrs	r3, r3, #13
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4903      	ldr	r1, [pc, #12]	; (8003df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40023800 	.word	0x40023800
 8003df0:	080074d8 	.word	0x080074d8

08003df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d012      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e1c:	4b69      	ldr	r3, [pc, #420]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	4a68      	ldr	r2, [pc, #416]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e26:	6093      	str	r3, [r2, #8]
 8003e28:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e30:	4964      	ldr	r1, [pc, #400]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d017      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e4e:	4b5d      	ldr	r3, [pc, #372]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5c:	4959      	ldr	r1, [pc, #356]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d017      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e8a:	4b4e      	ldr	r3, [pc, #312]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	494a      	ldr	r1, [pc, #296]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea8:	d101      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 808b 	beq.w	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ed8:	4b3a      	ldr	r3, [pc, #232]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	4a39      	ldr	r2, [pc, #228]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee4:	4b37      	ldr	r3, [pc, #220]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ef0:	4b35      	ldr	r3, [pc, #212]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a34      	ldr	r2, [pc, #208]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efc:	f7fd fc6c 	bl	80017d8 <HAL_GetTick>
 8003f00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f04:	f7fd fc68 	bl	80017d8 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e38f      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f16:	4b2c      	ldr	r3, [pc, #176]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f22:	4b28      	ldr	r3, [pc, #160]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d035      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d02e      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f40:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f4a:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f56:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	4a1a      	ldr	r2, [pc, #104]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f62:	4a18      	ldr	r2, [pc, #96]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f68:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d114      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fd fc30 	bl	80017d8 <HAL_GetTick>
 8003f78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7c:	f7fd fc2c 	bl	80017d8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e351      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f92:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0ee      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003faa:	d111      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fb8:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fba:	400b      	ands	r3, r1
 8003fbc:	4901      	ldr	r1, [pc, #4]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
 8003fc2:	e00b      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	0ffffcff 	.word	0x0ffffcff
 8003fd0:	4bb3      	ldr	r3, [pc, #716]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	4ab2      	ldr	r2, [pc, #712]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fda:	6093      	str	r3, [r2, #8]
 8003fdc:	4bb0      	ldr	r3, [pc, #704]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe8:	49ad      	ldr	r1, [pc, #692]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d010      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ffa:	4ba9      	ldr	r3, [pc, #676]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004000:	4aa7      	ldr	r2, [pc, #668]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004006:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800400a:	4ba5      	ldr	r3, [pc, #660]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800400c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	49a2      	ldr	r1, [pc, #648]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004028:	4b9d      	ldr	r3, [pc, #628]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004036:	499a      	ldr	r1, [pc, #616]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800404a:	4b95      	ldr	r3, [pc, #596]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004058:	4991      	ldr	r1, [pc, #580]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800406c:	4b8c      	ldr	r3, [pc, #560]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407a:	4989      	ldr	r1, [pc, #548]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800408e:	4b84      	ldr	r3, [pc, #528]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	4980      	ldr	r1, [pc, #512]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040b0:	4b7b      	ldr	r3, [pc, #492]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	f023 0203 	bic.w	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	4978      	ldr	r1, [pc, #480]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040d2:	4b73      	ldr	r3, [pc, #460]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f023 020c 	bic.w	r2, r3, #12
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	496f      	ldr	r1, [pc, #444]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040f4:	4b6a      	ldr	r3, [pc, #424]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	4967      	ldr	r1, [pc, #412]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004116:	4b62      	ldr	r3, [pc, #392]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004124:	495e      	ldr	r1, [pc, #376]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004138:	4b59      	ldr	r3, [pc, #356]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	4956      	ldr	r1, [pc, #344]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800415a:	4b51      	ldr	r3, [pc, #324]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	494d      	ldr	r1, [pc, #308]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800417c:	4b48      	ldr	r3, [pc, #288]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418a:	4945      	ldr	r1, [pc, #276]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800419e:	4b40      	ldr	r3, [pc, #256]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ac:	493c      	ldr	r1, [pc, #240]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041c0:	4b37      	ldr	r3, [pc, #220]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ce:	4934      	ldr	r1, [pc, #208]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d011      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041e2:	4b2f      	ldr	r3, [pc, #188]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f0:	492b      	ldr	r1, [pc, #172]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004200:	d101      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004212:	2301      	movs	r3, #1
 8004214:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004222:	4b1f      	ldr	r3, [pc, #124]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004230:	491b      	ldr	r1, [pc, #108]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004244:	4b16      	ldr	r3, [pc, #88]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004254:	4912      	ldr	r1, [pc, #72]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004268:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004278:	4909      	ldr	r1, [pc, #36]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00f      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800428e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004292:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429c:	e002      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800
 80042a4:	4986      	ldr	r1, [pc, #536]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80042b8:	4b81      	ldr	r3, [pc, #516]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c8:	497d      	ldr	r1, [pc, #500]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d006      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80d6 	beq.w	8004490 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042e4:	4b76      	ldr	r3, [pc, #472]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a75      	ldr	r2, [pc, #468]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f0:	f7fd fa72 	bl	80017d8 <HAL_GetTick>
 80042f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042f8:	f7fd fa6e 	bl	80017d8 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	; 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e195      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800430a:	4b6d      	ldr	r3, [pc, #436]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d021      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004326:	2b00      	cmp	r3, #0
 8004328:	d11d      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800432a:	4b65      	ldr	r3, [pc, #404]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004338:	4b61      	ldr	r3, [pc, #388]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800433a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433e:	0e1b      	lsrs	r3, r3, #24
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	019a      	lsls	r2, r3, #6
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	041b      	lsls	r3, r3, #16
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	061b      	lsls	r3, r3, #24
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	071b      	lsls	r3, r3, #28
 800435e:	4958      	ldr	r1, [pc, #352]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800437a:	d00a      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004384:	2b00      	cmp	r3, #0
 8004386:	d02e      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004390:	d129      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004392:	4b4b      	ldr	r3, [pc, #300]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043a0:	4b47      	ldr	r3, [pc, #284]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a6:	0f1b      	lsrs	r3, r3, #28
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	019a      	lsls	r2, r3, #6
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	041b      	lsls	r3, r3, #16
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	061b      	lsls	r3, r3, #24
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	071b      	lsls	r3, r3, #28
 80043c6:	493e      	ldr	r1, [pc, #248]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043ce:	4b3c      	ldr	r3, [pc, #240]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043d4:	f023 021f 	bic.w	r2, r3, #31
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	3b01      	subs	r3, #1
 80043de:	4938      	ldr	r1, [pc, #224]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01d      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043f2:	4b33      	ldr	r3, [pc, #204]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f8:	0e1b      	lsrs	r3, r3, #24
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004400:	4b2f      	ldr	r3, [pc, #188]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004406:	0f1b      	lsrs	r3, r3, #28
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	019a      	lsls	r2, r3, #6
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	041b      	lsls	r3, r3, #16
 800441a:	431a      	orrs	r2, r3
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	061b      	lsls	r3, r3, #24
 8004420:	431a      	orrs	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	071b      	lsls	r3, r3, #28
 8004426:	4926      	ldr	r1, [pc, #152]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d011      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	019a      	lsls	r2, r3, #6
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	041b      	lsls	r3, r3, #16
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	071b      	lsls	r3, r3, #28
 8004456:	491a      	ldr	r1, [pc, #104]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800445e:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a17      	ldr	r2, [pc, #92]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446a:	f7fd f9b5 	bl	80017d8 <HAL_GetTick>
 800446e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004472:	f7fd f9b1 	bl	80017d8 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b64      	cmp	r3, #100	; 0x64
 800447e:	d901      	bls.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e0d8      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004484:	4b0e      	ldr	r3, [pc, #56]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b01      	cmp	r3, #1
 8004494:	f040 80ce 	bne.w	8004634 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004498:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a08      	ldr	r2, [pc, #32]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a4:	f7fd f998 	bl	80017d8 <HAL_GetTick>
 80044a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044aa:	e00b      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044ac:	f7fd f994 	bl	80017d8 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	; 0x64
 80044b8:	d904      	bls.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0bb      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044c4:	4b5e      	ldr	r3, [pc, #376]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d0:	d0ec      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d02e      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d12a      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044fa:	4b51      	ldr	r3, [pc, #324]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004508:	4b4d      	ldr	r3, [pc, #308]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	0f1b      	lsrs	r3, r3, #28
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	019a      	lsls	r2, r3, #6
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	041b      	lsls	r3, r3, #16
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	061b      	lsls	r3, r3, #24
 8004528:	431a      	orrs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	071b      	lsls	r3, r3, #28
 800452e:	4944      	ldr	r1, [pc, #272]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004536:	4b42      	ldr	r3, [pc, #264]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800453c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	493d      	ldr	r1, [pc, #244]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d022      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004564:	d11d      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004566:	4b36      	ldr	r3, [pc, #216]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	0e1b      	lsrs	r3, r3, #24
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004574:	4b32      	ldr	r3, [pc, #200]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	0f1b      	lsrs	r3, r3, #28
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	019a      	lsls	r2, r3, #6
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	431a      	orrs	r2, r3
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	061b      	lsls	r3, r3, #24
 8004594:	431a      	orrs	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	071b      	lsls	r3, r3, #28
 800459a:	4929      	ldr	r1, [pc, #164]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d028      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ae:	4b24      	ldr	r3, [pc, #144]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b4:	0e1b      	lsrs	r3, r3, #24
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045bc:	4b20      	ldr	r3, [pc, #128]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c2:	0c1b      	lsrs	r3, r3, #16
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	019a      	lsls	r2, r3, #6
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	041b      	lsls	r3, r3, #16
 80045d4:	431a      	orrs	r2, r3
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	071b      	lsls	r3, r3, #28
 80045e2:	4917      	ldr	r1, [pc, #92]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045ea:	4b15      	ldr	r3, [pc, #84]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	4911      	ldr	r1, [pc, #68]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a0e      	ldr	r2, [pc, #56]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460c:	f7fd f8e4 	bl	80017d8 <HAL_GetTick>
 8004610:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004614:	f7fd f8e0 	bl	80017d8 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	; 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e007      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800462e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004632:	d1ef      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800

08004644 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004662:	f040 80a3 	bne.w	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004666:	4bac      	ldr	r3, [pc, #688]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800466c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004674:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800467c:	f000 808a 	beq.w	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004686:	f200 8093 	bhi.w	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004690:	d07d      	beq.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004698:	f200 808a 	bhi.w	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d004      	beq.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a8:	d039      	beq.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80046aa:	e081      	b.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80046ac:	4b9a      	ldr	r3, [pc, #616]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d108      	bne.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046b8:	4b97      	ldr	r3, [pc, #604]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c0:	4a96      	ldr	r2, [pc, #600]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	e007      	b.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80046ca:	4b93      	ldr	r3, [pc, #588]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d2:	4a93      	ldr	r2, [pc, #588]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80046da:	4b8f      	ldr	r3, [pc, #572]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	0e1b      	lsrs	r3, r3, #24
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80046e8:	4b8b      	ldr	r3, [pc, #556]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	099b      	lsrs	r3, r3, #6
 80046f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	fb02 f203 	mul.w	r2, r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004702:	4b85      	ldr	r3, [pc, #532]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004708:	0a1b      	lsrs	r3, r3, #8
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	3301      	adds	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	617b      	str	r3, [r7, #20]
        break;
 800471c:	e049      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800471e:	4b7e      	ldr	r3, [pc, #504]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d108      	bne.n	800473c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800472a:	4b7b      	ldr	r3, [pc, #492]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004732:	4a7a      	ldr	r2, [pc, #488]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	e007      	b.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800473c:	4b76      	ldr	r3, [pc, #472]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004744:	4a76      	ldr	r2, [pc, #472]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004746:	fbb2 f3f3 	udiv	r3, r2, r3
 800474a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800474c:	4b72      	ldr	r3, [pc, #456]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800474e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004752:	0e1b      	lsrs	r3, r3, #24
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800475a:	4b6f      	ldr	r3, [pc, #444]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004760:	099b      	lsrs	r3, r3, #6
 8004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	fb02 f203 	mul.w	r2, r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004772:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004774:	4b68      	ldr	r3, [pc, #416]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	3301      	adds	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	fbb2 f3f3 	udiv	r3, r2, r3
 800478a:	617b      	str	r3, [r7, #20]
        break;
 800478c:	e011      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800478e:	4b65      	ldr	r3, [pc, #404]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004790:	617b      	str	r3, [r7, #20]
        break;
 8004792:	e00e      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004794:	4b60      	ldr	r3, [pc, #384]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d102      	bne.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 80047a0:	4b5e      	ldr	r3, [pc, #376]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80047a2:	617b      	str	r3, [r7, #20]
        break;
 80047a4:	e005      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 80047a6:	4b5e      	ldr	r3, [pc, #376]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80047a8:	617b      	str	r3, [r7, #20]
        break;
 80047aa:	e002      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 80047b0:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b8:	f040 80a3 	bne.w	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 80047bc:	4b56      	ldr	r3, [pc, #344]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80047be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c2:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80047ca:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047d2:	f000 808a 	beq.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047dc:	f200 8093 	bhi.w	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047e6:	d07d      	beq.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047ee:	f200 808a 	bhi.w	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d004      	beq.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047fe:	d039      	beq.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004800:	e081      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004802:	4b45      	ldr	r3, [pc, #276]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d108      	bne.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800480e:	4b42      	ldr	r3, [pc, #264]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004816:	4a41      	ldr	r2, [pc, #260]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	e007      	b.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004820:	4b3d      	ldr	r3, [pc, #244]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004828:	4a3d      	ldr	r2, [pc, #244]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800482a:	fbb2 f3f3 	udiv	r3, r2, r3
 800482e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004830:	4b39      	ldr	r3, [pc, #228]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004836:	0e1b      	lsrs	r3, r3, #24
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800483e:	4b36      	ldr	r3, [pc, #216]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004844:	099b      	lsrs	r3, r3, #6
 8004846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	fb02 f203 	mul.w	r2, r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	fbb2 f3f3 	udiv	r3, r2, r3
 8004856:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004858:	4b2f      	ldr	r3, [pc, #188]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800485a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	3301      	adds	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	617b      	str	r3, [r7, #20]
        break;
 8004872:	e049      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004874:	4b28      	ldr	r3, [pc, #160]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d108      	bne.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004880:	4b25      	ldr	r3, [pc, #148]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004888:	4a24      	ldr	r2, [pc, #144]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800488a:	fbb2 f3f3 	udiv	r3, r2, r3
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	e007      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004892:	4b21      	ldr	r3, [pc, #132]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800489a:	4a21      	ldr	r2, [pc, #132]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80048a2:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80048a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a8:	0e1b      	lsrs	r3, r3, #24
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80048b0:	4b19      	ldr	r3, [pc, #100]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80048b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b6:	099b      	lsrs	r3, r3, #6
 80048b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	fb02 f203 	mul.w	r2, r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80048cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	3301      	adds	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
        break;
 80048e2:	e011      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 80048e4:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80048e6:	617b      	str	r3, [r7, #20]
        break;
 80048e8:	e00e      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80048f8:	617b      	str	r3, [r7, #20]
        break;
 80048fa:	e005      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 80048fc:	4b08      	ldr	r3, [pc, #32]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80048fe:	617b      	str	r3, [r7, #20]
        break;
 8004900:	e002      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 8004906:	bf00      	nop

  return frequency;
 8004908:	697b      	ldr	r3, [r7, #20]
}
 800490a:	4618      	mov	r0, r3
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800
 800491c:	00f42400 	.word	0x00f42400
 8004920:	017d7840 	.word	0x017d7840
 8004924:	00bb8000 	.word	0x00bb8000

08004928 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d904      	bls.n	800494a <HAL_SAI_InitProtocol+0x22>
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	3b03      	subs	r3, #3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d812      	bhi.n	800496e <HAL_SAI_InitProtocol+0x46>
 8004948:	e008      	b.n	800495c <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fa69 	bl	8004e28 <SAI_InitI2S>
 8004956:	4603      	mov	r3, r0
 8004958:	75fb      	strb	r3, [r7, #23]
      break;
 800495a:	e00b      	b.n	8004974 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fb0e 	bl	8004f84 <SAI_InitPCM>
 8004968:	4603      	mov	r3, r0
 800496a:	75fb      	strb	r3, [r7, #23]
      break;
 800496c:	e002      	b.n	8004974 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
      break;
 8004972:	bf00      	nop
  }

  if (status == HAL_OK)
 8004974:	7dfb      	ldrb	r3, [r7, #23]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d104      	bne.n	8004984 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f808 	bl	8004990 <HAL_SAI_Init>
 8004980:	4603      	mov	r3, r0
 8004982:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004984:	7dfb      	ldrb	r3, [r7, #23]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e156      	b.n	8004c5c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fc fe0e 	bl	80015e4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fba5 	bl	8005120 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d00c      	beq.n	80049f8 <HAL_SAI_Init+0x68>
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d80d      	bhi.n	80049fe <HAL_SAI_Init+0x6e>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_SAI_Init+0x5c>
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d003      	beq.n	80049f2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80049ea:	e008      	b.n	80049fe <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
      break;
 80049f0:	e006      	b.n	8004a00 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80049f2:	2310      	movs	r3, #16
 80049f4:	61fb      	str	r3, [r7, #28]
      break;
 80049f6:	e003      	b.n	8004a00 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80049f8:	2320      	movs	r3, #32
 80049fa:	61fb      	str	r3, [r7, #28]
      break;
 80049fc:	e000      	b.n	8004a00 <HAL_SAI_Init+0x70>
      break;
 80049fe:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d81e      	bhi.n	8004a46 <HAL_SAI_Init+0xb6>
 8004a08:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <HAL_SAI_Init+0x80>)
 8004a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0e:	bf00      	nop
 8004a10:	08004a21 	.word	0x08004a21
 8004a14:	08004a27 	.word	0x08004a27
 8004a18:	08004a2f 	.word	0x08004a2f
 8004a1c:	08004a37 	.word	0x08004a37
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
    }
    break;
 8004a24:	e010      	b.n	8004a48 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a2a:	617b      	str	r3, [r7, #20]
    }
    break;
 8004a2c:	e00c      	b.n	8004a48 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a32:	617b      	str	r3, [r7, #20]
    }
    break;
 8004a34:	e008      	b.n	8004a48 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a3a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f043 0301 	orr.w	r3, r3, #1
 8004a42:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004a44:	e000      	b.n	8004a48 <HAL_SAI_Init+0xb8>
    default:
      break;
 8004a46:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a85      	ldr	r2, [pc, #532]	; (8004c64 <HAL_SAI_Init+0x2d4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <HAL_SAI_Init+0xcc>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a84      	ldr	r2, [pc, #528]	; (8004c68 <HAL_SAI_Init+0x2d8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d103      	bne.n	8004a64 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004a5c:	4a83      	ldr	r2, [pc, #524]	; (8004c6c <HAL_SAI_Init+0x2dc>)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e002      	b.n	8004a6a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004a64:	4a82      	ldr	r2, [pc, #520]	; (8004c70 <HAL_SAI_Init+0x2e0>)
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d04c      	beq.n	8004b0c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a7a      	ldr	r2, [pc, #488]	; (8004c64 <HAL_SAI_Init+0x2d4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_SAI_Init+0xfa>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a78      	ldr	r2, [pc, #480]	; (8004c68 <HAL_SAI_Init+0x2d8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d104      	bne.n	8004a94 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004a8a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004a8e:	f7ff fdd9 	bl	8004644 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a92:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a76      	ldr	r2, [pc, #472]	; (8004c74 <HAL_SAI_Init+0x2e4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <HAL_SAI_Init+0x118>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a75      	ldr	r2, [pc, #468]	; (8004c78 <HAL_SAI_Init+0x2e8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d104      	bne.n	8004ab2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004aa8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004aac:	f7ff fdca 	bl	8004644 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ab0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	461a      	mov	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	025b      	lsls	r3, r3, #9
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a6b      	ldr	r2, [pc, #428]	; (8004c7c <HAL_SAI_Init+0x2ec>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	08da      	lsrs	r2, r3, #3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004ad8:	68f9      	ldr	r1, [r7, #12]
 8004ada:	4b68      	ldr	r3, [pc, #416]	; (8004c7c <HAL_SAI_Init+0x2ec>)
 8004adc:	fba3 2301 	umull	r2, r3, r3, r1
 8004ae0:	08da      	lsrs	r2, r3, #3
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	1aca      	subs	r2, r1, r3
 8004aec:	2a08      	cmp	r2, #8
 8004aee:	d904      	bls.n	8004afa <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d104      	bne.n	8004b0c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	085a      	lsrs	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_SAI_Init+0x18c>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d109      	bne.n	8004b30 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_SAI_Init+0x198>
 8004b24:	2300      	movs	r3, #0
 8004b26:	e001      	b.n	8004b2c <HAL_SAI_Init+0x19c>
 8004b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	e008      	b.n	8004b42 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d102      	bne.n	8004b3e <HAL_SAI_Init+0x1ae>
 8004b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b3c:	e000      	b.n	8004b40 <HAL_SAI_Init+0x1b0>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6819      	ldr	r1, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4b4c      	ldr	r3, [pc, #304]	; (8004c80 <HAL_SAI_Init+0x2f0>)
 8004b4e:	400b      	ands	r3, r1
 8004b50:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6819      	ldr	r1, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b66:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8004b7a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b86:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	051b      	lsls	r3, r3, #20
 8004b8e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6859      	ldr	r1, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b38      	ldr	r3, [pc, #224]	; (8004c84 <HAL_SAI_Init+0x2f4>)
 8004ba4:	400b      	ands	r3, r1
 8004ba6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6859      	ldr	r1, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6899      	ldr	r1, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4b2d      	ldr	r3, [pc, #180]	; (8004c88 <HAL_SAI_Init+0x2f8>)
 8004bd2:	400b      	ands	r3, r1
 8004bd4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6899      	ldr	r1, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004be6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004bec:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004bf2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004bfc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68d9      	ldr	r1, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004c14:	400b      	ands	r3, r1
 8004c16:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68d9      	ldr	r1, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c26:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2c:	041b      	lsls	r3, r3, #16
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c34:	3b01      	subs	r3, #1
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3720      	adds	r7, #32
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40015804 	.word	0x40015804
 8004c68:	40015824 	.word	0x40015824
 8004c6c:	40015800 	.word	0x40015800
 8004c70:	40015c00 	.word	0x40015c00
 8004c74:	40015c04 	.word	0x40015c04
 8004c78:	40015c24 	.word	0x40015c24
 8004c7c:	cccccccd 	.word	0xcccccccd
 8004c80:	ff05c010 	.word	0xff05c010
 8004c84:	ffff1ff0 	.word	0xffff1ff0
 8004c88:	fff88000 	.word	0xfff88000

08004c8c <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8004c9c:	f7fc fd9c 	bl	80017d8 <HAL_GetTick>
 8004ca0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_SAI_Transmit+0x22>
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e0b6      	b.n	8004e20 <HAL_SAI_Transmit+0x194>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	f040 80af 	bne.w	8004e1e <HAL_SAI_Transmit+0x192>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_SAI_Transmit+0x42>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e0a8      	b.n	8004e20 <HAL_SAI_Transmit+0x194>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->XferSize = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	88fa      	ldrh	r2, [r7, #6]
 8004cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	88fa      	ldrh	r2, [r7, #6]
 8004ce2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2212      	movs	r2, #18
 8004cf0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d17a      	bne.n	8004e00 <HAL_SAI_Transmit+0x174>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f9ba 	bl	8005084 <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d1e:	601a      	str	r2, [r3, #0]
    }

    while (hsai->XferCount > 0)
 8004d20:	e06e      	b.n	8004e00 <HAL_SAI_Transmit+0x174>
    {
      /* Write data if the FIFO is not full */
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d30:	d035      	beq.n	8004d9e <HAL_SAI_Transmit+0x112>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	2b40      	cmp	r3, #64	; 0x40
 8004d38:	d10d      	bne.n	8004d56 <HAL_SAI_Transmit+0xca>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d109      	bne.n	8004d56 <HAL_SAI_Transmit+0xca>
        {
          hsai->Instance->DR = (*hsai->pBuffPtr++);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d46:	1c59      	adds	r1, r3, #1
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	6651      	str	r1, [r2, #100]	; 0x64
 8004d4c:	781a      	ldrb	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	61da      	str	r2, [r3, #28]
 8004d54:	e01a      	b.n	8004d8c <HAL_SAI_Transmit+0x100>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5a:	2b80      	cmp	r3, #128	; 0x80
 8004d5c:	d80b      	bhi.n	8004d76 <HAL_SAI_Transmit+0xea>
        {
          hsai->Instance->DR = *((uint16_t *)hsai->pBuffPtr);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d62:	881a      	ldrh	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 2;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d6e:	1c9a      	adds	r2, r3, #2
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	665a      	str	r2, [r3, #100]	; 0x64
 8004d74:	e00a      	b.n	8004d8c <HAL_SAI_Transmit+0x100>
        }
        else
        {
          hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 4;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d86:	1d1a      	adds	r2, r3, #4
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	665a      	str	r2, [r3, #100]	; 0x64
        }
        hsai->XferCount--;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004d9c:	e030      	b.n	8004e00 <HAL_SAI_Transmit+0x174>
      }
      else
      {
        /* Check for the Timeout */
        if ((Timeout != HAL_MAX_DELAY) && ((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout)))
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d02c      	beq.n	8004e00 <HAL_SAI_Transmit+0x174>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <HAL_SAI_Transmit+0x130>
 8004dac:	f7fc fd14 	bl	80017d8 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d221      	bcs.n	8004e00 <HAL_SAI_Transmit+0x174>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd4:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f9a2 	bl	8005120 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0208 	orr.w	r2, r2, #8
 8004dea:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e00f      	b.n	8004e20 <HAL_SAI_Transmit+0x194>
    while (hsai->XferCount > 0)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d18b      	bne.n	8004d22 <HAL_SAI_Transmit+0x96>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e000      	b.n	8004e20 <HAL_SAI_Transmit+0x194>
  }
  else
  {
    return HAL_BUSY;
 8004e1e:	2302      	movs	r3, #2
  }
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <SAI_InitI2S+0x2a>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d103      	bne.n	8004e5a <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e58:	e002      	b.n	8004e60 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e66:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e6e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e076      	b.n	8004f78 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d107      	bne.n	8004ea0 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004e9c:	651a      	str	r2, [r3, #80]	; 0x50
 8004e9e:	e006      	b.n	8004eae <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ea6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	651a      	str	r2, [r3, #80]	; 0x50
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d84f      	bhi.n	8004f54 <SAI_InitI2S+0x12c>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <SAI_InitI2S+0x94>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004eef 	.word	0x08004eef
 8004ec4:	08004f11 	.word	0x08004f11
 8004ec8:	08004f33 	.word	0x08004f33

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2280      	movs	r2, #128	; 0x80
 8004ed0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	085b      	lsrs	r3, r3, #1
 8004ee0:	011a      	lsls	r2, r3, #4
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2240      	movs	r2, #64	; 0x40
 8004eea:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004eec:	e034      	b.n	8004f58 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2280      	movs	r2, #128	; 0x80
 8004ef2:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	085b      	lsrs	r3, r3, #1
 8004ef8:	019a      	lsls	r2, r3, #6
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2280      	movs	r2, #128	; 0x80
 8004f0c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004f0e:	e023      	b.n	8004f58 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	22c0      	movs	r2, #192	; 0xc0
 8004f14:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	085b      	lsrs	r3, r3, #1
 8004f1a:	019a      	lsls	r2, r3, #6
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2280      	movs	r2, #128	; 0x80
 8004f2e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004f30:	e012      	b.n	8004f58 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	22e0      	movs	r2, #224	; 0xe0
 8004f36:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	085b      	lsrs	r3, r3, #1
 8004f3c:	019a      	lsls	r2, r3, #6
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	085b      	lsrs	r3, r3, #1
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2280      	movs	r2, #128	; 0x80
 8004f50:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004f52:	e001      	b.n	8004f58 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e00f      	b.n	8004f78 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d10b      	bne.n	8004f76 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d102      	bne.n	8004f6a <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2210      	movs	r2, #16
 8004f68:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d102      	bne.n	8004f76 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2208      	movs	r2, #8
 8004f74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <SAI_InitPCM+0x2a>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d103      	bne.n	8004fb6 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004fb4:	e002      	b.n	8004fbc <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004fd0:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fe4:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d103      	bne.n	8004ff4 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ff2:	e002      	b.n	8004ffa <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	220d      	movs	r2, #13
 8004ff8:	645a      	str	r2, [r3, #68]	; 0x44
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d837      	bhi.n	8005070 <SAI_InitPCM+0xec>
 8005000:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <SAI_InitPCM+0x84>)
 8005002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005006:	bf00      	nop
 8005008:	08005019 	.word	0x08005019
 800500c:	0800502f 	.word	0x0800502f
 8005010:	08005045 	.word	0x08005045
 8005014:	0800505b 	.word	0x0800505b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2280      	movs	r2, #128	; 0x80
 800501c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	011a      	lsls	r2, r3, #4
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2240      	movs	r2, #64	; 0x40
 800502a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800502c:	e022      	b.n	8005074 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2280      	movs	r2, #128	; 0x80
 8005032:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2280      	movs	r2, #128	; 0x80
 8005040:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005042:	e017      	b.n	8005074 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	22c0      	movs	r2, #192	; 0xc0
 8005048:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2280      	movs	r2, #128	; 0x80
 8005056:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8005058:	e00c      	b.n	8005074 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	22e0      	movs	r2, #224	; 0xe0
 800505e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2280      	movs	r2, #128	; 0x80
 800506c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800506e:	e001      	b.n	8005074 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop

08005084 <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* fill the fifo with data before to enabled the SAI */
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 800508c:	e034      	b.n	80050f8 <SAI_FillFifo+0x74>
  {
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005092:	2b40      	cmp	r3, #64	; 0x40
 8005094:	d10d      	bne.n	80050b2 <SAI_FillFifo+0x2e>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <SAI_FillFifo+0x2e>
    {
      hsai->Instance->DR = (*hsai->pBuffPtr++);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050a2:	1c59      	adds	r1, r3, #1
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6651      	str	r1, [r2, #100]	; 0x64
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	61da      	str	r2, [r3, #28]
 80050b0:	e01a      	b.n	80050e8 <SAI_FillFifo+0x64>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b6:	2b80      	cmp	r3, #128	; 0x80
 80050b8:	d80b      	bhi.n	80050d2 <SAI_FillFifo+0x4e>
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ca:	1c9a      	adds	r2, r3, #2
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	665a      	str	r2, [r3, #100]	; 0x64
 80050d0:	e00a      	b.n	80050e8 <SAI_FillFifo+0x64>
    }
    else
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 4;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e2:	1d1a      	adds	r2, r3, #4
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	665a      	str	r2, [r3, #100]	; 0x64
    }
    hsai->XferCount--;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005102:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005106:	d004      	beq.n	8005112 <SAI_FillFifo+0x8e>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1bd      	bne.n	800508e <SAI_FillFifo+0xa>
  }
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
	...

08005120 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005128:	4b17      	ldr	r3, [pc, #92]	; (8005188 <SAI_Disable+0x68>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a17      	ldr	r2, [pc, #92]	; (800518c <SAI_Disable+0x6c>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	0b1b      	lsrs	r3, r3, #12
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800514a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	1e5a      	subs	r2, r3, #1
 8005150:	60fa      	str	r2, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800515c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	72fb      	strb	r3, [r7, #11]
      break;
 800516a:	e006      	b.n	800517a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e8      	bne.n	800514c <SAI_Disable+0x2c>

  return status;
 800517a:	7afb      	ldrb	r3, [r7, #11]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	20000010 	.word	0x20000010
 800518c:	95cbec1b 	.word	0x95cbec1b

08005190 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e040      	b.n	8005224 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fc f980 	bl	80014b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2224      	movs	r2, #36	; 0x24
 80051bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0201 	bic.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f912 	bl	80053f8 <UART_SetConfig>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d101      	bne.n	80051de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e022      	b.n	8005224 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fb68 	bl	80058bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800520a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fbef 	bl	8005a00 <UART_CheckIdleState>
 8005222:	4603      	mov	r3, r0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08a      	sub	sp, #40	; 0x28
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005240:	2b20      	cmp	r3, #32
 8005242:	f040 8081 	bne.w	8005348 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_UART_Transmit+0x26>
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e079      	b.n	800534a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_UART_Transmit+0x38>
 8005260:	2302      	movs	r3, #2
 8005262:	e072      	b.n	800534a <HAL_UART_Transmit+0x11e>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2221      	movs	r2, #33	; 0x21
 8005278:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800527a:	f7fc faad 	bl	80017d8 <HAL_GetTick>
 800527e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005298:	d108      	bne.n	80052ac <HAL_UART_Transmit+0x80>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d104      	bne.n	80052ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	e003      	b.n	80052b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80052bc:	e02c      	b.n	8005318 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2200      	movs	r2, #0
 80052c6:	2180      	movs	r1, #128	; 0x80
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 fbe2 	bl	8005a92 <UART_WaitOnFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e038      	b.n	800534a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10b      	bne.n	80052f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	3302      	adds	r3, #2
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	e007      	b.n	8005306 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	781a      	ldrb	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	3301      	adds	r3, #1
 8005304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1cc      	bne.n	80052be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2200      	movs	r2, #0
 800532c:	2140      	movs	r1, #64	; 0x40
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 fbaf 	bl	8005a92 <UART_WaitOnFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e005      	b.n	800534a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2220      	movs	r2, #32
 8005342:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	e000      	b.n	800534a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005348:	2302      	movs	r3, #2
  }
}
 800534a:	4618      	mov	r0, r3
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	4613      	mov	r3, r2
 800535e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005364:	2b20      	cmp	r3, #32
 8005366:	d12c      	bne.n	80053c2 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_UART_Receive_DMA+0x22>
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e025      	b.n	80053c4 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_UART_Receive_DMA+0x34>
 8005382:	2302      	movs	r3, #2
 8005384:	e01e      	b.n	80053c4 <HAL_UART_Receive_DMA+0x72>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80053b0:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	461a      	mov	r2, r3
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 fbe7 	bl	8005b8c <UART_Start_Receive_DMA>
 80053be:	4603      	mov	r3, r0
 80053c0:	e000      	b.n	80053c4 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4ba7      	ldr	r3, [pc, #668]	; (80056c0 <UART_SetConfig+0x2c8>)
 8005424:	4013      	ands	r3, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	6979      	ldr	r1, [r7, #20]
 800542c:	430b      	orrs	r3, r1
 800542e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	430a      	orrs	r2, r1
 8005468:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a95      	ldr	r2, [pc, #596]	; (80056c4 <UART_SetConfig+0x2cc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d120      	bne.n	80054b6 <UART_SetConfig+0xbe>
 8005474:	4b94      	ldr	r3, [pc, #592]	; (80056c8 <UART_SetConfig+0x2d0>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b03      	cmp	r3, #3
 8005480:	d816      	bhi.n	80054b0 <UART_SetConfig+0xb8>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0x90>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	08005499 	.word	0x08005499
 800548c:	080054a5 	.word	0x080054a5
 8005490:	0800549f 	.word	0x0800549f
 8005494:	080054ab 	.word	0x080054ab
 8005498:	2301      	movs	r3, #1
 800549a:	77fb      	strb	r3, [r7, #31]
 800549c:	e14f      	b.n	800573e <UART_SetConfig+0x346>
 800549e:	2302      	movs	r3, #2
 80054a0:	77fb      	strb	r3, [r7, #31]
 80054a2:	e14c      	b.n	800573e <UART_SetConfig+0x346>
 80054a4:	2304      	movs	r3, #4
 80054a6:	77fb      	strb	r3, [r7, #31]
 80054a8:	e149      	b.n	800573e <UART_SetConfig+0x346>
 80054aa:	2308      	movs	r3, #8
 80054ac:	77fb      	strb	r3, [r7, #31]
 80054ae:	e146      	b.n	800573e <UART_SetConfig+0x346>
 80054b0:	2310      	movs	r3, #16
 80054b2:	77fb      	strb	r3, [r7, #31]
 80054b4:	e143      	b.n	800573e <UART_SetConfig+0x346>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a84      	ldr	r2, [pc, #528]	; (80056cc <UART_SetConfig+0x2d4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d132      	bne.n	8005526 <UART_SetConfig+0x12e>
 80054c0:	4b81      	ldr	r3, [pc, #516]	; (80056c8 <UART_SetConfig+0x2d0>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	2b0c      	cmp	r3, #12
 80054cc:	d828      	bhi.n	8005520 <UART_SetConfig+0x128>
 80054ce:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <UART_SetConfig+0xdc>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	08005509 	.word	0x08005509
 80054d8:	08005521 	.word	0x08005521
 80054dc:	08005521 	.word	0x08005521
 80054e0:	08005521 	.word	0x08005521
 80054e4:	08005515 	.word	0x08005515
 80054e8:	08005521 	.word	0x08005521
 80054ec:	08005521 	.word	0x08005521
 80054f0:	08005521 	.word	0x08005521
 80054f4:	0800550f 	.word	0x0800550f
 80054f8:	08005521 	.word	0x08005521
 80054fc:	08005521 	.word	0x08005521
 8005500:	08005521 	.word	0x08005521
 8005504:	0800551b 	.word	0x0800551b
 8005508:	2300      	movs	r3, #0
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e117      	b.n	800573e <UART_SetConfig+0x346>
 800550e:	2302      	movs	r3, #2
 8005510:	77fb      	strb	r3, [r7, #31]
 8005512:	e114      	b.n	800573e <UART_SetConfig+0x346>
 8005514:	2304      	movs	r3, #4
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e111      	b.n	800573e <UART_SetConfig+0x346>
 800551a:	2308      	movs	r3, #8
 800551c:	77fb      	strb	r3, [r7, #31]
 800551e:	e10e      	b.n	800573e <UART_SetConfig+0x346>
 8005520:	2310      	movs	r3, #16
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e10b      	b.n	800573e <UART_SetConfig+0x346>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a69      	ldr	r2, [pc, #420]	; (80056d0 <UART_SetConfig+0x2d8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d120      	bne.n	8005572 <UART_SetConfig+0x17a>
 8005530:	4b65      	ldr	r3, [pc, #404]	; (80056c8 <UART_SetConfig+0x2d0>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005536:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800553a:	2b30      	cmp	r3, #48	; 0x30
 800553c:	d013      	beq.n	8005566 <UART_SetConfig+0x16e>
 800553e:	2b30      	cmp	r3, #48	; 0x30
 8005540:	d814      	bhi.n	800556c <UART_SetConfig+0x174>
 8005542:	2b20      	cmp	r3, #32
 8005544:	d009      	beq.n	800555a <UART_SetConfig+0x162>
 8005546:	2b20      	cmp	r3, #32
 8005548:	d810      	bhi.n	800556c <UART_SetConfig+0x174>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <UART_SetConfig+0x15c>
 800554e:	2b10      	cmp	r3, #16
 8005550:	d006      	beq.n	8005560 <UART_SetConfig+0x168>
 8005552:	e00b      	b.n	800556c <UART_SetConfig+0x174>
 8005554:	2300      	movs	r3, #0
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e0f1      	b.n	800573e <UART_SetConfig+0x346>
 800555a:	2302      	movs	r3, #2
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e0ee      	b.n	800573e <UART_SetConfig+0x346>
 8005560:	2304      	movs	r3, #4
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e0eb      	b.n	800573e <UART_SetConfig+0x346>
 8005566:	2308      	movs	r3, #8
 8005568:	77fb      	strb	r3, [r7, #31]
 800556a:	e0e8      	b.n	800573e <UART_SetConfig+0x346>
 800556c:	2310      	movs	r3, #16
 800556e:	77fb      	strb	r3, [r7, #31]
 8005570:	e0e5      	b.n	800573e <UART_SetConfig+0x346>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a57      	ldr	r2, [pc, #348]	; (80056d4 <UART_SetConfig+0x2dc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d120      	bne.n	80055be <UART_SetConfig+0x1c6>
 800557c:	4b52      	ldr	r3, [pc, #328]	; (80056c8 <UART_SetConfig+0x2d0>)
 800557e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005582:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005586:	2bc0      	cmp	r3, #192	; 0xc0
 8005588:	d013      	beq.n	80055b2 <UART_SetConfig+0x1ba>
 800558a:	2bc0      	cmp	r3, #192	; 0xc0
 800558c:	d814      	bhi.n	80055b8 <UART_SetConfig+0x1c0>
 800558e:	2b80      	cmp	r3, #128	; 0x80
 8005590:	d009      	beq.n	80055a6 <UART_SetConfig+0x1ae>
 8005592:	2b80      	cmp	r3, #128	; 0x80
 8005594:	d810      	bhi.n	80055b8 <UART_SetConfig+0x1c0>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <UART_SetConfig+0x1a8>
 800559a:	2b40      	cmp	r3, #64	; 0x40
 800559c:	d006      	beq.n	80055ac <UART_SetConfig+0x1b4>
 800559e:	e00b      	b.n	80055b8 <UART_SetConfig+0x1c0>
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e0cb      	b.n	800573e <UART_SetConfig+0x346>
 80055a6:	2302      	movs	r3, #2
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e0c8      	b.n	800573e <UART_SetConfig+0x346>
 80055ac:	2304      	movs	r3, #4
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e0c5      	b.n	800573e <UART_SetConfig+0x346>
 80055b2:	2308      	movs	r3, #8
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e0c2      	b.n	800573e <UART_SetConfig+0x346>
 80055b8:	2310      	movs	r3, #16
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e0bf      	b.n	800573e <UART_SetConfig+0x346>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a45      	ldr	r2, [pc, #276]	; (80056d8 <UART_SetConfig+0x2e0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d125      	bne.n	8005614 <UART_SetConfig+0x21c>
 80055c8:	4b3f      	ldr	r3, [pc, #252]	; (80056c8 <UART_SetConfig+0x2d0>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d6:	d017      	beq.n	8005608 <UART_SetConfig+0x210>
 80055d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055dc:	d817      	bhi.n	800560e <UART_SetConfig+0x216>
 80055de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e2:	d00b      	beq.n	80055fc <UART_SetConfig+0x204>
 80055e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e8:	d811      	bhi.n	800560e <UART_SetConfig+0x216>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <UART_SetConfig+0x1fe>
 80055ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f2:	d006      	beq.n	8005602 <UART_SetConfig+0x20a>
 80055f4:	e00b      	b.n	800560e <UART_SetConfig+0x216>
 80055f6:	2300      	movs	r3, #0
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e0a0      	b.n	800573e <UART_SetConfig+0x346>
 80055fc:	2302      	movs	r3, #2
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e09d      	b.n	800573e <UART_SetConfig+0x346>
 8005602:	2304      	movs	r3, #4
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e09a      	b.n	800573e <UART_SetConfig+0x346>
 8005608:	2308      	movs	r3, #8
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e097      	b.n	800573e <UART_SetConfig+0x346>
 800560e:	2310      	movs	r3, #16
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e094      	b.n	800573e <UART_SetConfig+0x346>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a30      	ldr	r2, [pc, #192]	; (80056dc <UART_SetConfig+0x2e4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d125      	bne.n	800566a <UART_SetConfig+0x272>
 800561e:	4b2a      	ldr	r3, [pc, #168]	; (80056c8 <UART_SetConfig+0x2d0>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005624:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005628:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800562c:	d017      	beq.n	800565e <UART_SetConfig+0x266>
 800562e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005632:	d817      	bhi.n	8005664 <UART_SetConfig+0x26c>
 8005634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005638:	d00b      	beq.n	8005652 <UART_SetConfig+0x25a>
 800563a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800563e:	d811      	bhi.n	8005664 <UART_SetConfig+0x26c>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <UART_SetConfig+0x254>
 8005644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005648:	d006      	beq.n	8005658 <UART_SetConfig+0x260>
 800564a:	e00b      	b.n	8005664 <UART_SetConfig+0x26c>
 800564c:	2301      	movs	r3, #1
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e075      	b.n	800573e <UART_SetConfig+0x346>
 8005652:	2302      	movs	r3, #2
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e072      	b.n	800573e <UART_SetConfig+0x346>
 8005658:	2304      	movs	r3, #4
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e06f      	b.n	800573e <UART_SetConfig+0x346>
 800565e:	2308      	movs	r3, #8
 8005660:	77fb      	strb	r3, [r7, #31]
 8005662:	e06c      	b.n	800573e <UART_SetConfig+0x346>
 8005664:	2310      	movs	r3, #16
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e069      	b.n	800573e <UART_SetConfig+0x346>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1c      	ldr	r2, [pc, #112]	; (80056e0 <UART_SetConfig+0x2e8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d137      	bne.n	80056e4 <UART_SetConfig+0x2ec>
 8005674:	4b14      	ldr	r3, [pc, #80]	; (80056c8 <UART_SetConfig+0x2d0>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800567e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005682:	d017      	beq.n	80056b4 <UART_SetConfig+0x2bc>
 8005684:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005688:	d817      	bhi.n	80056ba <UART_SetConfig+0x2c2>
 800568a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568e:	d00b      	beq.n	80056a8 <UART_SetConfig+0x2b0>
 8005690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005694:	d811      	bhi.n	80056ba <UART_SetConfig+0x2c2>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <UART_SetConfig+0x2aa>
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569e:	d006      	beq.n	80056ae <UART_SetConfig+0x2b6>
 80056a0:	e00b      	b.n	80056ba <UART_SetConfig+0x2c2>
 80056a2:	2300      	movs	r3, #0
 80056a4:	77fb      	strb	r3, [r7, #31]
 80056a6:	e04a      	b.n	800573e <UART_SetConfig+0x346>
 80056a8:	2302      	movs	r3, #2
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e047      	b.n	800573e <UART_SetConfig+0x346>
 80056ae:	2304      	movs	r3, #4
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e044      	b.n	800573e <UART_SetConfig+0x346>
 80056b4:	2308      	movs	r3, #8
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	e041      	b.n	800573e <UART_SetConfig+0x346>
 80056ba:	2310      	movs	r3, #16
 80056bc:	77fb      	strb	r3, [r7, #31]
 80056be:	e03e      	b.n	800573e <UART_SetConfig+0x346>
 80056c0:	efff69f3 	.word	0xefff69f3
 80056c4:	40011000 	.word	0x40011000
 80056c8:	40023800 	.word	0x40023800
 80056cc:	40004400 	.word	0x40004400
 80056d0:	40004800 	.word	0x40004800
 80056d4:	40004c00 	.word	0x40004c00
 80056d8:	40005000 	.word	0x40005000
 80056dc:	40011400 	.word	0x40011400
 80056e0:	40007800 	.word	0x40007800
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a71      	ldr	r2, [pc, #452]	; (80058b0 <UART_SetConfig+0x4b8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d125      	bne.n	800573a <UART_SetConfig+0x342>
 80056ee:	4b71      	ldr	r3, [pc, #452]	; (80058b4 <UART_SetConfig+0x4bc>)
 80056f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056fc:	d017      	beq.n	800572e <UART_SetConfig+0x336>
 80056fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005702:	d817      	bhi.n	8005734 <UART_SetConfig+0x33c>
 8005704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005708:	d00b      	beq.n	8005722 <UART_SetConfig+0x32a>
 800570a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570e:	d811      	bhi.n	8005734 <UART_SetConfig+0x33c>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <UART_SetConfig+0x324>
 8005714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005718:	d006      	beq.n	8005728 <UART_SetConfig+0x330>
 800571a:	e00b      	b.n	8005734 <UART_SetConfig+0x33c>
 800571c:	2300      	movs	r3, #0
 800571e:	77fb      	strb	r3, [r7, #31]
 8005720:	e00d      	b.n	800573e <UART_SetConfig+0x346>
 8005722:	2302      	movs	r3, #2
 8005724:	77fb      	strb	r3, [r7, #31]
 8005726:	e00a      	b.n	800573e <UART_SetConfig+0x346>
 8005728:	2304      	movs	r3, #4
 800572a:	77fb      	strb	r3, [r7, #31]
 800572c:	e007      	b.n	800573e <UART_SetConfig+0x346>
 800572e:	2308      	movs	r3, #8
 8005730:	77fb      	strb	r3, [r7, #31]
 8005732:	e004      	b.n	800573e <UART_SetConfig+0x346>
 8005734:	2310      	movs	r3, #16
 8005736:	77fb      	strb	r3, [r7, #31]
 8005738:	e001      	b.n	800573e <UART_SetConfig+0x346>
 800573a:	2310      	movs	r3, #16
 800573c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005746:	d15b      	bne.n	8005800 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005748:	7ffb      	ldrb	r3, [r7, #31]
 800574a:	2b08      	cmp	r3, #8
 800574c:	d827      	bhi.n	800579e <UART_SetConfig+0x3a6>
 800574e:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <UART_SetConfig+0x35c>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005779 	.word	0x08005779
 8005758:	08005781 	.word	0x08005781
 800575c:	08005789 	.word	0x08005789
 8005760:	0800579f 	.word	0x0800579f
 8005764:	0800578f 	.word	0x0800578f
 8005768:	0800579f 	.word	0x0800579f
 800576c:	0800579f 	.word	0x0800579f
 8005770:	0800579f 	.word	0x0800579f
 8005774:	08005797 	.word	0x08005797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005778:	f7fe fb14 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 800577c:	61b8      	str	r0, [r7, #24]
        break;
 800577e:	e013      	b.n	80057a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005780:	f7fe fb24 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005784:	61b8      	str	r0, [r7, #24]
        break;
 8005786:	e00f      	b.n	80057a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005788:	4b4b      	ldr	r3, [pc, #300]	; (80058b8 <UART_SetConfig+0x4c0>)
 800578a:	61bb      	str	r3, [r7, #24]
        break;
 800578c:	e00c      	b.n	80057a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800578e:	f7fe fa47 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 8005792:	61b8      	str	r0, [r7, #24]
        break;
 8005794:	e008      	b.n	80057a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800579a:	61bb      	str	r3, [r7, #24]
        break;
 800579c:	e004      	b.n	80057a8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	77bb      	strb	r3, [r7, #30]
        break;
 80057a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d074      	beq.n	8005898 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	005a      	lsls	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	441a      	add	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b0f      	cmp	r3, #15
 80057ca:	d916      	bls.n	80057fa <UART_SetConfig+0x402>
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d2:	d212      	bcs.n	80057fa <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f023 030f 	bic.w	r3, r3, #15
 80057dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	085b      	lsrs	r3, r3, #1
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	89fb      	ldrh	r3, [r7, #14]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	89fa      	ldrh	r2, [r7, #14]
 80057f6:	60da      	str	r2, [r3, #12]
 80057f8:	e04e      	b.n	8005898 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	77bb      	strb	r3, [r7, #30]
 80057fe:	e04b      	b.n	8005898 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005800:	7ffb      	ldrb	r3, [r7, #31]
 8005802:	2b08      	cmp	r3, #8
 8005804:	d827      	bhi.n	8005856 <UART_SetConfig+0x45e>
 8005806:	a201      	add	r2, pc, #4	; (adr r2, 800580c <UART_SetConfig+0x414>)
 8005808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580c:	08005831 	.word	0x08005831
 8005810:	08005839 	.word	0x08005839
 8005814:	08005841 	.word	0x08005841
 8005818:	08005857 	.word	0x08005857
 800581c:	08005847 	.word	0x08005847
 8005820:	08005857 	.word	0x08005857
 8005824:	08005857 	.word	0x08005857
 8005828:	08005857 	.word	0x08005857
 800582c:	0800584f 	.word	0x0800584f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005830:	f7fe fab8 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005834:	61b8      	str	r0, [r7, #24]
        break;
 8005836:	e013      	b.n	8005860 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005838:	f7fe fac8 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 800583c:	61b8      	str	r0, [r7, #24]
        break;
 800583e:	e00f      	b.n	8005860 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005840:	4b1d      	ldr	r3, [pc, #116]	; (80058b8 <UART_SetConfig+0x4c0>)
 8005842:	61bb      	str	r3, [r7, #24]
        break;
 8005844:	e00c      	b.n	8005860 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005846:	f7fe f9eb 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 800584a:	61b8      	str	r0, [r7, #24]
        break;
 800584c:	e008      	b.n	8005860 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005852:	61bb      	str	r3, [r7, #24]
        break;
 8005854:	e004      	b.n	8005860 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	77bb      	strb	r3, [r7, #30]
        break;
 800585e:	bf00      	nop
    }

    if (pclk != 0U)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d018      	beq.n	8005898 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	085a      	lsrs	r2, r3, #1
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	441a      	add	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	fbb2 f3f3 	udiv	r3, r2, r3
 8005878:	b29b      	uxth	r3, r3
 800587a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	2b0f      	cmp	r3, #15
 8005880:	d908      	bls.n	8005894 <UART_SetConfig+0x49c>
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005888:	d204      	bcs.n	8005894 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	e001      	b.n	8005898 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40007c00 	.word	0x40007c00
 80058b4:	40023800 	.word	0x40023800
 80058b8:	00f42400 	.word	0x00f42400

080058bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01a      	beq.n	80059d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ba:	d10a      	bne.n	80059d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	605a      	str	r2, [r3, #4]
  }
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a10:	f7fb fee2 	bl	80017d8 <HAL_GetTick>
 8005a14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d10e      	bne.n	8005a42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f82d 	bl	8005a92 <UART_WaitOnFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e023      	b.n	8005a8a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d10e      	bne.n	8005a6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f817 	bl	8005a92 <UART_WaitOnFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e00d      	b.n	8005a8a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	603b      	str	r3, [r7, #0]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa2:	e05e      	b.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aaa:	d05a      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aac:	f7fb fe94 	bl	80017d8 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d302      	bcc.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d11b      	bne.n	8005afa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ad0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e043      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d02c      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b16:	d124      	bne.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b30:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0201 	bic.w	r2, r2, #1
 8005b40:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e00f      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69da      	ldr	r2, [r3, #28]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	bf0c      	ite	eq
 8005b72:	2301      	moveq	r3, #1
 8005b74:	2300      	movne	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d091      	beq.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	88fa      	ldrh	r2, [r7, #6]
 8005ba4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2222      	movs	r2, #34	; 0x22
 8005bb4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d02b      	beq.n	8005c16 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	4a25      	ldr	r2, [pc, #148]	; (8005c58 <UART_Start_Receive_DMA+0xcc>)
 8005bc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	4a24      	ldr	r2, [pc, #144]	; (8005c5c <UART_Start_Receive_DMA+0xd0>)
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd2:	4a23      	ldr	r2, [pc, #140]	; (8005c60 <UART_Start_Receive_DMA+0xd4>)
 8005bd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bda:	2200      	movs	r2, #0
 8005bdc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3324      	adds	r3, #36	; 0x24
 8005be8:	4619      	mov	r1, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	461a      	mov	r2, r3
 8005bf0:	88fb      	ldrh	r3, [r7, #6]
 8005bf2:	f7fb ffbd 	bl	8001b70 <HAL_DMA_Start_IT>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00c      	beq.n	8005c16 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2210      	movs	r2, #16
 8005c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e01c      	b.n	8005c50 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c2c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0201 	orr.w	r2, r2, #1
 8005c3c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c4c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	08005ced 	.word	0x08005ced
 8005c5c:	08005d81 	.word	0x08005d81
 8005c60:	08005db9 	.word	0x08005db9

08005c64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005c7a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ca4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d107      	bne.n	8005cce <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0210 	bic.w	r2, r2, #16
 8005ccc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d02:	d02a      	beq.n	8005d5a <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d1a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0201 	bic.w	r2, r2, #1
 8005d2a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d3a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d107      	bne.n	8005d5a <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0210 	bic.w	r2, r2, #16
 8005d58:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d107      	bne.n	8005d72 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d68:	4619      	mov	r1, r3
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7ff fb38 	bl	80053e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d70:	e002      	b.n	8005d78 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7fa ff88 	bl	8000c88 <HAL_UART_RxCpltCallback>
}
 8005d78:	bf00      	nop
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d109      	bne.n	8005daa <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d9c:	085b      	lsrs	r3, r3, #1
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	4619      	mov	r1, r3
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f7ff fb1c 	bl	80053e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005da8:	e002      	b.n	8005db0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7fa ff52 	bl	8000c54 <HAL_UART_RxHalfCpltCallback>
}
 8005db0:	bf00      	nop
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ddc:	2b80      	cmp	r3, #128	; 0x80
 8005dde:	d109      	bne.n	8005df4 <UART_DMAError+0x3c>
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b21      	cmp	r3, #33	; 0x21
 8005de4:	d106      	bne.n	8005df4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005dee:	6978      	ldr	r0, [r7, #20]
 8005df0:	f7ff ff38 	bl	8005c64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfe:	2b40      	cmp	r3, #64	; 0x40
 8005e00:	d109      	bne.n	8005e16 <UART_DMAError+0x5e>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b22      	cmp	r3, #34	; 0x22
 8005e06:	d106      	bne.n	8005e16 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005e10:	6978      	ldr	r0, [r7, #20]
 8005e12:	f7ff ff3c 	bl	8005c8e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e1c:	f043 0210 	orr.w	r2, r3, #16
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e26:	6978      	ldr	r0, [r7, #20]
 8005e28:	f7ff fad0 	bl	80053cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e2c:	bf00      	nop
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <__libc_init_array>:
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	4d0d      	ldr	r5, [pc, #52]	; (8005e6c <__libc_init_array+0x38>)
 8005e38:	4c0d      	ldr	r4, [pc, #52]	; (8005e70 <__libc_init_array+0x3c>)
 8005e3a:	1b64      	subs	r4, r4, r5
 8005e3c:	10a4      	asrs	r4, r4, #2
 8005e3e:	2600      	movs	r6, #0
 8005e40:	42a6      	cmp	r6, r4
 8005e42:	d109      	bne.n	8005e58 <__libc_init_array+0x24>
 8005e44:	4d0b      	ldr	r5, [pc, #44]	; (8005e74 <__libc_init_array+0x40>)
 8005e46:	4c0c      	ldr	r4, [pc, #48]	; (8005e78 <__libc_init_array+0x44>)
 8005e48:	f000 f820 	bl	8005e8c <_init>
 8005e4c:	1b64      	subs	r4, r4, r5
 8005e4e:	10a4      	asrs	r4, r4, #2
 8005e50:	2600      	movs	r6, #0
 8005e52:	42a6      	cmp	r6, r4
 8005e54:	d105      	bne.n	8005e62 <__libc_init_array+0x2e>
 8005e56:	bd70      	pop	{r4, r5, r6, pc}
 8005e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e5c:	4798      	blx	r3
 8005e5e:	3601      	adds	r6, #1
 8005e60:	e7ee      	b.n	8005e40 <__libc_init_array+0xc>
 8005e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e66:	4798      	blx	r3
 8005e68:	3601      	adds	r6, #1
 8005e6a:	e7f2      	b.n	8005e52 <__libc_init_array+0x1e>
 8005e6c:	080074f0 	.word	0x080074f0
 8005e70:	080074f0 	.word	0x080074f0
 8005e74:	080074f0 	.word	0x080074f0
 8005e78:	080074f4 	.word	0x080074f4

08005e7c <memset>:
 8005e7c:	4402      	add	r2, r0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d100      	bne.n	8005e86 <memset+0xa>
 8005e84:	4770      	bx	lr
 8005e86:	f803 1b01 	strb.w	r1, [r3], #1
 8005e8a:	e7f9      	b.n	8005e80 <memset+0x4>

08005e8c <_init>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	bf00      	nop
 8005e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e92:	bc08      	pop	{r3}
 8005e94:	469e      	mov	lr, r3
 8005e96:	4770      	bx	lr

08005e98 <_fini>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	bf00      	nop
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr
