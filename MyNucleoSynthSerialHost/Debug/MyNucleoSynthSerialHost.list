
MyNucleoSynthSerialHost.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004344  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d0  080046d0  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d8  080046d8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046dc  080046dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080046e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001704  20000034  08004714  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001738  08004714  00021738  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016796  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ca  00000000  00000000  000367f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000cbb5  00000000  00000000  00038ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  00045a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002790  00000000  00000000  00046508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ac53  00000000  00000000  00048c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145fd  00000000  00000000  000738eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00113cfb  00000000  00000000  00087ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019bbe3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024ac  00000000  00000000  0019bc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000034 	.word	0x20000034
 8000214:	00000000 	.word	0x00000000
 8000218:	08004524 	.word	0x08004524

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000038 	.word	0x20000038
 8000234:	08004524 	.word	0x08004524

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <PrepOscs>:
	HAL_DAC_SetValue(&DacHandle, DAC_CHANNEL_1, DAC_ALIGN_12B_R, output1);
	HAL_DAC_SetValue(&DacHandle, DAC_CHANNEL_2, DAC_ALIGN_12B_R, output2);
}

void PrepOscs(void)
{
 8000530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_TIM_Base_Start(&htim13);
}

void TIM14_Config(uint16_t period)
{
  htim14.Instance = TIM14;
 8000534:	49a2      	ldr	r1, [pc, #648]	; (80007c0 <PrepOscs+0x290>)

  htim14.Init.Period            = 511;
  htim14.Init.Prescaler         = period;
  htim14.Init.ClockDivision     = 0;
 8000536:	2400      	movs	r4, #0
  htim14.Instance = TIM14;
 8000538:	4ba2      	ldr	r3, [pc, #648]	; (80007c4 <PrepOscs+0x294>)
  htim14.Init.CounterMode       = TIM_COUNTERMODE_UP;
  htim14.Init.RepetitionCounter = 0;
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  HAL_TIM_Base_Init(&htim14);
 800053a:	4608      	mov	r0, r1
  htim14.Init.ClockDivision     = 0;
 800053c:	610c      	str	r4, [r1, #16]
  htim14.Instance = TIM14;
 800053e:	600b      	str	r3, [r1, #0]
  htim14.Init.Period            = 511;
 8000540:	f240 13ff 	movw	r3, #511	; 0x1ff
  htim14.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000544:	608c      	str	r4, [r1, #8]
  htim14.Init.Period            = 511;
 8000546:	60cb      	str	r3, [r1, #12]
  htim14.Init.Prescaler         = period;
 8000548:	f44f 6300 	mov.w	r3, #2048	; 0x800
  htim14.Init.RepetitionCounter = 0;
 800054c:	614c      	str	r4, [r1, #20]
  htim14.Init.Prescaler         = period;
 800054e:	604b      	str	r3, [r1, #4]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000550:	2380      	movs	r3, #128	; 0x80
  htim3.Instance = TIM3;
 8000552:	4f9d      	ldr	r7, [pc, #628]	; (80007c8 <PrepOscs+0x298>)
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000554:	618b      	str	r3, [r1, #24]
  HAL_TIM_Base_Init(&htim14);
 8000556:	f003 fde9 	bl	800412c <HAL_TIM_Base_Init>

  HAL_TIM_Base_Start(&htim14);
 800055a:	4999      	ldr	r1, [pc, #612]	; (80007c0 <PrepOscs+0x290>)
  htim4.Instance = TIM4;
 800055c:	f8df b288 	ldr.w	fp, [pc, #648]	; 80007e8 <PrepOscs+0x2b8>
  HAL_TIM_Base_Start(&htim14);
 8000560:	4608      	mov	r0, r1
  htim6.Instance = TIM6;
 8000562:	4e9a      	ldr	r6, [pc, #616]	; (80007cc <PrepOscs+0x29c>)
  HAL_TIM_Base_Start(&htim14);
 8000564:	f003 fe76 	bl	8004254 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Init(&htim2);
 8000568:	4a99      	ldr	r2, [pc, #612]	; (80007d0 <PrepOscs+0x2a0>)
  htim2.Init.Period            = 511;
 800056a:	f240 11ff 	movw	r1, #511	; 0x1ff
  htim2.Instance = TIM2;
 800056e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  HAL_TIM_Base_Init(&htim2);
 8000572:	4610      	mov	r0, r2
  htim2.Init.ClockDivision     = 0;
 8000574:	6114      	str	r4, [r2, #16]
  htim2.Init.Period            = 511;
 8000576:	60d1      	str	r1, [r2, #12]
  htim2.Init.Prescaler         = period;
 8000578:	f44f 6100 	mov.w	r1, #2048	; 0x800
  htim2.Instance = TIM2;
 800057c:	6013      	str	r3, [r2, #0]
  htim2.Init.Prescaler         = period;
 800057e:	6051      	str	r1, [r2, #4]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000580:	2180      	movs	r1, #128	; 0x80
  htim2.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000582:	6094      	str	r4, [r2, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000584:	6191      	str	r1, [r2, #24]
  htim2.Init.RepetitionCounter = 0;
 8000586:	6154      	str	r4, [r2, #20]
  HAL_TIM_Base_Init(&htim2);
 8000588:	f003 fdd0 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim2);
 800058c:	4a90      	ldr	r2, [pc, #576]	; (80007d0 <PrepOscs+0x2a0>)
  htim7.Instance = TIM7;
 800058e:	4d91      	ldr	r5, [pc, #580]	; (80007d4 <PrepOscs+0x2a4>)
  HAL_TIM_Base_Start(&htim2);
 8000590:	4610      	mov	r0, r2
  htim10.Instance = TIM10;
 8000592:	f8df a258 	ldr.w	sl, [pc, #600]	; 80007ec <PrepOscs+0x2bc>
  HAL_TIM_Base_Start(&htim2);
 8000596:	f003 fe5d 	bl	8004254 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Init(&htim3);
 800059a:	4b8f      	ldr	r3, [pc, #572]	; (80007d8 <PrepOscs+0x2a8>)
  htim3.Init.Period            = 511;
 800059c:	f240 12ff 	movw	r2, #511	; 0x1ff
  htim11.Instance = TIM11;
 80005a0:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80007f0 <PrepOscs+0x2c0>
  HAL_TIM_Base_Init(&htim3);
 80005a4:	4618      	mov	r0, r3
  htim3.Init.ClockDivision     = 0;
 80005a6:	611c      	str	r4, [r3, #16]
  htim3.Init.Period            = 511;
 80005a8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler         = period;
 80005aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
  htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80005ae:	609c      	str	r4, [r3, #8]
  htim3.Init.Prescaler         = period;
 80005b0:	605a      	str	r2, [r3, #4]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005b2:	2280      	movs	r2, #128	; 0x80
  htim3.Init.RepetitionCounter = 0;
 80005b4:	615c      	str	r4, [r3, #20]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005b6:	619a      	str	r2, [r3, #24]
  htim3.Instance = TIM3;
 80005b8:	601f      	str	r7, [r3, #0]
  HAL_TIM_Base_Init(&htim3);
 80005ba:	f003 fdb7 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim3);
 80005be:	4b86      	ldr	r3, [pc, #536]	; (80007d8 <PrepOscs+0x2a8>)
  htim4.Instance = TIM4;
 80005c0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  htim12.Instance = TIM12;
 80005c4:	f8df 822c 	ldr.w	r8, [pc, #556]	; 80007f4 <PrepOscs+0x2c4>
  HAL_TIM_Base_Start(&htim3);
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 fe43 	bl	8004254 <HAL_TIM_Base_Start>
  htim4.Init.Period            = 511;
 80005ce:	f240 13ff 	movw	r3, #511	; 0x1ff
  HAL_TIM_Base_Init(&htim4);
 80005d2:	4658      	mov	r0, fp
  htim4.Instance = TIM4;
 80005d4:	f8cb 7000 	str.w	r7, [fp]
  htim4.Init.Period            = 511;
 80005d8:	f8cb 300c 	str.w	r3, [fp, #12]
  htim4.Init.Prescaler         = period;
 80005dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  htim4.Init.ClockDivision     = 0;
 80005e0:	f8cb 4010 	str.w	r4, [fp, #16]
  htim5.Instance = TIM5;
 80005e4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  htim4.Init.Prescaler         = period;
 80005e8:	f8cb 3004 	str.w	r3, [fp, #4]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005ec:	2380      	movs	r3, #128	; 0x80
  htim4.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80005ee:	f8cb 4008 	str.w	r4, [fp, #8]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005f2:	f8cb 3018 	str.w	r3, [fp, #24]
  htim4.Init.RepetitionCounter = 0;
 80005f6:	f8cb 4014 	str.w	r4, [fp, #20]
  HAL_TIM_Base_Init(&htim4);
 80005fa:	f003 fd97 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim4);
 80005fe:	4658      	mov	r0, fp
 8000600:	f003 fe28 	bl	8004254 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Init(&htim5);
 8000604:	4875      	ldr	r0, [pc, #468]	; (80007dc <PrepOscs+0x2ac>)
  htim5.Init.Period            = 511;
 8000606:	f240 12ff 	movw	r2, #511	; 0x1ff
  htim5.Init.ClockDivision     = 0;
 800060a:	6104      	str	r4, [r0, #16]
  htim5.Init.Period            = 511;
 800060c:	60c2      	str	r2, [r0, #12]
  htim5.Init.Prescaler         = period;
 800060e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  htim5.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000612:	6084      	str	r4, [r0, #8]
  htim5.Init.Prescaler         = period;
 8000614:	6042      	str	r2, [r0, #4]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000616:	2280      	movs	r2, #128	; 0x80
  htim5.Init.RepetitionCounter = 0;
 8000618:	6144      	str	r4, [r0, #20]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800061a:	6182      	str	r2, [r0, #24]
  htim5.Instance = TIM5;
 800061c:	6007      	str	r7, [r0, #0]
  HAL_TIM_Base_Init(&htim5);
 800061e:	f003 fd85 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim5);
 8000622:	486e      	ldr	r0, [pc, #440]	; (80007dc <PrepOscs+0x2ac>)
  htim8.Instance = TIM8;
 8000624:	f507 4778 	add.w	r7, r7, #63488	; 0xf800
  HAL_TIM_Base_Start(&htim5);
 8000628:	f003 fe14 	bl	8004254 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Init(&htim8);
 800062c:	486c      	ldr	r0, [pc, #432]	; (80007e0 <PrepOscs+0x2b0>)
  htim8.Init.Period            = 511;
 800062e:	f240 12ff 	movw	r2, #511	; 0x1ff
  htim8.Init.ClockDivision     = 0;
 8000632:	6104      	str	r4, [r0, #16]
  htim8.Init.Period            = 511;
 8000634:	60c2      	str	r2, [r0, #12]
  htim8.Init.Prescaler         = period;
 8000636:	f44f 6200 	mov.w	r2, #2048	; 0x800
  htim8.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800063a:	6084      	str	r4, [r0, #8]
  htim8.Init.Prescaler         = period;
 800063c:	6042      	str	r2, [r0, #4]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800063e:	2280      	movs	r2, #128	; 0x80
  htim8.Init.RepetitionCounter = 0;
 8000640:	6144      	str	r4, [r0, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000642:	6182      	str	r2, [r0, #24]
  htim8.Instance = TIM8;
 8000644:	6007      	str	r7, [r0, #0]
  HAL_TIM_Base_Init(&htim8);
 8000646:	f003 fd71 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim8);
 800064a:	4865      	ldr	r0, [pc, #404]	; (80007e0 <PrepOscs+0x2b0>)
  htim6.Instance = TIM6;
 800064c:	f5a7 4774 	sub.w	r7, r7, #62464	; 0xf400
  HAL_TIM_Base_Start(&htim8);
 8000650:	f003 fe00 	bl	8004254 <HAL_TIM_Base_Start>
  htim6.Init.Period            = 511;
 8000654:	f240 13ff 	movw	r3, #511	; 0x1ff
  HAL_TIM_Base_Init(&htim6);
 8000658:	4630      	mov	r0, r6
  htim6.Instance = TIM6;
 800065a:	6037      	str	r7, [r6, #0]
  htim6.Init.Period            = 511;
 800065c:	60f3      	str	r3, [r6, #12]
  htim6.Init.Prescaler         = period;
 800065e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  htim6.Init.ClockDivision     = 0;
 8000662:	6134      	str	r4, [r6, #16]
  htim7.Instance = TIM7;
 8000664:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  htim6.Init.Prescaler         = period;
 8000668:	6073      	str	r3, [r6, #4]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800066a:	2380      	movs	r3, #128	; 0x80
  htim6.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800066c:	60b4      	str	r4, [r6, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800066e:	61b3      	str	r3, [r6, #24]
  htim6.Init.RepetitionCounter = 0;
 8000670:	6174      	str	r4, [r6, #20]
  HAL_TIM_Base_Init(&htim6);
 8000672:	f003 fd5b 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim6);
 8000676:	4630      	mov	r0, r6
 8000678:	f003 fdec 	bl	8004254 <HAL_TIM_Base_Start>
  htim7.Init.Period            = 511;
 800067c:	f240 13ff 	movw	r3, #511	; 0x1ff
  HAL_TIM_Base_Init(&htim7);
 8000680:	4628      	mov	r0, r5
  htim7.Instance = TIM7;
 8000682:	602f      	str	r7, [r5, #0]
  htim7.Init.Period            = 511;
 8000684:	60eb      	str	r3, [r5, #12]
  htim7.Init.Prescaler         = period;
 8000686:	f44f 6300 	mov.w	r3, #2048	; 0x800
  htim7.Init.ClockDivision     = 0;
 800068a:	612c      	str	r4, [r5, #16]
  htim10.Instance = TIM10;
 800068c:	f507 3798 	add.w	r7, r7, #77824	; 0x13000
  htim7.Init.Prescaler         = period;
 8000690:	606b      	str	r3, [r5, #4]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000692:	2380      	movs	r3, #128	; 0x80
  htim7.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000694:	60ac      	str	r4, [r5, #8]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000696:	61ab      	str	r3, [r5, #24]
  htim7.Init.RepetitionCounter = 0;
 8000698:	616c      	str	r4, [r5, #20]
  HAL_TIM_Base_Init(&htim7);
 800069a:	f003 fd47 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim7);
 800069e:	4628      	mov	r0, r5
 80006a0:	f003 fdd8 	bl	8004254 <HAL_TIM_Base_Start>
  htim10.Init.Period            = 511;
 80006a4:	f240 13ff 	movw	r3, #511	; 0x1ff
  HAL_TIM_Base_Init(&htim10);
 80006a8:	4650      	mov	r0, sl
  htim10.Instance = TIM10;
 80006aa:	f8ca 7000 	str.w	r7, [sl]
  htim10.Init.Period            = 511;
 80006ae:	f8ca 300c 	str.w	r3, [sl, #12]
  htim10.Init.Prescaler         = period;
 80006b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  htim10.Init.ClockDivision     = 0;
 80006b6:	f8ca 4010 	str.w	r4, [sl, #16]
  htim11.Instance = TIM11;
 80006ba:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  htim10.Init.Prescaler         = period;
 80006be:	f8ca 3004 	str.w	r3, [sl, #4]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006c2:	2380      	movs	r3, #128	; 0x80
  htim10.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80006c4:	f8ca 4008 	str.w	r4, [sl, #8]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006c8:	f8ca 3018 	str.w	r3, [sl, #24]
  htim10.Init.RepetitionCounter = 0;
 80006cc:	f8ca 4014 	str.w	r4, [sl, #20]
  HAL_TIM_Base_Init(&htim10);
 80006d0:	f003 fd2c 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim10);
 80006d4:	4650      	mov	r0, sl
 80006d6:	f003 fdbd 	bl	8004254 <HAL_TIM_Base_Start>
  htim11.Init.Period            = 511;
 80006da:	f240 13ff 	movw	r3, #511	; 0x1ff
  HAL_TIM_Base_Init(&htim11);
 80006de:	4648      	mov	r0, r9
  htim11.Instance = TIM11;
 80006e0:	f8c9 7000 	str.w	r7, [r9]
  htim11.Init.Period            = 511;
 80006e4:	f8c9 300c 	str.w	r3, [r9, #12]
  htim11.Init.Prescaler         = period;
 80006e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  htim11.Init.ClockDivision     = 0;
 80006ec:	f8c9 4010 	str.w	r4, [r9, #16]
  htim12.Instance = TIM12;
 80006f0:	f5a7 3798 	sub.w	r7, r7, #77824	; 0x13000
  htim11.Init.Prescaler         = period;
 80006f4:	f8c9 3004 	str.w	r3, [r9, #4]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006f8:	2380      	movs	r3, #128	; 0x80
  htim11.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80006fa:	f8c9 4008 	str.w	r4, [r9, #8]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006fe:	f8c9 3018 	str.w	r3, [r9, #24]
  htim11.Init.RepetitionCounter = 0;
 8000702:	f8c9 4014 	str.w	r4, [r9, #20]
  HAL_TIM_Base_Init(&htim11);
 8000706:	f003 fd11 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim11);
 800070a:	4648      	mov	r0, r9
 800070c:	f003 fda2 	bl	8004254 <HAL_TIM_Base_Start>
  htim12.Init.Period            = 511;
 8000710:	f240 13ff 	movw	r3, #511	; 0x1ff
  HAL_TIM_Base_Init(&htim12);
 8000714:	4640      	mov	r0, r8
  htim12.Instance = TIM12;
 8000716:	f8c8 7000 	str.w	r7, [r8]
  htim12.Init.Period            = 511;
 800071a:	f8c8 300c 	str.w	r3, [r8, #12]
  htim12.Init.Prescaler         = period;
 800071e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  htim12.Init.ClockDivision     = 0;
 8000722:	f8c8 4010 	str.w	r4, [r8, #16]
  htim12.Init.Prescaler         = period;
 8000726:	f8c8 3004 	str.w	r3, [r8, #4]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800072a:	2380      	movs	r3, #128	; 0x80
  htim12.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800072c:	f8c8 4008 	str.w	r4, [r8, #8]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000730:	f8c8 3018 	str.w	r3, [r8, #24]
  htim12.Init.RepetitionCounter = 0;
 8000734:	f8c8 4014 	str.w	r4, [r8, #20]
  HAL_TIM_Base_Init(&htim12);
 8000738:	f003 fcf8 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim12);
 800073c:	4640      	mov	r0, r8
  htim13.Instance = TIM13;
 800073e:	4f29      	ldr	r7, [pc, #164]	; (80007e4 <PrepOscs+0x2b4>)
  HAL_TIM_Base_Start(&htim12);
 8000740:	f003 fd88 	bl	8004254 <HAL_TIM_Base_Start>
  htim13.Init.Period            = 511;
 8000744:	f240 13ff 	movw	r3, #511	; 0x1ff
  htim13.Instance = TIM13;
 8000748:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 80007f8 <PrepOscs+0x2c8>
  HAL_TIM_Base_Init(&htim13);
 800074c:	4638      	mov	r0, r7
  htim13.Init.Period            = 511;
 800074e:	60fb      	str	r3, [r7, #12]
  htim13.Init.Prescaler         = period;
 8000750:	f44f 6300 	mov.w	r3, #2048	; 0x800
  htim13.Instance = TIM13;
 8000754:	f8c7 c000 	str.w	ip, [r7]
  htim13.Init.Prescaler         = period;
 8000758:	607b      	str	r3, [r7, #4]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800075a:	2380      	movs	r3, #128	; 0x80
  htim13.Init.ClockDivision     = 0;
 800075c:	613c      	str	r4, [r7, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800075e:	61bb      	str	r3, [r7, #24]
  htim13.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000760:	60bc      	str	r4, [r7, #8]
  htim13.Init.RepetitionCounter = 0;
 8000762:	617c      	str	r4, [r7, #20]
  HAL_TIM_Base_Init(&htim13);
 8000764:	f003 fce2 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim13);
 8000768:	4638      	mov	r0, r7
 800076a:	f003 fd73 	bl	8004254 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Stop(&htim14);
 800076e:	4914      	ldr	r1, [pc, #80]	; (80007c0 <PrepOscs+0x290>)
 8000770:	4608      	mov	r0, r1
 8000772:	f003 fd8b 	bl	800428c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim2);
 8000776:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <PrepOscs+0x2a0>)
 8000778:	4610      	mov	r0, r2
 800077a:	f003 fd87 	bl	800428c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim3);
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <PrepOscs+0x2a8>)
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fd83 	bl	800428c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 8000786:	4658      	mov	r0, fp
 8000788:	f003 fd80 	bl	800428c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim5);
 800078c:	4813      	ldr	r0, [pc, #76]	; (80007dc <PrepOscs+0x2ac>)
 800078e:	f003 fd7d 	bl	800428c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim8);
 8000792:	4813      	ldr	r0, [pc, #76]	; (80007e0 <PrepOscs+0x2b0>)
 8000794:	f003 fd7a 	bl	800428c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim6);
 8000798:	4630      	mov	r0, r6
 800079a:	f003 fd77 	bl	800428c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim7);
 800079e:	4628      	mov	r0, r5
 80007a0:	f003 fd74 	bl	800428c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim10);
 80007a4:	4650      	mov	r0, sl
 80007a6:	f003 fd71 	bl	800428c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim11);
 80007aa:	4648      	mov	r0, r9
 80007ac:	f003 fd6e 	bl	800428c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim12);
 80007b0:	4640      	mov	r0, r8
 80007b2:	f003 fd6b 	bl	800428c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim13);
 80007b6:	4638      	mov	r0, r7
}
 80007b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_TIM_Base_Stop(&htim13);
 80007bc:	f003 bd66 	b.w	800428c <HAL_TIM_Base_Stop>
 80007c0:	2000163c 	.word	0x2000163c
 80007c4:	40002000 	.word	0x40002000
 80007c8:	40000400 	.word	0x40000400
 80007cc:	20001464 	.word	0x20001464
 80007d0:	200015f0 	.word	0x200015f0
 80007d4:	200016cc 	.word	0x200016cc
 80007d8:	20000330 	.word	0x20000330
 80007dc:	200002f0 	.word	0x200002f0
 80007e0:	200001c8 	.word	0x200001c8
 80007e4:	200003ac 	.word	0x200003ac
 80007e8:	20000208 	.word	0x20000208
 80007ec:	20000264 	.word	0x20000264
 80007f0:	200003f0 	.word	0x200003f0
 80007f4:	20001684 	.word	0x20001684
 80007f8:	40001c00 	.word	0x40001c00

080007fc <MakeSound>:
{
 80007fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	counter[4] = __HAL_TIM_GetCounter(&htim5);
 8000800:	4881      	ldr	r0, [pc, #516]	; (8000a08 <MakeSound+0x20c>)
{
 8000802:	b085      	sub	sp, #20
	counter[0] = __HAL_TIM_GetCounter(&htim14);
 8000804:	4f81      	ldr	r7, [pc, #516]	; (8000a0c <MakeSound+0x210>)
	counter[1] = __HAL_TIM_GetCounter(&htim2);
 8000806:	4e82      	ldr	r6, [pc, #520]	; (8000a10 <MakeSound+0x214>)
	counter[2] = __HAL_TIM_GetCounter(&htim3);
 8000808:	4d82      	ldr	r5, [pc, #520]	; (8000a14 <MakeSound+0x218>)
	counter[3] = __HAL_TIM_GetCounter(&htim4);
 800080a:	4c83      	ldr	r4, [pc, #524]	; (8000a18 <MakeSound+0x21c>)
	counter[5] = __HAL_TIM_GetCounter(&htim8);
 800080c:	4983      	ldr	r1, [pc, #524]	; (8000a1c <MakeSound+0x220>)
	counter[6] = __HAL_TIM_GetCounter(&htim6);
 800080e:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8000a38 <MakeSound+0x23c>
	counter[7] = __HAL_TIM_GetCounter(&htim7);
 8000812:	f8df e228 	ldr.w	lr, [pc, #552]	; 8000a3c <MakeSound+0x240>
	counter[8] = __HAL_TIM_GetCounter(&htim10);
 8000816:	4b82      	ldr	r3, [pc, #520]	; (8000a20 <MakeSound+0x224>)
	counter[9] = __HAL_TIM_GetCounter(&htim11);
 8000818:	f8df c224 	ldr.w	ip, [pc, #548]	; 8000a40 <MakeSound+0x244>
	counter[10] = __HAL_TIM_GetCounter(&htim12);
 800081c:	4a81      	ldr	r2, [pc, #516]	; (8000a24 <MakeSound+0x228>)
	counter[0] = __HAL_TIM_GetCounter(&htim14);
 800081e:	683f      	ldr	r7, [r7, #0]
	counter[1] = __HAL_TIM_GetCounter(&htim2);
 8000820:	6836      	ldr	r6, [r6, #0]
	counter[2] = __HAL_TIM_GetCounter(&htim3);
 8000822:	682d      	ldr	r5, [r5, #0]
	counter[3] = __HAL_TIM_GetCounter(&htim4);
 8000824:	6824      	ldr	r4, [r4, #0]
	counter[4] = __HAL_TIM_GetCounter(&htim5);
 8000826:	6800      	ldr	r0, [r0, #0]
	counter[8] = __HAL_TIM_GetCounter(&htim10);
 8000828:	681b      	ldr	r3, [r3, #0]
	counter[9] = __HAL_TIM_GetCounter(&htim11);
 800082a:	f8dc c000 	ldr.w	ip, [ip]
	counter[5] = __HAL_TIM_GetCounter(&htim8);
 800082e:	6809      	ldr	r1, [r1, #0]
	counter[6] = __HAL_TIM_GetCounter(&htim6);
 8000830:	f8d8 8000 	ldr.w	r8, [r8]
	counter[7] = __HAL_TIM_GetCounter(&htim7);
 8000834:	f8de e000 	ldr.w	lr, [lr]
	counter[10] = __HAL_TIM_GetCounter(&htim12);
 8000838:	6812      	ldr	r2, [r2, #0]
	counter[0] = __HAL_TIM_GetCounter(&htim14);
 800083a:	6a7f      	ldr	r7, [r7, #36]	; 0x24
	counter[1] = __HAL_TIM_GetCounter(&htim2);
 800083c:	6a76      	ldr	r6, [r6, #36]	; 0x24
	counter[2] = __HAL_TIM_GetCounter(&htim3);
 800083e:	6a6d      	ldr	r5, [r5, #36]	; 0x24
	counter[0] = __HAL_TIM_GetCounter(&htim14);
 8000840:	b2bf      	uxth	r7, r7
	counter[3] = __HAL_TIM_GetCounter(&htim4);
 8000842:	6a64      	ldr	r4, [r4, #36]	; 0x24
	counter[1] = __HAL_TIM_GetCounter(&htim2);
 8000844:	b2b6      	uxth	r6, r6
	counter[4] = __HAL_TIM_GetCounter(&htim5);
 8000846:	6a40      	ldr	r0, [r0, #36]	; 0x24
	counter[2] = __HAL_TIM_GetCounter(&htim3);
 8000848:	b2ad      	uxth	r5, r5
	counter[5] = __HAL_TIM_GetCounter(&htim8);
 800084a:	6a49      	ldr	r1, [r1, #36]	; 0x24
	counter[3] = __HAL_TIM_GetCounter(&htim4);
 800084c:	b2a4      	uxth	r4, r4
	counter[6] = __HAL_TIM_GetCounter(&htim6);
 800084e:	f8d8 8024 	ldr.w	r8, [r8, #36]	; 0x24
	counter[4] = __HAL_TIM_GetCounter(&htim5);
 8000852:	b280      	uxth	r0, r0
	counter[7] = __HAL_TIM_GetCounter(&htim7);
 8000854:	f8de e024 	ldr.w	lr, [lr, #36]	; 0x24
	counter[8] = __HAL_TIM_GetCounter(&htim10);
 8000858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	counter[6] = __HAL_TIM_GetCounter(&htim6);
 800085a:	fa1f f888 	uxth.w	r8, r8
	counter[9] = __HAL_TIM_GetCounter(&htim11);
 800085e:	f8dc 9024 	ldr.w	r9, [ip, #36]	; 0x24
	counter[7] = __HAL_TIM_GetCounter(&htim7);
 8000862:	fa1f fe8e 	uxth.w	lr, lr
	counter[10] = __HAL_TIM_GetCounter(&htim12);
 8000866:	6a52      	ldr	r2, [r2, #36]	; 0x24
	counter[8] = __HAL_TIM_GetCounter(&htim10);
 8000868:	fa1f fc83 	uxth.w	ip, r3
	counter[4] = __HAL_TIM_GetCounter(&htim5);
 800086c:	9000      	str	r0, [sp, #0]
	counter[5] = __HAL_TIM_GetCounter(&htim8);
 800086e:	b288      	uxth	r0, r1
	counter[10] = __HAL_TIM_GetCounter(&htim12);
 8000870:	b292      	uxth	r2, r2
	counter[0] = __HAL_TIM_GetCounter(&htim14);
 8000872:	4b6d      	ldr	r3, [pc, #436]	; (8000a28 <MakeSound+0x22c>)
	counter[9] = __HAL_TIM_GetCounter(&htim11);
 8000874:	fa1f f189 	uxth.w	r1, r9
	counter[11] = __HAL_TIM_GetCounter(&htim13);
 8000878:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8000a44 <MakeSound+0x248>
	counter[10] = __HAL_TIM_GetCounter(&htim12);
 800087c:	9201      	str	r2, [sp, #4]
	counter[4] = __HAL_TIM_GetCounter(&htim5);
 800087e:	9a00      	ldr	r2, [sp, #0]
	counter[9] = __HAL_TIM_GetCounter(&htim11);
 8000880:	9103      	str	r1, [sp, #12]
	counter[5] = __HAL_TIM_GetCounter(&htim8);
 8000882:	9002      	str	r0, [sp, #8]
	counter[0] = __HAL_TIM_GetCounter(&htim14);
 8000884:	801f      	strh	r7, [r3, #0]
	counter[1] = __HAL_TIM_GetCounter(&htim2);
 8000886:	805e      	strh	r6, [r3, #2]
	counter[2] = __HAL_TIM_GetCounter(&htim3);
 8000888:	809d      	strh	r5, [r3, #4]
	counter[3] = __HAL_TIM_GetCounter(&htim4);
 800088a:	80dc      	strh	r4, [r3, #6]
	counter[4] = __HAL_TIM_GetCounter(&htim5);
 800088c:	811a      	strh	r2, [r3, #8]
	counter[11] = __HAL_TIM_GetCounter(&htim13);
 800088e:	f8d9 2000 	ldr.w	r2, [r9]
	if(wavesel) /* Fall thru if wavsel = 0, all oscillators to sawtooth */
 8000892:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8000a48 <MakeSound+0x24c>
	counter[11] = __HAL_TIM_GetCounter(&htim13);
 8000896:	6a52      	ldr	r2, [r2, #36]	; 0x24
	counter[9] = __HAL_TIM_GetCounter(&htim11);
 8000898:	8259      	strh	r1, [r3, #18]
	counter[11] = __HAL_TIM_GetCounter(&htim13);
 800089a:	fa1f fb82 	uxth.w	fp, r2
	counter[10] = __HAL_TIM_GetCounter(&htim12);
 800089e:	9901      	ldr	r1, [sp, #4]
	if(wavesel) /* Fall thru if wavsel = 0, all oscillators to sawtooth */
 80008a0:	f899 a000 	ldrb.w	sl, [r9]
	counter[5] = __HAL_TIM_GetCounter(&htim8);
 80008a4:	8158      	strh	r0, [r3, #10]
	counter[6] = __HAL_TIM_GetCounter(&htim6);
 80008a6:	f8a3 800c 	strh.w	r8, [r3, #12]
	counter[7] = __HAL_TIM_GetCounter(&htim7);
 80008aa:	f8a3 e00e 	strh.w	lr, [r3, #14]
	counter[8] = __HAL_TIM_GetCounter(&htim10);
 80008ae:	f8a3 c010 	strh.w	ip, [r3, #16]
	counter[10] = __HAL_TIM_GetCounter(&htim12);
 80008b2:	8299      	strh	r1, [r3, #20]
	counter[11] = __HAL_TIM_GetCounter(&htim13);
 80008b4:	f8a3 b016 	strh.w	fp, [r3, #22]
	if(wavesel) /* Fall thru if wavsel = 0, all oscillators to sawtooth */
 80008b8:	f1ba 0f00 	cmp.w	sl, #0
 80008bc:	f040 80c8 	bne.w	8000a50 <MakeSound+0x254>
 80008c0:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8000a4c <MakeSound+0x250>
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 80008c4:	899a      	ldrh	r2, [r3, #12]
 80008c6:	2106      	movs	r1, #6
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 80008c8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8000a2c <MakeSound+0x230>
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 80008cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80008d0:	ee04 2a90 	vmov	s9, r2
 80008d4:	89da      	ldrh	r2, [r3, #14]
 80008d6:	f889 1000 	strb.w	r1, [r9]
 80008da:	ee05 2a10 	vmov	s10, r2
 80008de:	8a1a      	ldrh	r2, [r3, #16]
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 80008e0:	88d9      	ldrh	r1, [r3, #6]
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 80008e2:	eef8 4a64 	vcvt.f32.u32	s9, s9
 80008e6:	ee05 2a90 	vmov	s11, r2
 80008ea:	8a5a      	ldrh	r2, [r3, #18]
 80008ec:	eeb8 5a45 	vcvt.f32.u32	s10, s10
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 80008f0:	ee02 1a10 	vmov	s4, r1
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 80008f4:	ee06 2a10 	vmov	s12, r2
 80008f8:	8a9a      	ldrh	r2, [r3, #20]
 80008fa:	eef8 5a65 	vcvt.f32.u32	s11, s11
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 80008fe:	8919      	ldrh	r1, [r3, #8]
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 8000900:	ee06 2a90 	vmov	s13, r2
 8000904:	8ada      	ldrh	r2, [r3, #22]
 8000906:	eeb8 6a46 	vcvt.f32.u32	s12, s12
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 800090a:	ee02 1a90 	vmov	s5, r1
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 800090e:	ee00 2a10 	vmov	s0, r2
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 8000912:	881a      	ldrh	r2, [r3, #0]
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 8000914:	ee84 4a87 	vdiv.f32	s8, s9, s14
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 8000918:	ee00 2a90 	vmov	s1, r2
 800091c:	885a      	ldrh	r2, [r3, #2]
 800091e:	ee01 2a10 	vmov	s2, r2
 8000922:	889a      	ldrh	r2, [r3, #4]
 8000924:	895b      	ldrh	r3, [r3, #10]
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 8000926:	eec5 4a07 	vdiv.f32	s9, s10, s14
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 800092a:	ee01 2a90 	vmov	s3, r2
 800092e:	ee03 3a10 	vmov	s6, r3
 8000932:	4a3f      	ldr	r2, [pc, #252]	; (8000a30 <MakeSound+0x234>)
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 8000934:	4b3f      	ldr	r3, [pc, #252]	; (8000a34 <MakeSound+0x238>)
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 8000936:	edd2 3a00 	vldr	s7, [r2]
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 800093a:	ee85 5a87 	vdiv.f32	s10, s11, s14
 800093e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8000942:	eec6 5a07 	vdiv.f32	s11, s12, s14
 8000946:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800094a:	ee86 6a87 	vdiv.f32	s12, s13, s14
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 800094e:	eef8 0a60 	vcvt.f32.u32	s1, s1
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 8000952:	eec0 6a07 	vdiv.f32	s13, s0, s14
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 8000956:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 800095a:	eef8 1a61 	vcvt.f32.u32	s3, s3
 800095e:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 8000962:	eef8 2a62 	vcvt.f32.u32	s5, s5
 8000966:	eeb8 3a43 	vcvt.f32.u32	s6, s6
 800096a:	ee80 0a87 	vdiv.f32	s0, s1, s14
 800096e:	eec1 0a07 	vdiv.f32	s1, s2, s14
 8000972:	ee81 1a87 	vdiv.f32	s2, s3, s14
 8000976:	eec2 1a07 	vdiv.f32	s3, s4, s14
 800097a:	ee82 2a87 	vdiv.f32	s4, s5, s14
 800097e:	eec3 2a07 	vdiv.f32	s5, s6, s14
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 8000982:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8000986:	ee37 3ae3 	vsub.f32	s6, s15, s7
 800098a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800098e:	ee36 7ae7 	vsub.f32	s14, s13, s15
 8000992:	ee34 4a67 	vsub.f32	s8, s8, s15
 8000996:	ee74 4ae7 	vsub.f32	s9, s9, s15
 800099a:	ee35 5a67 	vsub.f32	s10, s10, s15
 800099e:	ee65 5a83 	vmul.f32	s11, s11, s6
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 80009a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80009a6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80009aa:	ee31 1a67 	vsub.f32	s2, s2, s15
 80009ae:	ee71 1ae7 	vsub.f32	s3, s3, s15
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 80009b2:	ee66 6a03 	vmul.f32	s13, s12, s6
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 80009b6:	ee32 2a67 	vsub.f32	s4, s4, s15
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 80009ba:	ee24 4a03 	vmul.f32	s8, s8, s6
 80009be:	ee64 4a83 	vmul.f32	s9, s9, s6
 80009c2:	ee25 5a03 	vmul.f32	s10, s10, s6
 80009c6:	ee27 7a03 	vmul.f32	s14, s14, s6
		channel[i] = oscmix * (-1.0f + (((float)counter[i] / 252.0f)));
 80009ca:	ee72 7ae7 	vsub.f32	s15, s5, s15
		channel[i] = channel[i] + ((1.0f - oscmix) * ((-1.0f + (((float)counter[i + 6] / 252.0f)))));
 80009ce:	eeb0 6a65 	vmov.f32	s12, s11
 80009d2:	eea0 4a23 	vfma.f32	s8, s0, s7
 80009d6:	eee3 4aa0 	vfma.f32	s9, s7, s1
 80009da:	eea3 5a81 	vfma.f32	s10, s7, s2
 80009de:	eea3 6aa1 	vfma.f32	s12, s7, s3
 80009e2:	eee3 6a82 	vfma.f32	s13, s7, s4
 80009e6:	eea7 7aa3 	vfma.f32	s14, s15, s7
 80009ea:	ed83 4a00 	vstr	s8, [r3]
 80009ee:	edc3 4a01 	vstr	s9, [r3, #4]
 80009f2:	ed83 5a02 	vstr	s10, [r3, #8]
 80009f6:	ed83 6a03 	vstr	s12, [r3, #12]
 80009fa:	edc3 6a04 	vstr	s13, [r3, #16]
 80009fe:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8000a02:	b005      	add	sp, #20
 8000a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a08:	200002f0 	.word	0x200002f0
 8000a0c:	2000163c 	.word	0x2000163c
 8000a10:	200015f0 	.word	0x200015f0
 8000a14:	20000330 	.word	0x20000330
 8000a18:	20000208 	.word	0x20000208
 8000a1c:	200001c8 	.word	0x200001c8
 8000a20:	20000264 	.word	0x20000264
 8000a24:	20001684 	.word	0x20001684
 8000a28:	20001434 	.word	0x20001434
 8000a2c:	437c0000 	.word	0x437c0000
 8000a30:	200002e4 	.word	0x200002e4
 8000a34:	20000068 	.word	0x20000068
 8000a38:	20001464 	.word	0x20001464
 8000a3c:	200016cc 	.word	0x200016cc
 8000a40:	200003f0 	.word	0x200003f0
 8000a44:	200003ac 	.word	0x200003ac
 8000a48:	20000488 	.word	0x20000488
 8000a4c:	20000391 	.word	0x20000391
			pwmval = pwval << 1;
 8000a50:	4a45      	ldr	r2, [pc, #276]	; (8000b68 <MakeSound+0x36c>)
			pwmval = pwmval + (pwm * pwmlvl);
 8000a52:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8000b7c <MakeSound+0x380>
			pwmval = pwval << 1;
 8000a56:	8812      	ldrh	r2, [r2, #0]
			pwmval = pwmval + (pwm * pwmlvl);
 8000a58:	f899 1000 	ldrb.w	r1, [r9]
			pwmval = pwval << 1;
 8000a5c:	0052      	lsls	r2, r2, #1
 8000a5e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8000b80 <MakeSound+0x384>
			pwmval = pwmval + (pwm * pwmlvl);
 8000a62:	ee07 1a10 	vmov	s14, r1
					counter[i] = 506;
 8000a66:	9900      	ldr	r1, [sp, #0]
			pwmval = pwmval + (pwm * pwmlvl);
 8000a68:	b292      	uxth	r2, r2
 8000a6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a6e:	ee07 2a90 	vmov	s15, r2
 8000a72:	4a3e      	ldr	r2, [pc, #248]	; (8000b6c <MakeSound+0x370>)
 8000a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a78:	edd2 6a00 	vldr	s13, [r2]
 8000a7c:	f04f 0206 	mov.w	r2, #6
 8000a80:	eeb0 6a67 	vmov.f32	s12, s15
 8000a84:	f889 2000 	strb.w	r2, [r9]
 8000a88:	eea7 6a26 	vfma.f32	s12, s14, s13
 8000a8c:	eebc 7ac6 	vcvt.u32.f32	s14, s12
 8000a90:	ee17 2a10 	vmov	r2, s14
 8000a94:	b292      	uxth	r2, r2
					counter[i] = 506;
 8000a96:	4295      	cmp	r5, r2
 8000a98:	bf8c      	ite	hi
 8000a9a:	f44f 75fd 	movhi.w	r5, #506	; 0x1fa
 8000a9e:	2500      	movls	r5, #0
 8000aa0:	4291      	cmp	r1, r2
 8000aa2:	bf8c      	ite	hi
 8000aa4:	f44f 70fd 	movhi.w	r0, #506	; 0x1fa
 8000aa8:	2000      	movls	r0, #0
					counter[i] = 0;
 8000aaa:	9902      	ldr	r1, [sp, #8]
					counter[i] = 506;
 8000aac:	4297      	cmp	r7, r2
 8000aae:	bf8c      	ite	hi
 8000ab0:	f44f 77fd 	movhi.w	r7, #506	; 0x1fa
 8000ab4:	2700      	movls	r7, #0
 8000ab6:	4296      	cmp	r6, r2
 8000ab8:	bf8c      	ite	hi
 8000aba:	f44f 76fd 	movhi.w	r6, #506	; 0x1fa
 8000abe:	2600      	movls	r6, #0
 8000ac0:	4294      	cmp	r4, r2
 8000ac2:	bf8c      	ite	hi
 8000ac4:	f44f 74fd 	movhi.w	r4, #506	; 0x1fa
 8000ac8:	2400      	movls	r4, #0
					counter[i] = 0;
 8000aca:	4291      	cmp	r1, r2
 8000acc:	bf8c      	ite	hi
 8000ace:	f44f 71fd 	movhi.w	r1, #506	; 0x1fa
 8000ad2:	2100      	movls	r1, #0
 8000ad4:	809d      	strh	r5, [r3, #4]
		if(wavesel > 1)
 8000ad6:	f1ba 0f01 	cmp.w	sl, #1
			pwmval = pwmval + (pwm * pwmlvl);
 8000ada:	4d25      	ldr	r5, [pc, #148]	; (8000b70 <MakeSound+0x374>)
 8000adc:	801f      	strh	r7, [r3, #0]
 8000ade:	805e      	strh	r6, [r3, #2]
 8000ae0:	80dc      	strh	r4, [r3, #6]
 8000ae2:	8118      	strh	r0, [r3, #8]
 8000ae4:	8159      	strh	r1, [r3, #10]
 8000ae6:	802a      	strh	r2, [r5, #0]
		if(wavesel > 1)
 8000ae8:	f67f aeec 	bls.w	80008c4 <MakeSound+0xc8>
			pwmval = pwmval + (pwm2 * pwm2lvl);
 8000aec:	4921      	ldr	r1, [pc, #132]	; (8000b74 <MakeSound+0x378>)
 8000aee:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <MakeSound+0x37c>)
 8000af0:	7809      	ldrb	r1, [r1, #0]
 8000af2:	edd2 6a00 	vldr	s13, [r2]
 8000af6:	ee07 1a10 	vmov	s14, r1
					counter[i] = 506;
 8000afa:	9903      	ldr	r1, [sp, #12]
			pwmval = pwmval + (pwm2 * pwm2lvl);
 8000afc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000b00:	eee7 7a26 	vfma.f32	s15, s14, s13
 8000b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b08:	ee17 2a90 	vmov	r2, s15
 8000b0c:	b292      	uxth	r2, r2
					counter[i] = 506;
 8000b0e:	4291      	cmp	r1, r2
 8000b10:	bf8c      	ite	hi
 8000b12:	f44f 74fd 	movhi.w	r4, #506	; 0x1fa
 8000b16:	2400      	movls	r4, #0
 8000b18:	9901      	ldr	r1, [sp, #4]
 8000b1a:	4590      	cmp	r8, r2
 8000b1c:	bf8c      	ite	hi
 8000b1e:	f44f 78fd 	movhi.w	r8, #506	; 0x1fa
 8000b22:	f04f 0800 	movls.w	r8, #0
 8000b26:	4596      	cmp	lr, r2
 8000b28:	bf8c      	ite	hi
 8000b2a:	f44f 7efd 	movhi.w	lr, #506	; 0x1fa
 8000b2e:	f04f 0e00 	movls.w	lr, #0
 8000b32:	4291      	cmp	r1, r2
 8000b34:	bf8c      	ite	hi
 8000b36:	f44f 70fd 	movhi.w	r0, #506	; 0x1fa
 8000b3a:	2000      	movls	r0, #0
 8000b3c:	4594      	cmp	ip, r2
 8000b3e:	bf8c      	ite	hi
 8000b40:	f44f 7cfd 	movhi.w	ip, #506	; 0x1fa
 8000b44:	f04f 0c00 	movls.w	ip, #0
					counter[i] = 0;
 8000b48:	4593      	cmp	fp, r2
 8000b4a:	bf8c      	ite	hi
 8000b4c:	f44f 71fd 	movhi.w	r1, #506	; 0x1fa
 8000b50:	2100      	movls	r1, #0
 8000b52:	f8a3 800c 	strh.w	r8, [r3, #12]
 8000b56:	f8a3 e00e 	strh.w	lr, [r3, #14]
 8000b5a:	f8a3 c010 	strh.w	ip, [r3, #16]
 8000b5e:	825c      	strh	r4, [r3, #18]
 8000b60:	8298      	strh	r0, [r3, #20]
 8000b62:	82d9      	strh	r1, [r3, #22]
			pwmval = pwmval + (pwm2 * pwm2lvl);
 8000b64:	802a      	strh	r2, [r5, #0]
			for(i=6;i<12;i++)
 8000b66:	e6ad      	b.n	80008c4 <MakeSound+0xc8>
 8000b68:	20001638 	.word	0x20001638
 8000b6c:	20000120 	.word	0x20000120
 8000b70:	2000163a 	.word	0x2000163a
 8000b74:	200001bd 	.word	0x200001bd
 8000b78:	2000011c 	.word	0x2000011c
 8000b7c:	200015ed 	.word	0x200015ed
 8000b80:	20000391 	.word	0x20000391

08000b84 <UpdateLFOs>:
	lfo1cnt--;
 8000b84:	4a50      	ldr	r2, [pc, #320]	; (8000cc8 <UpdateLFOs+0x144>)
 8000b86:	8813      	ldrh	r3, [r2, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	b29b      	uxth	r3, r3
{
 8000b8c:	b410      	push	{r4}
	lfo1cnt--;
 8000b8e:	8013      	strh	r3, [r2, #0]
	if(lfo1cnt == 0)
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d054      	beq.n	8000c3e <UpdateLFOs+0xba>
 8000b94:	4b4d      	ldr	r3, [pc, #308]	; (8000ccc <UpdateLFOs+0x148>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
	modlvl = 1.0f - (((float)(lfo1) / 64.0f));
 8000b98:	ee07 3a90 	vmov	s15, r3
 8000b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	lfo2cnt--;
 8000ba0:	4a4b      	ldr	r2, [pc, #300]	; (8000cd0 <UpdateLFOs+0x14c>)
	modlvl = 1.0f - (((float)(lfo1) / 64.0f));
 8000ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8000cd4 <UpdateLFOs+0x150>
	lfo2cnt--;
 8000baa:	8813      	ldrh	r3, [r2, #0]
	modlvl = 1.0f - (((float)(lfo1) / 64.0f));
 8000bac:	494a      	ldr	r1, [pc, #296]	; (8000cd8 <UpdateLFOs+0x154>)
 8000bae:	eea7 7ae6 	vfms.f32	s14, s15, s13
	lfo2cnt--;
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	8013      	strh	r3, [r2, #0]
	modlvl = 1.0f - (((float)(lfo1) / 64.0f));
 8000bb8:	ed81 7a00 	vstr	s14, [r1]
	if(lfo2cnt == 0)
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d069      	beq.n	8000c94 <UpdateLFOs+0x110>
 8000bc0:	4b46      	ldr	r3, [pc, #280]	; (8000cdc <UpdateLFOs+0x158>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
	pwmlvl = 1.0f - (((float)(lfo2)) / 64.0f);
 8000bc4:	ee07 3a90 	vmov	s15, r3
 8000bc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	lfo3cnt--;
 8000bcc:	4a44      	ldr	r2, [pc, #272]	; (8000ce0 <UpdateLFOs+0x15c>)
	pwmlvl = 1.0f - (((float)(lfo2)) / 64.0f);
 8000bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bd2:	eddf 6a40 	vldr	s13, [pc, #256]	; 8000cd4 <UpdateLFOs+0x150>
	lfo3cnt--;
 8000bd6:	8813      	ldrh	r3, [r2, #0]
	pwmlvl = 1.0f - (((float)(lfo2)) / 64.0f);
 8000bd8:	4942      	ldr	r1, [pc, #264]	; (8000ce4 <UpdateLFOs+0x160>)
 8000bda:	eea7 7ae6 	vfms.f32	s14, s15, s13
	lfo3cnt--;
 8000bde:	3b01      	subs	r3, #1
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	8013      	strh	r3, [r2, #0]
	pwmlvl = 1.0f - (((float)(lfo2)) / 64.0f);
 8000be4:	ed81 7a00 	vstr	s14, [r1]
	if(lfo3cnt == 0)
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d045      	beq.n	8000c78 <UpdateLFOs+0xf4>
 8000bec:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <UpdateLFOs+0x164>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
	vcflvl = 1.0f - (((float)(lfo3) / 127.0f));
 8000bf0:	ee07 3a90 	vmov	s15, r3
 8000bf4:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 8000cec <UpdateLFOs+0x168>
	lfo4cnt--;
 8000bf8:	4a3d      	ldr	r2, [pc, #244]	; (8000cf0 <UpdateLFOs+0x16c>)
	vcflvl = 1.0f - (((float)(lfo3) / 127.0f));
 8000bfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c02:	493c      	ldr	r1, [pc, #240]	; (8000cf4 <UpdateLFOs+0x170>)
	lfo4cnt--;
 8000c04:	8813      	ldrh	r3, [r2, #0]
	vcflvl = 1.0f - (((float)(lfo3) / 127.0f));
 8000c06:	eec7 6a86 	vdiv.f32	s13, s15, s12
	lfo4cnt--;
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	8013      	strh	r3, [r2, #0]
	vcflvl = 1.0f - (((float)(lfo3) / 127.0f));
 8000c10:	ee77 7a66 	vsub.f32	s15, s14, s13
 8000c14:	edc1 7a00 	vstr	s15, [r1]
	if(lfo4cnt == 0)
 8000c18:	b303      	cbz	r3, 8000c5c <UpdateLFOs+0xd8>
 8000c1a:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <UpdateLFOs+0x174>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
	pwm2lvl = 1.0f - (((float)(lfo4) / 64.0f));
 8000c1e:	ee07 3a90 	vmov	s15, r3
 8000c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c26:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8000cd4 <UpdateLFOs+0x150>
 8000c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c2e:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <UpdateLFOs+0x178>)
}
 8000c30:	f85d 4b04 	ldr.w	r4, [sp], #4
	pwm2lvl = 1.0f - (((float)(lfo4) / 64.0f));
 8000c34:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8000c38:	ed83 7a00 	vstr	s14, [r3]
}
 8000c3c:	4770      	bx	lr
		lfo1 = lfo1 + lfo1pol;
 8000c3e:	4823      	ldr	r0, [pc, #140]	; (8000ccc <UpdateLFOs+0x148>)
 8000c40:	4c2f      	ldr	r4, [pc, #188]	; (8000d00 <UpdateLFOs+0x17c>)
 8000c42:	8803      	ldrh	r3, [r0, #0]
 8000c44:	8821      	ldrh	r1, [r4, #0]
 8000c46:	440b      	add	r3, r1
 8000c48:	b29b      	uxth	r3, r3
		if(lfo1 == 127 | lfo1 == 0)
 8000c4a:	2b7f      	cmp	r3, #127	; 0x7f
		lfo1 = lfo1 + lfo1pol;
 8000c4c:	8003      	strh	r3, [r0, #0]
		if(lfo1 == 127 | lfo1 == 0)
 8000c4e:	d032      	beq.n	8000cb6 <UpdateLFOs+0x132>
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d030      	beq.n	8000cb6 <UpdateLFOs+0x132>
		lfo1cnt = lfo1rate;
 8000c54:	492b      	ldr	r1, [pc, #172]	; (8000d04 <UpdateLFOs+0x180>)
 8000c56:	8809      	ldrh	r1, [r1, #0]
 8000c58:	8011      	strh	r1, [r2, #0]
 8000c5a:	e79d      	b.n	8000b98 <UpdateLFOs+0x14>
		lfo4 = lfo4 + lfo4pol;
 8000c5c:	4826      	ldr	r0, [pc, #152]	; (8000cf8 <UpdateLFOs+0x174>)
 8000c5e:	4c2a      	ldr	r4, [pc, #168]	; (8000d08 <UpdateLFOs+0x184>)
 8000c60:	8803      	ldrh	r3, [r0, #0]
 8000c62:	8821      	ldrh	r1, [r4, #0]
 8000c64:	440b      	add	r3, r1
 8000c66:	b29b      	uxth	r3, r3
		if(lfo4 == 127 | lfo4 == 0)
 8000c68:	2b7f      	cmp	r3, #127	; 0x7f
		lfo4 = lfo4 + lfo4pol;
 8000c6a:	8003      	strh	r3, [r0, #0]
		if(lfo4 == 127 | lfo4 == 0)
 8000c6c:	d020      	beq.n	8000cb0 <UpdateLFOs+0x12c>
 8000c6e:	b1fb      	cbz	r3, 8000cb0 <UpdateLFOs+0x12c>
		lfo4cnt = lfo4rate;
 8000c70:	4926      	ldr	r1, [pc, #152]	; (8000d0c <UpdateLFOs+0x188>)
 8000c72:	8809      	ldrh	r1, [r1, #0]
 8000c74:	8011      	strh	r1, [r2, #0]
 8000c76:	e7d2      	b.n	8000c1e <UpdateLFOs+0x9a>
		lfo3 = lfo3 + lfo3pol;
 8000c78:	481b      	ldr	r0, [pc, #108]	; (8000ce8 <UpdateLFOs+0x164>)
 8000c7a:	4c25      	ldr	r4, [pc, #148]	; (8000d10 <UpdateLFOs+0x18c>)
 8000c7c:	8803      	ldrh	r3, [r0, #0]
 8000c7e:	8821      	ldrh	r1, [r4, #0]
 8000c80:	440b      	add	r3, r1
 8000c82:	b29b      	uxth	r3, r3
		if(lfo3 == 127 | lfo3 == 0)
 8000c84:	2b7f      	cmp	r3, #127	; 0x7f
		lfo3 = lfo3 + lfo3pol;
 8000c86:	8003      	strh	r3, [r0, #0]
		if(lfo3 == 127 | lfo3 == 0)
 8000c88:	d01b      	beq.n	8000cc2 <UpdateLFOs+0x13e>
 8000c8a:	b1d3      	cbz	r3, 8000cc2 <UpdateLFOs+0x13e>
		lfo3cnt = lfo3rate;
 8000c8c:	4921      	ldr	r1, [pc, #132]	; (8000d14 <UpdateLFOs+0x190>)
 8000c8e:	8809      	ldrh	r1, [r1, #0]
 8000c90:	8011      	strh	r1, [r2, #0]
 8000c92:	e7ad      	b.n	8000bf0 <UpdateLFOs+0x6c>
		lfo2 = lfo2 + lfo2pol;
 8000c94:	4811      	ldr	r0, [pc, #68]	; (8000cdc <UpdateLFOs+0x158>)
 8000c96:	4c20      	ldr	r4, [pc, #128]	; (8000d18 <UpdateLFOs+0x194>)
 8000c98:	8803      	ldrh	r3, [r0, #0]
 8000c9a:	8821      	ldrh	r1, [r4, #0]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	b29b      	uxth	r3, r3
		if(lfo2 == 127 | lfo2 == 0)
 8000ca0:	2b7f      	cmp	r3, #127	; 0x7f
		lfo2 = lfo2 + lfo2pol;
 8000ca2:	8003      	strh	r3, [r0, #0]
		if(lfo2 == 127 | lfo2 == 0)
 8000ca4:	d00a      	beq.n	8000cbc <UpdateLFOs+0x138>
 8000ca6:	b14b      	cbz	r3, 8000cbc <UpdateLFOs+0x138>
		lfo2cnt = lfo2rate;
 8000ca8:	491c      	ldr	r1, [pc, #112]	; (8000d1c <UpdateLFOs+0x198>)
 8000caa:	8809      	ldrh	r1, [r1, #0]
 8000cac:	8011      	strh	r1, [r2, #0]
 8000cae:	e789      	b.n	8000bc4 <UpdateLFOs+0x40>
			lfo4pol = -lfo4pol;
 8000cb0:	4249      	negs	r1, r1
 8000cb2:	8021      	strh	r1, [r4, #0]
 8000cb4:	e7dc      	b.n	8000c70 <UpdateLFOs+0xec>
			lfo1pol = -lfo1pol;
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	8021      	strh	r1, [r4, #0]
 8000cba:	e7cb      	b.n	8000c54 <UpdateLFOs+0xd0>
			lfo2pol = -lfo2pol;
 8000cbc:	4249      	negs	r1, r1
 8000cbe:	8021      	strh	r1, [r4, #0]
 8000cc0:	e7f2      	b.n	8000ca8 <UpdateLFOs+0x124>
			lfo3pol = -lfo3pol;
 8000cc2:	4249      	negs	r1, r1
 8000cc4:	8021      	strh	r1, [r4, #0]
 8000cc6:	e7e1      	b.n	8000c8c <UpdateLFOs+0x108>
 8000cc8:	2000000a 	.word	0x2000000a
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000010 	.word	0x20000010
 8000cd4:	3c800000 	.word	0x3c800000
 8000cd8:	200000b4 	.word	0x200000b4
 8000cdc:	2000000e 	.word	0x2000000e
 8000ce0:	20000016 	.word	0x20000016
 8000ce4:	20000120 	.word	0x20000120
 8000ce8:	20000014 	.word	0x20000014
 8000cec:	42fe0000 	.word	0x42fe0000
 8000cf0:	2000001c 	.word	0x2000001c
 8000cf4:	20000180 	.word	0x20000180
 8000cf8:	2000001a 	.word	0x2000001a
 8000cfc:	2000011c 	.word	0x2000011c
 8000d00:	2000000c 	.word	0x2000000c
 8000d04:	20000376 	.word	0x20000376
 8000d08:	2000001e 	.word	0x2000001e
 8000d0c:	200015c8 	.word	0x200015c8
 8000d10:	20000018 	.word	0x20000018
 8000d14:	200015ca 	.word	0x200015ca
 8000d18:	20000012 	.word	0x20000012
 8000d1c:	20000370 	.word	0x20000370

08000d20 <ProcessADSRs>:
{
 8000d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						vcfcutoff[y] = vcfsustainlvl[y] + vcfreleaselvl; // ensure sustainlvl > releaselvl
 8000d24:	4f9f      	ldr	r7, [pc, #636]	; (8000fa4 <ProcessADSRs+0x284>)
						vcareleaserate[y] =  vcacutoff[y] / vcarelease;
 8000d26:	2300      	movs	r3, #0
			vcfkeyfollow[y] = (1 - vcfkflvl) + (((float)(chanstat[y]) / 76.0f) * vcfkflvl);
 8000d28:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8000ff4 <ProcessADSRs+0x2d4>
					vcfattackrate[y] =  1.0f / vcfattack;
 8000d2c:	4e9e      	ldr	r6, [pc, #632]	; (8000fa8 <ProcessADSRs+0x288>)
					vcfreleaserate[y] =  vcfcutoff[y] / vcfrelease;
 8000d2e:	4d9f      	ldr	r5, [pc, #636]	; (8000fac <ProcessADSRs+0x28c>)
						vcadecayrate[y] =  (1.0f - vcasustainlvl[y]) / vcadecay;
 8000d30:	4c9f      	ldr	r4, [pc, #636]	; (8000fb0 <ProcessADSRs+0x290>)
							vcacutoff[y] = vcasustainlvl[y] + vcareleaselvl; // ensure sustainlvl > releaselvl
 8000d32:	48a0      	ldr	r0, [pc, #640]	; (8000fb4 <ProcessADSRs+0x294>)
						vcaattackrate[y] =  1.0f / vcaattack;
 8000d34:	49a0      	ldr	r1, [pc, #640]	; (8000fb8 <ProcessADSRs+0x298>)
						vcareleaserate[y] =  vcacutoff[y] / vcarelease;
 8000d36:	4aa1      	ldr	r2, [pc, #644]	; (8000fbc <ProcessADSRs+0x29c>)
			envkeyfollow[y] = (1 - envkflvl) + (((float)(chanstat[y]) / 76.0f) * envkflvl);
 8000d38:	f8df e2bc 	ldr.w	lr, [pc, #700]	; 8000ff8 <ProcessADSRs+0x2d8>
					vcfdecayrate[y] =  (1.0f - vcfsustainlvl[y]) / vcfdecay;
 8000d3c:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 8000ffc <ProcessADSRs+0x2dc>
						vcfcutoff[y] = vcfsustainlvl[y] + vcfreleaselvl; // ensure sustainlvl > releaselvl
 8000d40:	edd7 3a00 	vldr	s7, [r7]
 8000d44:	4f9e      	ldr	r7, [pc, #632]	; (8000fc0 <ProcessADSRs+0x2a0>)
			vcfkeyfollow[y] = (1 - vcfkflvl) + (((float)(chanstat[y]) / 76.0f) * vcfkflvl);
 8000d46:	ed98 5a00 	vldr	s10, [r8]
					vcfattackrate[y] =  1.0f / vcfattack;
 8000d4a:	edd6 0a00 	vldr	s1, [r6]
					vcfreleaserate[y] =  vcfcutoff[y] / vcfrelease;
 8000d4e:	ed95 1a00 	vldr	s2, [r5]
						vcadecayrate[y] =  (1.0f - vcasustainlvl[y]) / vcadecay;
 8000d52:	edd4 1a00 	vldr	s3, [r4]
							vcacutoff[y] = vcasustainlvl[y] + vcareleaselvl; // ensure sustainlvl > releaselvl
 8000d56:	ed90 4a00 	vldr	s8, [r0]
						vcaattackrate[y] =  1.0f / vcaattack;
 8000d5a:	ed91 2a00 	vldr	s4, [r1]
						vcareleaserate[y] =  vcacutoff[y] / vcarelease;
 8000d5e:	edd2 2a00 	vldr	s5, [r2]
			envkeyfollow[y] = (1 - envkflvl) + (((float)(chanstat[y]) / 76.0f) * envkflvl);
 8000d62:	edde 5a00 	vldr	s11, [lr]
					vcfdecayrate[y] =  (1.0f - vcfsustainlvl[y]) / vcfdecay;
 8000d66:	ed9c 0a00 	vldr	s0, [ip]
 8000d6a:	4996      	ldr	r1, [pc, #600]	; (8000fc4 <ProcessADSRs+0x2a4>)
 8000d6c:	4c96      	ldr	r4, [pc, #600]	; (8000fc8 <ProcessADSRs+0x2a8>)
 8000d6e:	4a97      	ldr	r2, [pc, #604]	; (8000fcc <ProcessADSRs+0x2ac>)
 8000d70:	4897      	ldr	r0, [pc, #604]	; (8000fd0 <ProcessADSRs+0x2b0>)
 8000d72:	4e98      	ldr	r6, [pc, #608]	; (8000fd4 <ProcessADSRs+0x2b4>)
 8000d74:	4d98      	ldr	r5, [pc, #608]	; (8000fd8 <ProcessADSRs+0x2b8>)
			vcfkeyfollow[y] = (1 - vcfkflvl) + (((float)(chanstat[y]) / 76.0f) * vcfkflvl);
 8000d76:	eddf 4a99 	vldr	s9, [pc, #612]	; 8000fdc <ProcessADSRs+0x2bc>
						vcadecayrate[y] =  (1.0f - vcasustainlvl[y]) / vcadecay;
 8000d7a:	f8df b284 	ldr.w	fp, [pc, #644]	; 8001000 <ProcessADSRs+0x2e0>
 8000d7e:	f8df a284 	ldr.w	sl, [pc, #644]	; 8001004 <ProcessADSRs+0x2e4>
						vcareleaserate[y] =  vcacutoff[y] / vcarelease;
 8000d82:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8001008 <ProcessADSRs+0x2e8>
							vcacutoff[y] = 0.0f;
 8000d86:	ed9f 3a96 	vldr	s6, [pc, #600]	; 8000fe0 <ProcessADSRs+0x2c0>
						vcaattackrate[y] =  1.0f / vcaattack;
 8000d8a:	f8df 8280 	ldr.w	r8, [pc, #640]	; 800100c <ProcessADSRs+0x2ec>
{
 8000d8e:	ed2d 8b02 	vpush	{d8}
 8000d92:	b083      	sub	sp, #12
					vcfreleaserate[y] =  vcfcutoff[y] / vcfrelease;
 8000d94:	9701      	str	r7, [sp, #4]
 8000d96:	e01d      	b.n	8000dd4 <ProcessADSRs+0xb4>
			switch(vcfadsr[y])
 8000d98:	f1bc 0f01 	cmp.w	ip, #1
 8000d9c:	f000 80a4 	beq.w	8000ee8 <ProcessADSRs+0x1c8>
				switch(vcaadsr[y])
 8000da0:	f894 c000 	ldrb.w	ip, [r4]
 8000da4:	f1bc 0f02 	cmp.w	ip, #2
 8000da8:	d057      	beq.n	8000e5a <ProcessADSRs+0x13a>
 8000daa:	f1bc 0f04 	cmp.w	ip, #4
 8000dae:	f000 80cc 	beq.w	8000f4a <ProcessADSRs+0x22a>
 8000db2:	f1bc 0f01 	cmp.w	ip, #1
 8000db6:	f000 80ae 	beq.w	8000f16 <ProcessADSRs+0x1f6>
	for(y=0;y<6;y++)
 8000dba:	3304      	adds	r3, #4
 8000dbc:	3104      	adds	r1, #4
 8000dbe:	3401      	adds	r4, #1
 8000dc0:	3204      	adds	r2, #4
 8000dc2:	2b18      	cmp	r3, #24
 8000dc4:	f100 0001 	add.w	r0, r0, #1
 8000dc8:	f106 0604 	add.w	r6, r6, #4
 8000dcc:	f105 0504 	add.w	r5, r5, #4
 8000dd0:	f000 80d0 	beq.w	8000f74 <ProcessADSRs+0x254>
		if(chanstat[y] != 255) // Is a note currently playing?
 8000dd4:	9f01      	ldr	r7, [sp, #4]
 8000dd6:	f817 cb01 	ldrb.w	ip, [r7], #1
 8000dda:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8000dde:	9701      	str	r7, [sp, #4]
 8000de0:	d0eb      	beq.n	8000dba <ProcessADSRs+0x9a>
			vcfkeyfollow[y] = (1 - vcfkflvl) + (((float)(chanstat[y]) / 76.0f) * vcfkflvl);
 8000de2:	ee07 ca90 	vmov	s15, ip
 8000de6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			switch(vcfadsr[y])
 8000dea:	f890 c000 	ldrb.w	ip, [r0]
			vcfkeyfollow[y] = (1 - vcfkflvl) + (((float)(chanstat[y]) / 76.0f) * vcfkflvl);
 8000dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df2:	ee77 6a45 	vsub.f32	s13, s14, s10
			switch(vcfadsr[y])
 8000df6:	f1bc 0f02 	cmp.w	ip, #2
			vcfkeyfollow[y] = (1 - vcfkflvl) + (((float)(chanstat[y]) / 76.0f) * vcfkflvl);
 8000dfa:	ee87 6aa4 	vdiv.f32	s12, s15, s9
			envkeyfollow[y] = (1 - envkflvl) + (((float)(chanstat[y]) / 76.0f) * envkflvl);
 8000dfe:	ee77 7a65 	vsub.f32	s15, s14, s11
			vcfkeyfollow[y] = (1 - vcfkflvl) + (((float)(chanstat[y]) / 76.0f) * vcfkflvl);
 8000e02:	eee5 6a06 	vfma.f32	s13, s10, s12
			envkeyfollow[y] = (1 - envkflvl) + (((float)(chanstat[y]) / 76.0f) * envkflvl);
 8000e06:	eee6 7a25 	vfma.f32	s15, s12, s11
			vcfkeyfollow[y] = (1 - vcfkflvl) + (((float)(chanstat[y]) / 76.0f) * vcfkflvl);
 8000e0a:	edc6 6a00 	vstr	s13, [r6]
			envkeyfollow[y] = (1 - envkflvl) + (((float)(chanstat[y]) / 76.0f) * envkflvl);
 8000e0e:	edc5 7a00 	vstr	s15, [r5]
			switch(vcfadsr[y])
 8000e12:	d047      	beq.n	8000ea4 <ProcessADSRs+0x184>
 8000e14:	f1bc 0f04 	cmp.w	ip, #4
 8000e18:	d1be      	bne.n	8000d98 <ProcessADSRs+0x78>
					vcfreleaserate[y] =  vcfcutoff[y] / vcfrelease;
 8000e1a:	ed92 7a00 	vldr	s14, [r2]
 8000e1e:	4f71      	ldr	r7, [pc, #452]	; (8000fe4 <ProcessADSRs+0x2c4>)
 8000e20:	eec7 6a01 	vdiv.f32	s13, s14, s2
 8000e24:	eb03 0c07 	add.w	ip, r3, r7
					vcfcutoff[y] = vcfcutoff[y] - (vcfreleaserate[y] * envkeyfollow[y]);
 8000e28:	eea7 7ae6 	vfms.f32	s14, s15, s13
					vcfreleaserate[y] =  vcfcutoff[y] / vcfrelease;
 8000e2c:	edcc 6a00 	vstr	s13, [ip]
					if(vcfcutoff[y] <= vcfreleaselvl) // Release level reached yet?
 8000e30:	eef4 3ac7 	vcmpe.f32	s7, s14
 8000e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e38:	db31      	blt.n	8000e9e <ProcessADSRs+0x17e>
						chanstat[y] = 255; // Set voice to no note playing
 8000e3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e3e:	9f01      	ldr	r7, [sp, #4]
						vcfadsr[y] = 0; // switch to idle state
 8000e40:	f04f 0e00 	mov.w	lr, #0
						vcfcutoff[y] = 0.0f;
 8000e44:	ed82 3a00 	vstr	s6, [r2]
						chanstat[y] = 255; // Set voice to no note playing
 8000e48:	f807 cc01 	strb.w	ip, [r7, #-1]
				switch(vcaadsr[y])
 8000e4c:	f894 c000 	ldrb.w	ip, [r4]
						vcfadsr[y] = 0; // switch to idle state
 8000e50:	f880 e000 	strb.w	lr, [r0]
				switch(vcaadsr[y])
 8000e54:	f1bc 0f02 	cmp.w	ip, #2
 8000e58:	d1a7      	bne.n	8000daa <ProcessADSRs+0x8a>
						vcadecayrate[y] =  (1.0f - vcasustainlvl[y]) / vcadecay;
 8000e5a:	eb03 0e0b 	add.w	lr, r3, fp
 8000e5e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
						vcacutoff[y] = vcacutoff[y] - (vcadecayrate[y] * envkeyfollow[y]);
 8000e62:	edd1 6a00 	vldr	s13, [r1]
						vcadecayrate[y] =  (1.0f - vcasustainlvl[y]) / vcadecay;
 8000e66:	eb03 0c0a 	add.w	ip, r3, sl
 8000e6a:	ed9e 7a00 	vldr	s14, [lr]
 8000e6e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8000e72:	ee86 8a21 	vdiv.f32	s16, s12, s3
						vcacutoff[y] = vcacutoff[y] - (vcadecayrate[y] * envkeyfollow[y]);
 8000e76:	eee7 6ac8 	vfms.f32	s13, s15, s16
						vcadecayrate[y] =  (1.0f - vcasustainlvl[y]) / vcadecay;
 8000e7a:	ed8c 8a00 	vstr	s16, [ip]
						if(vcacutoff[y] <= vcasustainlvl[y]) // Decay level reached yet?
 8000e7e:	eeb4 7ae6 	vcmpe.f32	s14, s13
						vcacutoff[y] = vcacutoff[y] - (vcadecayrate[y] * envkeyfollow[y]);
 8000e82:	eef0 7a66 	vmov.f32	s15, s13
						if(vcacutoff[y] <= vcasustainlvl[y]) // Decay level reached yet?
 8000e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8a:	db70      	blt.n	8000f6e <ProcessADSRs+0x24e>
							vcacutoff[y] = vcasustainlvl[y] + vcareleaselvl; // ensure sustainlvl > releaselvl
 8000e8c:	ee37 7a04 	vadd.f32	s14, s14, s8
							vcaadsr[y] = 3; // switch to sustain state
 8000e90:	f04f 0c03 	mov.w	ip, #3
 8000e94:	f884 c000 	strb.w	ip, [r4]
							vcacutoff[y] = vcasustainlvl[y] + vcareleaselvl; // ensure sustainlvl > releaselvl
 8000e98:	ed81 7a00 	vstr	s14, [r1]
							vcaadsr[y] = 3; // switch to sustain state
 8000e9c:	e78d      	b.n	8000dba <ProcessADSRs+0x9a>
					vcfcutoff[y] = vcfcutoff[y] - (vcfreleaserate[y] * envkeyfollow[y]);
 8000e9e:	ed82 7a00 	vstr	s14, [r2]
 8000ea2:	e77d      	b.n	8000da0 <ProcessADSRs+0x80>
					vcfdecayrate[y] =  (1.0f - vcfsustainlvl[y]) / vcfdecay;
 8000ea4:	4f50      	ldr	r7, [pc, #320]	; (8000fe8 <ProcessADSRs+0x2c8>)
					vcfcutoff[y] = vcfcutoff[y] - (vcfdecayrate[y] * envkeyfollow[y]);
 8000ea6:	ed92 6a00 	vldr	s12, [r2]
					vcfdecayrate[y] =  (1.0f - vcfsustainlvl[y]) / vcfdecay;
 8000eaa:	eb03 0e07 	add.w	lr, r3, r7
 8000eae:	4f4f      	ldr	r7, [pc, #316]	; (8000fec <ProcessADSRs+0x2cc>)
 8000eb0:	edde 6a00 	vldr	s13, [lr]
 8000eb4:	eb03 0c07 	add.w	ip, r3, r7
 8000eb8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000ebc:	ee87 8a00 	vdiv.f32	s16, s14, s0
					vcfcutoff[y] = vcfcutoff[y] - (vcfdecayrate[y] * envkeyfollow[y]);
 8000ec0:	eeb0 7a46 	vmov.f32	s14, s12
 8000ec4:	eea7 7ac8 	vfms.f32	s14, s15, s16
					vcfdecayrate[y] =  (1.0f - vcfsustainlvl[y]) / vcfdecay;
 8000ec8:	ed8c 8a00 	vstr	s16, [ip]
					if(vcfcutoff[y] <= vcfsustainlvl[y]) // Decay level reached yet?
 8000ecc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8000ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed4:	dbe3      	blt.n	8000e9e <ProcessADSRs+0x17e>
						vcfcutoff[y] = vcfsustainlvl[y] + vcfreleaselvl; // ensure sustainlvl > releaselvl
 8000ed6:	ee76 6aa3 	vadd.f32	s13, s13, s7
						vcfadsr[y] = 3; // switch to sustain state
 8000eda:	f04f 0c03 	mov.w	ip, #3
 8000ede:	f880 c000 	strb.w	ip, [r0]
						vcfcutoff[y] = vcfsustainlvl[y] + vcfreleaselvl; // ensure sustainlvl > releaselvl
 8000ee2:	edc2 6a00 	vstr	s13, [r2]
						vcfadsr[y] = 3; // switch to sustain state
 8000ee6:	e75b      	b.n	8000da0 <ProcessADSRs+0x80>
					vcfattackrate[y] =  1.0f / vcfattack;
 8000ee8:	eec7 6a20 	vdiv.f32	s13, s14, s1
					vcfcutoff[y] = vcfcutoff[y] + (vcfattackrate[y] * envkeyfollow[y]);
 8000eec:	ed92 6a00 	vldr	s12, [r2]
					vcfattackrate[y] =  1.0f / vcfattack;
 8000ef0:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8001010 <ProcessADSRs+0x2f0>
 8000ef4:	449c      	add	ip, r3
					vcfcutoff[y] = vcfcutoff[y] + (vcfattackrate[y] * envkeyfollow[y]);
 8000ef6:	eea7 6aa6 	vfma.f32	s12, s15, s13
					vcfattackrate[y] =  1.0f / vcfattack;
 8000efa:	edcc 6a00 	vstr	s13, [ip]
					if(vcfcutoff[y] >= 1.0f) // Attack level reached yet?
 8000efe:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8000f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f06:	db49      	blt.n	8000f9c <ProcessADSRs+0x27c>
						vcfadsr[y] = 2; // switch to decay state
 8000f08:	f04f 0c02 	mov.w	ip, #2
						vcfcutoff[y] = 1.0f;
 8000f0c:	ed82 7a00 	vstr	s14, [r2]
						vcfadsr[y] = 2; // switch to decay state
 8000f10:	f880 c000 	strb.w	ip, [r0]
 8000f14:	e744      	b.n	8000da0 <ProcessADSRs+0x80>
						vcaattackrate[y] =  1.0f / vcaattack;
 8000f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
						vcacutoff[y] = vcacutoff[y] + (vcaattackrate[y] * envkeyfollow[y]);
 8000f1a:	ed91 7a00 	vldr	s14, [r1]
						vcaattackrate[y] =  1.0f / vcaattack;
 8000f1e:	eb03 0c08 	add.w	ip, r3, r8
 8000f22:	ee86 6a82 	vdiv.f32	s12, s13, s4
						vcacutoff[y] = vcacutoff[y] + (vcaattackrate[y] * envkeyfollow[y]);
 8000f26:	eea7 7a86 	vfma.f32	s14, s15, s12
						vcaattackrate[y] =  1.0f / vcaattack;
 8000f2a:	ed8c 6a00 	vstr	s12, [ip]
						if(vcacutoff[y] >= 1.0f) // Attack level reached yet?
 8000f2e:	eeb4 7ae6 	vcmpe.f32	s14, s13
						vcacutoff[y] = vcacutoff[y] + (vcaattackrate[y] * envkeyfollow[y]);
 8000f32:	eef0 7a47 	vmov.f32	s15, s14
						if(vcacutoff[y] >= 1.0f) // Attack level reached yet?
 8000f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3a:	db18      	blt.n	8000f6e <ProcessADSRs+0x24e>
							vcaadsr[y] = 2; // switch to decay state
 8000f3c:	f04f 0c02 	mov.w	ip, #2
							vcacutoff[y] = 1.0f;
 8000f40:	edc1 6a00 	vstr	s13, [r1]
							vcaadsr[y] = 2; // switch to decay state
 8000f44:	f884 c000 	strb.w	ip, [r4]
 8000f48:	e737      	b.n	8000dba <ProcessADSRs+0x9a>
						vcareleaserate[y] =  vcacutoff[y] / vcarelease;
 8000f4a:	ed91 7a00 	vldr	s14, [r1]
 8000f4e:	eb03 0c09 	add.w	ip, r3, r9
 8000f52:	eec7 6a22 	vdiv.f32	s13, s14, s5
						vcacutoff[y] = vcacutoff[y] - (vcareleaserate[y] * envkeyfollow[y]);
 8000f56:	eea7 7ae6 	vfms.f32	s14, s15, s13
						vcareleaserate[y] =  vcacutoff[y] / vcarelease;
 8000f5a:	edcc 6a00 	vstr	s13, [ip]
						if(vcacutoff[y] <= vcareleaselvl) // Release level reached yet?
 8000f5e:	eeb4 4ac7 	vcmpe.f32	s8, s14
 8000f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f66:	da0d      	bge.n	8000f84 <ProcessADSRs+0x264>
						vcacutoff[y] = vcacutoff[y] - (vcareleaserate[y] * envkeyfollow[y]);
 8000f68:	ed81 7a00 	vstr	s14, [r1]
 8000f6c:	e725      	b.n	8000dba <ProcessADSRs+0x9a>
						vcacutoff[y] = vcacutoff[y] - (vcadecayrate[y] * envkeyfollow[y]);
 8000f6e:	edc1 7a00 	vstr	s15, [r1]
 8000f72:	e722      	b.n	8000dba <ProcessADSRs+0x9a>
 8000f74:	2306      	movs	r3, #6
 8000f76:	4a1e      	ldr	r2, [pc, #120]	; (8000ff0 <ProcessADSRs+0x2d0>)
 8000f78:	7013      	strb	r3, [r2, #0]
}
 8000f7a:	b003      	add	sp, #12
 8000f7c:	ecbd 8b02 	vpop	{d8}
 8000f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							vcaadsr[y] = 0; // switch to idle state
 8000f84:	f04f 0e00 	mov.w	lr, #0
							chanstat[y] = 255; // Set voice to no note playing
 8000f88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f8c:	9f01      	ldr	r7, [sp, #4]
							vcacutoff[y] = 0.0f;
 8000f8e:	ed81 3a00 	vstr	s6, [r1]
							vcaadsr[y] = 0; // switch to idle state
 8000f92:	f884 e000 	strb.w	lr, [r4]
							chanstat[y] = 255; // Set voice to no note playing
 8000f96:	f807 cc01 	strb.w	ip, [r7, #-1]
 8000f9a:	e70e      	b.n	8000dba <ProcessADSRs+0x9a>
					vcfcutoff[y] = vcfcutoff[y] + (vcfattackrate[y] * envkeyfollow[y]);
 8000f9c:	ed82 6a00 	vstr	s12, [r2]
 8000fa0:	e6fe      	b.n	8000da0 <ProcessADSRs+0x80>
 8000fa2:	bf00      	nop
 8000fa4:	20000024 	.word	0x20000024
 8000fa8:	20001714 	.word	0x20001714
 8000fac:	20001680 	.word	0x20001680
 8000fb0:	2000048c 	.word	0x2000048c
 8000fb4:	20000020 	.word	0x20000020
 8000fb8:	200003ec 	.word	0x200003ec
 8000fbc:	200002dc 	.word	0x200002dc
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000130 	.word	0x20000130
 8000fc8:	20000128 	.word	0x20000128
 8000fcc:	20000150 	.word	0x20000150
 8000fd0:	20000148 	.word	0x20000148
 8000fd4:	20000168 	.word	0x20000168
 8000fd8:	2000009c 	.word	0x2000009c
 8000fdc:	42980000 	.word	0x42980000
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	200015cc 	.word	0x200015cc
 8000fe8:	20001558 	.word	0x20001558
 8000fec:	200001a4 	.word	0x200001a4
 8000ff0:	2000153c 	.word	0x2000153c
 8000ff4:	200014a4 	.word	0x200014a4
 8000ff8:	20001710 	.word	0x20001710
 8000ffc:	20000484 	.word	0x20000484
 8001000:	2000024c 	.word	0x2000024c
 8001004:	200002b8 	.word	0x200002b8
 8001008:	20000378 	.word	0x20000378
 800100c:	2000018c 	.word	0x2000018c
 8001010:	20001540 	.word	0x20001540

08001014 <envelope>:
	vcfval = (1.0f - ((float)(vcf) / 127.0f)) + (((float)(vcf) / 127.0f) * vcflvl);
 8001014:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <envelope+0xe0>)
	pbend = 1.0f - (((float)bend / 64.0f));
 8001016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	vcfval = (1.0f - ((float)(vcf) / 127.0f)) + (((float)(vcf) / 127.0f) * vcflvl);
 800101a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80010f8 <envelope+0xe4>
	pbend = 1.0f - (((float)bend / 64.0f));
 800101e:	4a37      	ldr	r2, [pc, #220]	; (80010fc <envelope+0xe8>)
 8001020:	eef0 3a66 	vmov.f32	s7, s13
 8001024:	eddf 4a36 	vldr	s9, [pc, #216]	; 8001100 <envelope+0xec>
	modval = modval + (int8_t)(pbend * 56.0f) + (63 - tun);
 8001028:	f8df c110 	ldr.w	ip, [pc, #272]	; 800113c <envelope+0x128>
	TIM5->ARR = modval;
 800102c:	4835      	ldr	r0, [pc, #212]	; (8001104 <envelope+0xf0>)
{
 800102e:	b4f0      	push	{r4, r5, r6, r7}
	vcfval = (1.0f - ((float)(vcf) / 127.0f)) + (((float)(vcf) / 127.0f) * vcflvl);
 8001030:	781b      	ldrb	r3, [r3, #0]
	TIM2->ARR = modval;
 8001032:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
	pbend = 1.0f - (((float)bend / 64.0f));
 8001036:	7812      	ldrb	r2, [r2, #0]
	vcfval = (1.0f - ((float)(vcf) / 127.0f)) + (((float)(vcf) / 127.0f) * vcflvl);
 8001038:	ee07 3a90 	vmov	s15, r3
	modval = modval + (mod * modlvl);
 800103c:	4b32      	ldr	r3, [pc, #200]	; (8001108 <envelope+0xf4>)
	pbend = 1.0f - (((float)bend / 64.0f));
 800103e:	ee05 2a90 	vmov	s11, r2
	vcfval = (1.0f - ((float)(vcf) / 127.0f)) + (((float)(vcf) / 127.0f) * vcflvl);
 8001042:	4a32      	ldr	r2, [pc, #200]	; (800110c <envelope+0xf8>)
 8001044:	eef8 7a67 	vcvt.f32.u32	s15, s15
	modval = modval + (mod * modlvl);
 8001048:	781b      	ldrb	r3, [r3, #0]
	pbend = 1.0f - (((float)bend / 64.0f));
 800104a:	eef8 5a65 	vcvt.f32.u32	s11, s11
	vcfval = (1.0f - ((float)(vcf) / 127.0f)) + (((float)(vcf) / 127.0f) * vcflvl);
 800104e:	4f30      	ldr	r7, [pc, #192]	; (8001110 <envelope+0xfc>)
	modval = modval + (mod * modlvl);
 8001050:	ee06 3a10 	vmov	s12, r3
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <envelope+0x100>)
	vcfval = (1.0f - ((float)(vcf) / 127.0f)) + (((float)(vcf) / 127.0f) * vcflvl);
 8001056:	ee87 5a87 	vdiv.f32	s10, s15, s14
	modval = modval + (mod * modlvl);
 800105a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001118 <envelope+0x104>
 800105e:	ed93 4a00 	vldr	s8, [r3]
	modval = modval + (int8_t)(pbend * 56.0f) + (63 - tun);
 8001062:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800111c <envelope+0x108>
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <envelope+0x10c>)
	TIM3->ARR = modval;
 8001068:	4e2e      	ldr	r6, [pc, #184]	; (8001124 <envelope+0x110>)
	modval = modval + (mod * modlvl);
 800106a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	modval = modval + (int8_t)(pbend * 56.0f) + (63 - tun);
 800106e:	781b      	ldrb	r3, [r3, #0]
	pbend = 1.0f - (((float)bend / 64.0f));
 8001070:	eee5 3ae4 	vfms.f32	s7, s11, s9
	vcfval = (1.0f - ((float)(vcf) / 127.0f)) + (((float)(vcf) / 127.0f) * vcflvl);
 8001074:	edd2 4a00 	vldr	s9, [r2]
	modval = modval + (int8_t)(pbend * 56.0f) + (63 - tun);
 8001078:	f1c3 013f 	rsb	r1, r3, #63	; 0x3f
	pbend = 1.0f - (((float)bend / 64.0f));
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <envelope+0x114>)
	modval = modval + (mod * modlvl);
 800107e:	eea6 7a04 	vfma.f32	s14, s12, s8
	TIM4->ARR = modval;
 8001082:	4c2a      	ldr	r4, [pc, #168]	; (800112c <envelope+0x118>)
	modval = modval + (int8_t)(pbend * 56.0f) + (63 - tun);
 8001084:	ee63 7aa7 	vmul.f32	s15, s7, s15
	pbend = 1.0f - (((float)bend / 64.0f));
 8001088:	edc3 3a00 	vstr	s7, [r3]
	modval = modval + (mod * modlvl);
 800108c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	modval = modval + (int8_t)(pbend * 56.0f) + (63 - tun);
 8001090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	vcfval = (1.0f - ((float)(vcf) / 127.0f)) + (((float)(vcf) / 127.0f) * vcflvl);
 8001094:	ee76 6ac5 	vsub.f32	s13, s13, s10
	modval = modval + (mod * modlvl);
 8001098:	ee17 3a10 	vmov	r3, s14
	modval = modval + (int8_t)(pbend * 56.0f) + (63 - tun);
 800109c:	ee17 2a90 	vmov	r2, s15
 80010a0:	440b      	add	r3, r1
	vcfval = (1.0f - ((float)(vcf) / 127.0f)) + (((float)(vcf) / 127.0f) * vcflvl);
 80010a2:	eee5 6a24 	vfma.f32	s13, s10, s9
	TIM14->ARR = modval;
 80010a6:	4922      	ldr	r1, [pc, #136]	; (8001130 <envelope+0x11c>)
	modval = modval + (int8_t)(pbend * 56.0f) + (63 - tun);
 80010a8:	fa43 f382 	sxtab	r3, r3, r2
	TIM6->ARR = modval + det;
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <envelope+0x120>)
	modval = modval + (int8_t)(pbend * 56.0f) + (63 - tun);
 80010ae:	b29b      	uxth	r3, r3
	vcfval = (1.0f - ((float)(vcf) / 127.0f)) + (((float)(vcf) / 127.0f) * vcflvl);
 80010b0:	edc7 6a00 	vstr	s13, [r7]
	modval = modval + (int8_t)(pbend * 56.0f) + (63 - tun);
 80010b4:	f8ac 3000 	strh.w	r3, [ip]
	TIM14->ARR = modval;
 80010b8:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM8->ARR = modval;
 80010ba:	f501 4164 	add.w	r1, r1, #58368	; 0xe400
	TIM2->ARR = modval;
 80010be:	62eb      	str	r3, [r5, #44]	; 0x2c
	TIM7->ARR = modval + det;
 80010c0:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
	TIM3->ARR = modval;
 80010c4:	62f3      	str	r3, [r6, #44]	; 0x2c
	TIM4->ARR = modval;
 80010c6:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM10->ARR = modval + det;
 80010c8:	f504 349e 	add.w	r4, r4, #80896	; 0x13c00
	TIM5->ARR = modval;
 80010cc:	62c3      	str	r3, [r0, #44]	; 0x2c
	TIM11->ARR = modval + det;
 80010ce:	f500 309e 	add.w	r0, r0, #80896	; 0x13c00
	TIM8->ARR = modval;
 80010d2:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM12->ARR = modval + det;
 80010d4:	f5a1 416c 	sub.w	r1, r1, #60416	; 0xec00
	TIM6->ARR = modval + det;
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	4413      	add	r3, r2
	TIM13->ARR = modval + det;
 80010dc:	4a16      	ldr	r2, [pc, #88]	; (8001138 <envelope+0x124>)
	TIM6->ARR = modval + det;
 80010de:	f8c6 3c2c 	str.w	r3, [r6, #3116]	; 0xc2c
	TIM7->ARR = modval + det;
 80010e2:	62eb      	str	r3, [r5, #44]	; 0x2c
	TIM10->ARR = modval + det;
 80010e4:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM11->ARR = modval + det;
 80010e6:	62c3      	str	r3, [r0, #44]	; 0x2c
	TIM12->ARR = modval + det;
 80010e8:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM13->ARR = modval + det;
 80010ea:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80010ec:	bcf0      	pop	{r4, r5, r6, r7}
	ProcessADSRs();
 80010ee:	f7ff be17 	b.w	8000d20 <ProcessADSRs>
 80010f2:	bf00      	nop
 80010f4:	20001460 	.word	0x20001460
 80010f8:	42fe0000 	.word	0x42fe0000
 80010fc:	20000392 	.word	0x20000392
 8001100:	3c800000 	.word	0x3c800000
 8001104:	40000c00 	.word	0x40000c00
 8001108:	20000390 	.word	0x20000390
 800110c:	20000180 	.word	0x20000180
 8001110:	20000184 	.word	0x20000184
 8001114:	200000b4 	.word	0x200000b4
 8001118:	43fd0000 	.word	0x43fd0000
 800111c:	42600000 	.word	0x42600000
 8001120:	200002ed 	.word	0x200002ed
 8001124:	40000400 	.word	0x40000400
 8001128:	200000b8 	.word	0x200000b8
 800112c:	40000800 	.word	0x40000800
 8001130:	40002000 	.word	0x40002000
 8001134:	200001c6 	.word	0x200001c6
 8001138:	40001c00 	.word	0x40001c00
 800113c:	200002a4 	.word	0x200002a4

08001140 <KarlsenLPF>:
	if(freq > 1.0f)freq = 1.0f;
 8001140:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
{
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(freq > 1.0f)freq = 1.0f;
 8001146:	eef4 0ae5 	vcmpe.f32	s1, s11
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	f340 809c 	ble.w	800128a <KarlsenLPF+0x14a>
 8001152:	eef0 0a65 	vmov.f32	s1, s11
 8001156:	eddf 5a5c 	vldr	s11, [pc, #368]	; 80012c8 <KarlsenLPF+0x188>
	while (b_oversample < 2)
 800115a:	4e5c      	ldr	r6, [pc, #368]	; (80012cc <KarlsenLPF+0x18c>)
		if (prevfp > 1.0f) {prevfp = 1.0f;}	// Q-limiter
 800115c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8001160:	4a5b      	ldr	r2, [pc, #364]	; (80012d0 <KarlsenLPF+0x190>)
		if (pole1[m] > 1.0f) {pole1[m] = 1.0f;} else if (pole1[m] < -1.0f) {pole1[m] = -1.0f;} // pole 1 clipping
 8001162:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8001166:	eb06 0180 	add.w	r1, r6, r0, lsl #2
		b_fp[m] = (b_fp[m] * 0.418f) + ((b_q[m] * pole4[m]) * 0.582f);	// dynamic feedback
 800116a:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 80012d4 <KarlsenLPF+0x194>
 800116e:	eb02 0e80 	add.w	lr, r2, r0, lsl #2
 8001172:	eddf 2a59 	vldr	s5, [pc, #356]	; 80012d8 <KarlsenLPF+0x198>
 8001176:	ed91 4a00 	vldr	s8, [r1]
 800117a:	0083      	lsls	r3, r0, #2
 800117c:	ed9e 7a00 	vldr	s14, [lr]
		if (prevfp > 1.0f) {prevfp = 1.0f;}	// Q-limiter
 8001180:	eeb4 4ac5 	vcmpe.f32	s8, s10
 8001184:	eddf 4a55 	vldr	s9, [pc, #340]	; 80012dc <KarlsenLPF+0x19c>
		b_fp[m] = (b_fp[m] * 0.418f) + ((b_q[m] * pole4[m]) * 0.582f);	// dynamic feedback
 8001188:	ee21 5a07 	vmul.f32	s10, s2, s14
		intfp = (b_fp[m] * 0.36f) + (prevfp * 0.64f);	// feedback phase
 800118c:	ed9f 3a54 	vldr	s6, [pc, #336]	; 80012e0 <KarlsenLPF+0x1a0>
 8001190:	4d54      	ldr	r5, [pc, #336]	; (80012e4 <KarlsenLPF+0x1a4>)
		if (prevfp > 1.0f) {prevfp = 1.0f;}	// Q-limiter
 8001192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001196:	4c54      	ldr	r4, [pc, #336]	; (80012e8 <KarlsenLPF+0x1a8>)
		b_fp[m] = (b_fp[m] * 0.418f) + ((b_q[m] * pole4[m]) * 0.582f);	// dynamic feedback
 8001198:	ee25 5a02 	vmul.f32	s10, s10, s4
 800119c:	eb05 0c80 	add.w	ip, r5, r0, lsl #2
 80011a0:	4952      	ldr	r1, [pc, #328]	; (80012ec <KarlsenLPF+0x1ac>)
 80011a2:	eb04 0780 	add.w	r7, r4, r0, lsl #2
 80011a6:	bfd8      	it	le
 80011a8:	ee64 4a24 	vmulle.f32	s9, s8, s9
 80011ac:	eddc 7a00 	vldr	s15, [ip]
 80011b0:	eea4 5a22 	vfma.f32	s10, s8, s5
 80011b4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
		pole1[m] = (b_in[m] * b_f[m]) + (pole1[m] * (1.0f - b_f[m]));	// pole 1
 80011b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80011bc:	ed97 6a00 	vldr	s12, [r7]
 80011c0:	edd0 6a00 	vldr	s13, [r0]
		intfp = (b_fp[m] * 0.36f) + (prevfp * 0.64f);	// feedback phase
 80011c4:	eee5 4a03 	vfma.f32	s9, s10, s6
		b_in[m] =	b_inSH[m] - intfp;	// inverted feedback	
 80011c8:	ee70 4a64 	vsub.f32	s9, s0, s9
		pole1[m] = (b_in[m] * b_f[m]) + (pole1[m] * (1.0f - b_f[m]));	// pole 1
 80011cc:	eee0 7aa4 	vfma.f32	s15, s1, s9
		if (pole1[m] > 1.0f) {pole1[m] = 1.0f;} else if (pole1[m] < -1.0f) {pole1[m] = -1.0f;} // pole 1 clipping
 80011d0:	eef4 7ae3 	vcmpe.f32	s15, s7
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	dd69      	ble.n	80012ae <KarlsenLPF+0x16e>
 80011da:	eef0 7a63 	vmov.f32	s15, s7
		pole2[m] = (pole1[m] * b_f[m]) + (pole2[m] * (1 - b_f[m]));	// pole 2
 80011de:	ee26 6a25 	vmul.f32	s12, s12, s11
		b_fp[m] = (b_fp[m] * 0.418f) + ((b_q[m] * pole4[m]) * 0.582f);	// dynamic feedback
 80011e2:	eddf 2a3c 	vldr	s5, [pc, #240]	; 80012d4 <KarlsenLPF+0x194>
		pole3[m] = (pole2[m] * b_f[m]) + (pole3[m] * (1 - b_f[m]));	// pole 3
 80011e6:	ee66 6aa5 	vmul.f32	s13, s13, s11
		b_fp[m] = (b_fp[m] * 0.418f) + ((b_q[m] * pole4[m]) * 0.582f);	// dynamic feedback
 80011ea:	ed9f 3a3b 	vldr	s6, [pc, #236]	; 80012d8 <KarlsenLPF+0x198>
		pole4[m] = (pole3[m] * b_f[m]) + (pole4[m] * (1 - b_f[m]));	// pole 4
 80011ee:	ee27 7a25 	vmul.f32	s14, s14, s11
		intfp = (b_fp[m] * 0.36f) + (prevfp * 0.64f);	// feedback phase
 80011f2:	eddf 3a3b 	vldr	s7, [pc, #236]	; 80012e0 <KarlsenLPF+0x1a0>
		pole2[m] = (pole1[m] * b_f[m]) + (pole2[m] * (1 - b_f[m]));	// pole 2
 80011f6:	eea0 6aa7 	vfma.f32	s12, s1, s15
		if (prevfp > 1.0f) {prevfp = 1.0f;}	// Q-limiter
 80011fa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
		pole1[m] = (b_in[m] * b_f[m]) + (pole1[m] * (1.0f - b_f[m]));	// pole 1
 80011fe:	ee67 7aa5 	vmul.f32	s15, s15, s11
		if (pole1[m] > 1.0f) {pole1[m] = 1.0f;} else if (pole1[m] < -1.0f) {pole1[m] = -1.0f;} // pole 1 clipping
 8001202:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
		if (prevfp > 1.0f) {prevfp = 1.0f;}	// Q-limiter
 8001206:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800120a:	eddf 4a34 	vldr	s9, [pc, #208]	; 80012dc <KarlsenLPF+0x19c>
		pole3[m] = (pole2[m] * b_f[m]) + (pole3[m] * (1 - b_f[m]));	// pole 3
 800120e:	eee0 6a86 	vfma.f32	s13, s1, s12
		if (prevfp > 1.0f) {prevfp = 1.0f;}	// Q-limiter
 8001212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001216:	bfd8      	it	le
 8001218:	ee65 4a24 	vmulle.f32	s9, s10, s9
		pole4[m] = (pole3[m] * b_f[m]) + (pole4[m] * (1 - b_f[m]));	// pole 4
 800121c:	eea0 7aa6 	vfma.f32	s14, s1, s13
		b_fp[m] = (b_fp[m] * 0.418f) + ((b_q[m] * pole4[m]) * 0.582f);	// dynamic feedback
 8001220:	ee21 1a07 	vmul.f32	s2, s2, s14
 8001224:	ee21 1a22 	vmul.f32	s2, s2, s5
 8001228:	eea5 1a03 	vfma.f32	s2, s10, s6
		intfp = (b_fp[m] * 0.36f) + (prevfp * 0.64f);	// feedback phase
 800122c:	eeb0 5a64 	vmov.f32	s10, s9
 8001230:	eea1 5a23 	vfma.f32	s10, s2, s7
		b_in[m] =	b_inSH[m] - intfp;	// inverted feedback	
 8001234:	ee30 0a45 	vsub.f32	s0, s0, s10
		pole1[m] = (b_in[m] * b_f[m]) + (pole1[m] * (1.0f - b_f[m]));	// pole 1
 8001238:	eee0 7a20 	vfma.f32	s15, s0, s1
		if (pole1[m] > 1.0f) {pole1[m] = 1.0f;} else if (pole1[m] < -1.0f) {pole1[m] = -1.0f;} // pole 1 clipping
 800123c:	eef4 7ac4 	vcmpe.f32	s15, s8
 8001240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001244:	dd29      	ble.n	800129a <KarlsenLPF+0x15a>
 8001246:	eef0 7a44 	vmov.f32	s15, s8
		pole2[m] = (pole1[m] * b_f[m]) + (pole2[m] * (1 - b_f[m]));	// pole 2
 800124a:	ee26 6a25 	vmul.f32	s12, s12, s11
 800124e:	441d      	add	r5, r3
		pole4[m] = (pole3[m] * b_f[m]) + (pole4[m] * (1 - b_f[m]));	// pole 4
 8001250:	ee27 0a25 	vmul.f32	s0, s14, s11
 8001254:	441e      	add	r6, r3
		pole3[m] = (pole2[m] * b_f[m]) + (pole3[m] * (1 - b_f[m]));	// pole 3
 8001256:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800125a:	edc5 7a00 	vstr	s15, [r5]
		pole2[m] = (pole1[m] * b_f[m]) + (pole2[m] * (1 - b_f[m]));	// pole 2
 800125e:	eeb0 7a46 	vmov.f32	s14, s12
 8001262:	441a      	add	r2, r3
 8001264:	441c      	add	r4, r3
 8001266:	440b      	add	r3, r1
 8001268:	ed86 1a00 	vstr	s2, [r6]
 800126c:	eea0 7aa7 	vfma.f32	s14, s1, s15
		pole3[m] = (pole2[m] * b_f[m]) + (pole3[m] * (1 - b_f[m]));	// pole 3
 8001270:	eef0 7a66 	vmov.f32	s15, s13
 8001274:	eee7 7a20 	vfma.f32	s15, s14, s1
		pole4[m] = (pole3[m] * b_f[m]) + (pole4[m] * (1 - b_f[m]));	// pole 4
 8001278:	ed84 7a00 	vstr	s14, [r4]
 800127c:	eea7 0aa0 	vfma.f32	s0, s15, s1
	while (b_oversample < 2)
 8001280:	edc3 7a00 	vstr	s15, [r3]
	return pole4[m];
 8001284:	ed82 0a00 	vstr	s0, [r2]
}
 8001288:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(freq < 0.0f)freq = 0.0f;
 800128a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	d516      	bpl.n	80012c2 <KarlsenLPF+0x182>
 8001294:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80012c8 <KarlsenLPF+0x188>
 8001298:	e75f      	b.n	800115a <KarlsenLPF+0x1a>
		if (pole1[m] > 1.0f) {pole1[m] = 1.0f;} else if (pole1[m] < -1.0f) {pole1[m] = -1.0f;} // pole 1 clipping
 800129a:	eebf 5a00 	vmov.f32	s10, #240	; 0xbf800000 -1.0
 800129e:	eef4 7a45 	vcmp.f32	s15, s10
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	bf48      	it	mi
 80012a8:	eef0 7a45 	vmovmi.f32	s15, s10
 80012ac:	e7cd      	b.n	800124a <KarlsenLPF+0x10a>
 80012ae:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 80012b2:	eef4 7a64 	vcmp.f32	s15, s9
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	bf48      	it	mi
 80012bc:	eef0 7a64 	vmovmi.f32	s15, s9
 80012c0:	e78d      	b.n	80011de <KarlsenLPF+0x9e>
 80012c2:	ee75 5ae0 	vsub.f32	s11, s11, s1
 80012c6:	e748      	b.n	800115a <KarlsenLPF+0x1a>
 80012c8:	00000000 	.word	0x00000000
 80012cc:	20000050 	.word	0x20000050
 80012d0:	20000104 	.word	0x20000104
 80012d4:	3f14fdf4 	.word	0x3f14fdf4
 80012d8:	3ed60419 	.word	0x3ed60419
 80012dc:	3f23d70a 	.word	0x3f23d70a
 80012e0:	3eb851ec 	.word	0x3eb851ec
 80012e4:	200000bc 	.word	0x200000bc
 80012e8:	200000d4 	.word	0x200000d4
 80012ec:	200000ec 	.word	0x200000ec

080012f0 <AudioOutput>:
	for(i=0;i<6;i++)
 80012f0:	2200      	movs	r2, #0
	summer = 0.0f;
 80012f2:	f04f 0c00 	mov.w	ip, #0
{	
 80012f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(i=0;i<6;i++)
 80012fa:	4610      	mov	r0, r2
 80012fc:	4e4c      	ldr	r6, [pc, #304]	; (8001430 <AudioOutput+0x140>)
	summer = 0.0f;
 80012fe:	4c4d      	ldr	r4, [pc, #308]	; (8001434 <AudioOutput+0x144>)
{	
 8001300:	b081      	sub	sp, #4
 8001302:	f8df b168 	ldr.w	fp, [pc, #360]	; 800146c <AudioOutput+0x17c>
 8001306:	f8df a168 	ldr.w	sl, [pc, #360]	; 8001470 <AudioOutput+0x180>
 800130a:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8001474 <AudioOutput+0x184>
 800130e:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8001478 <AudioOutput+0x188>
 8001312:	4f49      	ldr	r7, [pc, #292]	; (8001438 <AudioOutput+0x148>)
 8001314:	4d49      	ldr	r5, [pc, #292]	; (800143c <AudioOutput+0x14c>)
	for(i=0;i<6;i++)
 8001316:	7032      	strb	r2, [r6, #0]
	summer = 0.0f;
 8001318:	f8c4 c000 	str.w	ip, [r4]
		channel[i] = channel[i] * (vcacutoff[i] * vcavellvl[i]);
 800131c:	eb0b 0c80 	add.w	ip, fp, r0, lsl #2
		summer = summer + KarlsenLPF(channel[i], (vcfval * vcfenvlvl) * ((vcfcutoff[i] * vcfkeyfollow[i]) * vcfvellvl[i]), resonance, i);
 8001320:	4b47      	ldr	r3, [pc, #284]	; (8001440 <AudioOutput+0x150>)
		channel[i] = channel[i] * (vcacutoff[i] * vcavellvl[i]);
 8001322:	eb0a 0e80 	add.w	lr, sl, r0, lsl #2
		summer = summer + KarlsenLPF(channel[i], (vcfval * vcfenvlvl) * ((vcfcutoff[i] * vcfkeyfollow[i]) * vcfvellvl[i]), resonance, i);
 8001326:	edd7 0a00 	vldr	s1, [r7]
		channel[i] = channel[i] * (vcacutoff[i] * vcavellvl[i]);
 800132a:	ed9c 0a00 	vldr	s0, [ip]
		summer = summer + KarlsenLPF(channel[i], (vcfval * vcfenvlvl) * ((vcfcutoff[i] * vcfkeyfollow[i]) * vcfvellvl[i]), resonance, i);
 800132e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8001332:	4b44      	ldr	r3, [pc, #272]	; (8001444 <AudioOutput+0x154>)
		channel[i] = channel[i] * (vcacutoff[i] * vcavellvl[i]);
 8001334:	edde 6a00 	vldr	s13, [lr]
		summer = summer + KarlsenLPF(channel[i], (vcfval * vcfenvlvl) * ((vcfcutoff[i] * vcfkeyfollow[i]) * vcfvellvl[i]), resonance, i);
 8001338:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800133c:	4b42      	ldr	r3, [pc, #264]	; (8001448 <AudioOutput+0x158>)
 800133e:	eddc 7a00 	vldr	s15, [ip]
		channel[i] = channel[i] * (vcacutoff[i] * vcavellvl[i]);
 8001342:	eb09 0c80 	add.w	ip, r9, r0, lsl #2
		summer = summer + KarlsenLPF(channel[i], (vcfval * vcfenvlvl) * ((vcfcutoff[i] * vcfkeyfollow[i]) * vcfvellvl[i]), resonance, i);
 8001346:	ed9e 7a00 	vldr	s14, [lr]
 800134a:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
		channel[i] = channel[i] * (vcacutoff[i] * vcavellvl[i]);
 800134e:	ee20 0a26 	vmul.f32	s0, s0, s13
		summer = summer + KarlsenLPF(channel[i], (vcfval * vcfenvlvl) * ((vcfcutoff[i] * vcfkeyfollow[i]) * vcfvellvl[i]), resonance, i);
 8001352:	ed95 6a00 	vldr	s12, [r5]
 8001356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135a:	ed9e 7a00 	vldr	s14, [lr]
		channel[i] = channel[i] * (vcacutoff[i] * vcavellvl[i]);
 800135e:	eddc 6a00 	vldr	s13, [ip]
		summer = summer + KarlsenLPF(channel[i], (vcfval * vcfenvlvl) * ((vcfcutoff[i] * vcfkeyfollow[i]) * vcfvellvl[i]), resonance, i);
 8001362:	ee60 0a86 	vmul.f32	s1, s1, s12
 8001366:	ed98 1a00 	vldr	s2, [r8]
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
		channel[i] = channel[i] * (vcacutoff[i] * vcavellvl[i]);
 800136e:	ee20 0a26 	vmul.f32	s0, s0, s13
		summer = summer + KarlsenLPF(channel[i], (vcfval * vcfenvlvl) * ((vcfcutoff[i] * vcfkeyfollow[i]) * vcfvellvl[i]), resonance, i);
 8001372:	ee67 0aa0 	vmul.f32	s1, s15, s1
		channel[i] = channel[i] * (vcacutoff[i] * vcavellvl[i]);
 8001376:	ed8c 0a00 	vstr	s0, [ip]
		summer = summer + KarlsenLPF(channel[i], (vcfval * vcfenvlvl) * ((vcfcutoff[i] * vcfkeyfollow[i]) * vcfvellvl[i]), resonance, i);
 800137a:	f7ff fee1 	bl	8001140 <KarlsenLPF>
	for(i=0;i<6;i++)
 800137e:	7830      	ldrb	r0, [r6, #0]
		summer = summer + KarlsenLPF(channel[i], (vcfval * vcfenvlvl) * ((vcfcutoff[i] * vcfkeyfollow[i]) * vcfvellvl[i]), resonance, i);
 8001380:	edd4 7a00 	vldr	s15, [r4]
	for(i=0;i<6;i++)
 8001384:	3001      	adds	r0, #1
		summer = summer + KarlsenLPF(channel[i], (vcfval * vcfenvlvl) * ((vcfcutoff[i] * vcfkeyfollow[i]) * vcfvellvl[i]), resonance, i);
 8001386:	ee30 0a27 	vadd.f32	s0, s0, s15
	for(i=0;i<6;i++)
 800138a:	b2c0      	uxtb	r0, r0
 800138c:	2805      	cmp	r0, #5
		summer = summer + KarlsenLPF(channel[i], (vcfval * vcfenvlvl) * ((vcfcutoff[i] * vcfkeyfollow[i]) * vcfvellvl[i]), resonance, i);
 800138e:	ed84 0a00 	vstr	s0, [r4]
	for(i=0;i<6;i++)
 8001392:	7030      	strb	r0, [r6, #0]
 8001394:	d9c2      	bls.n	800131c <AudioOutput+0x2c>
	summer = summer / 6.0f;
 8001396:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
	delaybuffer[delay_in] = summer;
 800139a:	482c      	ldr	r0, [pc, #176]	; (800144c <AudioOutput+0x15c>)
 800139c:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <AudioOutput+0x160>)
 800139e:	f9b0 3000 	ldrsh.w	r3, [r0]
	summer = summer / 6.0f;
 80013a2:	eec0 7a07 	vdiv.f32	s15, s0, s14
	delay_in++;
 80013a6:	1c59      	adds	r1, r3, #1
	delaybuffer[delay_in] = summer;
 80013a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	delay_in++;
 80013ac:	b209      	sxth	r1, r1
	if(delay_in == 1000)delay_in = 0;
 80013ae:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
	delaybuffer[delay_in] = summer;
 80013b2:	edc3 7a00 	vstr	s15, [r3]
	summer = summer / 6.0f;
 80013b6:	edc4 7a00 	vstr	s15, [r4]
	if(delay_in == 1000)delay_in = 0;
 80013ba:	d031      	beq.n	8001420 <AudioOutput+0x130>
	delay_in++;
 80013bc:	8001      	strh	r1, [r0, #0]
	delay_out++;
 80013be:	4925      	ldr	r1, [pc, #148]	; (8001454 <AudioOutput+0x164>)
 80013c0:	880b      	ldrh	r3, [r1, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	b21b      	sxth	r3, r3
	if(delay_out == 1000)delay_out = 0;
 80013c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ca:	d02c      	beq.n	8001426 <AudioOutput+0x136>
	delay_out++;
 80013cc:	800b      	strh	r3, [r1, #0]
	output1 = (uint16_t)2048.0f + (2047.0f * summer);
 80013ce:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001458 <AudioOutput+0x168>
	output2 = (uint16_t)2048.0f + (2047.0f * delaybuffer[delay_out]);
 80013d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	output1 = (uint16_t)2048.0f + (2047.0f * summer);
 80013d6:	eddf 6a21 	vldr	s13, [pc, #132]	; 800145c <AudioOutput+0x16c>
	HAL_DAC_SetValue(&DacHandle, DAC_CHANNEL_1, DAC_ALIGN_12B_R, output1);
 80013da:	2200      	movs	r2, #0
	output1 = (uint16_t)2048.0f + (2047.0f * summer);
 80013dc:	eef0 5a47 	vmov.f32	s11, s14
	output2 = (uint16_t)2048.0f + (2047.0f * delaybuffer[delay_out]);
 80013e0:	ed93 6a00 	vldr	s12, [r3]
 80013e4:	4c1e      	ldr	r4, [pc, #120]	; (8001460 <AudioOutput+0x170>)
	HAL_DAC_SetValue(&DacHandle, DAC_CHANNEL_1, DAC_ALIGN_12B_R, output1);
 80013e6:	4611      	mov	r1, r2
	output2 = (uint16_t)2048.0f + (2047.0f * delaybuffer[delay_out]);
 80013e8:	eea6 7a26 	vfma.f32	s14, s12, s13
	output1 = (uint16_t)2048.0f + (2047.0f * summer);
 80013ec:	4d1d      	ldr	r5, [pc, #116]	; (8001464 <AudioOutput+0x174>)
 80013ee:	eee7 5aa6 	vfma.f32	s11, s15, s13
	HAL_DAC_SetValue(&DacHandle, DAC_CHANNEL_1, DAC_ALIGN_12B_R, output1);
 80013f2:	481d      	ldr	r0, [pc, #116]	; (8001468 <AudioOutput+0x178>)
	output2 = (uint16_t)2048.0f + (2047.0f * delaybuffer[delay_out]);
 80013f4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	output1 = (uint16_t)2048.0f + (2047.0f * summer);
 80013f8:	eefc 7ae5 	vcvt.u32.f32	s15, s11
	output2 = (uint16_t)2048.0f + (2047.0f * delaybuffer[delay_out]);
 80013fc:	ee17 6a10 	vmov	r6, s14
	output1 = (uint16_t)2048.0f + (2047.0f * summer);
 8001400:	ee17 3a90 	vmov	r3, s15
	output2 = (uint16_t)2048.0f + (2047.0f * delaybuffer[delay_out]);
 8001404:	8026      	strh	r6, [r4, #0]
	output1 = (uint16_t)2048.0f + (2047.0f * summer);
 8001406:	b29b      	uxth	r3, r3
 8001408:	802b      	strh	r3, [r5, #0]
	HAL_DAC_SetValue(&DacHandle, DAC_CHANNEL_1, DAC_ALIGN_12B_R, output1);
 800140a:	f001 ff7d 	bl	8003308 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&DacHandle, DAC_CHANNEL_2, DAC_ALIGN_12B_R, output2);
 800140e:	8823      	ldrh	r3, [r4, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	2110      	movs	r1, #16
 8001414:	4814      	ldr	r0, [pc, #80]	; (8001468 <AudioOutput+0x178>)
}
 8001416:	b001      	add	sp, #4
 8001418:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_DAC_SetValue(&DacHandle, DAC_CHANNEL_2, DAC_ALIGN_12B_R, output2);
 800141c:	f001 bf74 	b.w	8003308 <HAL_DAC_SetValue>
	if(delay_in == 1000)delay_in = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	8003      	strh	r3, [r0, #0]
 8001424:	e7cb      	b.n	80013be <AudioOutput+0xce>
	if(delay_out == 1000)delay_out = 0;
 8001426:	2000      	movs	r0, #0
 8001428:	4603      	mov	r3, r0
 800142a:	8008      	strh	r0, [r1, #0]
 800142c:	e7cf      	b.n	80013ce <AudioOutput+0xde>
 800142e:	bf00      	nop
 8001430:	20000391 	.word	0x20000391
 8001434:	20000124 	.word	0x20000124
 8001438:	20000184 	.word	0x20000184
 800143c:	200001c0 	.word	0x200001c0
 8001440:	20000150 	.word	0x20000150
 8001444:	20000168 	.word	0x20000168
 8001448:	20000394 	.word	0x20000394
 800144c:	20000098 	.word	0x20000098
 8001450:	20000494 	.word	0x20000494
 8001454:	20000006 	.word	0x20000006
 8001458:	45000000 	.word	0x45000000
 800145c:	44ffe000 	.word	0x44ffe000
 8001460:	20001636 	.word	0x20001636
 8001464:	200002ea 	.word	0x200002ea
 8001468:	2000144c 	.word	0x2000144c
 800146c:	20000130 	.word	0x20000130
 8001470:	2000171c 	.word	0x2000171c
 8001474:	20000068 	.word	0x20000068
 8001478:	2000167c 	.word	0x2000167c

0800147c <LocalMidiHandler>:
{
 800147c:	b430      	push	{r4, r5}
 800147e:	281b      	cmp	r0, #27
 8001480:	d824      	bhi.n	80014cc <LocalMidiHandler+0x50>
 8001482:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001486:	0111      	.short	0x0111
 8001488:	010e001c 	.word	0x010e001c
 800148c:	00fe010a 	.word	0x00fe010a
 8001490:	00f400fa 	.word	0x00f400fa
 8001494:	00e100e4 	.word	0x00e100e4
 8001498:	00c900d5 	.word	0x00c900d5
 800149c:	00b100bd 	.word	0x00b100bd
 80014a0:	009900a5 	.word	0x009900a5
 80014a4:	0081008d 	.word	0x0081008d
 80014a8:	00690075 	.word	0x00690075
 80014ac:	00590065 	.word	0x00590065
 80014b0:	004d0053 	.word	0x004d0053
 80014b4:	00410047 	.word	0x00410047
 80014b8:	003b003e 	.word	0x003b003e
 80014bc:	0038      	.short	0x0038
			if(m_data >= 64)
 80014be:	293f      	cmp	r1, #63	; 0x3f
 80014c0:	d904      	bls.n	80014cc <LocalMidiHandler+0x50>
				mod = (m_data - 64) >> 1;
 80014c2:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
 80014c6:	4a7a      	ldr	r2, [pc, #488]	; (80016b0 <LocalMidiHandler+0x234>)
 80014c8:	105b      	asrs	r3, r3, #1
 80014ca:	7013      	strb	r3, [r2, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80014cc:	4b79      	ldr	r3, [pc, #484]	; (80016b4 <LocalMidiHandler+0x238>)
 80014ce:	24f0      	movs	r4, #240	; 0xf0
	paramvalue[m_param] = m_data;
 80014d0:	4d79      	ldr	r5, [pc, #484]	; (80016b8 <LocalMidiHandler+0x23c>)
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80014d2:	461a      	mov	r2, r3
 80014d4:	5429      	strb	r1, [r5, r0]
  USARTx->TDR = Value;
 80014d6:	629c      	str	r4, [r3, #40]	; 0x28
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80014d8:	69d3      	ldr	r3, [r2, #28]
 80014da:	061c      	lsls	r4, r3, #24
 80014dc:	d5fc      	bpl.n	80014d8 <LocalMidiHandler+0x5c>
 80014de:	4b75      	ldr	r3, [pc, #468]	; (80016b4 <LocalMidiHandler+0x238>)
  USARTx->TDR = Value;
 80014e0:	6290      	str	r0, [r2, #40]	; 0x28
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80014e2:	69da      	ldr	r2, [r3, #28]
 80014e4:	0612      	lsls	r2, r2, #24
 80014e6:	d5fc      	bpl.n	80014e2 <LocalMidiHandler+0x66>
 80014e8:	4a72      	ldr	r2, [pc, #456]	; (80016b4 <LocalMidiHandler+0x238>)
  USARTx->TDR = Value;
 80014ea:	6299      	str	r1, [r3, #40]	; 0x28
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80014ec:	69d3      	ldr	r3, [r2, #28]
 80014ee:	061b      	lsls	r3, r3, #24
 80014f0:	d5fc      	bpl.n	80014ec <LocalMidiHandler+0x70>
}
 80014f2:	bc30      	pop	{r4, r5}
 80014f4:	4770      	bx	lr
			pwm2 = m_data;
 80014f6:	4b71      	ldr	r3, [pc, #452]	; (80016bc <LocalMidiHandler+0x240>)
 80014f8:	7019      	strb	r1, [r3, #0]
			break;	
 80014fa:	e7e7      	b.n	80014cc <LocalMidiHandler+0x50>
			pwm = m_data;
 80014fc:	4b70      	ldr	r3, [pc, #448]	; (80016c0 <LocalMidiHandler+0x244>)
 80014fe:	7019      	strb	r1, [r3, #0]
			break;
 8001500:	e7e4      	b.n	80014cc <LocalMidiHandler+0x50>
			vcf = m_data;
 8001502:	4b70      	ldr	r3, [pc, #448]	; (80016c4 <LocalMidiHandler+0x248>)
 8001504:	7019      	strb	r1, [r3, #0]
			break;
 8001506:	e7e1      	b.n	80014cc <LocalMidiHandler+0x50>
			lfo3rate = (128 - m_data) << 2;
 8001508:	f1c1 0380 	rsb	r3, r1, #128	; 0x80
 800150c:	4a6e      	ldr	r2, [pc, #440]	; (80016c8 <LocalMidiHandler+0x24c>)
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	8013      	strh	r3, [r2, #0]
			break;
 8001512:	e7db      	b.n	80014cc <LocalMidiHandler+0x50>
			lfo4rate = (128 - m_data) << 2;
 8001514:	f1c1 0380 	rsb	r3, r1, #128	; 0x80
 8001518:	4a6c      	ldr	r2, [pc, #432]	; (80016cc <LocalMidiHandler+0x250>)
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	8013      	strh	r3, [r2, #0]
			break;
 800151e:	e7d5      	b.n	80014cc <LocalMidiHandler+0x50>
			lfo2rate = (128 - m_data) << 2;
 8001520:	f1c1 0380 	rsb	r3, r1, #128	; 0x80
 8001524:	4a6a      	ldr	r2, [pc, #424]	; (80016d0 <LocalMidiHandler+0x254>)
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	8013      	strh	r3, [r2, #0]
			break;
 800152a:	e7cf      	b.n	80014cc <LocalMidiHandler+0x50>
			lfo1rate = (128 - m_data) << 2; 
 800152c:	f1c1 0380 	rsb	r3, r1, #128	; 0x80
 8001530:	4a68      	ldr	r2, [pc, #416]	; (80016d4 <LocalMidiHandler+0x258>)
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	8013      	strh	r3, [r2, #0]
			break;
 8001536:	e7c9      	b.n	80014cc <LocalMidiHandler+0x50>
			vcfenvlvl = (((float)(m_data)) * 0.007874f);
 8001538:	ee07 1a90 	vmov	s15, r1
 800153c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80016d8 <LocalMidiHandler+0x25c>
 8001540:	4b66      	ldr	r3, [pc, #408]	; (80016dc <LocalMidiHandler+0x260>)
 8001542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800154e:	e7bd      	b.n	80014cc <LocalMidiHandler+0x50>
			velsel = m_data >> 5;
 8001550:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <LocalMidiHandler+0x264>)
 8001552:	094a      	lsrs	r2, r1, #5
 8001554:	701a      	strb	r2, [r3, #0]
			break;
 8001556:	e7b9      	b.n	80014cc <LocalMidiHandler+0x50>
			envkflvl = (((float)(m_data)) * 0.007874f);
 8001558:	ee07 1a90 	vmov	s15, r1
 800155c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80016d8 <LocalMidiHandler+0x25c>
 8001560:	4b60      	ldr	r3, [pc, #384]	; (80016e4 <LocalMidiHandler+0x268>)
 8001562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800156e:	e7ad      	b.n	80014cc <LocalMidiHandler+0x50>
			vcfkflvl = (((float)(m_data)) * 0.007874f);
 8001570:	ee07 1a90 	vmov	s15, r1
 8001574:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80016d8 <LocalMidiHandler+0x25c>
 8001578:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <LocalMidiHandler+0x26c>)
 800157a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001582:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001586:	e7a1      	b.n	80014cc <LocalMidiHandler+0x50>
			vcarelease = (((float)(m_data)) * 10.0f);
 8001588:	ee07 1a90 	vmov	s15, r1
 800158c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001590:	4b56      	ldr	r3, [pc, #344]	; (80016ec <LocalMidiHandler+0x270>)
 8001592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800159e:	e795      	b.n	80014cc <LocalMidiHandler+0x50>
			vcasustain = (((float)(m_data)) * 0.007874f);
 80015a0:	ee07 1a90 	vmov	s15, r1
 80015a4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80016d8 <LocalMidiHandler+0x25c>
 80015a8:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <LocalMidiHandler+0x274>)
 80015aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80015b6:	e789      	b.n	80014cc <LocalMidiHandler+0x50>
			vcadecay = (((float)(m_data)) * 10.0f);
 80015b8:	ee07 1a90 	vmov	s15, r1
 80015bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015c0:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <LocalMidiHandler+0x278>)
 80015c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ca:	edc3 7a00 	vstr	s15, [r3]
			break;
 80015ce:	e77d      	b.n	80014cc <LocalMidiHandler+0x50>
			vcaattack = (((float)(m_data)) * 10.0f);
 80015d0:	ee07 1a90 	vmov	s15, r1
 80015d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015d8:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <LocalMidiHandler+0x27c>)
 80015da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80015e6:	e771      	b.n	80014cc <LocalMidiHandler+0x50>
			vcfrelease = (((float)(m_data)) * 10.0f);
 80015e8:	ee07 1a90 	vmov	s15, r1
 80015ec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015f0:	4b42      	ldr	r3, [pc, #264]	; (80016fc <LocalMidiHandler+0x280>)
 80015f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fa:	edc3 7a00 	vstr	s15, [r3]
			break;
 80015fe:	e765      	b.n	80014cc <LocalMidiHandler+0x50>
			vcfsustain = (((float)(m_data)) * 0.007874f);
 8001600:	ee07 1a90 	vmov	s15, r1
 8001604:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80016d8 <LocalMidiHandler+0x25c>
 8001608:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <LocalMidiHandler+0x284>)
 800160a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800160e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001612:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001616:	e759      	b.n	80014cc <LocalMidiHandler+0x50>
			vcfdecay = (((float)(m_data)) * 10.0f);
 8001618:	ee07 1a90 	vmov	s15, r1
 800161c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001620:	4b38      	ldr	r3, [pc, #224]	; (8001704 <LocalMidiHandler+0x288>)
 8001622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800162e:	e74d      	b.n	80014cc <LocalMidiHandler+0x50>
			vcfattack = (((float)(m_data)) * 10.0f);
 8001630:	ee07 1a90 	vmov	s15, r1
 8001634:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <LocalMidiHandler+0x28c>)
 800163a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800163e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001642:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001646:	e741      	b.n	80014cc <LocalMidiHandler+0x50>
			pwval = m_data;
 8001648:	4b30      	ldr	r3, [pc, #192]	; (800170c <LocalMidiHandler+0x290>)
 800164a:	8019      	strh	r1, [r3, #0]
			break;
 800164c:	e73e      	b.n	80014cc <LocalMidiHandler+0x50>
			resonance = (((float)(m_data)) * 0.007874f * 4.0f);
 800164e:	ee07 1a90 	vmov	s15, r1
 8001652:	eddf 6a21 	vldr	s13, [pc, #132]	; 80016d8 <LocalMidiHandler+0x25c>
 8001656:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <LocalMidiHandler+0x294>)
 800165c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001660:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001668:	edc3 7a00 	vstr	s15, [r3]
			break;
 800166c:	e72e      	b.n	80014cc <LocalMidiHandler+0x50>
			scale = (m_data - 64) >> 2;
 800166e:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
 8001672:	4a28      	ldr	r2, [pc, #160]	; (8001714 <LocalMidiHandler+0x298>)
 8001674:	109b      	asrs	r3, r3, #2
 8001676:	7013      	strb	r3, [r2, #0]
			break;
 8001678:	e728      	b.n	80014cc <LocalMidiHandler+0x50>
			det = m_data >> 4;
 800167a:	4b27      	ldr	r3, [pc, #156]	; (8001718 <LocalMidiHandler+0x29c>)
 800167c:	090a      	lsrs	r2, r1, #4
 800167e:	701a      	strb	r2, [r3, #0]
			break;
 8001680:	e724      	b.n	80014cc <LocalMidiHandler+0x50>
			oscmix = (((float)(m_data)) * 0.007874f);
 8001682:	ee07 1a90 	vmov	s15, r1
 8001686:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80016d8 <LocalMidiHandler+0x25c>
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <LocalMidiHandler+0x2a0>)
 800168c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001694:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001698:	e718      	b.n	80014cc <LocalMidiHandler+0x50>
			wavesel = m_data >> 5;
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <LocalMidiHandler+0x2a4>)
 800169c:	094a      	lsrs	r2, r1, #5
 800169e:	701a      	strb	r2, [r3, #0]
			break;
 80016a0:	e714      	b.n	80014cc <LocalMidiHandler+0x50>
			tun = m_data;
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <LocalMidiHandler+0x2a8>)
 80016a4:	7019      	strb	r1, [r3, #0]
			break;
 80016a6:	e711      	b.n	80014cc <LocalMidiHandler+0x50>
			bend = m_data;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <LocalMidiHandler+0x2ac>)
 80016aa:	7019      	strb	r1, [r3, #0]
			break;
 80016ac:	e70e      	b.n	80014cc <LocalMidiHandler+0x50>
 80016ae:	bf00      	nop
 80016b0:	20000390 	.word	0x20000390
 80016b4:	40004400 	.word	0x40004400
 80016b8:	20000464 	.word	0x20000464
 80016bc:	200001bd 	.word	0x200001bd
 80016c0:	200015ed 	.word	0x200015ed
 80016c4:	20001460 	.word	0x20001460
 80016c8:	200015ca 	.word	0x200015ca
 80016cc:	200015c8 	.word	0x200015c8
 80016d0:	20000370 	.word	0x20000370
 80016d4:	20000376 	.word	0x20000376
 80016d8:	3c0101f3 	.word	0x3c0101f3
 80016dc:	200001c0 	.word	0x200001c0
 80016e0:	200002b4 	.word	0x200002b4
 80016e4:	20001710 	.word	0x20001710
 80016e8:	200014a4 	.word	0x200014a4
 80016ec:	200002dc 	.word	0x200002dc
 80016f0:	200002d4 	.word	0x200002d4
 80016f4:	2000048c 	.word	0x2000048c
 80016f8:	200003ec 	.word	0x200003ec
 80016fc:	20001680 	.word	0x20001680
 8001700:	20001630 	.word	0x20001630
 8001704:	20000484 	.word	0x20000484
 8001708:	20001714 	.word	0x20001714
 800170c:	20001638 	.word	0x20001638
 8001710:	2000167c 	.word	0x2000167c
 8001714:	200016c7 	.word	0x200016c7
 8001718:	200001c6 	.word	0x200001c6
 800171c:	200002e4 	.word	0x200002e4
 8001720:	20000488 	.word	0x20000488
 8001724:	200002ed 	.word	0x200002ed
 8001728:	20000392 	.word	0x20000392

0800172c <ParamUpdate>:
	switch(u_param)
 800172c:	281b      	cmp	r0, #27
 800172e:	d81f      	bhi.n	8001770 <ParamUpdate+0x44>
 8001730:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001734:	00f400fc 	.word	0x00f400fc
 8001738:	00ed00f1 	.word	0x00ed00f1
 800173c:	00dd00e1 	.word	0x00dd00e1
 8001740:	00c800d8 	.word	0x00c800d8
 8001744:	00b900c5 	.word	0x00b900c5
 8001748:	00a100ad 	.word	0x00a100ad
 800174c:	00890095 	.word	0x00890095
 8001750:	0071007d 	.word	0x0071007d
 8001754:	00590065 	.word	0x00590065
 8001758:	0049004d 	.word	0x0049004d
 800175c:	0037003d 	.word	0x0037003d
 8001760:	002b0031 	.word	0x002b0031
 8001764:	00220025 	.word	0x00220025
 8001768:	001c001f 	.word	0x001c001f
			pwm2 = u_data;
 800176c:	4b71      	ldr	r3, [pc, #452]	; (8001934 <ParamUpdate+0x208>)
 800176e:	7019      	strb	r1, [r3, #0]
}
 8001770:	4770      	bx	lr
			pwm = u_data;
 8001772:	4b71      	ldr	r3, [pc, #452]	; (8001938 <ParamUpdate+0x20c>)
 8001774:	7019      	strb	r1, [r3, #0]
			break;
 8001776:	4770      	bx	lr
			vcf = u_data;
 8001778:	4b70      	ldr	r3, [pc, #448]	; (800193c <ParamUpdate+0x210>)
 800177a:	7019      	strb	r1, [r3, #0]
			break;
 800177c:	4770      	bx	lr
			lfo3rate = (128 - u_data) << 2;
 800177e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
 8001782:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <ParamUpdate+0x214>)
 8001784:	0089      	lsls	r1, r1, #2
 8001786:	8019      	strh	r1, [r3, #0]
			break;
 8001788:	4770      	bx	lr
			lfo4rate = (128 - u_data) << 2;
 800178a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
 800178e:	4b6d      	ldr	r3, [pc, #436]	; (8001944 <ParamUpdate+0x218>)
 8001790:	0089      	lsls	r1, r1, #2
 8001792:	8019      	strh	r1, [r3, #0]
			break;
 8001794:	4770      	bx	lr
			lfo2rate = (128 - u_data) << 2;
 8001796:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
 800179a:	4b6b      	ldr	r3, [pc, #428]	; (8001948 <ParamUpdate+0x21c>)
 800179c:	0089      	lsls	r1, r1, #2
 800179e:	8019      	strh	r1, [r3, #0]
			break;
 80017a0:	4770      	bx	lr
			lfo1rate = (128 - u_data) << 2; 
 80017a2:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
 80017a6:	4b69      	ldr	r3, [pc, #420]	; (800194c <ParamUpdate+0x220>)
 80017a8:	0089      	lsls	r1, r1, #2
 80017aa:	8019      	strh	r1, [r3, #0]
			break;
 80017ac:	4770      	bx	lr
			vcfenvlvl = (((float)(u_data)) * 0.007874f);
 80017ae:	ee07 1a90 	vmov	s15, r1
 80017b2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001950 <ParamUpdate+0x224>
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <ParamUpdate+0x228>)
 80017b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c0:	edc3 7a00 	vstr	s15, [r3]
			break;
 80017c4:	4770      	bx	lr
			velsel = u_data >> 5;
 80017c6:	0949      	lsrs	r1, r1, #5
 80017c8:	4b63      	ldr	r3, [pc, #396]	; (8001958 <ParamUpdate+0x22c>)
 80017ca:	7019      	strb	r1, [r3, #0]
			break;
 80017cc:	4770      	bx	lr
			envkflvl = (((float)(u_data)) * 0.007874f);
 80017ce:	ee07 1a90 	vmov	s15, r1
 80017d2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001950 <ParamUpdate+0x224>
 80017d6:	4b61      	ldr	r3, [pc, #388]	; (800195c <ParamUpdate+0x230>)
 80017d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e0:	edc3 7a00 	vstr	s15, [r3]
			break;
 80017e4:	4770      	bx	lr
			vcfkflvl = (((float)(u_data)) * 0.007874f);
 80017e6:	ee07 1a90 	vmov	s15, r1
 80017ea:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001950 <ParamUpdate+0x224>
 80017ee:	4b5c      	ldr	r3, [pc, #368]	; (8001960 <ParamUpdate+0x234>)
 80017f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f8:	edc3 7a00 	vstr	s15, [r3]
			break;
 80017fc:	4770      	bx	lr
			vcarelease = (((float)(u_data)) * 10.0f);
 80017fe:	ee07 1a90 	vmov	s15, r1
 8001802:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001806:	4b57      	ldr	r3, [pc, #348]	; (8001964 <ParamUpdate+0x238>)
 8001808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800180c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001810:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001814:	4770      	bx	lr
			vcasustain = (((float)(u_data)) * 0.007874f);
 8001816:	ee07 1a90 	vmov	s15, r1
 800181a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001950 <ParamUpdate+0x224>
 800181e:	4b52      	ldr	r3, [pc, #328]	; (8001968 <ParamUpdate+0x23c>)
 8001820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001828:	edc3 7a00 	vstr	s15, [r3]
			break;
 800182c:	4770      	bx	lr
			vcadecay = (((float)(u_data)) * 10.0f);
 800182e:	ee07 1a90 	vmov	s15, r1
 8001832:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001836:	4b4d      	ldr	r3, [pc, #308]	; (800196c <ParamUpdate+0x240>)
 8001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001840:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001844:	4770      	bx	lr
			vcaattack = (((float)(u_data)) * 10.0f);
 8001846:	ee07 1a90 	vmov	s15, r1
 800184a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800184e:	4b48      	ldr	r3, [pc, #288]	; (8001970 <ParamUpdate+0x244>)
 8001850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001858:	edc3 7a00 	vstr	s15, [r3]
			break;
 800185c:	4770      	bx	lr
			vcfrelease = (((float)(u_data)) * 10.0f);
 800185e:	ee07 1a90 	vmov	s15, r1
 8001862:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001866:	4b43      	ldr	r3, [pc, #268]	; (8001974 <ParamUpdate+0x248>)
 8001868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800186c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001870:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001874:	4770      	bx	lr
			vcfsustain = (((float)(u_data)) * 0.007874f);
 8001876:	ee07 1a90 	vmov	s15, r1
 800187a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001950 <ParamUpdate+0x224>
 800187e:	4b3e      	ldr	r3, [pc, #248]	; (8001978 <ParamUpdate+0x24c>)
 8001880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001888:	edc3 7a00 	vstr	s15, [r3]
			break;
 800188c:	4770      	bx	lr
			vcfdecay = (((float)(u_data)) * 10.0f);
 800188e:	ee07 1a90 	vmov	s15, r1
 8001892:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001896:	4b39      	ldr	r3, [pc, #228]	; (800197c <ParamUpdate+0x250>)
 8001898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a0:	edc3 7a00 	vstr	s15, [r3]
			break;
 80018a4:	4770      	bx	lr
			vcfattack = (((float)(u_data)) * 10.0f);
 80018a6:	ee07 1a90 	vmov	s15, r1
 80018aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018ae:	4b34      	ldr	r3, [pc, #208]	; (8001980 <ParamUpdate+0x254>)
 80018b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b8:	edc3 7a00 	vstr	s15, [r3]
			break;
 80018bc:	4770      	bx	lr
			pwval = u_data;
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <ParamUpdate+0x258>)
 80018c0:	8019      	strh	r1, [r3, #0]
			break;
 80018c2:	4770      	bx	lr
			resonance = (((float)(u_data)) * 0.007874f * 4.0f);
 80018c4:	ee07 1a90 	vmov	s15, r1
 80018c8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001950 <ParamUpdate+0x224>
 80018cc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <ParamUpdate+0x25c>)
 80018d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018de:	edc3 7a00 	vstr	s15, [r3]
			break;
 80018e2:	4770      	bx	lr
			scale = (u_data - 64) >> 2;
 80018e4:	3940      	subs	r1, #64	; 0x40
 80018e6:	4b29      	ldr	r3, [pc, #164]	; (800198c <ParamUpdate+0x260>)
 80018e8:	1089      	asrs	r1, r1, #2
 80018ea:	7019      	strb	r1, [r3, #0]
			break;
 80018ec:	4770      	bx	lr
			det = u_data >> 4;
 80018ee:	0909      	lsrs	r1, r1, #4
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <ParamUpdate+0x264>)
 80018f2:	7019      	strb	r1, [r3, #0]
			break;
 80018f4:	4770      	bx	lr
			oscmix = (((float)(u_data)) * 0.007874f);
 80018f6:	ee07 1a90 	vmov	s15, r1
 80018fa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001950 <ParamUpdate+0x224>
 80018fe:	4b25      	ldr	r3, [pc, #148]	; (8001994 <ParamUpdate+0x268>)
 8001900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001908:	edc3 7a00 	vstr	s15, [r3]
			break;
 800190c:	4770      	bx	lr
			wavesel = u_data >> 5;
 800190e:	0949      	lsrs	r1, r1, #5
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <ParamUpdate+0x26c>)
 8001912:	7019      	strb	r1, [r3, #0]
			break;
 8001914:	4770      	bx	lr
			tun = u_data;
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <ParamUpdate+0x270>)
 8001918:	7019      	strb	r1, [r3, #0]
			break;
 800191a:	4770      	bx	lr
			if(u_data >= 64)
 800191c:	293f      	cmp	r1, #63	; 0x3f
 800191e:	f67f af27 	bls.w	8001770 <ParamUpdate+0x44>
				mod = (u_data - 64) >> 1;
 8001922:	3940      	subs	r1, #64	; 0x40
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <ParamUpdate+0x274>)
 8001926:	1049      	asrs	r1, r1, #1
 8001928:	7019      	strb	r1, [r3, #0]
 800192a:	4770      	bx	lr
			bend = u_data;
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <ParamUpdate+0x278>)
 800192e:	7019      	strb	r1, [r3, #0]
			break;
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	200001bd 	.word	0x200001bd
 8001938:	200015ed 	.word	0x200015ed
 800193c:	20001460 	.word	0x20001460
 8001940:	200015ca 	.word	0x200015ca
 8001944:	200015c8 	.word	0x200015c8
 8001948:	20000370 	.word	0x20000370
 800194c:	20000376 	.word	0x20000376
 8001950:	3c0101f3 	.word	0x3c0101f3
 8001954:	200001c0 	.word	0x200001c0
 8001958:	200002b4 	.word	0x200002b4
 800195c:	20001710 	.word	0x20001710
 8001960:	200014a4 	.word	0x200014a4
 8001964:	200002dc 	.word	0x200002dc
 8001968:	200002d4 	.word	0x200002d4
 800196c:	2000048c 	.word	0x2000048c
 8001970:	200003ec 	.word	0x200003ec
 8001974:	20001680 	.word	0x20001680
 8001978:	20001630 	.word	0x20001630
 800197c:	20000484 	.word	0x20000484
 8001980:	20001714 	.word	0x20001714
 8001984:	20001638 	.word	0x20001638
 8001988:	2000167c 	.word	0x2000167c
 800198c:	200016c7 	.word	0x200016c7
 8001990:	200001c6 	.word	0x200001c6
 8001994:	200002e4 	.word	0x200002e4
 8001998:	20000488 	.word	0x20000488
 800199c:	200002ed 	.word	0x200002ed
 80019a0:	20000390 	.word	0x20000390
 80019a4:	20000392 	.word	0x20000392

080019a8 <SetLeds>:
{
 80019a8:	b508      	push	{r3, lr}
 80019aa:	2807      	cmp	r0, #7
 80019ac:	d863      	bhi.n	8001a76 <SetLeds+0xce>
 80019ae:	e8df f000 	tbb	[pc, r0]
 80019b2:	140c      	.short	0x140c
 80019b4:	483b2e21 	.word	0x483b2e21
 80019b8:	0455      	.short	0x0455
			HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_SET);
 80019ba:	2201      	movs	r2, #1
 80019bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80019c0:	482d      	ldr	r0, [pc, #180]	; (8001a78 <SetLeds+0xd0>)
}
 80019c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_SET);
 80019c6:	f001 bddd 	b.w	8003584 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	f244 0181 	movw	r1, #16513	; 0x4081
 80019d0:	4829      	ldr	r0, [pc, #164]	; (8001a78 <SetLeds+0xd0>)
}
 80019d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 80019d6:	f001 bdd5 	b.w	8003584 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80019da:	2201      	movs	r2, #1
 80019dc:	4826      	ldr	r0, [pc, #152]	; (8001a78 <SetLeds+0xd0>)
 80019de:	4611      	mov	r1, r2
 80019e0:	f001 fdd0 	bl	8003584 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80019ea:	4823      	ldr	r0, [pc, #140]	; (8001a78 <SetLeds+0xd0>)
}
 80019ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019f0:	f001 bdc8 	b.w	8003584 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	481f      	ldr	r0, [pc, #124]	; (8001a78 <SetLeds+0xd0>)
 80019fa:	f001 fdc3 	bl	8003584 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f244 0101 	movw	r1, #16385	; 0x4001
 8001a04:	481c      	ldr	r0, [pc, #112]	; (8001a78 <SetLeds+0xd0>)
}
 8001a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001a0a:	f001 bdbb 	b.w	8003584 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_SET);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2181      	movs	r1, #129	; 0x81
 8001a12:	4819      	ldr	r0, [pc, #100]	; (8001a78 <SetLeds+0xd0>)
 8001a14:	f001 fdb6 	bl	8003584 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a1e:	4816      	ldr	r0, [pc, #88]	; (8001a78 <SetLeds+0xd0>)
}
 8001a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001a24:	f001 bdae 	b.w	8003584 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a2e:	4812      	ldr	r0, [pc, #72]	; (8001a78 <SetLeds+0xd0>)
 8001a30:	f001 fda8 	bl	8003584 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2181      	movs	r1, #129	; 0x81
 8001a38:	480f      	ldr	r0, [pc, #60]	; (8001a78 <SetLeds+0xd0>)
}
 8001a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001a3e:	f001 bda1 	b.w	8003584 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD1_Pin, GPIO_PIN_SET);
 8001a42:	2201      	movs	r2, #1
 8001a44:	f244 0101 	movw	r1, #16385	; 0x4001
 8001a48:	480b      	ldr	r0, [pc, #44]	; (8001a78 <SetLeds+0xd0>)
 8001a4a:	f001 fd9b 	bl	8003584 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	4809      	ldr	r0, [pc, #36]	; (8001a78 <SetLeds+0xd0>)
}
 8001a54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8001a58:	f001 bd94 	b.w	8003584 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <SetLeds+0xd0>)
 8001a64:	f001 fd8e 	bl	8003584 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <SetLeds+0xd0>)
}
 8001a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001a72:	f001 bd87 	b.w	8003584 <HAL_GPIO_WritePin>
}
 8001a76:	bd08      	pop	{r3, pc}
 8001a78:	40020400 	.word	0x40020400

08001a7c <play_note>:
{
 8001a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(chanstat[j] == note)
 8001a80:	f8df 83c4 	ldr.w	r8, [pc, #964]	; 8001e48 <play_note+0x3cc>
{
 8001a84:	b082      	sub	sp, #8
	for(j=0;j<6;j++)
 8001a86:	f8df 93c4 	ldr.w	r9, [pc, #964]	; 8001e4c <play_note+0x3d0>
 8001a8a:	2300      	movs	r3, #0
		if(chanstat[j] == note)
 8001a8c:	f898 2000 	ldrb.w	r2, [r8]
{
 8001a90:	9101      	str	r1, [sp, #4]
		if(chanstat[j] == note)
 8001a92:	4282      	cmp	r2, r0
	for(j=0;j<6;j++)
 8001a94:	f889 3000 	strb.w	r3, [r9]
		if(chanstat[j] == note)
 8001a98:	d048      	beq.n	8001b2c <play_note+0xb0>
 8001a9a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	4283      	cmp	r3, r0
 8001aa2:	d03f      	beq.n	8001b24 <play_note+0xa8>
 8001aa4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8001aa8:	4283      	cmp	r3, r0
 8001aaa:	f000 8218 	beq.w	8001ede <play_note+0x462>
 8001aae:	f898 3003 	ldrb.w	r3, [r8, #3]
 8001ab2:	4283      	cmp	r3, r0
 8001ab4:	f000 8216 	beq.w	8001ee4 <play_note+0x468>
 8001ab8:	f898 3004 	ldrb.w	r3, [r8, #4]
 8001abc:	4283      	cmp	r3, r0
 8001abe:	f000 8214 	beq.w	8001eea <play_note+0x46e>
 8001ac2:	f898 3005 	ldrb.w	r3, [r8, #5]
 8001ac6:	4283      	cmp	r3, r0
 8001ac8:	f000 8212 	beq.w	8001ef0 <play_note+0x474>
	for(j=0;j<6;j++)
 8001acc:	4ebf      	ldr	r6, [pc, #764]	; (8001dcc <play_note+0x350>)
 8001ace:	4dc0      	ldr	r5, [pc, #768]	; (8001dd0 <play_note+0x354>)
 8001ad0:	4fc0      	ldr	r7, [pc, #768]	; (8001dd4 <play_note+0x358>)
 8001ad2:	e00c      	b.n	8001aee <play_note+0x72>
		SetLeds(voice + 1);
 8001ad4:	fa5f f08c 	uxtb.w	r0, ip
		voice++;
 8001ad8:	703a      	strb	r2, [r7, #0]
		SetLeds(voice + 1);
 8001ada:	f7ff ff65 	bl	80019a8 <SetLeds>
	for(j=0;j<6;j++)
 8001ade:	f899 3000 	ldrb.w	r3, [r9]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	f889 3000 	strb.w	r3, [r9]
 8001aec:	d85d      	bhi.n	8001baa <play_note+0x12e>
		if(vcfadsr[voice] == 4 | vcaadsr[voice] == 4 | chanstat[voice] == 255) // Voice is free or in released state?
 8001aee:	783b      	ldrb	r3, [r7, #0]
		SetLeds(voice + 1);
 8001af0:	2001      	movs	r0, #1
		if(vcfadsr[voice] == 4 | vcaadsr[voice] == 4 | chanstat[voice] == 255) // Voice is free or in released state?
 8001af2:	f816 e003 	ldrb.w	lr, [r6, r3]
		voice++;
 8001af6:	181a      	adds	r2, r3, r0
		if(vcfadsr[voice] == 4 | vcaadsr[voice] == 4 | chanstat[voice] == 255) // Voice is free or in released state?
 8001af8:	5ce9      	ldrb	r1, [r5, r3]
		SetLeds(voice + 1);
 8001afa:	f103 0c02 	add.w	ip, r3, #2
		voice++;
 8001afe:	b2d2      	uxtb	r2, r2
		if(vcfadsr[voice] == 4 | vcaadsr[voice] == 4 | chanstat[voice] == 255) // Voice is free or in released state?
 8001b00:	2904      	cmp	r1, #4
 8001b02:	bf18      	it	ne
 8001b04:	f1be 0f04 	cmpne.w	lr, #4
 8001b08:	d064      	beq.n	8001bd4 <play_note+0x158>
 8001b0a:	f818 1003 	ldrb.w	r1, [r8, r3]
 8001b0e:	f1a1 01ff 	sub.w	r1, r1, #255	; 0xff
 8001b12:	fab1 f181 	clz	r1, r1
 8001b16:	0949      	lsrs	r1, r1, #5
 8001b18:	2900      	cmp	r1, #0
 8001b1a:	d15b      	bne.n	8001bd4 <play_note+0x158>
		if(voice > 5)
 8001b1c:	2a05      	cmp	r2, #5
 8001b1e:	d9d9      	bls.n	8001ad4 <play_note+0x58>
			voice = 0;
 8001b20:	7039      	strb	r1, [r7, #0]
 8001b22:	e7da      	b.n	8001ada <play_note+0x5e>
	for(j=0;j<6;j++)
 8001b24:	2201      	movs	r2, #1
		if(chanstat[j] == note)
 8001b26:	4613      	mov	r3, r2
 8001b28:	f889 2000 	strb.w	r2, [r9]
			if(velsel == 1 | velsel == 3)
 8001b2c:	4aaa      	ldr	r2, [pc, #680]	; (8001dd8 <play_note+0x35c>)
 8001b2e:	7814      	ldrb	r4, [r2, #0]
 8001b30:	f004 02fd 	and.w	r2, r4, #253	; 0xfd
 8001b34:	2a01      	cmp	r2, #1
 8001b36:	f040 8099 	bne.w	8001c6c <play_note+0x1f0>
				vcfvellvl[j] = ((float)(velocity) / 127.0f);
 8001b3a:	eddd 7a01 	vldr	s15, [sp, #4]
 8001b3e:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001ddc <play_note+0x360>
 8001b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b4a:	48a5      	ldr	r0, [pc, #660]	; (8001de0 <play_note+0x364>)
			if(velsel >= 2)
 8001b4c:	2c01      	cmp	r4, #1
			vcfsustainlvl[j] = vcfsustain;
 8001b4e:	49a5      	ldr	r1, [pc, #660]	; (8001de4 <play_note+0x368>)
 8001b50:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001b54:	4da4      	ldr	r5, [pc, #656]	; (8001de8 <play_note+0x36c>)
 8001b56:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001b5a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001b5e:	682d      	ldr	r5, [r5, #0]
 8001b60:	edc0 7a00 	vstr	s15, [r0]
 8001b64:	600d      	str	r5, [r1, #0]
			if(velsel >= 2)
 8001b66:	f240 80c5 	bls.w	8001cf4 <play_note+0x278>
				vcavellvl[j] = ((float)(velocity) / 127.0f);
 8001b6a:	eddd 7a01 	vldr	s15, [sp, #4]
 8001b6e:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8001ddc <play_note+0x360>
 8001b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
			vcasustainlvl[j] = vcasustain;
 8001b7a:	499c      	ldr	r1, [pc, #624]	; (8001dec <play_note+0x370>)
			vcfadsr[j] = 1;
 8001b7c:	2601      	movs	r6, #1
 8001b7e:	4d9c      	ldr	r5, [pc, #624]	; (8001df0 <play_note+0x374>)
			vcasustainlvl[j] = vcasustain;
 8001b80:	680f      	ldr	r7, [r1, #0]
 8001b82:	4c9c      	ldr	r4, [pc, #624]	; (8001df4 <play_note+0x378>)
 8001b84:	4415      	add	r5, r2
			vcacutoff[j] = 0.0f;
 8001b86:	499c      	ldr	r1, [pc, #624]	; (8001df8 <play_note+0x37c>)
			vcfcutoff[j] = 0.0f;
 8001b88:	489c      	ldr	r0, [pc, #624]	; (8001dfc <play_note+0x380>)
			vcasustainlvl[j] = vcasustain;
 8001b8a:	4414      	add	r4, r2
 8001b8c:	edc5 7a00 	vstr	s15, [r5]
			vcfcutoff[j] = 0.0f;
 8001b90:	4410      	add	r0, r2
			vcacutoff[j] = 0.0f;
 8001b92:	440a      	add	r2, r1
			vcfcutoff[j] = 0.0f;
 8001b94:	2100      	movs	r1, #0
			vcasustainlvl[j] = vcasustain;
 8001b96:	6027      	str	r7, [r4, #0]
			vcfadsr[j] = 1;
 8001b98:	4c8c      	ldr	r4, [pc, #560]	; (8001dcc <play_note+0x350>)
			vcfcutoff[j] = 0.0f;
 8001b9a:	6001      	str	r1, [r0, #0]
			vcaadsr[j] = 1;
 8001b9c:	488c      	ldr	r0, [pc, #560]	; (8001dd0 <play_note+0x354>)
			vcacutoff[j] = 0.0f;
 8001b9e:	6011      	str	r1, [r2, #0]
			vcfadsr[j] = 1;
 8001ba0:	54e6      	strb	r6, [r4, r3]
			vcaadsr[j] = 1;
 8001ba2:	54c6      	strb	r6, [r0, r3]
}
 8001ba4:	b002      	add	sp, #8
 8001ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  USARTx->TDR = Value;
 8001baa:	4b95      	ldr	r3, [pc, #596]	; (8001e00 <play_note+0x384>)
 8001bac:	2190      	movs	r1, #144	; 0x90
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001bae:	461a      	mov	r2, r3
  USARTx->TDR = Value;
 8001bb0:	6299      	str	r1, [r3, #40]	; 0x28
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001bb2:	69d3      	ldr	r3, [r2, #28]
 8001bb4:	0619      	lsls	r1, r3, #24
 8001bb6:	d5fc      	bpl.n	8001bb2 <play_note+0x136>
 8001bb8:	4b91      	ldr	r3, [pc, #580]	; (8001e00 <play_note+0x384>)
  USARTx->TDR = Value;
 8001bba:	6294      	str	r4, [r2, #40]	; 0x28
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	0612      	lsls	r2, r2, #24
 8001bc0:	d5fc      	bpl.n	8001bbc <play_note+0x140>
  USARTx->TDR = Value;
 8001bc2:	9901      	ldr	r1, [sp, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001bc4:	4a8e      	ldr	r2, [pc, #568]	; (8001e00 <play_note+0x384>)
  USARTx->TDR = Value;
 8001bc6:	6299      	str	r1, [r3, #40]	; 0x28
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001bc8:	69d3      	ldr	r3, [r2, #28]
 8001bca:	061b      	lsls	r3, r3, #24
 8001bcc:	d5fc      	bpl.n	8001bc8 <play_note+0x14c>
 8001bce:	b002      	add	sp, #8
 8001bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if(velsel == 1 | velsel == 3)
 8001bd4:	4a80      	ldr	r2, [pc, #512]	; (8001dd8 <play_note+0x35c>)
 8001bd6:	f892 c000 	ldrb.w	ip, [r2]
 8001bda:	f00c 02fd 	and.w	r2, ip, #253	; 0xfd
 8001bde:	2a01      	cmp	r2, #1
 8001be0:	d047      	beq.n	8001c72 <play_note+0x1f6>
				vcfvellvl[voice] = 1.0f;
 8001be2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001be6:	487e      	ldr	r0, [pc, #504]	; (8001de0 <play_note+0x364>)
			if(velsel >= 2)
 8001be8:	f1bc 0f01 	cmp.w	ip, #1
			vcfsustainlvl[voice] = vcfsustain;
 8001bec:	497d      	ldr	r1, [pc, #500]	; (8001de4 <play_note+0x368>)
 8001bee:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001bf2:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 8001de8 <play_note+0x36c>
 8001bf6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001bfa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001bfe:	f8de e000 	ldr.w	lr, [lr]
 8001c02:	edc0 7a00 	vstr	s15, [r0]
 8001c06:	f8c1 e000 	str.w	lr, [r1]
			if(velsel >= 2)
 8001c0a:	d976      	bls.n	8001cfa <play_note+0x27e>
				vcavellvl[voice] = ((float)(velocity) / 127.0f);
 8001c0c:	eddd 7a01 	vldr	s15, [sp, #4]
 8001c10:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001ddc <play_note+0x360>
 8001c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c1c:	4874      	ldr	r0, [pc, #464]	; (8001df0 <play_note+0x374>)
			vcfadsr[voice] = 1;
 8001c1e:	f04f 0c01 	mov.w	ip, #1
			vcasustainlvl[voice] = vcasustain;
 8001c22:	4974      	ldr	r1, [pc, #464]	; (8001df4 <play_note+0x378>)
 8001c24:	eb00 0e02 	add.w	lr, r0, r2
 8001c28:	4870      	ldr	r0, [pc, #448]	; (8001dec <play_note+0x370>)
 8001c2a:	4411      	add	r1, r2
			chanstat[voice] = note; // Set the channel status to the note number playing
 8001c2c:	f808 4003 	strb.w	r4, [r8, r3]
			vcasustainlvl[voice] = vcasustain;
 8001c30:	f8d0 8000 	ldr.w	r8, [r0]
			vcfcutoff[voice] = 0.0f;
 8001c34:	4871      	ldr	r0, [pc, #452]	; (8001dfc <play_note+0x380>)
			vcasustainlvl[voice] = vcasustain;
 8001c36:	f8c1 8000 	str.w	r8, [r1]
			vcacutoff[voice] = 0.0f;
 8001c3a:	496f      	ldr	r1, [pc, #444]	; (8001df8 <play_note+0x37c>)
			vcfcutoff[voice] = 0.0f;
 8001c3c:	4410      	add	r0, r2
 8001c3e:	edce 7a00 	vstr	s15, [lr]
 8001c42:	f04f 0e00 	mov.w	lr, #0
			vcacutoff[voice] = 0.0f;
 8001c46:	440a      	add	r2, r1
			vcfadsr[voice] = 1;
 8001c48:	f806 c003 	strb.w	ip, [r6, r3]
			vcfcutoff[voice] = 0.0f;
 8001c4c:	f8c0 e000 	str.w	lr, [r0]
			vcacutoff[voice] = 0.0f;
 8001c50:	f8c2 e000 	str.w	lr, [r2]
			vcaadsr[voice] = 1;
 8001c54:	f805 c003 	strb.w	ip, [r5, r3]
			switch(voice)
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d842      	bhi.n	8001ce2 <play_note+0x266>
 8001c5c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001c60:	00fa011d 	.word	0x00fa011d
 8001c64:	00720094 	.word	0x00720094
 8001c68:	00120050 	.word	0x00120050
				vcfvellvl[j] = 1.0f;
 8001c6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c70:	e76b      	b.n	8001b4a <play_note+0xce>
				vcfvellvl[voice] = ((float)(velocity) / 127.0f);
 8001c72:	eddd 7a01 	vldr	s15, [sp, #4]
 8001c76:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001ddc <play_note+0x360>
 8001c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c82:	e7b0      	b.n	8001be6 <play_note+0x16a>
					TIM8_Config(pitchtbl[note + scale]);
 8001c84:	4b5f      	ldr	r3, [pc, #380]	; (8001e04 <play_note+0x388>)
  htim8.Init.ClockDivision     = 0;
 8001c86:	2600      	movs	r6, #0
					TIM8_Config(pitchtbl[note + scale]);
 8001c88:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8001e50 <play_note+0x3d4>
  htim8.Init.Period            = 511;
 8001c8c:	f240 19ff 	movw	r9, #511	; 0x1ff
					TIM8_Config(pitchtbl[note + scale]);
 8001c90:	f993 3000 	ldrsb.w	r3, [r3]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c94:	f04f 0880 	mov.w	r8, #128	; 0x80
  htim8.Instance = TIM8;
 8001c98:	4d5b      	ldr	r5, [pc, #364]	; (8001e08 <play_note+0x38c>)
					TIM8_Config(pitchtbl[note + scale]);
 8001c9a:	4423      	add	r3, r4
  htim8.Instance = TIM8;
 8001c9c:	4a5b      	ldr	r2, [pc, #364]	; (8001e0c <play_note+0x390>)
  HAL_TIM_Base_Init(&htim8);
 8001c9e:	4628      	mov	r0, r5
  htim8.Init.Period            = 511;
 8001ca0:	f8c5 900c 	str.w	r9, [r5, #12]
  htim8.Init.Prescaler         = period;
 8001ca4:	f83a 3023 	ldrh.w	r3, [sl, r3, lsl #2]
  htim8.Init.ClockDivision     = 0;
 8001ca8:	612e      	str	r6, [r5, #16]
  htim8.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001caa:	60ae      	str	r6, [r5, #8]
  htim8.Init.Prescaler         = period;
 8001cac:	e9c5 2300 	strd	r2, r3, [r5]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cb0:	e9c5 6805 	strd	r6, r8, [r5, #20]
  HAL_TIM_Base_Init(&htim8);
 8001cb4:	f002 fa3a 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim8);
 8001cb8:	4628      	mov	r0, r5
 8001cba:	f002 facb 	bl	8004254 <HAL_TIM_Base_Start>
  htim13.Instance = TIM13;
 8001cbe:	4d54      	ldr	r5, [pc, #336]	; (8001e10 <play_note+0x394>)
  htim13.Init.Prescaler         = period;
 8001cc0:	f83a 2024 	ldrh.w	r2, [sl, r4, lsl #2]
  htim13.Instance = TIM13;
 8001cc4:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <play_note+0x398>)
 8001cc6:	602b      	str	r3, [r5, #0]
  HAL_TIM_Base_Init(&htim13);
 8001cc8:	4628      	mov	r0, r5
  htim13.Init.Prescaler         = period;
 8001cca:	606a      	str	r2, [r5, #4]
  htim13.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001ccc:	60ae      	str	r6, [r5, #8]
  htim13.Init.ClockDivision     = 0;
 8001cce:	e9c5 9603 	strd	r9, r6, [r5, #12]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cd2:	e9c5 6805 	strd	r6, r8, [r5, #20]
  HAL_TIM_Base_Init(&htim13);
 8001cd6:	f002 fa29 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim13);
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f002 faba 	bl	8004254 <HAL_TIM_Base_Start>
 8001ce0:	783b      	ldrb	r3, [r7, #0]
			voice++;
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
			if(voice > 5)
 8001ce6:	2b05      	cmp	r3, #5
				voice = 0;
 8001ce8:	bf88      	it	hi
 8001cea:	2300      	movhi	r3, #0
 8001cec:	703b      	strb	r3, [r7, #0]
}
 8001cee:	b002      	add	sp, #8
 8001cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				vcavellvl[j] = 1.0f;
 8001cf4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001cf8:	e73f      	b.n	8001b7a <play_note+0xfe>
				vcavellvl[voice] = 1.0f;
 8001cfa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001cfe:	e78d      	b.n	8001c1c <play_note+0x1a0>
					TIM5_Config(pitchtbl[note + scale]);
 8001d00:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <play_note+0x388>)
  htim5.Init.ClockDivision     = 0;
 8001d02:	2600      	movs	r6, #0
					TIM5_Config(pitchtbl[note + scale]);
 8001d04:	f8df a148 	ldr.w	sl, [pc, #328]	; 8001e50 <play_note+0x3d4>
  htim5.Init.Period            = 511;
 8001d08:	f240 19ff 	movw	r9, #511	; 0x1ff
					TIM5_Config(pitchtbl[note + scale]);
 8001d0c:	f993 3000 	ldrsb.w	r3, [r3]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d10:	f04f 0880 	mov.w	r8, #128	; 0x80
  htim5.Instance = TIM5;
 8001d14:	4d40      	ldr	r5, [pc, #256]	; (8001e18 <play_note+0x39c>)
					TIM5_Config(pitchtbl[note + scale]);
 8001d16:	4423      	add	r3, r4
  htim5.Instance = TIM5;
 8001d18:	4a40      	ldr	r2, [pc, #256]	; (8001e1c <play_note+0x3a0>)
  HAL_TIM_Base_Init(&htim5);
 8001d1a:	4628      	mov	r0, r5
  htim5.Init.Period            = 511;
 8001d1c:	f8c5 900c 	str.w	r9, [r5, #12]
  htim5.Init.Prescaler         = period;
 8001d20:	f83a 3023 	ldrh.w	r3, [sl, r3, lsl #2]
  htim5.Init.ClockDivision     = 0;
 8001d24:	612e      	str	r6, [r5, #16]
  htim5.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001d26:	60ae      	str	r6, [r5, #8]
  htim5.Init.Prescaler         = period;
 8001d28:	e9c5 2300 	strd	r2, r3, [r5]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d2c:	e9c5 6805 	strd	r6, r8, [r5, #20]
  HAL_TIM_Base_Init(&htim5);
 8001d30:	f002 f9fc 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim5);
 8001d34:	4628      	mov	r0, r5
 8001d36:	f002 fa8d 	bl	8004254 <HAL_TIM_Base_Start>
  htim12.Instance = TIM12;
 8001d3a:	4d39      	ldr	r5, [pc, #228]	; (8001e20 <play_note+0x3a4>)
  htim12.Init.Prescaler         = period;
 8001d3c:	f83a 2024 	ldrh.w	r2, [sl, r4, lsl #2]
  htim12.Instance = TIM12;
 8001d40:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <play_note+0x3a8>)
 8001d42:	e7c0      	b.n	8001cc6 <play_note+0x24a>
					TIM4_Config(pitchtbl[note + scale]);
 8001d44:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <play_note+0x388>)
  htim4.Init.ClockDivision     = 0;
 8001d46:	2600      	movs	r6, #0
					TIM4_Config(pitchtbl[note + scale]);
 8001d48:	f8df a104 	ldr.w	sl, [pc, #260]	; 8001e50 <play_note+0x3d4>
  htim4.Init.Period            = 511;
 8001d4c:	f240 19ff 	movw	r9, #511	; 0x1ff
					TIM4_Config(pitchtbl[note + scale]);
 8001d50:	f993 3000 	ldrsb.w	r3, [r3]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d54:	f04f 0880 	mov.w	r8, #128	; 0x80
  htim4.Instance = TIM4;
 8001d58:	4d33      	ldr	r5, [pc, #204]	; (8001e28 <play_note+0x3ac>)
					TIM4_Config(pitchtbl[note + scale]);
 8001d5a:	4423      	add	r3, r4
  htim4.Instance = TIM4;
 8001d5c:	4a33      	ldr	r2, [pc, #204]	; (8001e2c <play_note+0x3b0>)
  HAL_TIM_Base_Init(&htim4);
 8001d5e:	4628      	mov	r0, r5
  htim4.Init.Period            = 511;
 8001d60:	f8c5 900c 	str.w	r9, [r5, #12]
  htim4.Init.Prescaler         = period;
 8001d64:	f83a 3023 	ldrh.w	r3, [sl, r3, lsl #2]
  htim4.Init.ClockDivision     = 0;
 8001d68:	612e      	str	r6, [r5, #16]
  htim4.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001d6a:	60ae      	str	r6, [r5, #8]
  htim4.Init.Prescaler         = period;
 8001d6c:	e9c5 2300 	strd	r2, r3, [r5]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d70:	e9c5 6805 	strd	r6, r8, [r5, #20]
  HAL_TIM_Base_Init(&htim4);
 8001d74:	f002 f9da 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim4);
 8001d78:	4628      	mov	r0, r5
 8001d7a:	f002 fa6b 	bl	8004254 <HAL_TIM_Base_Start>
  htim11.Instance = TIM11;
 8001d7e:	4d2c      	ldr	r5, [pc, #176]	; (8001e30 <play_note+0x3b4>)
  htim11.Init.Prescaler         = period;
 8001d80:	f83a 2024 	ldrh.w	r2, [sl, r4, lsl #2]
  htim11.Instance = TIM11;
 8001d84:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <play_note+0x3b8>)
 8001d86:	e79e      	b.n	8001cc6 <play_note+0x24a>
					TIM3_Config(pitchtbl[note + scale]);
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <play_note+0x388>)
  htim3.Init.ClockDivision     = 0;
 8001d8a:	2600      	movs	r6, #0
					TIM3_Config(pitchtbl[note + scale]);
 8001d8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8001e50 <play_note+0x3d4>
  htim3.Init.Period            = 511;
 8001d90:	f240 19ff 	movw	r9, #511	; 0x1ff
					TIM3_Config(pitchtbl[note + scale]);
 8001d94:	f993 3000 	ldrsb.w	r3, [r3]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d98:	f04f 0880 	mov.w	r8, #128	; 0x80
  htim3.Instance = TIM3;
 8001d9c:	4d26      	ldr	r5, [pc, #152]	; (8001e38 <play_note+0x3bc>)
					TIM3_Config(pitchtbl[note + scale]);
 8001d9e:	4423      	add	r3, r4
  htim3.Instance = TIM3;
 8001da0:	4a26      	ldr	r2, [pc, #152]	; (8001e3c <play_note+0x3c0>)
  HAL_TIM_Base_Init(&htim3);
 8001da2:	4628      	mov	r0, r5
  htim3.Init.Period            = 511;
 8001da4:	f8c5 900c 	str.w	r9, [r5, #12]
  htim3.Init.Prescaler         = period;
 8001da8:	f83a 3023 	ldrh.w	r3, [sl, r3, lsl #2]
  htim3.Init.ClockDivision     = 0;
 8001dac:	612e      	str	r6, [r5, #16]
  htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001dae:	60ae      	str	r6, [r5, #8]
  htim3.Init.Prescaler         = period;
 8001db0:	e9c5 2300 	strd	r2, r3, [r5]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001db4:	e9c5 6805 	strd	r6, r8, [r5, #20]
  HAL_TIM_Base_Init(&htim3);
 8001db8:	f002 f9b8 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim3);
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	f002 fa49 	bl	8004254 <HAL_TIM_Base_Start>
  htim10.Instance = TIM10;
 8001dc2:	4d1f      	ldr	r5, [pc, #124]	; (8001e40 <play_note+0x3c4>)
  htim10.Init.Prescaler         = period;
 8001dc4:	f83a 2024 	ldrh.w	r2, [sl, r4, lsl #2]
  htim10.Instance = TIM10;
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <play_note+0x3c8>)
 8001dca:	e77c      	b.n	8001cc6 <play_note+0x24a>
 8001dcc:	20000148 	.word	0x20000148
 8001dd0:	20000128 	.word	0x20000128
 8001dd4:	20000189 	.word	0x20000189
 8001dd8:	200002b4 	.word	0x200002b4
 8001ddc:	42fe0000 	.word	0x42fe0000
 8001de0:	20000394 	.word	0x20000394
 8001de4:	20001558 	.word	0x20001558
 8001de8:	20001630 	.word	0x20001630
 8001dec:	200002d4 	.word	0x200002d4
 8001df0:	2000171c 	.word	0x2000171c
 8001df4:	2000024c 	.word	0x2000024c
 8001df8:	20000130 	.word	0x20000130
 8001dfc:	20000150 	.word	0x20000150
 8001e00:	40004400 	.word	0x40004400
 8001e04:	200016c7 	.word	0x200016c7
 8001e08:	200001c8 	.word	0x200001c8
 8001e0c:	40010400 	.word	0x40010400
 8001e10:	200003ac 	.word	0x200003ac
 8001e14:	40001c00 	.word	0x40001c00
 8001e18:	200002f0 	.word	0x200002f0
 8001e1c:	40000c00 	.word	0x40000c00
 8001e20:	20001684 	.word	0x20001684
 8001e24:	40001800 	.word	0x40001800
 8001e28:	20000208 	.word	0x20000208
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	200003f0 	.word	0x200003f0
 8001e34:	40014800 	.word	0x40014800
 8001e38:	20000330 	.word	0x20000330
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	20000264 	.word	0x20000264
 8001e44:	40014400 	.word	0x40014400
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	200001bc 	.word	0x200001bc
 8001e50:	0800453c 	.word	0x0800453c
					TIM2_Config(pitchtbl[note + scale]);
 8001e54:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <play_note+0x47c>)
  htim2.Instance = TIM2;
 8001e56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
					TIM2_Config(pitchtbl[note + scale]);
 8001e5a:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001f18 <play_note+0x49c>
  htim2.Init.ClockDivision     = 0;
 8001e5e:	2600      	movs	r6, #0
					TIM2_Config(pitchtbl[note + scale]);
 8001e60:	f993 3000 	ldrsb.w	r3, [r3]
  htim2.Init.Period            = 511;
 8001e64:	f240 19ff 	movw	r9, #511	; 0x1ff
  htim2.Instance = TIM2;
 8001e68:	4d24      	ldr	r5, [pc, #144]	; (8001efc <play_note+0x480>)
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e6a:	f04f 0880 	mov.w	r8, #128	; 0x80
					TIM2_Config(pitchtbl[note + scale]);
 8001e6e:	4423      	add	r3, r4
  HAL_TIM_Base_Init(&htim2);
 8001e70:	4628      	mov	r0, r5
  htim2.Instance = TIM2;
 8001e72:	602a      	str	r2, [r5, #0]
  htim2.Init.Prescaler         = period;
 8001e74:	f83a 3023 	ldrh.w	r3, [sl, r3, lsl #2]
  htim2.Init.Period            = 511;
 8001e78:	f8c5 900c 	str.w	r9, [r5, #12]
  htim2.Init.Prescaler         = period;
 8001e7c:	606b      	str	r3, [r5, #4]
  htim2.Init.ClockDivision     = 0;
 8001e7e:	612e      	str	r6, [r5, #16]
  htim2.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001e80:	60ae      	str	r6, [r5, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e82:	e9c5 6805 	strd	r6, r8, [r5, #20]
  HAL_TIM_Base_Init(&htim2);
 8001e86:	f002 f951 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim2);
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	f002 f9e2 	bl	8004254 <HAL_TIM_Base_Start>
  htim7.Instance = TIM7;
 8001e90:	4d1b      	ldr	r5, [pc, #108]	; (8001f00 <play_note+0x484>)
  htim7.Init.Prescaler         = period;
 8001e92:	f83a 2024 	ldrh.w	r2, [sl, r4, lsl #2]
  htim7.Instance = TIM7;
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <play_note+0x488>)
 8001e98:	e715      	b.n	8001cc6 <play_note+0x24a>
					TIM14_Config(pitchtbl[note + scale]);
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <play_note+0x47c>)
  htim14.Init.ClockDivision     = 0;
 8001e9c:	2600      	movs	r6, #0
					TIM14_Config(pitchtbl[note + scale]);
 8001e9e:	f8df a078 	ldr.w	sl, [pc, #120]	; 8001f18 <play_note+0x49c>
  htim14.Init.Period            = 511;
 8001ea2:	f240 19ff 	movw	r9, #511	; 0x1ff
					TIM14_Config(pitchtbl[note + scale]);
 8001ea6:	f993 3000 	ldrsb.w	r3, [r3]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eaa:	f04f 0880 	mov.w	r8, #128	; 0x80
  htim14.Instance = TIM14;
 8001eae:	4d16      	ldr	r5, [pc, #88]	; (8001f08 <play_note+0x48c>)
					TIM14_Config(pitchtbl[note + scale]);
 8001eb0:	4423      	add	r3, r4
  htim14.Instance = TIM14;
 8001eb2:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <play_note+0x490>)
  HAL_TIM_Base_Init(&htim14);
 8001eb4:	4628      	mov	r0, r5
  htim14.Init.Period            = 511;
 8001eb6:	f8c5 900c 	str.w	r9, [r5, #12]
  htim14.Init.Prescaler         = period;
 8001eba:	f83a 3023 	ldrh.w	r3, [sl, r3, lsl #2]
  htim14.Init.ClockDivision     = 0;
 8001ebe:	612e      	str	r6, [r5, #16]
  htim14.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001ec0:	60ae      	str	r6, [r5, #8]
  htim14.Init.Prescaler         = period;
 8001ec2:	e9c5 2300 	strd	r2, r3, [r5]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ec6:	e9c5 6805 	strd	r6, r8, [r5, #20]
  HAL_TIM_Base_Init(&htim14);
 8001eca:	f002 f92f 	bl	800412c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim14);
 8001ece:	4628      	mov	r0, r5
 8001ed0:	f002 f9c0 	bl	8004254 <HAL_TIM_Base_Start>
  htim6.Instance = TIM6;
 8001ed4:	4d0e      	ldr	r5, [pc, #56]	; (8001f10 <play_note+0x494>)
  htim6.Init.Prescaler         = period;
 8001ed6:	f83a 2024 	ldrh.w	r2, [sl, r4, lsl #2]
  htim6.Instance = TIM6;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <play_note+0x498>)
 8001edc:	e6f3      	b.n	8001cc6 <play_note+0x24a>
	for(j=0;j<6;j++)
 8001ede:	2202      	movs	r2, #2
		if(chanstat[j] == note)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	e621      	b.n	8001b28 <play_note+0xac>
	for(j=0;j<6;j++)
 8001ee4:	2203      	movs	r2, #3
		if(chanstat[j] == note)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	e61e      	b.n	8001b28 <play_note+0xac>
	for(j=0;j<6;j++)
 8001eea:	2204      	movs	r2, #4
		if(chanstat[j] == note)
 8001eec:	4613      	mov	r3, r2
 8001eee:	e61b      	b.n	8001b28 <play_note+0xac>
	for(j=0;j<6;j++)
 8001ef0:	2205      	movs	r2, #5
		if(chanstat[j] == note)
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	e618      	b.n	8001b28 <play_note+0xac>
 8001ef6:	bf00      	nop
 8001ef8:	200016c7 	.word	0x200016c7
 8001efc:	200015f0 	.word	0x200015f0
 8001f00:	200016cc 	.word	0x200016cc
 8001f04:	40001400 	.word	0x40001400
 8001f08:	2000163c 	.word	0x2000163c
 8001f0c:	40002000 	.word	0x40002000
 8001f10:	20001464 	.word	0x20001464
 8001f14:	40001000 	.word	0x40001000
 8001f18:	0800453c 	.word	0x0800453c

08001f1c <ProcessReceivedMidiDatas>:
			uint8_t chan = midimsg & 0xf;
 8001f1c:	4b59      	ldr	r3, [pc, #356]	; (8002084 <ProcessReceivedMidiDatas+0x168>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
			if(chan == 9)return;
 8001f20:	f003 020f 	and.w	r2, r3, #15
 8001f24:	2a09      	cmp	r2, #9
 8001f26:	d07b      	beq.n	8002020 <ProcessReceivedMidiDatas+0x104>
 8001f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			switch(msgtype)
 8001f2c:	2b90      	cmp	r3, #144	; 0x90
{			
 8001f2e:	b430      	push	{r4, r5}
			switch(msgtype)
 8001f30:	d005      	beq.n	8001f3e <ProcessReceivedMidiDatas+0x22>
 8001f32:	2be0      	cmp	r3, #224	; 0xe0
 8001f34:	d039      	beq.n	8001faa <ProcessReceivedMidiDatas+0x8e>
 8001f36:	2b80      	cmp	r3, #128	; 0x80
 8001f38:	d03e      	beq.n	8001fb8 <ProcessReceivedMidiDatas+0x9c>
}
 8001f3a:	bc30      	pop	{r4, r5}
 8001f3c:	4770      	bx	lr
					notepos = key + transpose;
 8001f3e:	4a52      	ldr	r2, [pc, #328]	; (8002088 <ProcessReceivedMidiDatas+0x16c>)
 8001f40:	4b52      	ldr	r3, [pc, #328]	; (800208c <ProcessReceivedMidiDatas+0x170>)
 8001f42:	7810      	ldrb	r0, [r2, #0]
 8001f44:	781b      	ldrb	r3, [r3, #0]
					if(!velocity)
 8001f46:	4a52      	ldr	r2, [pc, #328]	; (8002090 <ProcessReceivedMidiDatas+0x174>)
					notepos = key + transpose;
 8001f48:	4418      	add	r0, r3
 8001f4a:	4b52      	ldr	r3, [pc, #328]	; (8002094 <ProcessReceivedMidiDatas+0x178>)
					if(!velocity)
 8001f4c:	7811      	ldrb	r1, [r2, #0]
					notepos = key + transpose;
 8001f4e:	b2c0      	uxtb	r0, r0
 8001f50:	7018      	strb	r0, [r3, #0]
					if(!velocity)
 8001f52:	2900      	cmp	r1, #0
 8001f54:	d16f      	bne.n	8002036 <ProcessReceivedMidiDatas+0x11a>
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 8001f56:	4b50      	ldr	r3, [pc, #320]	; (8002098 <ProcessReceivedMidiDatas+0x17c>)
	for(n=0;n<6;n++)
 8001f58:	4c50      	ldr	r4, [pc, #320]	; (800209c <ProcessReceivedMidiDatas+0x180>)
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 8001f5a:	781a      	ldrb	r2, [r3, #0]
	for(n=0;n<6;n++)
 8001f5c:	7021      	strb	r1, [r4, #0]
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 8001f5e:	4282      	cmp	r2, r0
 8001f60:	d062      	beq.n	8002028 <ProcessReceivedMidiDatas+0x10c>
 8001f62:	785a      	ldrb	r2, [r3, #1]
 8001f64:	4282      	cmp	r2, r0
 8001f66:	d07d      	beq.n	8002064 <ProcessReceivedMidiDatas+0x148>
 8001f68:	789a      	ldrb	r2, [r3, #2]
 8001f6a:	4282      	cmp	r2, r0
 8001f6c:	d07e      	beq.n	800206c <ProcessReceivedMidiDatas+0x150>
 8001f6e:	78da      	ldrb	r2, [r3, #3]
 8001f70:	4282      	cmp	r2, r0
 8001f72:	d07f      	beq.n	8002074 <ProcessReceivedMidiDatas+0x158>
 8001f74:	791a      	ldrb	r2, [r3, #4]
 8001f76:	4282      	cmp	r2, r0
 8001f78:	d053      	beq.n	8002022 <ProcessReceivedMidiDatas+0x106>
 8001f7a:	795b      	ldrb	r3, [r3, #5]
 8001f7c:	4283      	cmp	r3, r0
 8001f7e:	d07d      	beq.n	800207c <ProcessReceivedMidiDatas+0x160>
  USARTx->TDR = Value;
 8001f80:	4a47      	ldr	r2, [pc, #284]	; (80020a0 <ProcessReceivedMidiDatas+0x184>)
 8001f82:	2506      	movs	r5, #6
 8001f84:	2180      	movs	r1, #128	; 0x80
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001f86:	4613      	mov	r3, r2
 8001f88:	7025      	strb	r5, [r4, #0]
  USARTx->TDR = Value;
 8001f8a:	6291      	str	r1, [r2, #40]	; 0x28
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	0614      	lsls	r4, r2, #24
 8001f90:	d5fc      	bpl.n	8001f8c <ProcessReceivedMidiDatas+0x70>
 8001f92:	4a43      	ldr	r2, [pc, #268]	; (80020a0 <ProcessReceivedMidiDatas+0x184>)
  USARTx->TDR = Value;
 8001f94:	6298      	str	r0, [r3, #40]	; 0x28
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001f96:	69d3      	ldr	r3, [r2, #28]
 8001f98:	0619      	lsls	r1, r3, #24
 8001f9a:	d5fc      	bpl.n	8001f96 <ProcessReceivedMidiDatas+0x7a>
  USARTx->TDR = Value;
 8001f9c:	2300      	movs	r3, #0
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001f9e:	4940      	ldr	r1, [pc, #256]	; (80020a0 <ProcessReceivedMidiDatas+0x184>)
  USARTx->TDR = Value;
 8001fa0:	6293      	str	r3, [r2, #40]	; 0x28
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001fa2:	69cb      	ldr	r3, [r1, #28]
 8001fa4:	061b      	lsls	r3, r3, #24
 8001fa6:	d4c8      	bmi.n	8001f3a <ProcessReceivedMidiDatas+0x1e>
 8001fa8:	e7fb      	b.n	8001fa2 <ProcessReceivedMidiDatas+0x86>
					LocalMidiHandler(param, data);
 8001faa:	4a3e      	ldr	r2, [pc, #248]	; (80020a4 <ProcessReceivedMidiDatas+0x188>)
 8001fac:	4b3e      	ldr	r3, [pc, #248]	; (80020a8 <ProcessReceivedMidiDatas+0x18c>)
 8001fae:	7811      	ldrb	r1, [r2, #0]
 8001fb0:	7818      	ldrb	r0, [r3, #0]
}
 8001fb2:	bc30      	pop	{r4, r5}
					LocalMidiHandler(param, data);
 8001fb4:	f7ff ba62 	b.w	800147c <LocalMidiHandler>
					notepos = key + transpose;
 8001fb8:	4a34      	ldr	r2, [pc, #208]	; (800208c <ProcessReceivedMidiDatas+0x170>)
	for(n=0;n<6;n++)
 8001fba:	2100      	movs	r1, #0
					notepos = key + transpose;
 8001fbc:	4b32      	ldr	r3, [pc, #200]	; (8002088 <ProcessReceivedMidiDatas+0x16c>)
 8001fbe:	7810      	ldrb	r0, [r2, #0]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 8001fc2:	4a35      	ldr	r2, [pc, #212]	; (8002098 <ProcessReceivedMidiDatas+0x17c>)
					notepos = key + transpose;
 8001fc4:	4403      	add	r3, r0
 8001fc6:	4d33      	ldr	r5, [pc, #204]	; (8002094 <ProcessReceivedMidiDatas+0x178>)
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 8001fc8:	7810      	ldrb	r0, [r2, #0]
					notepos = key + transpose;
 8001fca:	b2db      	uxtb	r3, r3
	for(n=0;n<6;n++)
 8001fcc:	4c33      	ldr	r4, [pc, #204]	; (800209c <ProcessReceivedMidiDatas+0x180>)
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 8001fce:	4298      	cmp	r0, r3
					notepos = key + transpose;
 8001fd0:	702b      	strb	r3, [r5, #0]
	for(n=0;n<6;n++)
 8001fd2:	7021      	strb	r1, [r4, #0]
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 8001fd4:	d028      	beq.n	8002028 <ProcessReceivedMidiDatas+0x10c>
 8001fd6:	7851      	ldrb	r1, [r2, #1]
 8001fd8:	4299      	cmp	r1, r3
 8001fda:	d02f      	beq.n	800203c <ProcessReceivedMidiDatas+0x120>
 8001fdc:	7891      	ldrb	r1, [r2, #2]
 8001fde:	4299      	cmp	r1, r3
 8001fe0:	d030      	beq.n	8002044 <ProcessReceivedMidiDatas+0x128>
 8001fe2:	78d1      	ldrb	r1, [r2, #3]
 8001fe4:	4299      	cmp	r1, r3
 8001fe6:	d031      	beq.n	800204c <ProcessReceivedMidiDatas+0x130>
 8001fe8:	7911      	ldrb	r1, [r2, #4]
 8001fea:	4299      	cmp	r1, r3
 8001fec:	d032      	beq.n	8002054 <ProcessReceivedMidiDatas+0x138>
 8001fee:	7952      	ldrb	r2, [r2, #5]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d033      	beq.n	800205c <ProcessReceivedMidiDatas+0x140>
  USARTx->TDR = Value;
 8001ff4:	492a      	ldr	r1, [pc, #168]	; (80020a0 <ProcessReceivedMidiDatas+0x184>)
 8001ff6:	2506      	movs	r5, #6
 8001ff8:	2080      	movs	r0, #128	; 0x80
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001ffa:	460a      	mov	r2, r1
 8001ffc:	7025      	strb	r5, [r4, #0]
  USARTx->TDR = Value;
 8001ffe:	6288      	str	r0, [r1, #40]	; 0x28
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8002000:	69d1      	ldr	r1, [r2, #28]
 8002002:	0609      	lsls	r1, r1, #24
 8002004:	d5fc      	bpl.n	8002000 <ProcessReceivedMidiDatas+0xe4>
 8002006:	4926      	ldr	r1, [pc, #152]	; (80020a0 <ProcessReceivedMidiDatas+0x184>)
  USARTx->TDR = Value;
 8002008:	6293      	str	r3, [r2, #40]	; 0x28
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800200a:	69cb      	ldr	r3, [r1, #28]
 800200c:	061b      	lsls	r3, r3, #24
 800200e:	d5fc      	bpl.n	800200a <ProcessReceivedMidiDatas+0xee>
  USARTx->TDR = Value;
 8002010:	2300      	movs	r3, #0
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8002012:	4a23      	ldr	r2, [pc, #140]	; (80020a0 <ProcessReceivedMidiDatas+0x184>)
  USARTx->TDR = Value;
 8002014:	628b      	str	r3, [r1, #40]	; 0x28
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8002016:	69d3      	ldr	r3, [r2, #28]
 8002018:	061d      	lsls	r5, r3, #24
 800201a:	d5fc      	bpl.n	8002016 <ProcessReceivedMidiDatas+0xfa>
}
 800201c:	bc30      	pop	{r4, r5}
 800201e:	4770      	bx	lr
 8002020:	4770      	bx	lr
	for(n=0;n<6;n++)
 8002022:	2304      	movs	r3, #4
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 8002024:	4619      	mov	r1, r3
 8002026:	7023      	strb	r3, [r4, #0]
			vcfadsr[n] = 4; // Set the voice VCF ADSR to release state
 8002028:	2304      	movs	r3, #4
 800202a:	4820      	ldr	r0, [pc, #128]	; (80020ac <ProcessReceivedMidiDatas+0x190>)
			vcaadsr[n] = 4; // Set the voice VCA ADSR to release state
 800202c:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <ProcessReceivedMidiDatas+0x194>)
			vcfadsr[n] = 4; // Set the voice VCF ADSR to release state
 800202e:	5443      	strb	r3, [r0, r1]
			vcaadsr[n] = 4; // Set the voice VCA ADSR to release state
 8002030:	5453      	strb	r3, [r2, r1]
}
 8002032:	bc30      	pop	{r4, r5}
 8002034:	4770      	bx	lr
 8002036:	bc30      	pop	{r4, r5}
						play_note(notepos, velocity);
 8002038:	f7ff bd20 	b.w	8001a7c <play_note>
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 800203c:	2101      	movs	r1, #1
	for(n=0;n<6;n++)
 800203e:	460b      	mov	r3, r1
 8002040:	7023      	strb	r3, [r4, #0]
 8002042:	e7f1      	b.n	8002028 <ProcessReceivedMidiDatas+0x10c>
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 8002044:	2102      	movs	r1, #2
	for(n=0;n<6;n++)
 8002046:	460b      	mov	r3, r1
 8002048:	7023      	strb	r3, [r4, #0]
 800204a:	e7ed      	b.n	8002028 <ProcessReceivedMidiDatas+0x10c>
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 800204c:	2103      	movs	r1, #3
	for(n=0;n<6;n++)
 800204e:	460b      	mov	r3, r1
 8002050:	7023      	strb	r3, [r4, #0]
 8002052:	e7e9      	b.n	8002028 <ProcessReceivedMidiDatas+0x10c>
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 8002054:	2104      	movs	r1, #4
	for(n=0;n<6;n++)
 8002056:	460b      	mov	r3, r1
 8002058:	7023      	strb	r3, [r4, #0]
 800205a:	e7e5      	b.n	8002028 <ProcessReceivedMidiDatas+0x10c>
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 800205c:	2105      	movs	r1, #5
	for(n=0;n<6;n++)
 800205e:	460b      	mov	r3, r1
 8002060:	7023      	strb	r3, [r4, #0]
 8002062:	e7e1      	b.n	8002028 <ProcessReceivedMidiDatas+0x10c>
 8002064:	2301      	movs	r3, #1
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 8002066:	4619      	mov	r1, r3
 8002068:	7023      	strb	r3, [r4, #0]
 800206a:	e7dd      	b.n	8002028 <ProcessReceivedMidiDatas+0x10c>
	for(n=0;n<6;n++)
 800206c:	2302      	movs	r3, #2
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 800206e:	4619      	mov	r1, r3
 8002070:	7023      	strb	r3, [r4, #0]
 8002072:	e7d9      	b.n	8002028 <ProcessReceivedMidiDatas+0x10c>
	for(n=0;n<6;n++)
 8002074:	2303      	movs	r3, #3
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 8002076:	4619      	mov	r1, r3
 8002078:	7023      	strb	r3, [r4, #0]
 800207a:	e7d5      	b.n	8002028 <ProcessReceivedMidiDatas+0x10c>
	for(n=0;n<6;n++)
 800207c:	2305      	movs	r3, #5
		if(note == chanstat[n]) // Is this the voice that is playing the note?
 800207e:	4619      	mov	r1, r3
 8002080:	7023      	strb	r3, [r4, #0]
 8002082:	e7d1      	b.n	8002028 <ProcessReceivedMidiDatas+0x10c>
 8002084:	200015ef 	.word	0x200015ef
 8002088:	200015b0 	.word	0x200015b0
 800208c:	20000249 	.word	0x20000249
 8002090:	20000490 	.word	0x20000490
 8002094:	20001634 	.word	0x20001634
 8002098:	20000000 	.word	0x20000000
 800209c:	200001c5 	.word	0x200001c5
 80020a0:	40004400 	.word	0x40004400
 80020a4:	20001461 	.word	0x20001461
 80020a8:	200001be 	.word	0x200001be
 80020ac:	20000148 	.word	0x20000148
 80020b0:	20000128 	.word	0x20000128

080020b4 <Configure_USARTx>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80020b4:	4882      	ldr	r0, [pc, #520]	; (80022c0 <Configure_USARTx+0x20c>)
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f44f 7280 	mov.w	r2, #256	; 0x100
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80020ba:	4b82      	ldr	r3, [pc, #520]	; (80022c4 <Configure_USARTx+0x210>)
 80020bc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80020be:	f041 0108 	orr.w	r1, r1, #8
{
 80020c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020c6:	6301      	str	r1, [r0, #48]	; 0x30
 80020c8:	b082      	sub	sp, #8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80020ca:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80020cc:	f001 0108 	and.w	r1, r1, #8
 80020d0:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
 80020d2:	9901      	ldr	r1, [sp, #4]
 80020d4:	f8d3 c000 	ldr.w	ip, [r3]
 80020d8:	fa92 f7a2 	rbit	r7, r2
 80020dc:	fab7 f787 	clz	r7, r7
 80020e0:	fa92 f1a2 	rbit	r1, r2
 80020e4:	2403      	movs	r4, #3
 80020e6:	fab1 f181 	clz	r1, r1
 80020ea:	007f      	lsls	r7, r7, #1
 80020ec:	2602      	movs	r6, #2
 80020ee:	0049      	lsls	r1, r1, #1
 80020f0:	2501      	movs	r5, #1
 80020f2:	fa04 f707 	lsl.w	r7, r4, r7
 80020f6:	fa06 f101 	lsl.w	r1, r6, r1
 80020fa:	ea2c 0707 	bic.w	r7, ip, r7
 80020fe:	4339      	orrs	r1, r7
 8002100:	6019      	str	r1, [r3, #0]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002102:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8002106:	fa95 fea5 	rbit	lr, r5
 800210a:	fabe fe8e 	clz	lr, lr
 800210e:	fa95 f1a5 	rbit	r1, r5
 8002112:	f04f 0c0f 	mov.w	ip, #15
 8002116:	fa0e fe06 	lsl.w	lr, lr, r6
 800211a:	fab1 f181 	clz	r1, r1
 800211e:	2707      	movs	r7, #7
 8002120:	fa0c fe0e 	lsl.w	lr, ip, lr
 8002124:	40b1      	lsls	r1, r6
 8002126:	ea28 0e0e 	bic.w	lr, r8, lr
 800212a:	fa07 f101 	lsl.w	r1, r7, r1
 800212e:	ea4e 0101 	orr.w	r1, lr, r1
 8002132:	6259      	str	r1, [r3, #36]	; 0x24
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002134:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8002138:	fa92 fea2 	rbit	lr, r2
 800213c:	fabe fe8e 	clz	lr, lr
 8002140:	fa92 f1a2 	rbit	r1, r2
 8002144:	fa0e fe05 	lsl.w	lr, lr, r5
 8002148:	fab1 f181 	clz	r1, r1
 800214c:	fa04 fe0e 	lsl.w	lr, r4, lr
 8002150:	40a9      	lsls	r1, r5
 8002152:	ea28 0e0e 	bic.w	lr, r8, lr
 8002156:	fa06 f101 	lsl.w	r1, r6, r1
 800215a:	ea4e 0101 	orr.w	r1, lr, r1
 800215e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002160:	6859      	ldr	r1, [r3, #4]
 8002162:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002166:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002168:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800216c:	fa92 f8a2 	rbit	r8, r2
 8002170:	fab8 f888 	clz	r8, r8
 8002174:	fa92 f2a2 	rbit	r2, r2
 8002178:	fa08 f805 	lsl.w	r8, r8, r5
 800217c:	fab2 f282 	clz	r2, r2
 8002180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002184:	fa04 f808 	lsl.w	r8, r4, r8
 8002188:	40aa      	lsls	r2, r5
 800218a:	ea2e 0e08 	bic.w	lr, lr, r8
 800218e:	fa05 f202 	lsl.w	r2, r5, r2
 8002192:	ea4e 0202 	orr.w	r2, lr, r2
 8002196:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002198:	f8d3 8000 	ldr.w	r8, [r3]
 800219c:	fa91 fea1 	rbit	lr, r1
 80021a0:	fabe fe8e 	clz	lr, lr
 80021a4:	fa91 f2a1 	rbit	r2, r1
 80021a8:	fa0e fe05 	lsl.w	lr, lr, r5
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	fa04 fe0e 	lsl.w	lr, r4, lr
 80021b4:	40aa      	lsls	r2, r5
 80021b6:	ea28 0e0e 	bic.w	lr, r8, lr
 80021ba:	fa06 f202 	lsl.w	r2, r6, r2
 80021be:	ea4e 0202 	orr.w	r2, lr, r2
 80021c2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80021c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021c6:	fa96 f8a6 	rbit	r8, r6
 80021ca:	fab8 f888 	clz	r8, r8
 80021ce:	fa96 fea6 	rbit	lr, r6
 80021d2:	fa08 f806 	lsl.w	r8, r8, r6
 80021d6:	fabe fe8e 	clz	lr, lr
 80021da:	fa0c fc08 	lsl.w	ip, ip, r8
 80021de:	fa0e fe06 	lsl.w	lr, lr, r6
 80021e2:	ea22 0c0c 	bic.w	ip, r2, ip
 80021e6:	fa07 f70e 	lsl.w	r7, r7, lr
 80021ea:	ea4c 0707 	orr.w	r7, ip, r7
 80021ee:	625f      	str	r7, [r3, #36]	; 0x24
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80021f0:	689f      	ldr	r7, [r3, #8]
 80021f2:	fa91 f2a1 	rbit	r2, r1
 80021f6:	fab2 f282 	clz	r2, r2
 80021fa:	fa91 fca1 	rbit	ip, r1
 80021fe:	40aa      	lsls	r2, r5
 8002200:	fabc fc8c 	clz	ip, ip
 8002204:	fa04 f202 	lsl.w	r2, r4, r2
 8002208:	fa0c fc05 	lsl.w	ip, ip, r5
 800220c:	ea27 0202 	bic.w	r2, r7, r2
 8002210:	fa06 f60c 	lsl.w	r6, r6, ip
 8002214:	4316      	orrs	r6, r2
 8002216:	609e      	str	r6, [r3, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800221e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002220:	68de      	ldr	r6, [r3, #12]
 8002222:	fa91 f2a1 	rbit	r2, r1
 8002226:	fab2 f282 	clz	r2, r2
 800222a:	fa91 f1a1 	rbit	r1, r1
 800222e:	40aa      	lsls	r2, r5
 8002230:	fab1 f181 	clz	r1, r1
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	4f24      	ldr	r7, [pc, #144]	; (80022c8 <Configure_USARTx+0x214>)
 8002236:	f04f 0c00 	mov.w	ip, #0
 800223a:	40a9      	lsls	r1, r5
 800223c:	4094      	lsls	r4, r2
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223e:	f04f 0e80 	mov.w	lr, #128	; 0x80
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8002242:	4a22      	ldr	r2, [pc, #136]	; (80022cc <Configure_USARTx+0x218>)
 8002244:	ea26 0404 	bic.w	r4, r6, r4
 8002248:	fa05 f101 	lsl.w	r1, r5, r1
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800224c:	4d20      	ldr	r5, [pc, #128]	; (80022d0 <Configure_USARTx+0x21c>)
 800224e:	4321      	orrs	r1, r4
  LL_USART_SetBaudRate(USARTx_INSTANCE, SystemCoreClock/APB_Div, LL_USART_OVERSAMPLING_16, 115200); 
 8002250:	4e20      	ldr	r6, [pc, #128]	; (80022d4 <Configure_USARTx+0x220>)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002252:	4c21      	ldr	r4, [pc, #132]	; (80022d8 <Configure_USARTx+0x224>)
 8002254:	60d9      	str	r1, [r3, #12]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002256:	f887 c327 	strb.w	ip, [r7, #807]	; 0x327
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225a:	f8c7 e004 	str.w	lr, [r7, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800225e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6403      	str	r3, [r0, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002266:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800226e:	9b00      	ldr	r3, [sp, #0]
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8002270:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8002274:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002278:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800227c:	6813      	ldr	r3, [r2, #0]
 800227e:	f043 030c 	orr.w	r3, r3, #12
 8002282:	6013      	str	r3, [r2, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	401d      	ands	r5, r3
 8002288:	6015      	str	r5, [r2, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800228a:	6851      	ldr	r1, [r2, #4]
 800228c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002290:	6051      	str	r1, [r2, #4]
 8002292:	6833      	ldr	r3, [r6, #0]
 8002294:	089b      	lsrs	r3, r3, #2
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002296:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800229a:	fba4 1303 	umull	r1, r3, r4, r3
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	60d3      	str	r3, [r2, #12]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80022a2:	6813      	ldr	r3, [r2, #0]
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6013      	str	r3, [r2, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80022aa:	6813      	ldr	r3, [r2, #0]
 80022ac:	f043 0320 	orr.w	r3, r3, #32
 80022b0:	6013      	str	r3, [r2, #0]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80022b2:	6893      	ldr	r3, [r2, #8]
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6093      	str	r3, [r2, #8]
}
 80022ba:	b002      	add	sp, #8
 80022bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	e000e100 	.word	0xe000e100
 80022cc:	40004800 	.word	0x40004800
 80022d0:	efffe9ff 	.word	0xefffe9ff
 80022d4:	20000028 	.word	0x20000028
 80022d8:	91a2b3c5 	.word	0x91a2b3c5

080022dc <Configure_USARTy>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 80022dc:	487e      	ldr	r0, [pc, #504]	; (80024d8 <Configure_USARTy+0x1fc>)
 80022de:	2220      	movs	r2, #32
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80022e0:	4b7e      	ldr	r3, [pc, #504]	; (80024dc <Configure_USARTy+0x200>)
 80022e2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80022e4:	f041 0108 	orr.w	r1, r1, #8
{
 80022e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ec:	6301      	str	r1, [r0, #48]	; 0x30
 80022ee:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80022f0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80022f2:	f001 0108 	and.w	r1, r1, #8
 80022f6:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
 80022f8:	9901      	ldr	r1, [sp, #4]
 80022fa:	681f      	ldr	r7, [r3, #0]
 80022fc:	fa92 f6a2 	rbit	r6, r2
 8002300:	fab6 f686 	clz	r6, r6
 8002304:	fa92 f1a2 	rbit	r1, r2
 8002308:	2403      	movs	r4, #3
 800230a:	fab1 f181 	clz	r1, r1
 800230e:	0076      	lsls	r6, r6, #1
 8002310:	2502      	movs	r5, #2
 8002312:	0049      	lsls	r1, r1, #1
 8002314:	fa04 f606 	lsl.w	r6, r4, r6
 8002318:	fa05 f101 	lsl.w	r1, r5, r1
 800231c:	ea27 0606 	bic.w	r6, r7, r6
 8002320:	4331      	orrs	r1, r6
 8002322:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002324:	f8d3 e020 	ldr.w	lr, [r3, #32]
 8002328:	fa92 f6a2 	rbit	r6, r2
 800232c:	fab6 f686 	clz	r6, r6
 8002330:	fa92 f1a2 	rbit	r1, r2
 8002334:	f04f 0c0f 	mov.w	ip, #15
 8002338:	40ae      	lsls	r6, r5
 800233a:	fab1 f181 	clz	r1, r1
 800233e:	2707      	movs	r7, #7
 8002340:	fa0c f606 	lsl.w	r6, ip, r6
 8002344:	40a9      	lsls	r1, r5
 8002346:	ea2e 0606 	bic.w	r6, lr, r6
 800234a:	fa07 f101 	lsl.w	r1, r7, r1
 800234e:	4331      	orrs	r1, r6
 8002350:	6219      	str	r1, [r3, #32]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002352:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8002356:	fa92 f6a2 	rbit	r6, r2
 800235a:	fab6 f686 	clz	r6, r6
 800235e:	fa92 f1a2 	rbit	r1, r2
 8002362:	fab1 f181 	clz	r1, r1
 8002366:	0076      	lsls	r6, r6, #1
 8002368:	0049      	lsls	r1, r1, #1
 800236a:	fa04 f606 	lsl.w	r6, r4, r6
 800236e:	fa05 f101 	lsl.w	r1, r5, r1
 8002372:	ea2e 0606 	bic.w	r6, lr, r6
 8002376:	4331      	orrs	r1, r6
 8002378:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	f021 0120 	bic.w	r1, r1, #32
 8002380:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002382:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8002386:	fa92 f8a2 	rbit	r8, r2
 800238a:	fab8 f888 	clz	r8, r8
 800238e:	fa92 f2a2 	rbit	r2, r2
 8002392:	2601      	movs	r6, #1
 8002394:	fab2 f282 	clz	r2, r2
 8002398:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800239c:	2140      	movs	r1, #64	; 0x40
 800239e:	40b2      	lsls	r2, r6
 80023a0:	fa04 f808 	lsl.w	r8, r4, r8
 80023a4:	fa06 f202 	lsl.w	r2, r6, r2
 80023a8:	ea2e 0e08 	bic.w	lr, lr, r8
 80023ac:	ea4e 0202 	orr.w	r2, lr, r2
 80023b0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80023b2:	f8d3 8000 	ldr.w	r8, [r3]
 80023b6:	fa91 fea1 	rbit	lr, r1
 80023ba:	fabe fe8e 	clz	lr, lr
 80023be:	fa91 f2a1 	rbit	r2, r1
 80023c2:	fa0e fe06 	lsl.w	lr, lr, r6
 80023c6:	fab2 f282 	clz	r2, r2
 80023ca:	fa04 fe0e 	lsl.w	lr, r4, lr
 80023ce:	40b2      	lsls	r2, r6
 80023d0:	ea28 0e0e 	bic.w	lr, r8, lr
 80023d4:	fa05 f202 	lsl.w	r2, r5, r2
 80023d8:	ea4e 0202 	orr.w	r2, lr, r2
 80023dc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80023de:	6a1a      	ldr	r2, [r3, #32]
 80023e0:	fa91 f8a1 	rbit	r8, r1
 80023e4:	fab8 f888 	clz	r8, r8
 80023e8:	fa91 fea1 	rbit	lr, r1
 80023ec:	fa08 f805 	lsl.w	r8, r8, r5
 80023f0:	fabe fe8e 	clz	lr, lr
 80023f4:	fa0c fc08 	lsl.w	ip, ip, r8
 80023f8:	fa0e fe05 	lsl.w	lr, lr, r5
 80023fc:	ea22 0c0c 	bic.w	ip, r2, ip
 8002400:	fa07 f70e 	lsl.w	r7, r7, lr
 8002404:	ea4c 0707 	orr.w	r7, ip, r7
 8002408:	621f      	str	r7, [r3, #32]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800240a:	689f      	ldr	r7, [r3, #8]
 800240c:	fa91 f2a1 	rbit	r2, r1
 8002410:	fab2 f282 	clz	r2, r2
 8002414:	fa91 fca1 	rbit	ip, r1
 8002418:	40b2      	lsls	r2, r6
 800241a:	fabc fc8c 	clz	ip, ip
 800241e:	fa04 f202 	lsl.w	r2, r4, r2
 8002422:	fa0c fc06 	lsl.w	ip, ip, r6
 8002426:	ea27 0202 	bic.w	r2, r7, r2
 800242a:	fa05 f50c 	lsl.w	r5, r5, ip
 800242e:	4315      	orrs	r5, r2
 8002430:	609d      	str	r5, [r3, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002438:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800243a:	68dd      	ldr	r5, [r3, #12]
 800243c:	fa91 f2a1 	rbit	r2, r1
 8002440:	fab2 f282 	clz	r2, r2
 8002444:	fa91 f7a1 	rbit	r7, r1
 8002448:	40b2      	lsls	r2, r6
 800244a:	fab7 f787 	clz	r7, r7
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80024f0 <Configure_USARTy+0x214>
 8002452:	f04f 0e00 	mov.w	lr, #0
 8002456:	40b7      	lsls	r7, r6
 8002458:	4094      	lsls	r4, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800245a:	4a21      	ldr	r2, [pc, #132]	; (80024e0 <Configure_USARTy+0x204>)
 800245c:	40be      	lsls	r6, r7
 800245e:	ea25 0404 	bic.w	r4, r5, r4
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8002462:	4d20      	ldr	r5, [pc, #128]	; (80024e4 <Configure_USARTy+0x208>)
 8002464:	4334      	orrs	r4, r6
  LL_USART_SetBaudRate(USARTy_INSTANCE, SystemCoreClock/APB_Div, LL_USART_OVERSAMPLING_16, 921600);
 8002466:	4f20      	ldr	r7, [pc, #128]	; (80024e8 <Configure_USARTy+0x20c>)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002468:	4e20      	ldr	r6, [pc, #128]	; (80024ec <Configure_USARTy+0x210>)
 800246a:	60dc      	str	r4, [r3, #12]
 800246c:	f88c e326 	strb.w	lr, [ip, #806]	; 0x326
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002470:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002474:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247a:	6403      	str	r3, [r0, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800247c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002484:	9b00      	ldr	r3, [sp, #0]
 8002486:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800248a:	f023 030c 	bic.w	r3, r3, #12
 800248e:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8002492:	6813      	ldr	r3, [r2, #0]
 8002494:	f043 030c 	orr.w	r3, r3, #12
 8002498:	6013      	str	r3, [r2, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800249a:	6813      	ldr	r3, [r2, #0]
 800249c:	401d      	ands	r5, r3
 800249e:	6015      	str	r5, [r2, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80024a0:	6851      	ldr	r1, [r2, #4]
 80024a2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80024a6:	6051      	str	r1, [r2, #4]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	089b      	lsrs	r3, r3, #2
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80024ac:	f503 23e1 	add.w	r3, r3, #460800	; 0x70800
 80024b0:	fba6 1303 	umull	r1, r3, r6, r3
 80024b4:	0cdb      	lsrs	r3, r3, #19
 80024b6:	60d3      	str	r3, [r2, #12]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80024b8:	6813      	ldr	r3, [r2, #0]
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6013      	str	r3, [r2, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80024c0:	6813      	ldr	r3, [r2, #0]
 80024c2:	f043 0320 	orr.w	r3, r3, #32
 80024c6:	6013      	str	r3, [r2, #0]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80024c8:	6893      	ldr	r3, [r2, #8]
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6093      	str	r3, [r2, #8]
}
 80024d0:	b002      	add	sp, #8
 80024d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020c00 	.word	0x40020c00
 80024e0:	40004400 	.word	0x40004400
 80024e4:	efffe9ff 	.word	0xefffe9ff
 80024e8:	20000028 	.word	0x20000028
 80024ec:	91a2b3c5 	.word	0x91a2b3c5
 80024f0:	e000e100 	.word	0xe000e100

080024f4 <SystemClock_Config>:
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f4:	4a28      	ldr	r2, [pc, #160]	; (8002598 <SystemClock_Config+0xa4>)
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024f6:	4829      	ldr	r0, [pc, #164]	; (800259c <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f8:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024fa:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{  
 8002500:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	6411      	str	r1, [r2, #64]	; 0x40
{  
 8002504:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	6c12      	ldr	r2, [r2, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002508:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16; // Variable +/- 50khz steps from 0 to 31
 800250a:	2610      	movs	r6, #16
  RCC_OscInitStruct.PLL.PLLM = 8;
 800250c:	2508      	movs	r5, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002512:	60c4      	str	r4, [r0, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16; // Variable +/- 50khz steps from 0 to 31
 8002514:	6106      	str	r6, [r0, #16]
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002516:	2109      	movs	r1, #9
  __HAL_RCC_PWR_CLK_ENABLE();
 8002518:	9200      	str	r2, [sp, #0]
  RCC_OscInitStruct.PLL.PLLN = 216;
 800251a:	24d8      	movs	r4, #216	; 0xd8
  __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	9a00      	ldr	r2, [sp, #0]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800251e:	6205      	str	r5, [r0, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002520:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002522:	681a      	ldr	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002524:	62c1      	str	r1, [r0, #44]	; 0x2c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002526:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLN = 216;
 800252a:	6244      	str	r4, [r0, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800252c:	6185      	str	r5, [r0, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800252e:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002534:	6285      	str	r5, [r0, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002536:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800253a:	6005      	str	r5, [r0, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800253c:	61c4      	str	r4, [r0, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	9b01      	ldr	r3, [sp, #4]
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002542:	f001 f885 	bl	8003650 <HAL_RCC_OscConfig>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002546:	f001 f847 	bl	80035d8 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800254a:	220f      	movs	r2, #15
 800254c:	4815      	ldr	r0, [pc, #84]	; (80025a4 <SystemClock_Config+0xb0>)
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800254e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002552:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002554:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002556:	6045      	str	r5, [r0, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002558:	6084      	str	r4, [r0, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800255a:	e9c0 3303 	strd	r3, r3, [r0, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800255e:	f001 fa49 	bl	80039f4 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002562:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002566:	4810      	ldr	r0, [pc, #64]	; (80025a8 <SystemClock_Config+0xb4>)
 8002568:	6003      	str	r3, [r0, #0]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800256a:	67c4      	str	r4, [r0, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800256c:	f001 fb1a 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002570:	f001 fb12 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <SystemClock_Config+0xb8>)
 8002576:	fba3 3000 	umull	r3, r0, r3, r0
 800257a:	0980      	lsrs	r0, r0, #6
 800257c:	f000 fe2e 	bl	80031dc <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002580:	2004      	movs	r0, #4
 8002582:	f000 fe43 	bl	800320c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002586:	4622      	mov	r2, r4
 8002588:	4621      	mov	r1, r4
 800258a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800258e:	b002      	add	sp, #8
 8002590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002594:	f000 bdda 	b.w	800314c <HAL_NVIC_SetPriority>
 8002598:	40023800 	.word	0x40023800
 800259c:	20000430 	.word	0x20000430
 80025a0:	40007000 	.word	0x40007000
 80025a4:	200015b4 	.word	0x200015b4
 80025a8:	200014a8 	.word	0x200014a8
 80025ac:	10624dd3 	.word	0x10624dd3

080025b0 <DAC_Config>:
{
 80025b0:	b570      	push	{r4, r5, r6, lr}
	DacHandle.Instance = DACx;
 80025b2:	4c0f      	ldr	r4, [pc, #60]	; (80025f0 <DAC_Config+0x40>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80025b4:	2500      	movs	r5, #0
	DacHandle.Instance = DACx;
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <DAC_Config+0x44>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80025b8:	4e0f      	ldr	r6, [pc, #60]	; (80025f8 <DAC_Config+0x48>)
  if (HAL_DAC_Init(&DacHandle) != HAL_OK)
 80025ba:	4620      	mov	r0, r4
	DacHandle.Instance = DACx;
 80025bc:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&DacHandle) != HAL_OK)
 80025be:	f000 fe37 	bl	8003230 <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&DacHandle, &sConfig, DACx_CHANNEL) != HAL_OK)
 80025c2:	4631      	mov	r1, r6
 80025c4:	462a      	mov	r2, r5
 80025c6:	4620      	mov	r0, r4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80025c8:	e9c6 5500 	strd	r5, r5, [r6]
  if (HAL_DAC_ConfigChannel(&DacHandle, &sConfig, DACx_CHANNEL) != HAL_OK)
 80025cc:	f000 fe78 	bl	80032c0 <HAL_DAC_ConfigChannel>
	if (HAL_DAC_ConfigChannel(&DacHandle, &sConfig, DACy_CHANNEL) != HAL_OK)
 80025d0:	4631      	mov	r1, r6
 80025d2:	4620      	mov	r0, r4
 80025d4:	2210      	movs	r2, #16
 80025d6:	f000 fe73 	bl	80032c0 <HAL_DAC_ConfigChannel>
  if (HAL_DAC_Start(&DacHandle, DACx_CHANNEL) != HAL_OK)
 80025da:	4629      	mov	r1, r5
 80025dc:	4620      	mov	r0, r4
 80025de:	f000 fe3d 	bl	800325c <HAL_DAC_Start>
	if (HAL_DAC_Start(&DacHandle, DACy_CHANNEL) != HAL_OK)
 80025e2:	4620      	mov	r0, r4
 80025e4:	2110      	movs	r1, #16
}
 80025e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (HAL_DAC_Start(&DacHandle, DACy_CHANNEL) != HAL_OK)
 80025ea:	f000 be37 	b.w	800325c <HAL_DAC_Start>
 80025ee:	bf00      	nop
 80025f0:	2000144c 	.word	0x2000144c
 80025f4:	40007400 	.word	0x40007400
 80025f8:	200015e4 	.word	0x200015e4

080025fc <enable_backup_sram>:
{
 80025fc:	b510      	push	{r4, lr}
    __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	4c0d      	ldr	r4, [pc, #52]	; (8002634 <enable_backup_sram+0x38>)
{
 8002600:	b082      	sub	sp, #8
    HAL_PWR_EnableBkUpAccess();
 8002602:	f000 ffc3 	bl	800358c <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	6423      	str	r3, [r4, #64]	; 0x40
 800260e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	9b00      	ldr	r3, [sp, #0]
    HAL_PWREx_EnableBkUpReg();
 8002618:	f000 ffc0 	bl	800359c <HAL_PWREx_EnableBkUpReg>
		__HAL_RCC_BKPSRAM_CLK_ENABLE();
 800261c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800261e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002622:	6323      	str	r3, [r4, #48]	; 0x30
 8002624:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	9b01      	ldr	r3, [sp, #4]
}
 800262e:	b002      	add	sp, #8
 8002630:	bd10      	pop	{r4, pc}
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800

08002638 <InitPatch>:
	paramvalue[0] = 64;			/* Set pitch bend to center */
 8002638:	4913      	ldr	r1, [pc, #76]	; (8002688 <InitPatch+0x50>)
 800263a:	2200      	movs	r2, #0
	for(storecount=0;storecount<32;storecount++)
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <InitPatch+0x54>)
	paramvalue[0] = 64;			/* Set pitch bend to center */
 800263e:	2078      	movs	r0, #120	; 0x78
{	
 8002640:	b470      	push	{r4, r5, r6}
	paramvalue[0] = 64;			/* Set pitch bend to center */
 8002642:	4c13      	ldr	r4, [pc, #76]	; (8002690 <InitPatch+0x58>)
 8002644:	f04f 1640 	mov.w	r6, #4194368	; 0x400040
	for(storecount=0;storecount<32;storecount++)
 8002648:	601a      	str	r2, [r3, #0]
	paramvalue[0] = 64;			/* Set pitch bend to center */
 800264a:	61ca      	str	r2, [r1, #28]
 800264c:	4a11      	ldr	r2, [pc, #68]	; (8002694 <InitPatch+0x5c>)
 800264e:	4d12      	ldr	r5, [pc, #72]	; (8002698 <InitPatch+0x60>)
 8002650:	608c      	str	r4, [r1, #8]
 8002652:	f104 6484 	add.w	r4, r4, #69206016	; 0x4200000
 8002656:	60ca      	str	r2, [r1, #12]
	for(storecount=0;storecount<32;storecount++)
 8002658:	681a      	ldr	r2, [r3, #0]
	paramvalue[0] = 64;			/* Set pitch bend to center */
 800265a:	f504 341d 	add.w	r4, r4, #160768	; 0x27400
 800265e:	604d      	str	r5, [r1, #4]
	for(storecount=0;storecount<32;storecount++)
 8002660:	2a1f      	cmp	r2, #31
	paramvalue[0] = 64;			/* Set pitch bend to center */
 8002662:	4d0e      	ldr	r5, [pc, #56]	; (800269c <InitPatch+0x64>)
 8002664:	600e      	str	r6, [r1, #0]
 8002666:	610d      	str	r5, [r1, #16]
 8002668:	614c      	str	r4, [r1, #20]
 800266a:	6188      	str	r0, [r1, #24]
	for(storecount=0;storecount<32;storecount++)
 800266c:	d80a      	bhi.n	8002684 <InitPatch+0x4c>
  *(__IO uint8_t *) (WRITE_READ_ADDR + l_addr) = l_data;
 800266e:	4c0c      	ldr	r4, [pc, #48]	; (80026a0 <InitPatch+0x68>)
		writeBkpSram(storecount + patchnumber, paramvalue[storecount]);
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	5c08      	ldrb	r0, [r1, r0]
  *(__IO uint8_t *) (WRITE_READ_ADDR + l_addr) = l_data;
 8002676:	5510      	strb	r0, [r2, r4]
	for(storecount=0;storecount<32;storecount++)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	3201      	adds	r2, #1
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2a1f      	cmp	r2, #31
 8002682:	d9f5      	bls.n	8002670 <InitPatch+0x38>
}
 8002684:	bc70      	pop	{r4, r5, r6}
 8002686:	4770      	bx	lr
 8002688:	20000464 	.word	0x20000464
 800268c:	20001538 	.word	0x20001538
 8002690:	1c1e007f 	.word	0x1c1e007f
 8002694:	7f140008 	.word	0x7f140008
 8002698:	1f401040 	.word	0x1f401040
 800269c:	30404008 	.word	0x30404008
 80026a0:	40024000 	.word	0x40024000

080026a4 <GetPatch>:
	for(loadcount=3;loadcount<28;loadcount++)
 80026a4:	4b90      	ldr	r3, [pc, #576]	; (80028e8 <GetPatch+0x244>)
 80026a6:	2203      	movs	r2, #3
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2a1b      	cmp	r2, #27
 80026ae:	f200 8119 	bhi.w	80028e4 <GetPatch+0x240>
 80026b2:	0140      	lsls	r0, r0, #5
			lfo4rate = (128 - u_data) << 2;
 80026b4:	f8df c29c 	ldr.w	ip, [pc, #668]	; 8002954 <GetPatch+0x2b0>
			vcfenvlvl = (((float)(u_data)) * 0.007874f);
 80026b8:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80028ec <GetPatch+0x248>
{
 80026bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c0:	4c8b      	ldr	r4, [pc, #556]	; (80028f0 <GetPatch+0x24c>)
  i_retval =  *(__IO uint8_t *) (WRITE_READ_ADDR + l_addr);
 80026c2:	4d8c      	ldr	r5, [pc, #560]	; (80028f4 <GetPatch+0x250>)
			pwm2 = u_data;
 80026c4:	f8df a290 	ldr.w	sl, [pc, #656]	; 8002958 <GetPatch+0x2b4>
			pwm = u_data;
 80026c8:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800295c <GetPatch+0x2b8>
			vcf = u_data;
 80026cc:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8002960 <GetPatch+0x2bc>
			lfo3rate = (128 - u_data) << 2;
 80026d0:	f8df e290 	ldr.w	lr, [pc, #656]	; 8002964 <GetPatch+0x2c0>
			lfo2rate = (128 - u_data) << 2;
 80026d4:	4f88      	ldr	r7, [pc, #544]	; (80028f8 <GetPatch+0x254>)
			lfo1rate = (128 - u_data) << 2; 
 80026d6:	4e89      	ldr	r6, [pc, #548]	; (80028fc <GetPatch+0x258>)
		paramvalue[loadcount] = readBkpSram(loadcount + patchnumber);
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	6819      	ldr	r1, [r3, #0]
  i_retval =  *(__IO uint8_t *) (WRITE_READ_ADDR + l_addr);
 80026dc:	442a      	add	r2, r5
 80026de:	f812 b000 	ldrb.w	fp, [r2, r0]
		ParamUpdate(loadcount, paramvalue[loadcount]);
 80026e2:	681a      	ldr	r2, [r3, #0]
		paramvalue[loadcount] = readBkpSram(loadcount + patchnumber);
 80026e4:	f804 b001 	strb.w	fp, [r4, r1]
		ParamUpdate(loadcount, paramvalue[loadcount]);
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	6819      	ldr	r1, [r3, #0]
 80026ec:	5c61      	ldrb	r1, [r4, r1]
	switch(u_param)
 80026ee:	2a1b      	cmp	r2, #27
 80026f0:	d81f      	bhi.n	8002732 <GetPatch+0x8e>
 80026f2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80026f6:	00f4      	.short	0x00f4
 80026f8:	00e800eb 	.word	0x00e800eb
 80026fc:	00da00e4 	.word	0x00da00e4
 8002700:	00d100d6 	.word	0x00d100d6
 8002704:	00c000c3 	.word	0x00c000c3
 8002708:	00a800b4 	.word	0x00a800b4
 800270c:	0092009e 	.word	0x0092009e
 8002710:	007a0086 	.word	0x007a0086
 8002714:	00640070 	.word	0x00640070
 8002718:	0050005a 	.word	0x0050005a
 800271c:	0042004c 	.word	0x0042004c
 8002720:	0038003d 	.word	0x0038003d
 8002724:	002c0032 	.word	0x002c0032
 8002728:	00260029 	.word	0x00260029
 800272c:	001c      	.short	0x001c
			pwm2 = u_data;
 800272e:	f88a 1000 	strb.w	r1, [sl]
	for(loadcount=3;loadcount<28;loadcount++)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	3201      	adds	r2, #1
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	2a1b      	cmp	r2, #27
 800273c:	d9cc      	bls.n	80026d8 <GetPatch+0x34>
}
 800273e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pwm = u_data;
 8002742:	f889 1000 	strb.w	r1, [r9]
			break;
 8002746:	e7f4      	b.n	8002732 <GetPatch+0x8e>
			vcf = u_data;
 8002748:	f888 1000 	strb.w	r1, [r8]
			break;
 800274c:	e7f1      	b.n	8002732 <GetPatch+0x8e>
			lfo3rate = (128 - u_data) << 2;
 800274e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
 8002752:	0089      	lsls	r1, r1, #2
 8002754:	f8ae 1000 	strh.w	r1, [lr]
			break;
 8002758:	e7eb      	b.n	8002732 <GetPatch+0x8e>
			lfo4rate = (128 - u_data) << 2;
 800275a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
 800275e:	0089      	lsls	r1, r1, #2
 8002760:	f8ac 1000 	strh.w	r1, [ip]
			break;
 8002764:	e7e5      	b.n	8002732 <GetPatch+0x8e>
			lfo2rate = (128 - u_data) << 2;
 8002766:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
 800276a:	0089      	lsls	r1, r1, #2
 800276c:	8039      	strh	r1, [r7, #0]
			break;
 800276e:	e7e0      	b.n	8002732 <GetPatch+0x8e>
			lfo1rate = (128 - u_data) << 2; 
 8002770:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
 8002774:	0089      	lsls	r1, r1, #2
 8002776:	8031      	strh	r1, [r6, #0]
			break;
 8002778:	e7db      	b.n	8002732 <GetPatch+0x8e>
			vcfenvlvl = (((float)(u_data)) * 0.007874f);
 800277a:	ee07 1a90 	vmov	s15, r1
 800277e:	4a60      	ldr	r2, [pc, #384]	; (8002900 <GetPatch+0x25c>)
 8002780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002788:	edc2 7a00 	vstr	s15, [r2]
			break;
 800278c:	e7d1      	b.n	8002732 <GetPatch+0x8e>
			velsel = u_data >> 5;
 800278e:	0949      	lsrs	r1, r1, #5
 8002790:	4a5c      	ldr	r2, [pc, #368]	; (8002904 <GetPatch+0x260>)
 8002792:	7011      	strb	r1, [r2, #0]
			break;
 8002794:	e7cd      	b.n	8002732 <GetPatch+0x8e>
			envkflvl = (((float)(u_data)) * 0.007874f);
 8002796:	ee07 1a90 	vmov	s15, r1
 800279a:	4a5b      	ldr	r2, [pc, #364]	; (8002908 <GetPatch+0x264>)
 800279c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a4:	edc2 7a00 	vstr	s15, [r2]
			break;
 80027a8:	e7c3      	b.n	8002732 <GetPatch+0x8e>
			vcfkflvl = (((float)(u_data)) * 0.007874f);
 80027aa:	ee07 1a90 	vmov	s15, r1
 80027ae:	4a57      	ldr	r2, [pc, #348]	; (800290c <GetPatch+0x268>)
 80027b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027b8:	edc2 7a00 	vstr	s15, [r2]
			break;
 80027bc:	e7b9      	b.n	8002732 <GetPatch+0x8e>
			vcarelease = (((float)(u_data)) * 10.0f);
 80027be:	ee07 1a90 	vmov	s15, r1
 80027c2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80027c6:	4a52      	ldr	r2, [pc, #328]	; (8002910 <GetPatch+0x26c>)
 80027c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027d0:	edc2 7a00 	vstr	s15, [r2]
			break;
 80027d4:	e7ad      	b.n	8002732 <GetPatch+0x8e>
			vcasustain = (((float)(u_data)) * 0.007874f);
 80027d6:	ee07 1a90 	vmov	s15, r1
 80027da:	4a4e      	ldr	r2, [pc, #312]	; (8002914 <GetPatch+0x270>)
 80027dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027e4:	edc2 7a00 	vstr	s15, [r2]
			break;
 80027e8:	e7a3      	b.n	8002732 <GetPatch+0x8e>
			vcadecay = (((float)(u_data)) * 10.0f);
 80027ea:	ee07 1a90 	vmov	s15, r1
 80027ee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80027f2:	4a49      	ldr	r2, [pc, #292]	; (8002918 <GetPatch+0x274>)
 80027f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027fc:	edc2 7a00 	vstr	s15, [r2]
			break;
 8002800:	e797      	b.n	8002732 <GetPatch+0x8e>
			vcaattack = (((float)(u_data)) * 10.0f);
 8002802:	ee07 1a90 	vmov	s15, r1
 8002806:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800280a:	4a44      	ldr	r2, [pc, #272]	; (800291c <GetPatch+0x278>)
 800280c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002810:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002814:	edc2 7a00 	vstr	s15, [r2]
			break;
 8002818:	e78b      	b.n	8002732 <GetPatch+0x8e>
			vcfrelease = (((float)(u_data)) * 10.0f);
 800281a:	ee07 1a90 	vmov	s15, r1
 800281e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002822:	4a3f      	ldr	r2, [pc, #252]	; (8002920 <GetPatch+0x27c>)
 8002824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002828:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800282c:	edc2 7a00 	vstr	s15, [r2]
			break;
 8002830:	e77f      	b.n	8002732 <GetPatch+0x8e>
			vcfsustain = (((float)(u_data)) * 0.007874f);
 8002832:	ee07 1a90 	vmov	s15, r1
 8002836:	4a3b      	ldr	r2, [pc, #236]	; (8002924 <GetPatch+0x280>)
 8002838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002840:	edc2 7a00 	vstr	s15, [r2]
			break;
 8002844:	e775      	b.n	8002732 <GetPatch+0x8e>
			vcfdecay = (((float)(u_data)) * 10.0f);
 8002846:	ee07 1a90 	vmov	s15, r1
 800284a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800284e:	4a36      	ldr	r2, [pc, #216]	; (8002928 <GetPatch+0x284>)
 8002850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002854:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002858:	edc2 7a00 	vstr	s15, [r2]
			break;
 800285c:	e769      	b.n	8002732 <GetPatch+0x8e>
			vcfattack = (((float)(u_data)) * 10.0f);
 800285e:	ee07 1a90 	vmov	s15, r1
 8002862:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002866:	4a31      	ldr	r2, [pc, #196]	; (800292c <GetPatch+0x288>)
 8002868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800286c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002870:	edc2 7a00 	vstr	s15, [r2]
			break;
 8002874:	e75d      	b.n	8002732 <GetPatch+0x8e>
			pwval = u_data;
 8002876:	4a2e      	ldr	r2, [pc, #184]	; (8002930 <GetPatch+0x28c>)
 8002878:	8011      	strh	r1, [r2, #0]
			break;
 800287a:	e75a      	b.n	8002732 <GetPatch+0x8e>
			resonance = (((float)(u_data)) * 0.007874f * 4.0f);
 800287c:	ee07 1a90 	vmov	s15, r1
 8002880:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002884:	4a2b      	ldr	r2, [pc, #172]	; (8002934 <GetPatch+0x290>)
 8002886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800288e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002892:	edc2 7a00 	vstr	s15, [r2]
			break;
 8002896:	e74c      	b.n	8002732 <GetPatch+0x8e>
			scale = (u_data - 64) >> 2;
 8002898:	3940      	subs	r1, #64	; 0x40
 800289a:	4a27      	ldr	r2, [pc, #156]	; (8002938 <GetPatch+0x294>)
 800289c:	1089      	asrs	r1, r1, #2
 800289e:	7011      	strb	r1, [r2, #0]
			break;
 80028a0:	e747      	b.n	8002732 <GetPatch+0x8e>
			det = u_data >> 4;
 80028a2:	0909      	lsrs	r1, r1, #4
 80028a4:	4a25      	ldr	r2, [pc, #148]	; (800293c <GetPatch+0x298>)
 80028a6:	7011      	strb	r1, [r2, #0]
			break;
 80028a8:	e743      	b.n	8002732 <GetPatch+0x8e>
			oscmix = (((float)(u_data)) * 0.007874f);
 80028aa:	ee07 1a90 	vmov	s15, r1
 80028ae:	4a24      	ldr	r2, [pc, #144]	; (8002940 <GetPatch+0x29c>)
 80028b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b8:	edc2 7a00 	vstr	s15, [r2]
			break;
 80028bc:	e739      	b.n	8002732 <GetPatch+0x8e>
			wavesel = u_data >> 5;
 80028be:	0949      	lsrs	r1, r1, #5
 80028c0:	4a20      	ldr	r2, [pc, #128]	; (8002944 <GetPatch+0x2a0>)
 80028c2:	7011      	strb	r1, [r2, #0]
			break;
 80028c4:	e735      	b.n	8002732 <GetPatch+0x8e>
			tun = u_data;
 80028c6:	4a20      	ldr	r2, [pc, #128]	; (8002948 <GetPatch+0x2a4>)
 80028c8:	7011      	strb	r1, [r2, #0]
			break;
 80028ca:	e732      	b.n	8002732 <GetPatch+0x8e>
			if(u_data >= 64)
 80028cc:	293f      	cmp	r1, #63	; 0x3f
 80028ce:	f67f af30 	bls.w	8002732 <GetPatch+0x8e>
				mod = (u_data - 64) >> 1;
 80028d2:	f1a1 0240 	sub.w	r2, r1, #64	; 0x40
 80028d6:	491d      	ldr	r1, [pc, #116]	; (800294c <GetPatch+0x2a8>)
 80028d8:	1052      	asrs	r2, r2, #1
 80028da:	700a      	strb	r2, [r1, #0]
 80028dc:	e729      	b.n	8002732 <GetPatch+0x8e>
			bend = u_data;
 80028de:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <GetPatch+0x2ac>)
 80028e0:	7011      	strb	r1, [r2, #0]
			break;
 80028e2:	e726      	b.n	8002732 <GetPatch+0x8e>
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	200002e0 	.word	0x200002e0
 80028ec:	3c0101f3 	.word	0x3c0101f3
 80028f0:	20000464 	.word	0x20000464
 80028f4:	40024000 	.word	0x40024000
 80028f8:	20000370 	.word	0x20000370
 80028fc:	20000376 	.word	0x20000376
 8002900:	200001c0 	.word	0x200001c0
 8002904:	200002b4 	.word	0x200002b4
 8002908:	20001710 	.word	0x20001710
 800290c:	200014a4 	.word	0x200014a4
 8002910:	200002dc 	.word	0x200002dc
 8002914:	200002d4 	.word	0x200002d4
 8002918:	2000048c 	.word	0x2000048c
 800291c:	200003ec 	.word	0x200003ec
 8002920:	20001680 	.word	0x20001680
 8002924:	20001630 	.word	0x20001630
 8002928:	20000484 	.word	0x20000484
 800292c:	20001714 	.word	0x20001714
 8002930:	20001638 	.word	0x20001638
 8002934:	2000167c 	.word	0x2000167c
 8002938:	200016c7 	.word	0x200016c7
 800293c:	200001c6 	.word	0x200001c6
 8002940:	200002e4 	.word	0x200002e4
 8002944:	20000488 	.word	0x20000488
 8002948:	200002ed 	.word	0x200002ed
 800294c:	20000390 	.word	0x20000390
 8002950:	20000392 	.word	0x20000392
 8002954:	200015c8 	.word	0x200015c8
 8002958:	200001bd 	.word	0x200001bd
 800295c:	200015ed 	.word	0x200015ed
 8002960:	20001460 	.word	0x20001460
 8002964:	200015ca 	.word	0x200015ca

08002968 <TIM9_Config>:
}

void TIM9_Config(uint16_t period)
{
 8002968:	b538      	push	{r3, r4, r5, lr}
  htim9.Instance = TIM9;
 800296a:	4c0e      	ldr	r4, [pc, #56]	; (80029a4 <TIM9_Config+0x3c>)

  htim9.Init.Period            = 511;
  htim9.Init.Prescaler         = period;
  htim9.Init.ClockDivision     = 0;
 800296c:	2500      	movs	r5, #0
  htim9.Instance = TIM9;
 800296e:	490e      	ldr	r1, [pc, #56]	; (80029a8 <TIM9_Config+0x40>)
  htim9.Init.Period            = 511;
 8002970:	f240 12ff 	movw	r2, #511	; 0x1ff
  htim9.Init.CounterMode       = TIM_COUNTERMODE_UP;
  htim9.Init.RepetitionCounter = 0;
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002974:	2380      	movs	r3, #128	; 0x80
  htim9.Init.Prescaler         = period;
 8002976:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim9);
 8002978:	4620      	mov	r0, r4
  htim9.Instance = TIM9;
 800297a:	6021      	str	r1, [r4, #0]
  htim9.Init.Period            = 511;
 800297c:	60e2      	str	r2, [r4, #12]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800297e:	61a3      	str	r3, [r4, #24]
  htim9.Init.ClockDivision     = 0;
 8002980:	6125      	str	r5, [r4, #16]
  htim9.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8002982:	60a5      	str	r5, [r4, #8]
  htim9.Init.RepetitionCounter = 0;
 8002984:	6165      	str	r5, [r4, #20]
  HAL_TIM_Base_Init(&htim9);
 8002986:	f001 fbd1 	bl	800412c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800298a:	4908      	ldr	r1, [pc, #32]	; (80029ac <TIM9_Config+0x44>)
 800298c:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;

  HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig);
 800298e:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002990:	608d      	str	r5, [r1, #8]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002992:	600b      	str	r3, [r1, #0]
  HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig);
 8002994:	f001 fd6c 	bl	8004470 <HAL_TIMEx_MasterConfigSynchronization>

  HAL_TIM_Base_Start_IT(&htim9);
 8002998:	4620      	mov	r0, r4
}
 800299a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_TIM_Base_Start_IT(&htim9);
 800299e:	f001 bc91 	b.w	80042c4 <HAL_TIM_Base_Start_IT>
 80029a2:	bf00      	nop
 80029a4:	20001570 	.word	0x20001570
 80029a8:	40014000 	.word	0x40014000
 80029ac:	200002a8 	.word	0x200002a8

080029b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b508      	push	{r3, lr}
	MakeSound();
 80029b2:	f7fd ff23 	bl	80007fc <MakeSound>
	AudioOutput();
 80029b6:	f7fe fc9b 	bl	80012f0 <AudioOutput>
	/* Run the Mixer routine */
	mixer();
}
 80029ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	UpdateLFOs();
 80029be:	f7fe b8e1 	b.w	8000b84 <UpdateLFOs>
 80029c2:	bf00      	nop

080029c4 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c4:	4b5d      	ldr	r3, [pc, #372]	; (8002b3c <MX_GPIO_Init+0x178>)

  /*Configure GPIO pin : User_Blue_Button_Pin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80029c6:	485e      	ldr	r0, [pc, #376]	; (8002b40 <MX_GPIO_Init+0x17c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ca:	f042 0204 	orr.w	r2, r2, #4
{
 80029ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
{
 80029d4:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	f04f 0b00 	mov.w	fp, #0
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80029dc:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 80029e0:	f04f 0900 	mov.w	r9, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e4:	f002 0204 	and.w	r2, r2, #4
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80029e8:	a906      	add	r1, sp, #24

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80029ea:	2400      	movs	r4, #0
 80029ec:	2503      	movs	r5, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ee:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029f0:	270b      	movs	r7, #11
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80029f6:	f8df a158 	ldr.w	sl, [pc, #344]	; 8002b50 <MX_GPIO_Init+0x18c>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80029fe:	4e51      	ldr	r6, [pc, #324]	; (8002b44 <MX_GPIO_Init+0x180>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
 8002a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a04:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002a08:	9201      	str	r2, [sp, #4]
 8002a0a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
 8002a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a16:	f002 0201 	and.w	r2, r2, #1
 8002a1a:	9202      	str	r2, [sp, #8]
 8002a1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a20:	f042 0202 	orr.w	r2, r2, #2
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
 8002a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a28:	f002 0202 	and.w	r2, r2, #2
 8002a2c:	9203      	str	r2, [sp, #12]
 8002a2e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a32:	f042 0208 	orr.w	r2, r2, #8
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
 8002a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3a:	f002 0208 	and.w	r2, r2, #8
 8002a3e:	9204      	str	r2, [sp, #16]
 8002a40:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	f8cd b020 	str.w	fp, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	9305      	str	r3, [sp, #20]
 8002a56:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8002a58:	e9cd 8906 	strd	r8, r9, [sp, #24]
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8002a5c:	f000 fc6c 	bl	8003338 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002a60:	2232      	movs	r2, #50	; 0x32
 8002a62:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a64:	a906      	add	r1, sp, #24
 8002a66:	4836      	ldr	r0, [pc, #216]	; (8002b40 <MX_GPIO_Init+0x17c>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin;
 8002a68:	f04f 0800 	mov.w	r8, #0
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a6c:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin;
 8002a6e:	f04f 0900 	mov.w	r9, #0
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002a72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002a76:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7a:	f000 fc5d 	bl	8003338 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002a7e:	2286      	movs	r2, #134	; 0x86
 8002a80:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a82:	a906      	add	r1, sp, #24
 8002a84:	4830      	ldr	r0, [pc, #192]	; (8002b48 <MX_GPIO_Init+0x184>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a86:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002a88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002a8c:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	f000 fc52 	bl	8003338 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a98:	2302      	movs	r3, #2
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002a9a:	a906      	add	r1, sp, #24
 8002a9c:	4650      	mov	r0, sl
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a9e:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002aa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002aa4:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f000 fc46 	bl	8003338 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin;
 8002aac:	f244 0281 	movw	r2, #16513	; 0x4081
 8002ab0:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab2:	a906      	add	r1, sp, #24
 8002ab4:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin;
 8002ab6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002aba:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abe:	f000 fc3b 	bl	8003338 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002ac2:	2240      	movs	r2, #64	; 0x40
 8002ac4:	2301      	movs	r3, #1
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002ac6:	a906      	add	r1, sp, #24
 8002ac8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002aca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002ace:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002ad2:	f000 fc31 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ada:	a906      	add	r1, sp, #24
 8002adc:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002ae2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ae6:	f000 fc27 	bl	8003338 <HAL_GPIO_Init>
  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002aea:	f04f 0c07 	mov.w	ip, #7
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002aee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002af2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002af4:	a906      	add	r1, sp, #24
 8002af6:	4815      	ldr	r0, [pc, #84]	; (8002b4c <MX_GPIO_Init+0x188>)
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002af8:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002afc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002b00:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b04:	f000 fc18 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b0e:	a906      	add	r1, sp, #24
 8002b10:	4630      	mov	r0, r6
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b12:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002b14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002b18:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b1c:	f000 fc0c 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002b20:	465a      	mov	r2, fp
 8002b22:	4650      	mov	r0, sl
 8002b24:	f244 0181 	movw	r1, #16513	; 0x4081
 8002b28:	f000 fd2c 	bl	8003584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002b2c:	4630      	mov	r0, r6
 8002b2e:	2201      	movs	r2, #1
 8002b30:	2140      	movs	r1, #64	; 0x40
 8002b32:	f000 fd27 	bl	8003584 <HAL_GPIO_WritePin>
}
 8002b36:	b00d      	add	sp, #52	; 0x34
 8002b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40020800 	.word	0x40020800
 8002b44:	40021800 	.word	0x40021800
 8002b48:	40020000 	.word	0x40020000
 8002b4c:	40020c00 	.word	0x40020c00
 8002b50:	40020400 	.word	0x40020400

08002b54 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
void CPU_CACHE_Enable(void)
{
 8002b54:	b470      	push	{r4, r5, r6}
  __ASM volatile ("dsb 0xF":::"memory");
 8002b56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b5a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <CPU_CACHE_Enable+0x78>)
 8002b60:	2100      	movs	r1, #0
 8002b62:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002b66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b6a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b74:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b7a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002b7e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002b82:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002b86:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b8a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002b8e:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002b92:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8002b96:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b98:	ea02 0504 	and.w	r5, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002b9c:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b9e:	ea45 7680 	orr.w	r6, r5, r0, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002ba2:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002ba4:	f8c3 6260 	str.w	r6, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8002ba8:	1c46      	adds	r6, r0, #1
 8002baa:	d1f8      	bne.n	8002b9e <CPU_CACHE_Enable+0x4a>
    } while(sets-- != 0U);
 8002bac:	3a20      	subs	r2, #32
 8002bae:	f112 0f20 	cmn.w	r2, #32
 8002bb2:	d1f1      	bne.n	8002b98 <CPU_CACHE_Enable+0x44>
 8002bb4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002bbe:	615a      	str	r2, [r3, #20]
 8002bc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002bc4:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8002bc8:	bc70      	pop	{r4, r5, r6}
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <main>:
{
 8002bd0:	b580      	push	{r7, lr}
	CPU_CACHE_Enable();
 8002bd2:	f7ff ffbf 	bl	8002b54 <CPU_CACHE_Enable>
	param = 0;					/* Choose no param to edit (default is pitch bend) */
 8002bd6:	2400      	movs	r4, #0
	HAL_Init();
 8002bd8:	f000 fa6a 	bl	80030b0 <HAL_Init>
	paramvalue[0] = 64;			/* Set pitch bend to center */
 8002bdc:	2540      	movs	r5, #64	; 0x40
	SystemClock_Config();
 8002bde:	f7ff fc89 	bl	80024f4 <SystemClock_Config>
	paramvalue[0] = 64;			/* Set pitch bend to center */
 8002be2:	4e18      	ldr	r6, [pc, #96]	; (8002c44 <main+0x74>)
	MX_GPIO_Init();
 8002be4:	f7ff feee 	bl	80029c4 <MX_GPIO_Init>
	HAL_Delay(1000);
 8002be8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bec:	f000 fa88 	bl	8003100 <HAL_Delay>
	sus = 0;						/* Set the sustain pedal to off */
 8002bf0:	4f15      	ldr	r7, [pc, #84]	; (8002c48 <main+0x78>)
	Configure_USARTx();
 8002bf2:	f7ff fa5f 	bl	80020b4 <Configure_USARTx>
	Configure_USARTy();
 8002bf6:	f7ff fb71 	bl	80022dc <Configure_USARTy>
	DAC_Config();
 8002bfa:	f7ff fcd9 	bl	80025b0 <DAC_Config>
	enable_backup_sram();
 8002bfe:	f7ff fcfd 	bl	80025fc <enable_backup_sram>
	param = 0;					/* Choose no param to edit (default is pitch bend) */
 8002c02:	4912      	ldr	r1, [pc, #72]	; (8002c4c <main+0x7c>)
	transpose = -20;			/* Set the transpose to none */
 8002c04:	22ec      	movs	r2, #236	; 0xec
 8002c06:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <main+0x80>)
	ParamUpdate(0, paramvalue[0]);
 8002c08:	4620      	mov	r0, r4
	param = 0;					/* Choose no param to edit (default is pitch bend) */
 8002c0a:	700c      	strb	r4, [r1, #0]
	ParamUpdate(0, paramvalue[0]);
 8002c0c:	4629      	mov	r1, r5
	transpose = -20;			/* Set the transpose to none */
 8002c0e:	701a      	strb	r2, [r3, #0]
	sus = 0;						/* Set the sustain pedal to off */
 8002c10:	703c      	strb	r4, [r7, #0]
	paramvalue[0] = 64;			/* Set pitch bend to center */
 8002c12:	7035      	strb	r5, [r6, #0]
	ParamUpdate(0, paramvalue[0]);
 8002c14:	f7fe fd8a 	bl	800172c <ParamUpdate>
	ParamUpdate(1, paramvalue[1]);
 8002c18:	4621      	mov	r1, r4
 8002c1a:	2001      	movs	r0, #1
	paramvalue[1] = 0;			/* Set the modulation wheel to off */
 8002c1c:	7074      	strb	r4, [r6, #1]
	ParamUpdate(1, paramvalue[1]);
 8002c1e:	f7fe fd85 	bl	800172c <ParamUpdate>
	ParamUpdate(2, paramvalue[2]);
 8002c22:	4629      	mov	r1, r5
 8002c24:	2002      	movs	r0, #2
	paramvalue[2] = 64;			/* Set the master tuning to center */
 8002c26:	70b5      	strb	r5, [r6, #2]
	ParamUpdate(2, paramvalue[2]);
 8002c28:	f7fe fd80 	bl	800172c <ParamUpdate>
	InitPatch();
 8002c2c:	f7ff fd04 	bl	8002638 <InitPatch>
	GetPatch(0);
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7ff fd37 	bl	80026a4 <GetPatch>
	PrepOscs();
 8002c36:	f7fd fc7b 	bl	8000530 <PrepOscs>
	TIM9_Config(3);
 8002c3a:	2003      	movs	r0, #3
 8002c3c:	f7ff fe94 	bl	8002968 <TIM9_Config>
  while (1)
 8002c40:	e7fe      	b.n	8002c40 <main+0x70>
 8002c42:	bf00      	nop
 8002c44:	20000464 	.word	0x20000464
 8002c48:	2000170c 	.word	0x2000170c
 8002c4c:	200001be 	.word	0x200001be
 8002c50:	20000249 	.word	0x20000249

08002c54 <USARTx_CharReception_Callback>:
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8002c54:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <USARTx_CharReception_Callback+0xd4>)
 8002c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  *         Function is in charge of reading character received on USART RX line.
  * @param  None
  * @retval None
  */
void USARTx_CharReception_Callback(void)
{
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	b082      	sub	sp, #8
	__IO uint32_t received_char;

  /* Read Received character. RXNE flag is cleared by reading of RDR register */
  received_char = LL_USART_ReceiveData8(USARTx_INSTANCE);

  if(received_char == 0xF0  & msgnum == 0)
 8002c5e:	4c33      	ldr	r4, [pc, #204]	; (8002d2c <USARTx_CharReception_Callback+0xd8>)
  received_char = LL_USART_ReceiveData8(USARTx_INSTANCE);
 8002c60:	9201      	str	r2, [sp, #4]
  if(received_char == 0xF0  & msgnum == 0)
 8002c62:	7821      	ldrb	r1, [r4, #0]
 8002c64:	9a01      	ldr	r2, [sp, #4]
 8002c66:	fab1 f381 	clz	r3, r1
 8002c6a:	2af0      	cmp	r2, #240	; 0xf0
 8002c6c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002c70:	d105      	bne.n	8002c7e <USARTx_CharReception_Callback+0x2a>
 8002c72:	b123      	cbz	r3, 8002c7e <USARTx_CharReception_Callback+0x2a>
  {
	  vhbtn = 1;
 8002c74:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <USARTx_CharReception_Callback+0xdc>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
  		  msgnum = 0;
  		  param = key - 0x24;
  		  vhbtn = 0;
  	  }
    }
}
 8002c7a:	b002      	add	sp, #8
 8002c7c:	bd70      	pop	{r4, r5, r6, pc}
  if(!vhbtn)
 8002c7e:	4d2c      	ldr	r5, [pc, #176]	; (8002d30 <USARTx_CharReception_Callback+0xdc>)
 8002c80:	782a      	ldrb	r2, [r5, #0]
 8002c82:	bb4a      	cbnz	r2, 8002cd8 <USARTx_CharReception_Callback+0x84>
	  if((received_char == 0xF7)  & msgnum == 0)
 8002c84:	9a01      	ldr	r2, [sp, #4]
 8002c86:	2af7      	cmp	r2, #247	; 0xf7
 8002c88:	d101      	bne.n	8002c8e <USARTx_CharReception_Callback+0x3a>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f5      	bne.n	8002c7a <USARTx_CharReception_Callback+0x26>
	  if(received_char < 0x80 & msgnum == 0)return;
 8002c8e:	9a01      	ldr	r2, [sp, #4]
 8002c90:	2a7f      	cmp	r2, #127	; 0x7f
 8002c92:	d801      	bhi.n	8002c98 <USARTx_CharReception_Callback+0x44>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f0      	bne.n	8002c7a <USARTx_CharReception_Callback+0x26>
	  if(msgnum == 0)
 8002c98:	2900      	cmp	r1, #0
 8002c9a:	d03b      	beq.n	8002d14 <USARTx_CharReception_Callback+0xc0>
	  if(msgnum == 1)
 8002c9c:	2901      	cmp	r1, #1
 8002c9e:	d108      	bne.n	8002cb2 <USARTx_CharReception_Callback+0x5e>
  		  key = received_char;
 8002ca0:	9d01      	ldr	r5, [sp, #4]
  	  msgnum++;
 8002ca2:	2302      	movs	r3, #2
  		  key = received_char;
 8002ca4:	4823      	ldr	r0, [pc, #140]	; (8002d34 <USARTx_CharReception_Callback+0xe0>)
  		  ctrl = received_char;
 8002ca6:	9901      	ldr	r1, [sp, #4]
 8002ca8:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <USARTx_CharReception_Callback+0xe4>)
  		  key = received_char;
 8002caa:	7005      	strb	r5, [r0, #0]
  		  ctrl = received_char;
 8002cac:	7011      	strb	r1, [r2, #0]
  	  msgnum++;
 8002cae:	7023      	strb	r3, [r4, #0]
  	  if(msgnum == 3)
 8002cb0:	e7e3      	b.n	8002c7a <USARTx_CharReception_Callback+0x26>
	  if(msgnum == 2)
 8002cb2:	2902      	cmp	r1, #2
 8002cb4:	d135      	bne.n	8002d22 <USARTx_CharReception_Callback+0xce>
		  velocity = received_char;
 8002cb6:	9801      	ldr	r0, [sp, #4]
		  msgnum = 0;
 8002cb8:	2100      	movs	r1, #0
		  velocity = received_char;
 8002cba:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <USARTx_CharReception_Callback+0xe8>)
		  data = received_char;
 8002cbc:	9a01      	ldr	r2, [sp, #4]
		  velocity = received_char;
 8002cbe:	7018      	strb	r0, [r3, #0]
		  data = received_char;
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <USARTx_CharReception_Callback+0xec>)
		  msgnum = 0;
 8002cc2:	7021      	strb	r1, [r4, #0]
		  data = received_char;
 8002cc4:	701a      	strb	r2, [r3, #0]
		  ProcessReceivedMidiDatas();
 8002cc6:	f7ff f929 	bl	8001f1c <ProcessReceivedMidiDatas>
  if(vhbtn)
 8002cca:	782b      	ldrb	r3, [r5, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0d4      	beq.n	8002c7a <USARTx_CharReception_Callback+0x26>
 8002cd0:	7821      	ldrb	r1, [r4, #0]
 8002cd2:	fab1 f381 	clz	r3, r1
 8002cd6:	095b      	lsrs	r3, r3, #5
  	  if((received_char == 0xF7)  & msgnum == 0)
 8002cd8:	9a01      	ldr	r2, [sp, #4]
 8002cda:	2af7      	cmp	r2, #247	; 0xf7
 8002cdc:	d101      	bne.n	8002ce2 <USARTx_CharReception_Callback+0x8e>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1cb      	bne.n	8002c7a <USARTx_CharReception_Callback+0x26>
  	  if(received_char < 0x80 & msgnum == 0)return;
 8002ce2:	9a01      	ldr	r2, [sp, #4]
 8002ce4:	2a7f      	cmp	r2, #127	; 0x7f
 8002ce6:	d801      	bhi.n	8002cec <USARTx_CharReception_Callback+0x98>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1c6      	bne.n	8002c7a <USARTx_CharReception_Callback+0x26>
  	  if(msgnum == 0)
 8002cec:	b191      	cbz	r1, 8002d14 <USARTx_CharReception_Callback+0xc0>
  	  if(msgnum == 1)
 8002cee:	2901      	cmp	r1, #1
 8002cf0:	d0d6      	beq.n	8002ca0 <USARTx_CharReception_Callback+0x4c>
  	  if(msgnum == 2)
 8002cf2:	2902      	cmp	r1, #2
 8002cf4:	d115      	bne.n	8002d22 <USARTx_CharReception_Callback+0xce>
  		  param = key - 0x24;
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <USARTx_CharReception_Callback+0xe0>)
  		  msgnum = 0;
 8002cf8:	2200      	movs	r2, #0
  		  param = key - 0x24;
 8002cfa:	4912      	ldr	r1, [pc, #72]	; (8002d44 <USARTx_CharReception_Callback+0xf0>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
  		  velocity = received_char;
 8002cfe:	9e01      	ldr	r6, [sp, #4]
  		  param = key - 0x24;
 8002d00:	3b24      	subs	r3, #36	; 0x24
  		  velocity = received_char;
 8002d02:	480e      	ldr	r0, [pc, #56]	; (8002d3c <USARTx_CharReception_Callback+0xe8>)
  		  msgnum = 0;
 8002d04:	7022      	strb	r2, [r4, #0]
  		  param = key - 0x24;
 8002d06:	700b      	strb	r3, [r1, #0]
  		  data = received_char;
 8002d08:	9901      	ldr	r1, [sp, #4]
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <USARTx_CharReception_Callback+0xec>)
  		  velocity = received_char;
 8002d0c:	7006      	strb	r6, [r0, #0]
  		  data = received_char;
 8002d0e:	7019      	strb	r1, [r3, #0]
  		  vhbtn = 0;
 8002d10:	702a      	strb	r2, [r5, #0]
 8002d12:	e7b2      	b.n	8002c7a <USARTx_CharReception_Callback+0x26>
  		  midimsg = received_char;
 8002d14:	9a01      	ldr	r2, [sp, #4]
  	  msgnum++;
 8002d16:	2101      	movs	r1, #1
  		  midimsg = received_char;
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <USARTx_CharReception_Callback+0xf4>)
  	  msgnum++;
 8002d1a:	7021      	strb	r1, [r4, #0]
  		  midimsg = received_char;
 8002d1c:	701a      	strb	r2, [r3, #0]
}
 8002d1e:	b002      	add	sp, #8
 8002d20:	bd70      	pop	{r4, r5, r6, pc}
  	  msgnum++;
 8002d22:	3101      	adds	r1, #1
 8002d24:	7021      	strb	r1, [r4, #0]
  	  if(msgnum == 3)
 8002d26:	e7a8      	b.n	8002c7a <USARTx_CharReception_Callback+0x26>
 8002d28:	40004800 	.word	0x40004800
 8002d2c:	20000372 	.word	0x20000372
 8002d30:	20000188 	.word	0x20000188
 8002d34:	200015b0 	.word	0x200015b0
 8002d38:	200002d8 	.word	0x200002d8
 8002d3c:	20000490 	.word	0x20000490
 8002d40:	20001461 	.word	0x20001461
 8002d44:	200001be 	.word	0x200001be
 8002d48:	200015ef 	.word	0x200015ef

08002d4c <USARTy_CharReception_Callback>:
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <USARTy_CharReception_Callback+0x10>)
  *         Function is in charge of reading character received on USART RX line.
  * @param  None
  * @retval None
  */
void USARTy_CharReception_Callback(void)
{
 8002d4e:	b082      	sub	sp, #8
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	b2db      	uxtb	r3, r3
	__IO uint32_t received_char;

  /* Read Received character. RXNE flag is cleared by reading of RDR register */
  received_char = LL_USART_ReceiveData8(USARTy_INSTANCE);
 8002d54:	9301      	str	r3, [sp, #4]

  /* Since this is the host port, there should never be any reception of data */
}
 8002d56:	b002      	add	sp, #8
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40004400 	.word	0x40004400

08002d60 <Error_Callback>:
  * @brief  Function called in case of error detected in USART IT Handler
  * @param  None
  * @retval None
  */
void Error_Callback(void)
{
 8002d60:	b410      	push	{r4}
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002d62:	2302      	movs	r3, #2
 8002d64:	4c04      	ldr	r4, [pc, #16]	; (8002d78 <Error_Callback+0x18>)
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <Error_Callback+0x1c>)
	LL_USART_ClearFlag_FE(USARTx_INSTANCE);
	LL_USART_ClearFlag_FE(USARTy_INSTANCE);
	msgnum = 0;
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <Error_Callback+0x20>)
 8002d6c:	6223      	str	r3, [r4, #32]
 8002d6e:	6203      	str	r3, [r0, #32]
 8002d70:	7011      	strb	r1, [r2, #0]
}
 8002d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40004800 	.word	0x40004800
 8002d7c:	40004400 	.word	0x40004400
 8002d80:	20000372 	.word	0x20000372

08002d84 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d84:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d86:	2003      	movs	r0, #3
 8002d88:	f000 f9cc 	bl	8003124 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f06f 000b 	mvn.w	r0, #11
 8002d92:	4611      	mov	r1, r2
 8002d94:	f000 f9da 	bl	800314c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f06f 000a 	mvn.w	r0, #10
 8002d9e:	4611      	mov	r1, r2
 8002da0:	f000 f9d4 	bl	800314c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002da4:	2200      	movs	r2, #0
 8002da6:	f06f 0009 	mvn.w	r0, #9
 8002daa:	4611      	mov	r1, r2
 8002dac:	f000 f9ce 	bl	800314c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002db0:	2200      	movs	r2, #0
 8002db2:	f06f 0004 	mvn.w	r0, #4
 8002db6:	4611      	mov	r1, r2
 8002db8:	f000 f9c8 	bl	800314c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f06f 0003 	mvn.w	r0, #3
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	f000 f9c2 	bl	800314c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f06f 0001 	mvn.w	r0, #1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	f000 f9bc 	bl	800314c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dda:	4611      	mov	r1, r2
}
 8002ddc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002de0:	f000 b9b4 	b.w	800314c <HAL_NVIC_SetPriority>

08002de4 <HAL_DAC_MspInit>:
{
  GPIO_InitTypeDef          GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clock ****************************************/
  DACx_CHANNEL_GPIO_CLK_ENABLE();
 8002de4:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <HAL_DAC_MspInit+0x54>)
  /*##-2- Configure peripheral GPIO ##########################################*/
  /* DAC Channel1 GPIO pin configuration */
  GPIO_InitStruct.Pin = DACx_CHANNEL_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DACx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8002de6:	4815      	ldr	r0, [pc, #84]	; (8002e3c <HAL_DAC_MspInit+0x58>)
  DACx_CHANNEL_GPIO_CLK_ENABLE();
 8002de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dea:	f042 0201 	orr.w	r2, r2, #1
{
 8002dee:	b570      	push	{r4, r5, r6, lr}
  DACx_CHANNEL_GPIO_CLK_ENABLE();
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30
{
 8002df2:	b088      	sub	sp, #32
  DACx_CHANNEL_GPIO_CLK_ENABLE();
 8002df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin = DACx_CHANNEL_PIN;
 8002df8:	2410      	movs	r4, #16
 8002dfa:	2503      	movs	r5, #3
  DACx_CHANNEL_GPIO_CLK_ENABLE();
 8002dfc:	f002 0201 	and.w	r2, r2, #1
  HAL_GPIO_Init(DACx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8002e00:	a902      	add	r1, sp, #8
  DACx_CHANNEL_GPIO_CLK_ENABLE();
 8002e02:	9200      	str	r2, [sp, #0]
 8002e04:	9a00      	ldr	r2, [sp, #0]
  DACx_CLK_ENABLE();
 8002e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	9604      	str	r6, [sp, #16]
  DACx_CLK_ENABLE();
 8002e12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = DACx_CHANNEL_PIN;
 8002e1a:	e9cd 4502 	strd	r4, r5, [sp, #8]
  HAL_GPIO_Init(DACx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8002e1e:	f000 fa8b 	bl	8003338 <HAL_GPIO_Init>
	
	/* DAC Channel2 GPIO pin configuration */
  GPIO_InitStruct.Pin = DACy_CHANNEL_PIN;
 8002e22:	2220      	movs	r2, #32
 8002e24:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DACx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8002e26:	a902      	add	r1, sp, #8
 8002e28:	4804      	ldr	r0, [pc, #16]	; (8002e3c <HAL_DAC_MspInit+0x58>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pin = DACy_CHANNEL_PIN;
 8002e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(DACx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8002e30:	f000 fa82 	bl	8003338 <HAL_GPIO_Init>
}
 8002e34:	b008      	add	sp, #32
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40020000 	.word	0x40020000

08002e40 <HAL_TIM_Base_MspInit>:
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
	/* TIM2 Periph clock enable */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002e40:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_TIM_Base_MspInit+0x108>)
  __HAL_RCC_TIM13_CLK_ENABLE();
	/* TIM14 Periph clock enable */
  __HAL_RCC_TIM14_CLK_ENABLE();
	
	/* Set the TIMx priority */
  HAL_NVIC_SetPriority(TIMx_IRQn, 3, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2103      	movs	r1, #3
 8002e46:	2018      	movs	r0, #24
{
 8002e48:	b510      	push	{r4, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002e4a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8002e4c:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002e4e:	f044 0401 	orr.w	r4, r4, #1
 8002e52:	641c      	str	r4, [r3, #64]	; 0x40
 8002e54:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002e56:	f004 0401 	and.w	r4, r4, #1
 8002e5a:	9401      	str	r4, [sp, #4]
 8002e5c:	9c01      	ldr	r4, [sp, #4]
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002e5e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002e60:	f044 0402 	orr.w	r4, r4, #2
 8002e64:	641c      	str	r4, [r3, #64]	; 0x40
 8002e66:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002e68:	f004 0402 	and.w	r4, r4, #2
 8002e6c:	9402      	str	r4, [sp, #8]
 8002e6e:	9c02      	ldr	r4, [sp, #8]
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002e70:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002e72:	f044 0404 	orr.w	r4, r4, #4
 8002e76:	641c      	str	r4, [r3, #64]	; 0x40
 8002e78:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002e7a:	f004 0404 	and.w	r4, r4, #4
 8002e7e:	9403      	str	r4, [sp, #12]
 8002e80:	9c03      	ldr	r4, [sp, #12]
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002e82:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002e84:	f044 0408 	orr.w	r4, r4, #8
 8002e88:	641c      	str	r4, [r3, #64]	; 0x40
 8002e8a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002e8c:	f004 0408 	and.w	r4, r4, #8
 8002e90:	9404      	str	r4, [sp, #16]
 8002e92:	9c04      	ldr	r4, [sp, #16]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e94:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002e96:	f044 0410 	orr.w	r4, r4, #16
 8002e9a:	641c      	str	r4, [r3, #64]	; 0x40
 8002e9c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002e9e:	f004 0410 	and.w	r4, r4, #16
 8002ea2:	9405      	str	r4, [sp, #20]
 8002ea4:	9c05      	ldr	r4, [sp, #20]
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002ea6:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002ea8:	f044 0420 	orr.w	r4, r4, #32
 8002eac:	641c      	str	r4, [r3, #64]	; 0x40
 8002eae:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002eb0:	f004 0420 	and.w	r4, r4, #32
 8002eb4:	9406      	str	r4, [sp, #24]
 8002eb6:	9c06      	ldr	r4, [sp, #24]
  __HAL_RCC_TIM8_CLK_ENABLE();
 8002eb8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8002eba:	f044 0402 	orr.w	r4, r4, #2
 8002ebe:	645c      	str	r4, [r3, #68]	; 0x44
 8002ec0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8002ec2:	f004 0402 	and.w	r4, r4, #2
 8002ec6:	9407      	str	r4, [sp, #28]
 8002ec8:	9c07      	ldr	r4, [sp, #28]
  __HAL_RCC_TIM9_CLK_ENABLE();
 8002eca:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8002ecc:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8002ed0:	645c      	str	r4, [r3, #68]	; 0x44
 8002ed2:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8002ed4:	f404 3480 	and.w	r4, r4, #65536	; 0x10000
 8002ed8:	9408      	str	r4, [sp, #32]
 8002eda:	9c08      	ldr	r4, [sp, #32]
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002edc:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8002ede:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8002ee2:	645c      	str	r4, [r3, #68]	; 0x44
 8002ee4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8002ee6:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
 8002eea:	9409      	str	r4, [sp, #36]	; 0x24
 8002eec:	9c09      	ldr	r4, [sp, #36]	; 0x24
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002eee:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8002ef0:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 8002ef4:	645c      	str	r4, [r3, #68]	; 0x44
 8002ef6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8002ef8:	f404 2480 	and.w	r4, r4, #262144	; 0x40000
 8002efc:	940a      	str	r4, [sp, #40]	; 0x28
 8002efe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  __HAL_RCC_TIM12_CLK_ENABLE();
 8002f00:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002f02:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8002f06:	641c      	str	r4, [r3, #64]	; 0x40
 8002f08:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002f0a:	f004 0440 	and.w	r4, r4, #64	; 0x40
 8002f0e:	940b      	str	r4, [sp, #44]	; 0x2c
 8002f10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  __HAL_RCC_TIM13_CLK_ENABLE();
 8002f12:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002f14:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002f18:	641c      	str	r4, [r3, #64]	; 0x40
 8002f1a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002f1c:	f004 0480 	and.w	r4, r4, #128	; 0x80
 8002f20:	940c      	str	r4, [sp, #48]	; 0x30
 8002f22:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002f24:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002f26:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8002f2a:	641c      	str	r4, [r3, #64]	; 0x40
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	930d      	str	r3, [sp, #52]	; 0x34
 8002f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_NVIC_SetPriority(TIMx_IRQn, 3, 0);
 8002f36:	f000 f909 	bl	800314c <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 8002f3a:	2018      	movs	r0, #24
}
 8002f3c:	b00e      	add	sp, #56	; 0x38
 8002f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 8002f42:	f000 b93d 	b.w	80031c0 <HAL_NVIC_EnableIRQ>
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800

08002f4c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop

08002f50 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f50:	e7fe      	b.n	8002f50 <HardFault_Handler>
 8002f52:	bf00      	nop

08002f54 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f54:	e7fe      	b.n	8002f54 <MemManage_Handler>
 8002f56:	bf00      	nop

08002f58 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f58:	e7fe      	b.n	8002f58 <BusFault_Handler>
 8002f5a:	bf00      	nop

08002f5c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f5c:	e7fe      	b.n	8002f5c <UsageFault_Handler>
 8002f5e:	bf00      	nop

08002f60 <SVC_Handler>:
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop

08002f64 <DebugMon_Handler>:
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop

08002f68 <PendSV_Handler>:
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop

08002f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 8002f6e:	f000 f8b5 	bl	80030dc <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8002f72:	f000 f959 	bl	8003228 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	envelope();
 8002f7a:	f7fe b84b 	b.w	8001014 <envelope>
 8002f7e:	bf00      	nop

08002f80 <USART3_IRQHandler>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <USART3_IRQHandler+0x18>)
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	0692      	lsls	r2, r2, #26
 8002f86:	d504      	bpl.n	8002f92 <USART3_IRQHandler+0x12>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	069b      	lsls	r3, r3, #26
 8002f8c:	d501      	bpl.n	8002f92 <USART3_IRQHandler+0x12>
  /* Check RXNE flag value in ISR register */
  if(LL_USART_IsActiveFlag_RXNE(USARTx_INSTANCE) && LL_USART_IsEnabledIT_RXNE(USARTx_INSTANCE))
  {
    /* RXNE flag will be cleared by reading of RDR register (done in call) */
    /* Call function in charge of handling Character reception */
    USARTx_CharReception_Callback();
 8002f8e:	f7ff be61 	b.w	8002c54 <USARTx_CharReception_Callback>
  }
  else
  {
    /* Call Error function */
    Error_Callback();
 8002f92:	f7ff bee5 	b.w	8002d60 <Error_Callback>
 8002f96:	bf00      	nop
 8002f98:	40004800 	.word	0x40004800

08002f9c <USART2_IRQHandler>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <USART2_IRQHandler+0x18>)
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	0692      	lsls	r2, r2, #26
 8002fa2:	d504      	bpl.n	8002fae <USART2_IRQHandler+0x12>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	069b      	lsls	r3, r3, #26
 8002fa8:	d501      	bpl.n	8002fae <USART2_IRQHandler+0x12>
  /* Check RXNE flag value in ISR register */
  if(LL_USART_IsActiveFlag_RXNE(USARTy_INSTANCE) && LL_USART_IsEnabledIT_RXNE(USARTy_INSTANCE))
  {
    /* RXNE flag will be cleared by reading of RDR register (done in call) */
    /* Call function in charge of handling Character reception */
    USARTy_CharReception_Callback();
 8002faa:	f7ff becf 	b.w	8002d4c <USARTy_CharReception_Callback>
  }
  else
  {
    /* Call Error function */
    Error_Callback();
 8002fae:	f7ff bed7 	b.w	8002d60 <Error_Callback>
 8002fb2:	bf00      	nop
 8002fb4:	40004400 	.word	0x40004400

08002fb8 <TIM1_BRK_TIM9_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim9);
 8002fb8:	4801      	ldr	r0, [pc, #4]	; (8002fc0 <TIM1_BRK_TIM9_IRQHandler+0x8>)
 8002fba:	f001 b9a1 	b.w	8004300 <HAL_TIM_IRQHandler>
 8002fbe:	bf00      	nop
 8002fc0:	20001570 	.word	0x20001570

08002fc4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fc4:	4a0f      	ldr	r2, [pc, #60]	; (8003004 <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fc8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002fcc:	490f      	ldr	r1, [pc, #60]	; (800300c <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fce:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 8002fd2:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd4:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 8002fd8:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002fda:	6818      	ldr	r0, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fdc:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 8002fe0:	4e0b      	ldr	r6, [pc, #44]	; (8003010 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 8002fe2:	f040 0001 	orr.w	r0, r0, #1
 8002fe6:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002fe8:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	4001      	ands	r1, r0
 8002fee:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8002ff0:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ff2:	6819      	ldr	r1, [r3, #0]
 8002ff4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002ff8:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 8002ffa:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ffc:	6095      	str	r5, [r2, #8]
#endif
}
 8002ffe:	bc70      	pop	{r4, r5, r6}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	e000ed00 	.word	0xe000ed00
 8003008:	40023800 	.word	0x40023800
 800300c:	fef6ffff 	.word	0xfef6ffff
 8003010:	24003010 	.word	0x24003010

08003014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800304c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003018:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800301a:	e003      	b.n	8003024 <LoopCopyDataInit>

0800301c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800301e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003020:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003022:	3104      	adds	r1, #4

08003024 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003024:	480b      	ldr	r0, [pc, #44]	; (8003054 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003026:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003028:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800302a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800302c:	d3f6      	bcc.n	800301c <CopyDataInit>
  ldr  r2, =_sbss
 800302e:	4a0b      	ldr	r2, [pc, #44]	; (800305c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003030:	e002      	b.n	8003038 <LoopFillZerobss>

08003032 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003032:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003034:	f842 3b04 	str.w	r3, [r2], #4

08003038 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800303a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800303c:	d3f9      	bcc.n	8003032 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800303e:	f7ff ffc1 	bl	8002fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003042:	f001 fa4b 	bl	80044dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003046:	f7ff fdc3 	bl	8002bd0 <main>
  bx  lr    
 800304a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800304c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003050:	080046e0 	.word	0x080046e0
  ldr  r0, =_sdata
 8003054:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003058:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 800305c:	20000034 	.word	0x20000034
  ldr  r3, = _ebss
 8003060:	20001738 	.word	0x20001738

08003064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003064:	e7fe      	b.n	8003064 <ADC_IRQHandler>
	...

08003068 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003068:	490e      	ldr	r1, [pc, #56]	; (80030a4 <HAL_InitTick+0x3c>)
 800306a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800306e:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <HAL_InitTick+0x40>)
{
 8003070:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003072:	7809      	ldrb	r1, [r1, #0]
{
 8003074:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	fbb3 f3f1 	udiv	r3, r3, r1
 800307c:	fbb2 f0f3 	udiv	r0, r2, r3
 8003080:	f000 f8ac 	bl	80031dc <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003084:	b908      	cbnz	r0, 800308a <HAL_InitTick+0x22>
 8003086:	2c0f      	cmp	r4, #15
 8003088:	d901      	bls.n	800308e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800308a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 800308c:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800308e:	2200      	movs	r2, #0
 8003090:	4621      	mov	r1, r4
 8003092:	f04f 30ff 	mov.w	r0, #4294967295
 8003096:	f000 f859 	bl	800314c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800309a:	4b04      	ldr	r3, [pc, #16]	; (80030ac <HAL_InitTick+0x44>)
 800309c:	2000      	movs	r0, #0
 800309e:	601c      	str	r4, [r3, #0]
}
 80030a0:	bd10      	pop	{r4, pc}
 80030a2:	bf00      	nop
 80030a4:	2000002c 	.word	0x2000002c
 80030a8:	20000028 	.word	0x20000028
 80030ac:	20000030 	.word	0x20000030

080030b0 <HAL_Init>:
{
 80030b0:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b4:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030bc:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c4:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c6:	f000 f82d 	bl	8003124 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ca:	200f      	movs	r0, #15
 80030cc:	f7ff ffcc 	bl	8003068 <HAL_InitTick>
  HAL_MspInit();
 80030d0:	f7ff fe58 	bl	8002d84 <HAL_MspInit>
}
 80030d4:	2000      	movs	r0, #0
 80030d6:	bd08      	pop	{r3, pc}
 80030d8:	40023c00 	.word	0x40023c00

080030dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80030dc:	4a03      	ldr	r2, [pc, #12]	; (80030ec <HAL_IncTick+0x10>)
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <HAL_IncTick+0x14>)
 80030e0:	6811      	ldr	r1, [r2, #0]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	440b      	add	r3, r1
 80030e6:	6013      	str	r3, [r2, #0]
}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	20001734 	.word	0x20001734
 80030f0:	2000002c 	.word	0x2000002c

080030f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80030f4:	4b01      	ldr	r3, [pc, #4]	; (80030fc <HAL_GetTick+0x8>)
 80030f6:	6818      	ldr	r0, [r3, #0]
}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20001734 	.word	0x20001734

08003100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003100:	b538      	push	{r3, r4, r5, lr}
 8003102:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003104:	f7ff fff6 	bl	80030f4 <HAL_GetTick>
 8003108:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800310a:	1c63      	adds	r3, r4, #1
 800310c:	d002      	beq.n	8003114 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <HAL_Delay+0x20>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003114:	f7ff ffee 	bl	80030f4 <HAL_GetTick>
 8003118:	1b43      	subs	r3, r0, r5
 800311a:	42a3      	cmp	r3, r4
 800311c:	d3fa      	bcc.n	8003114 <HAL_Delay+0x14>
  {
  }
}
 800311e:	bd38      	pop	{r3, r4, r5, pc}
 8003120:	2000002c 	.word	0x2000002c

08003124 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003124:	4907      	ldr	r1, [pc, #28]	; (8003144 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003126:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003128:	4b07      	ldr	r3, [pc, #28]	; (8003148 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800312a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800312c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003132:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8003136:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003138:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800313c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800313e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003140:	60cb      	str	r3, [r1, #12]
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00
 8003148:	05fa0000 	.word	0x05fa0000

0800314c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800314c:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_NVIC_SetPriority+0x68>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003154:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003156:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800315c:	2d04      	cmp	r5, #4
 800315e:	bf28      	it	cs
 8003160:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003162:	2c06      	cmp	r4, #6
 8003164:	d919      	bls.n	800319a <HAL_NVIC_SetPriority+0x4e>
 8003166:	3b03      	subs	r3, #3
 8003168:	f04f 34ff 	mov.w	r4, #4294967295
 800316c:	409c      	lsls	r4, r3
 800316e:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003172:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8003176:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	fa04 f405 	lsl.w	r4, r4, r5
 800317c:	ea21 0104 	bic.w	r1, r1, r4
 8003180:	fa01 f103 	lsl.w	r1, r1, r3
 8003184:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003188:	db0a      	blt.n	80031a0 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318a:	0109      	lsls	r1, r1, #4
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_NVIC_SetPriority+0x6c>)
 800318e:	b2c9      	uxtb	r1, r1
 8003190:	4403      	add	r3, r0
 8003192:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003196:	bc30      	pop	{r4, r5}
 8003198:	4770      	bx	lr
 800319a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319c:	4613      	mov	r3, r2
 800319e:	e7e8      	b.n	8003172 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a0:	f000 000f 	and.w	r0, r0, #15
 80031a4:	0109      	lsls	r1, r1, #4
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_NVIC_SetPriority+0x70>)
 80031a8:	b2c9      	uxtb	r1, r1
 80031aa:	4403      	add	r3, r0
 80031ac:	7619      	strb	r1, [r3, #24]
 80031ae:	bc30      	pop	{r4, r5}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000ed00 	.word	0xe000ed00
 80031b8:	e000e100 	.word	0xe000e100
 80031bc:	e000ecfc 	.word	0xe000ecfc

080031c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80031c0:	2800      	cmp	r0, #0
 80031c2:	db07      	blt.n	80031d4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c4:	f000 011f 	and.w	r1, r0, #31
 80031c8:	2301      	movs	r3, #1
 80031ca:	0940      	lsrs	r0, r0, #5
 80031cc:	4a02      	ldr	r2, [pc, #8]	; (80031d8 <HAL_NVIC_EnableIRQ+0x18>)
 80031ce:	408b      	lsls	r3, r1
 80031d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e000e100 	.word	0xe000e100

080031dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031dc:	3801      	subs	r0, #1
 80031de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80031e2:	d20d      	bcs.n	8003200 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031e6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031e8:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ea:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ec:	25f0      	movs	r5, #240	; 0xf0
 80031ee:	4c06      	ldr	r4, [pc, #24]	; (8003208 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031f0:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031f2:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fa:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80031fc:	bc30      	pop	{r4, r5}
 80031fe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003200:	2001      	movs	r0, #1
 8003202:	4770      	bx	lr
 8003204:	e000e010 	.word	0xe000e010
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800320c:	4a04      	ldr	r2, [pc, #16]	; (8003220 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800320e:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003210:	6813      	ldr	r3, [r2, #0]
 8003212:	bf0c      	ite	eq
 8003214:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003218:	f023 0304 	bicne.w	r3, r3, #4
 800321c:	6013      	str	r3, [r2, #0]
  }
}
 800321e:	4770      	bx	lr
 8003220:	e000e010 	.word	0xe000e010

08003224 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop

08003228 <HAL_SYSTICK_IRQHandler>:
{
 8003228:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800322a:	f7ff fffb 	bl	8003224 <HAL_SYSTICK_Callback>
}
 800322e:	bd08      	pop	{r3, pc}

08003230 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8003230:	b188      	cbz	r0, 8003256 <HAL_DAC_Init+0x26>
{ 
 8003232:	b510      	push	{r4, lr}
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003234:	7903      	ldrb	r3, [r0, #4]
 8003236:	4604      	mov	r4, r0
 8003238:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800323c:	b13b      	cbz	r3, 800324e <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800323e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003240:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003242:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003244:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8003246:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003248:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800324a:	7122      	strb	r2, [r4, #4]
}
 800324c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED; 
 800324e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003250:	f7ff fdc8 	bl	8002de4 <HAL_DAC_MspInit>
 8003254:	e7f3      	b.n	800323e <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8003256:	2001      	movs	r0, #1
}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop

0800325c <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800325c:	7942      	ldrb	r2, [r0, #5]
 800325e:	2a01      	cmp	r2, #1
 8003260:	d02c      	beq.n	80032bc <HAL_DAC_Start+0x60>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003262:	4603      	mov	r3, r0
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003264:	2201      	movs	r2, #1
 8003266:	6800      	ldr	r0, [r0, #0]
 8003268:	408a      	lsls	r2, r1
{
 800326a:	b410      	push	{r4}
  hdac->State = HAL_DAC_STATE_BUSY;
 800326c:	2402      	movs	r4, #2
 800326e:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8003270:	6804      	ldr	r4, [r0, #0]
 8003272:	4322      	orrs	r2, r4
 8003274:	6002      	str	r2, [r0, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003276:	b1a1      	cbz	r1, 80032a2 <HAL_DAC_Start+0x46>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8003278:	6801      	ldr	r1, [r0, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 800327a:	6802      	ldr	r2, [r0, #0]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 800327c:	0349      	lsls	r1, r1, #13
 800327e:	d508      	bpl.n	8003292 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8003280:	f402 1260 	and.w	r2, r2, #3670016	; 0x380000
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8003284:	f5b2 1f60 	cmp.w	r2, #3670016	; 0x380000
 8003288:	d103      	bne.n	8003292 <HAL_DAC_Start+0x36>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 800328a:	6842      	ldr	r2, [r0, #4]
 800328c:	f042 0202 	orr.w	r2, r2, #2
 8003290:	6042      	str	r2, [r0, #4]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003292:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8003294:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8003296:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003298:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 800329a:	7119      	strb	r1, [r3, #4]
}
 800329c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032a0:	4770      	bx	lr
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80032a2:	6801      	ldr	r1, [r0, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80032a4:	6802      	ldr	r2, [r0, #0]
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80032a6:	074c      	lsls	r4, r1, #29
 80032a8:	d5f3      	bpl.n	8003292 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80032aa:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80032ae:	2a38      	cmp	r2, #56	; 0x38
 80032b0:	d1ef      	bne.n	8003292 <HAL_DAC_Start+0x36>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80032b2:	6842      	ldr	r2, [r0, #4]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	6042      	str	r2, [r0, #4]
 80032ba:	e7ea      	b.n	8003292 <HAL_DAC_Start+0x36>
  __HAL_LOCK(hdac);
 80032bc:	2002      	movs	r0, #2
}
 80032be:	4770      	bx	lr

080032c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80032c0:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80032c2:	7940      	ldrb	r0, [r0, #5]
 80032c4:	2801      	cmp	r0, #1
 80032c6:	d01d      	beq.n	8003304 <HAL_DAC_ConfigChannel+0x44>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032c8:	2002      	movs	r0, #2
{
 80032ca:	b4f0      	push	{r4, r5, r6, r7}
  hdac->State = HAL_DAC_STATE_BUSY;
 80032cc:	7118      	strb	r0, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80032ce:	f640 76fe 	movw	r6, #4094	; 0xffe
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80032d2:	6808      	ldr	r0, [r1, #0]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80032d4:	25c0      	movs	r5, #192	; 0xc0
  tmpreg1 = hdac->Instance->CR;
 80032d6:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80032d8:	4096      	lsls	r6, r2
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80032da:	6849      	ldr	r1, [r1, #4]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80032dc:	4095      	lsls	r5, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032de:	2701      	movs	r7, #1
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80032e0:	4301      	orrs	r1, r0
  tmpreg1 = hdac->Instance->CR;
 80032e2:	6820      	ldr	r0, [r4, #0]
  tmpreg1 |= tmpreg2 << Channel;
 80032e4:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80032e8:	ea20 0106 	bic.w	r1, r0, r6
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032ec:	2600      	movs	r6, #0
  tmpreg1 |= tmpreg2 << Channel;
 80032ee:	430a      	orrs	r2, r1
  
  /* Return function status */
  return HAL_OK;
 80032f0:	4630      	mov	r0, r6
  hdac->Instance->CR = tmpreg1;
 80032f2:	6022      	str	r2, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80032f4:	6822      	ldr	r2, [r4, #0]
 80032f6:	ea22 0205 	bic.w	r2, r2, r5
 80032fa:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80032fc:	711f      	strb	r7, [r3, #4]
  __HAL_UNLOCK(hdac);
 80032fe:	715e      	strb	r6, [r3, #5]
}
 8003300:	bcf0      	pop	{r4, r5, r6, r7}
 8003302:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8003304:	2002      	movs	r0, #2
}
 8003306:	4770      	bx	lr

08003308 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003308:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 800330a:	6800      	ldr	r0, [r0, #0]
{  
 800330c:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0;
 800330e:	2400      	movs	r4, #0
 8003310:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 8003312:	9001      	str	r0, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 8003314:	b951      	cbnz	r1, 800332c <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003316:	9901      	ldr	r1, [sp, #4]
 8003318:	3108      	adds	r1, #8
 800331a:	440a      	add	r2, r1
 800331c:	9201      	str	r2, [sp, #4]
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800331e:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8003320:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8003322:	6013      	str	r3, [r2, #0]
}
 8003324:	b003      	add	sp, #12
 8003326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800332a:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800332c:	9901      	ldr	r1, [sp, #4]
 800332e:	3114      	adds	r1, #20
 8003330:	440a      	add	r2, r1
 8003332:	9201      	str	r2, [sp, #4]
 8003334:	e7f3      	b.n	800331e <HAL_DAC_SetValue+0x16>
 8003336:	bf00      	nop

08003338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800333c:	2300      	movs	r3, #0
{
 800333e:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003340:	f8df 8238 	ldr.w	r8, [pc, #568]	; 800357c <HAL_GPIO_Init+0x244>
 8003344:	680d      	ldr	r5, [r1, #0]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003346:	f8df e238 	ldr.w	lr, [pc, #568]	; 8003580 <HAL_GPIO_Init+0x248>
 800334a:	e003      	b.n	8003354 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 800334c:	3301      	adds	r3, #1
 800334e:	2b10      	cmp	r3, #16
 8003350:	f000 80be 	beq.w	80034d0 <HAL_GPIO_Init+0x198>
    ioposition = ((uint32_t)0x01) << position;
 8003354:	2201      	movs	r2, #1
 8003356:	409a      	lsls	r2, r3
    if(iocurrent == ioposition)
 8003358:	ea32 0405 	bics.w	r4, r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335c:	ea02 0c05 	and.w	ip, r2, r5
    if(iocurrent == ioposition)
 8003360:	d1f4      	bne.n	800334c <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003362:	684c      	ldr	r4, [r1, #4]
 8003364:	f024 0710 	bic.w	r7, r4, #16
 8003368:	2f02      	cmp	r7, #2
 800336a:	f040 80b4 	bne.w	80034d6 <HAL_GPIO_Init+0x19e>
        temp = GPIOx->AFR[position >> 3];
 800336e:	08df      	lsrs	r7, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003370:	f003 0a07 	and.w	sl, r3, #7
 8003374:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003378:	690e      	ldr	r6, [r1, #16]
 800337a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800337e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8003382:	f8d7 9020 	ldr.w	r9, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003386:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800338a:	fa06 f60a 	lsl.w	r6, r6, sl
 800338e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003392:	ea29 090b 	bic.w	r9, r9, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003396:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800339a:	ea46 0909 	orr.w	r9, r6, r9
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800339e:	fa0b f60a 	lsl.w	r6, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033a2:	ea04 0b0b 	and.w	fp, r4, fp
        GPIOx->AFR[position >> 3] = temp;
 80033a6:	f8c7 9020 	str.w	r9, [r7, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033aa:	ea6f 0906 	mvn.w	r9, r6
      temp = GPIOx->MODER;
 80033ae:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033b0:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033b4:	ea27 0606 	bic.w	r6, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033b8:	ea4b 0606 	orr.w	r6, fp, r6
      GPIOx->MODER = temp;
 80033bc:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80033be:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80033c0:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033c4:	ea07 0b09 	and.w	fp, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2));
 80033c8:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80033ca:	409e      	lsls	r6, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 80033cc:	fa07 f70a 	lsl.w	r7, r7, sl
 80033d0:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 80033d4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80033d6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033d8:	ea27 0202 	bic.w	r2, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80033dc:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 80033de:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80033e0:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033e2:	00e7      	lsls	r7, r4, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80033e4:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033e6:	ea06 0909 	and.w	r9, r6, r9
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80033ea:	fa02 f20a 	lsl.w	r2, r2, sl
 80033ee:	ea42 0209 	orr.w	r2, r2, r9
      GPIOx->PUPDR = temp;
 80033f2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033f4:	d5aa      	bpl.n	800334c <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80033fa:	f023 0903 	bic.w	r9, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033fe:	f003 0203 	and.w	r2, r3, #3
 8003402:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003404:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8003408:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800340c:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8003412:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8003416:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800341a:	fa06 fa02 	lsl.w	sl, r6, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8003422:	9701      	str	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003424:	4f4c      	ldr	r7, [pc, #304]	; (8003558 <HAL_GPIO_Init+0x220>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003426:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003428:	42b8      	cmp	r0, r7
        temp = SYSCFG->EXTICR[position >> 2];
 800342a:	f8d9 6008 	ldr.w	r6, [r9, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800342e:	ea26 060a 	bic.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003432:	d020      	beq.n	8003476 <HAL_GPIO_Init+0x13e>
 8003434:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003438:	42b8      	cmp	r0, r7
 800343a:	d064      	beq.n	8003506 <HAL_GPIO_Init+0x1ce>
 800343c:	4f47      	ldr	r7, [pc, #284]	; (800355c <HAL_GPIO_Init+0x224>)
 800343e:	42b8      	cmp	r0, r7
 8003440:	d066      	beq.n	8003510 <HAL_GPIO_Init+0x1d8>
 8003442:	4f47      	ldr	r7, [pc, #284]	; (8003560 <HAL_GPIO_Init+0x228>)
 8003444:	42b8      	cmp	r0, r7
 8003446:	d068      	beq.n	800351a <HAL_GPIO_Init+0x1e2>
 8003448:	4f46      	ldr	r7, [pc, #280]	; (8003564 <HAL_GPIO_Init+0x22c>)
 800344a:	42b8      	cmp	r0, r7
 800344c:	d06a      	beq.n	8003524 <HAL_GPIO_Init+0x1ec>
 800344e:	4f46      	ldr	r7, [pc, #280]	; (8003568 <HAL_GPIO_Init+0x230>)
 8003450:	42b8      	cmp	r0, r7
 8003452:	d071      	beq.n	8003538 <HAL_GPIO_Init+0x200>
 8003454:	4f45      	ldr	r7, [pc, #276]	; (800356c <HAL_GPIO_Init+0x234>)
 8003456:	42b8      	cmp	r0, r7
 8003458:	d073      	beq.n	8003542 <HAL_GPIO_Init+0x20a>
 800345a:	4f45      	ldr	r7, [pc, #276]	; (8003570 <HAL_GPIO_Init+0x238>)
 800345c:	42b8      	cmp	r0, r7
 800345e:	d066      	beq.n	800352e <HAL_GPIO_Init+0x1f6>
 8003460:	4f44      	ldr	r7, [pc, #272]	; (8003574 <HAL_GPIO_Init+0x23c>)
 8003462:	42b8      	cmp	r0, r7
 8003464:	d072      	beq.n	800354c <HAL_GPIO_Init+0x214>
 8003466:	4f44      	ldr	r7, [pc, #272]	; (8003578 <HAL_GPIO_Init+0x240>)
 8003468:	42b8      	cmp	r0, r7
 800346a:	bf0c      	ite	eq
 800346c:	2709      	moveq	r7, #9
 800346e:	270a      	movne	r7, #10
 8003470:	fa07 f202 	lsl.w	r2, r7, r2
 8003474:	4316      	orrs	r6, r2
        SYSCFG->EXTICR[position >> 2] = temp;
 8003476:	f8c9 6008 	str.w	r6, [r9, #8]
        temp &= ~((uint32_t)iocurrent);
 800347a:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->IMR;
 800347e:	f8de 2000 	ldr.w	r2, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003482:	03e6      	lsls	r6, r4, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 8003484:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8003488:	bf54      	ite	pl
 800348a:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800348c:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->IMR = temp;
 8003490:	f8ce 2000 	str.w	r2, [lr]

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003494:	03a2      	lsls	r2, r4, #14
        temp = EXTI->EMR;
 8003496:	f8de 6004 	ldr.w	r6, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800349a:	bf54      	ite	pl
 800349c:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800349e:	ea4c 0606 	orrmi.w	r6, ip, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034a2:	02e2      	lsls	r2, r4, #11
        EXTI->EMR = temp;
 80034a4:	f8ce 6004 	str.w	r6, [lr, #4]
        temp = EXTI->RTSR;
 80034a8:	f8de 6008 	ldr.w	r6, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 80034ac:	bf54      	ite	pl
 80034ae:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80034b0:	ea4c 0606 	orrmi.w	r6, ip, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034b4:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80034b6:	f8ce 6008 	str.w	r6, [lr, #8]
        temp = EXTI->FTSR;
 80034ba:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 80034be:	bf54      	ite	pl
 80034c0:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80034c2:	ea4c 0202 	orrmi.w	r2, ip, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 80034c6:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 80034c8:	f8ce 200c 	str.w	r2, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034cc:	f47f af42 	bne.w	8003354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034d0:	b003      	add	sp, #12
 80034d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp = GPIOx->MODER;
 80034d6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034da:	f04f 0903 	mov.w	r9, #3
      temp = GPIOx->MODER;
 80034de:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034e2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034e4:	ea04 0609 	and.w	r6, r4, r9
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034e8:	fa09 f90a 	lsl.w	r9, r9, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034ec:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034ee:	ea2b 0b09 	bic.w	fp, fp, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034f2:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034f6:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034fa:	ea46 060b 	orr.w	r6, r6, fp
      GPIOx->MODER = temp;
 80034fe:	6006      	str	r6, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003500:	f63f af6e 	bhi.w	80033e0 <HAL_GPIO_Init+0xa8>
 8003504:	e75b      	b.n	80033be <HAL_GPIO_Init+0x86>
 8003506:	2701      	movs	r7, #1
 8003508:	fa07 f202 	lsl.w	r2, r7, r2
 800350c:	4316      	orrs	r6, r2
 800350e:	e7b2      	b.n	8003476 <HAL_GPIO_Init+0x13e>
 8003510:	2702      	movs	r7, #2
 8003512:	fa07 f202 	lsl.w	r2, r7, r2
 8003516:	4316      	orrs	r6, r2
 8003518:	e7ad      	b.n	8003476 <HAL_GPIO_Init+0x13e>
 800351a:	2703      	movs	r7, #3
 800351c:	fa07 f202 	lsl.w	r2, r7, r2
 8003520:	4316      	orrs	r6, r2
 8003522:	e7a8      	b.n	8003476 <HAL_GPIO_Init+0x13e>
 8003524:	2704      	movs	r7, #4
 8003526:	fa07 f202 	lsl.w	r2, r7, r2
 800352a:	4316      	orrs	r6, r2
 800352c:	e7a3      	b.n	8003476 <HAL_GPIO_Init+0x13e>
 800352e:	2707      	movs	r7, #7
 8003530:	fa07 f202 	lsl.w	r2, r7, r2
 8003534:	4316      	orrs	r6, r2
 8003536:	e79e      	b.n	8003476 <HAL_GPIO_Init+0x13e>
 8003538:	2705      	movs	r7, #5
 800353a:	fa07 f202 	lsl.w	r2, r7, r2
 800353e:	4316      	orrs	r6, r2
 8003540:	e799      	b.n	8003476 <HAL_GPIO_Init+0x13e>
 8003542:	2706      	movs	r7, #6
 8003544:	fa07 f202 	lsl.w	r2, r7, r2
 8003548:	4316      	orrs	r6, r2
 800354a:	e794      	b.n	8003476 <HAL_GPIO_Init+0x13e>
 800354c:	2708      	movs	r7, #8
 800354e:	fa07 f202 	lsl.w	r2, r7, r2
 8003552:	4316      	orrs	r6, r2
 8003554:	e78f      	b.n	8003476 <HAL_GPIO_Init+0x13e>
 8003556:	bf00      	nop
 8003558:	40020000 	.word	0x40020000
 800355c:	40020800 	.word	0x40020800
 8003560:	40020c00 	.word	0x40020c00
 8003564:	40021000 	.word	0x40021000
 8003568:	40021400 	.word	0x40021400
 800356c:	40021800 	.word	0x40021800
 8003570:	40021c00 	.word	0x40021c00
 8003574:	40022000 	.word	0x40022000
 8003578:	40022400 	.word	0x40022400
 800357c:	40023800 	.word	0x40023800
 8003580:	40013c00 	.word	0x40013c00

08003584 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003584:	b902      	cbnz	r2, 8003588 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003586:	0409      	lsls	r1, r1, #16
 8003588:	6181      	str	r1, [r0, #24]
  }
}
 800358a:	4770      	bx	lr

0800358c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800358c:	4a02      	ldr	r2, [pc, #8]	; (8003598 <HAL_PWR_EnableBkUpAccess+0xc>)
 800358e:	6813      	ldr	r3, [r2, #0]
 8003590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003594:	6013      	str	r3, [r2, #0]
}
 8003596:	4770      	bx	lr
 8003598:	40007000 	.word	0x40007000

0800359c <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 800359c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Enable Backup regulator */
  PWR->CSR1 |= PWR_CSR1_BRE;
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <HAL_PWREx_EnableBkUpReg+0x38>)
 80035a0:	685a      	ldr	r2, [r3, #4]

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80035a2:	461d      	mov	r5, r3
  PWR->CSR1 |= PWR_CSR1_BRE;
 80035a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a8:	605a      	str	r2, [r3, #4]
  PWR->CSR1 |= PWR_CSR1_EIWUP;
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b0:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 80035b2:	f7ff fd9f 	bl	80030f4 <HAL_GetTick>
 80035b6:	4604      	mov	r4, r0
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80035b8:	e005      	b.n	80035c6 <HAL_PWREx_EnableBkUpReg+0x2a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 80035ba:	f7ff fd9b 	bl	80030f4 <HAL_GetTick>
 80035be:	1b00      	subs	r0, r0, r4
 80035c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80035c4:	d804      	bhi.n	80035d0 <HAL_PWREx_EnableBkUpReg+0x34>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80035c6:	686b      	ldr	r3, [r5, #4]
 80035c8:	071b      	lsls	r3, r3, #28
 80035ca:	d5f6      	bpl.n	80035ba <HAL_PWREx_EnableBkUpReg+0x1e>
    {
      return HAL_TIMEOUT;
    } 
  }
  return HAL_OK;
 80035cc:	2000      	movs	r0, #0
}
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 80035d0:	2003      	movs	r0, #3
}
 80035d2:	bd38      	pop	{r3, r4, r5, pc}
 80035d4:	40007000 	.word	0x40007000

080035d8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80035d8:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035da:	4b1c      	ldr	r3, [pc, #112]	; (800364c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80035dc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80035de:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 80035e2:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e4:	6411      	str	r1, [r2, #64]	; 0x40
{
 80035e6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e8:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035ea:	461d      	mov	r5, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ec:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80035f0:	9201      	str	r2, [sp, #4]
 80035f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035fa:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80035fc:	f7ff fd7a 	bl	80030f4 <HAL_GetTick>
 8003600:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003602:	e005      	b.n	8003610 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003604:	f7ff fd76 	bl	80030f4 <HAL_GetTick>
 8003608:	1b00      	subs	r0, r0, r4
 800360a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800360e:	d817      	bhi.n	8003640 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003610:	686b      	ldr	r3, [r5, #4]
 8003612:	03da      	lsls	r2, r3, #15
 8003614:	d5f6      	bpl.n	8003604 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003616:	682b      	ldr	r3, [r5, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003618:	4e0c      	ldr	r6, [pc, #48]	; (800364c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800361a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003620:	f7ff fd68 	bl	80030f4 <HAL_GetTick>
 8003624:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003626:	e005      	b.n	8003634 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003628:	f7ff fd64 	bl	80030f4 <HAL_GetTick>
 800362c:	1b00      	subs	r0, r0, r4
 800362e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003632:	d805      	bhi.n	8003640 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003634:	6873      	ldr	r3, [r6, #4]
 8003636:	039b      	lsls	r3, r3, #14
 8003638:	d5f6      	bpl.n	8003628 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800363a:	2000      	movs	r0, #0
}
 800363c:	b002      	add	sp, #8
 800363e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8003640:	2003      	movs	r0, #3
}
 8003642:	b002      	add	sp, #8
 8003644:	bd70      	pop	{r4, r5, r6, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800
 800364c:	40007000 	.word	0x40007000

08003650 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003650:	2800      	cmp	r0, #0
 8003652:	f000 8189 	beq.w	8003968 <HAL_RCC_OscConfig+0x318>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003656:	6803      	ldr	r3, [r0, #0]
{
 8003658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365c:	07dd      	lsls	r5, r3, #31
{
 800365e:	b082      	sub	sp, #8
 8003660:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003662:	d535      	bpl.n	80036d0 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003664:	49ad      	ldr	r1, [pc, #692]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 8003666:	688a      	ldr	r2, [r1, #8]
 8003668:	f002 020c 	and.w	r2, r2, #12
 800366c:	2a04      	cmp	r2, #4
 800366e:	f000 80e7 	beq.w	8003840 <HAL_RCC_OscConfig+0x1f0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003672:	688a      	ldr	r2, [r1, #8]
 8003674:	f002 020c 	and.w	r2, r2, #12
 8003678:	2a08      	cmp	r2, #8
 800367a:	f000 80dd 	beq.w	8003838 <HAL_RCC_OscConfig+0x1e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800367e:	6863      	ldr	r3, [r4, #4]
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003684:	d010      	beq.n	80036a8 <HAL_RCC_OscConfig+0x58>
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8105 	beq.w	8003896 <HAL_RCC_OscConfig+0x246>
 800368c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003690:	4ba2      	ldr	r3, [pc, #648]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	f000 816a 	beq.w	800396c <HAL_RCC_OscConfig+0x31c>
 8003698:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e004      	b.n	80036b2 <HAL_RCC_OscConfig+0x62>
 80036a8:	4a9c      	ldr	r2, [pc, #624]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 80036aa:	6813      	ldr	r3, [r2, #0]
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b2:	f7ff fd1f 	bl	80030f4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4e99      	ldr	r6, [pc, #612]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80036b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	e005      	b.n	80036c8 <HAL_RCC_OscConfig+0x78>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036bc:	f7ff fd1a 	bl	80030f4 <HAL_GetTick>
 80036c0:	1b40      	subs	r0, r0, r5
 80036c2:	2864      	cmp	r0, #100	; 0x64
 80036c4:	f200 80e3 	bhi.w	800388e <HAL_RCC_OscConfig+0x23e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c8:	6833      	ldr	r3, [r6, #0]
 80036ca:	039a      	lsls	r2, r3, #14
 80036cc:	d5f6      	bpl.n	80036bc <HAL_RCC_OscConfig+0x6c>
 80036ce:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d0:	079f      	lsls	r7, r3, #30
 80036d2:	d52a      	bpl.n	800372a <HAL_RCC_OscConfig+0xda>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036d4:	4a91      	ldr	r2, [pc, #580]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 80036d6:	6891      	ldr	r1, [r2, #8]
 80036d8:	f011 0f0c 	tst.w	r1, #12
 80036dc:	f000 808c 	beq.w	80037f8 <HAL_RCC_OscConfig+0x1a8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e0:	6891      	ldr	r1, [r2, #8]
 80036e2:	f001 010c 	and.w	r1, r1, #12
 80036e6:	2908      	cmp	r1, #8
 80036e8:	f000 8082 	beq.w	80037f0 <HAL_RCC_OscConfig+0x1a0>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036ec:	68e3      	ldr	r3, [r4, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8109 	beq.w	8003906 <HAL_RCC_OscConfig+0x2b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f4:	4b89      	ldr	r3, [pc, #548]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 80036f6:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	461e      	mov	r6, r3
        __HAL_RCC_HSI_ENABLE();
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003700:	f7ff fcf8 	bl	80030f4 <HAL_GetTick>
 8003704:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	e005      	b.n	8003714 <HAL_RCC_OscConfig+0xc4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003708:	f7ff fcf4 	bl	80030f4 <HAL_GetTick>
 800370c:	1b40      	subs	r0, r0, r5
 800370e:	2802      	cmp	r0, #2
 8003710:	f200 80bd 	bhi.w	800388e <HAL_RCC_OscConfig+0x23e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	6833      	ldr	r3, [r6, #0]
 8003716:	0798      	lsls	r0, r3, #30
 8003718:	d5f6      	bpl.n	8003708 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371a:	6833      	ldr	r3, [r6, #0]
 800371c:	6922      	ldr	r2, [r4, #16]
 800371e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003722:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003726:	6033      	str	r3, [r6, #0]
 8003728:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372a:	071a      	lsls	r2, r3, #28
 800372c:	d428      	bmi.n	8003780 <HAL_RCC_OscConfig+0x130>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800372e:	075d      	lsls	r5, r3, #29
 8003730:	d53e      	bpl.n	80037b0 <HAL_RCC_OscConfig+0x160>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003732:	4b7a      	ldr	r3, [pc, #488]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 8003734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003736:	00d0      	lsls	r0, r2, #3
 8003738:	d47c      	bmi.n	8003834 <HAL_RCC_OscConfig+0x1e4>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800373c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800373e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800374e:	4b74      	ldr	r3, [pc, #464]	; (8003920 <HAL_RCC_OscConfig+0x2d0>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	05d1      	lsls	r1, r2, #23
 8003754:	f140 808a 	bpl.w	800386c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003758:	68a3      	ldr	r3, [r4, #8]
 800375a:	2b01      	cmp	r3, #1
 800375c:	f000 80ec 	beq.w	8003938 <HAL_RCC_OscConfig+0x2e8>
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80af 	beq.w	80038c4 <HAL_RCC_OscConfig+0x274>
 8003766:	2b05      	cmp	r3, #5
 8003768:	4b6c      	ldr	r3, [pc, #432]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 800376a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800376c:	f000 8106 	beq.w	800397c <HAL_RCC_OscConfig+0x32c>
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	671a      	str	r2, [r3, #112]	; 0x70
 8003776:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003778:	f022 0204 	bic.w	r2, r2, #4
 800377c:	671a      	str	r2, [r3, #112]	; 0x70
 800377e:	e0e0      	b.n	8003942 <HAL_RCC_OscConfig+0x2f2>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003780:	6963      	ldr	r3, [r4, #20]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d043      	beq.n	800380e <HAL_RCC_OscConfig+0x1be>
      __HAL_RCC_LSI_ENABLE();
 8003786:	4b65      	ldr	r3, [pc, #404]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 8003788:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378a:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003792:	f7ff fcaf 	bl	80030f4 <HAL_GetTick>
 8003796:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003798:	e004      	b.n	80037a4 <HAL_RCC_OscConfig+0x154>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379a:	f7ff fcab 	bl	80030f4 <HAL_GetTick>
 800379e:	1b40      	subs	r0, r0, r5
 80037a0:	2802      	cmp	r0, #2
 80037a2:	d874      	bhi.n	800388e <HAL_RCC_OscConfig+0x23e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80037a6:	079b      	lsls	r3, r3, #30
 80037a8:	d5f7      	bpl.n	800379a <HAL_RCC_OscConfig+0x14a>
 80037aa:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ac:	075d      	lsls	r5, r3, #29
 80037ae:	d4c0      	bmi.n	8003732 <HAL_RCC_OscConfig+0xe2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b0:	69a3      	ldr	r3, [r4, #24]
 80037b2:	b1cb      	cbz	r3, 80037e8 <HAL_RCC_OscConfig+0x198>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b4:	4a59      	ldr	r2, [pc, #356]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 80037b6:	6891      	ldr	r1, [r2, #8]
 80037b8:	f001 010c 	and.w	r1, r1, #12
 80037bc:	2908      	cmp	r1, #8
 80037be:	d022      	beq.n	8003806 <HAL_RCC_OscConfig+0x1b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c0:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	6813      	ldr	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c4:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 80037c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ca:	6013      	str	r3, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037cc:	f000 80de 	beq.w	800398c <HAL_RCC_OscConfig+0x33c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7ff fc90 	bl	80030f4 <HAL_GetTick>
 80037d4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d6:	e004      	b.n	80037e2 <HAL_RCC_OscConfig+0x192>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d8:	f7ff fc8c 	bl	80030f4 <HAL_GetTick>
 80037dc:	1b00      	subs	r0, r0, r4
 80037de:	2802      	cmp	r0, #2
 80037e0:	d855      	bhi.n	800388e <HAL_RCC_OscConfig+0x23e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	682b      	ldr	r3, [r5, #0]
 80037e4:	019b      	lsls	r3, r3, #6
 80037e6:	d4f7      	bmi.n	80037d8 <HAL_RCC_OscConfig+0x188>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80037e8:	2000      	movs	r0, #0
}
 80037ea:	b002      	add	sp, #8
 80037ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f0:	6852      	ldr	r2, [r2, #4]
 80037f2:	0256      	lsls	r6, r2, #9
 80037f4:	f53f af7a 	bmi.w	80036ec <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f8:	4a48      	ldr	r2, [pc, #288]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	0795      	lsls	r5, r2, #30
 80037fe:	d529      	bpl.n	8003854 <HAL_RCC_OscConfig+0x204>
 8003800:	68e2      	ldr	r2, [r4, #12]
 8003802:	2a01      	cmp	r2, #1
 8003804:	d026      	beq.n	8003854 <HAL_RCC_OscConfig+0x204>
    return HAL_ERROR;
 8003806:	2001      	movs	r0, #1
}
 8003808:	b002      	add	sp, #8
 800380a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800380e:	4b43      	ldr	r3, [pc, #268]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 8003810:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003812:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800381a:	f7ff fc6b 	bl	80030f4 <HAL_GetTick>
 800381e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003820:	e004      	b.n	800382c <HAL_RCC_OscConfig+0x1dc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003822:	f7ff fc67 	bl	80030f4 <HAL_GetTick>
 8003826:	1b40      	subs	r0, r0, r5
 8003828:	2802      	cmp	r0, #2
 800382a:	d830      	bhi.n	800388e <HAL_RCC_OscConfig+0x23e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800382e:	079f      	lsls	r7, r3, #30
 8003830:	d4f7      	bmi.n	8003822 <HAL_RCC_OscConfig+0x1d2>
 8003832:	e7ba      	b.n	80037aa <HAL_RCC_OscConfig+0x15a>
  FlagStatus pwrclkchanged = RESET;
 8003834:	2500      	movs	r5, #0
 8003836:	e78a      	b.n	800374e <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003838:	684a      	ldr	r2, [r1, #4]
 800383a:	0250      	lsls	r0, r2, #9
 800383c:	f57f af1f 	bpl.w	800367e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003840:	4a36      	ldr	r2, [pc, #216]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	0391      	lsls	r1, r2, #14
 8003846:	f57f af43 	bpl.w	80036d0 <HAL_RCC_OscConfig+0x80>
 800384a:	6862      	ldr	r2, [r4, #4]
 800384c:	2a00      	cmp	r2, #0
 800384e:	f47f af3f 	bne.w	80036d0 <HAL_RCC_OscConfig+0x80>
 8003852:	e7d8      	b.n	8003806 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4931      	ldr	r1, [pc, #196]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 8003856:	6920      	ldr	r0, [r4, #16]
 8003858:	680a      	ldr	r2, [r1, #0]
 800385a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800385e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003862:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003864:	071a      	lsls	r2, r3, #28
 8003866:	f57f af62 	bpl.w	800372e <HAL_RCC_OscConfig+0xde>
 800386a:	e789      	b.n	8003780 <HAL_RCC_OscConfig+0x130>
      PWR->CR1 |= PWR_CR1_DBP;
 800386c:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800386e:	461f      	mov	r7, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8003870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003874:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003876:	f7ff fc3d 	bl	80030f4 <HAL_GetTick>
 800387a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	05da      	lsls	r2, r3, #23
 8003880:	f53f af6a 	bmi.w	8003758 <HAL_RCC_OscConfig+0x108>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003884:	f7ff fc36 	bl	80030f4 <HAL_GetTick>
 8003888:	1b80      	subs	r0, r0, r6
 800388a:	2864      	cmp	r0, #100	; 0x64
 800388c:	d9f6      	bls.n	800387c <HAL_RCC_OscConfig+0x22c>
            return HAL_TIMEOUT;
 800388e:	2003      	movs	r0, #3
}
 8003890:	b002      	add	sp, #8
 8003892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003896:	4b21      	ldr	r3, [pc, #132]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 8003898:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389a:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038aa:	f7ff fc23 	bl	80030f4 <HAL_GetTick>
 80038ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b0:	e004      	b.n	80038bc <HAL_RCC_OscConfig+0x26c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b2:	f7ff fc1f 	bl	80030f4 <HAL_GetTick>
 80038b6:	1b40      	subs	r0, r0, r5
 80038b8:	2864      	cmp	r0, #100	; 0x64
 80038ba:	d8e8      	bhi.n	800388e <HAL_RCC_OscConfig+0x23e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038bc:	6833      	ldr	r3, [r6, #0]
 80038be:	039b      	lsls	r3, r3, #14
 80038c0:	d4f7      	bmi.n	80038b2 <HAL_RCC_OscConfig+0x262>
 80038c2:	e704      	b.n	80036ce <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c4:	4b15      	ldr	r3, [pc, #84]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038cc:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	671a      	str	r2, [r3, #112]	; 0x70
 80038d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038d6:	f022 0204 	bic.w	r2, r2, #4
 80038da:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80038dc:	f7ff fc0a 	bl	80030f4 <HAL_GetTick>
 80038e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e2:	e004      	b.n	80038ee <HAL_RCC_OscConfig+0x29e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e4:	f7ff fc06 	bl	80030f4 <HAL_GetTick>
 80038e8:	1b80      	subs	r0, r0, r6
 80038ea:	4540      	cmp	r0, r8
 80038ec:	d8cf      	bhi.n	800388e <HAL_RCC_OscConfig+0x23e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038f0:	0798      	lsls	r0, r3, #30
 80038f2:	d4f7      	bmi.n	80038e4 <HAL_RCC_OscConfig+0x294>
    if(pwrclkchanged == SET)
 80038f4:	2d00      	cmp	r5, #0
 80038f6:	f43f af5b 	beq.w	80037b0 <HAL_RCC_OscConfig+0x160>
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fa:	4a08      	ldr	r2, [pc, #32]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 80038fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80038fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003902:	6413      	str	r3, [r2, #64]	; 0x40
 8003904:	e754      	b.n	80037b0 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_DISABLE();
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_OscConfig+0x2cc>)
 8003908:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390a:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003912:	f7ff fbef 	bl	80030f4 <HAL_GetTick>
 8003916:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003918:	e009      	b.n	800392e <HAL_RCC_OscConfig+0x2de>
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003924:	f7ff fbe6 	bl	80030f4 <HAL_GetTick>
 8003928:	1b40      	subs	r0, r0, r5
 800392a:	2802      	cmp	r0, #2
 800392c:	d8af      	bhi.n	800388e <HAL_RCC_OscConfig+0x23e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392e:	6833      	ldr	r3, [r6, #0]
 8003930:	0799      	lsls	r1, r3, #30
 8003932:	d4f7      	bmi.n	8003924 <HAL_RCC_OscConfig+0x2d4>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	e6f8      	b.n	800372a <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003938:	4a2d      	ldr	r2, [pc, #180]	; (80039f0 <HAL_RCC_OscConfig+0x3a0>)
 800393a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003942:	f7ff fbd7 	bl	80030f4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003946:	4f2a      	ldr	r7, [pc, #168]	; (80039f0 <HAL_RCC_OscConfig+0x3a0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003948:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800394c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394e:	e004      	b.n	800395a <HAL_RCC_OscConfig+0x30a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7ff fbd0 	bl	80030f4 <HAL_GetTick>
 8003954:	1b80      	subs	r0, r0, r6
 8003956:	4540      	cmp	r0, r8
 8003958:	d899      	bhi.n	800388e <HAL_RCC_OscConfig+0x23e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800395c:	079b      	lsls	r3, r3, #30
 800395e:	d5f7      	bpl.n	8003950 <HAL_RCC_OscConfig+0x300>
    if(pwrclkchanged == SET)
 8003960:	2d00      	cmp	r5, #0
 8003962:	f43f af25 	beq.w	80037b0 <HAL_RCC_OscConfig+0x160>
 8003966:	e7c8      	b.n	80038fa <HAL_RCC_OscConfig+0x2aa>
    return HAL_ERROR;
 8003968:	2001      	movs	r0, #1
}
 800396a:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e69a      	b.n	80036b2 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397c:	f042 0204 	orr.w	r2, r2, #4
 8003980:	671a      	str	r2, [r3, #112]	; 0x70
 8003982:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	671a      	str	r2, [r3, #112]	; 0x70
 800398a:	e7da      	b.n	8003942 <HAL_RCC_OscConfig+0x2f2>
        tickstart = HAL_GetTick();
 800398c:	f7ff fbb2 	bl	80030f4 <HAL_GetTick>
 8003990:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003992:	e005      	b.n	80039a0 <HAL_RCC_OscConfig+0x350>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003994:	f7ff fbae 	bl	80030f4 <HAL_GetTick>
 8003998:	1b80      	subs	r0, r0, r6
 800399a:	2802      	cmp	r0, #2
 800399c:	f63f af77 	bhi.w	800388e <HAL_RCC_OscConfig+0x23e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	0199      	lsls	r1, r3, #6
 80039a4:	d4f6      	bmi.n	8003994 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039a6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80039aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80039ac:	4313      	orrs	r3, r2
 80039ae:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 80039b2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80039b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80039b8:	0852      	lsrs	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ba:	4c0d      	ldr	r4, [pc, #52]	; (80039f0 <HAL_RCC_OscConfig+0x3a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039bc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80039c0:	3a01      	subs	r2, #1
 80039c2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80039c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039ca:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80039d4:	f7ff fb8e 	bl	80030f4 <HAL_GetTick>
 80039d8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039da:	e005      	b.n	80039e8 <HAL_RCC_OscConfig+0x398>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039dc:	f7ff fb8a 	bl	80030f4 <HAL_GetTick>
 80039e0:	1b40      	subs	r0, r0, r5
 80039e2:	2802      	cmp	r0, #2
 80039e4:	f63f af53 	bhi.w	800388e <HAL_RCC_OscConfig+0x23e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	019a      	lsls	r2, r3, #6
 80039ec:	d5f6      	bpl.n	80039dc <HAL_RCC_OscConfig+0x38c>
 80039ee:	e6fb      	b.n	80037e8 <HAL_RCC_OscConfig+0x198>
 80039f0:	40023800 	.word	0x40023800

080039f4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f4:	2800      	cmp	r0, #0
 80039f6:	f000 80b3 	beq.w	8003b60 <HAL_RCC_ClockConfig+0x16c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039fa:	4a61      	ldr	r2, [pc, #388]	; (8003b80 <HAL_RCC_ClockConfig+0x18c>)
 80039fc:	6813      	ldr	r3, [r2, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	428b      	cmp	r3, r1
{
 8003a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a08:	4604      	mov	r4, r0
 8003a0a:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a0c:	d20c      	bcs.n	8003a28 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	6813      	ldr	r3, [r2, #0]
 8003a10:	f023 030f 	bic.w	r3, r3, #15
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	428b      	cmp	r3, r1
 8003a20:	d002      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003a22:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8003a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	0798      	lsls	r0, r3, #30
 8003a2c:	d514      	bpl.n	8003a58 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2e:	0759      	lsls	r1, r3, #29
 8003a30:	d504      	bpl.n	8003a3c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a32:	4954      	ldr	r1, [pc, #336]	; (8003b84 <HAL_RCC_ClockConfig+0x190>)
 8003a34:	688a      	ldr	r2, [r1, #8]
 8003a36:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003a3a:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	071a      	lsls	r2, r3, #28
 8003a3e:	d504      	bpl.n	8003a4a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a40:	4950      	ldr	r1, [pc, #320]	; (8003b84 <HAL_RCC_ClockConfig+0x190>)
 8003a42:	688a      	ldr	r2, [r1, #8]
 8003a44:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003a48:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4a:	494e      	ldr	r1, [pc, #312]	; (8003b84 <HAL_RCC_ClockConfig+0x190>)
 8003a4c:	68a0      	ldr	r0, [r4, #8]
 8003a4e:	688a      	ldr	r2, [r1, #8]
 8003a50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a54:	4302      	orrs	r2, r0
 8003a56:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a58:	07df      	lsls	r7, r3, #31
 8003a5a:	d521      	bpl.n	8003aa0 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5c:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	4b49      	ldr	r3, [pc, #292]	; (8003b84 <HAL_RCC_ClockConfig+0x190>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a60:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a64:	d07e      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x170>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a66:	2a02      	cmp	r2, #2
 8003a68:	d077      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6a:	0799      	lsls	r1, r3, #30
 8003a6c:	d5d9      	bpl.n	8003a22 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6e:	4945      	ldr	r1, [pc, #276]	; (8003b84 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a74:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	460f      	mov	r7, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a78:	f023 0303 	bic.w	r3, r3, #3
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003a80:	f7ff fb38 	bl	80030f4 <HAL_GetTick>
 8003a84:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	e004      	b.n	8003a92 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a88:	f7ff fb34 	bl	80030f4 <HAL_GetTick>
 8003a8c:	1b80      	subs	r0, r0, r6
 8003a8e:	4540      	cmp	r0, r8
 8003a90:	d86b      	bhi.n	8003b6a <HAL_RCC_ClockConfig+0x176>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6862      	ldr	r2, [r4, #4]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003a9e:	d1f3      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x94>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa0:	4a37      	ldr	r2, [pc, #220]	; (8003b80 <HAL_RCC_ClockConfig+0x18c>)
 8003aa2:	6813      	ldr	r3, [r2, #0]
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	42ab      	cmp	r3, r5
 8003aaa:	d909      	bls.n	8003ac0 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aac:	6813      	ldr	r3, [r2, #0]
 8003aae:	f023 030f 	bic.w	r3, r3, #15
 8003ab2:	432b      	orrs	r3, r5
 8003ab4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	6813      	ldr	r3, [r2, #0]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	42ab      	cmp	r3, r5
 8003abe:	d1b0      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	075a      	lsls	r2, r3, #29
 8003ac4:	d506      	bpl.n	8003ad4 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac6:	492f      	ldr	r1, [pc, #188]	; (8003b84 <HAL_RCC_ClockConfig+0x190>)
 8003ac8:	68e0      	ldr	r0, [r4, #12]
 8003aca:	688a      	ldr	r2, [r1, #8]
 8003acc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003ad0:	4302      	orrs	r2, r0
 8003ad2:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	d430      	bmi.n	8003b3a <HAL_RCC_ClockConfig+0x146>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ad8:	492a      	ldr	r1, [pc, #168]	; (8003b84 <HAL_RCC_ClockConfig+0x190>)
 8003ada:	688b      	ldr	r3, [r1, #8]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d038      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x162>
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d118      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x126>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae8:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003aea:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af0:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003af2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8003af6:	d03a      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x17a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af8:	4823      	ldr	r0, [pc, #140]	; (8003b88 <HAL_RCC_ClockConfig+0x194>)
 8003afa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003afe:	2300      	movs	r3, #0
 8003b00:	fba1 0100 	umull	r0, r1, r1, r0
 8003b04:	f7fc fb98 	bl	8000238 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003b08:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <HAL_RCC_ClockConfig+0x190>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003b10:	3301      	adds	r3, #1
 8003b12:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003b14:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8003b18:	e000      	b.n	8003b1c <HAL_RCC_ClockConfig+0x128>
      sysclockfreq = HSI_VALUE;
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b1c:	4a19      	ldr	r2, [pc, #100]	; (8003b84 <HAL_RCC_ClockConfig+0x190>)
  HAL_InitTick (TICK_INT_PRIORITY);
 8003b1e:	200f      	movs	r0, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b20:	4c1b      	ldr	r4, [pc, #108]	; (8003b90 <HAL_RCC_ClockConfig+0x19c>)
 8003b22:	6892      	ldr	r2, [r2, #8]
 8003b24:	491b      	ldr	r1, [pc, #108]	; (8003b94 <HAL_RCC_ClockConfig+0x1a0>)
 8003b26:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003b2a:	5ca2      	ldrb	r2, [r4, r2]
 8003b2c:	40d3      	lsrs	r3, r2
 8003b2e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003b30:	f7ff fa9a 	bl	8003068 <HAL_InitTick>
  return HAL_OK;
 8003b34:	2000      	movs	r0, #0
}
 8003b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b3a:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <HAL_RCC_ClockConfig+0x190>)
 8003b3c:	6921      	ldr	r1, [r4, #16]
 8003b3e:	6893      	ldr	r3, [r2, #8]
 8003b40:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003b44:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b48:	490e      	ldr	r1, [pc, #56]	; (8003b84 <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b4a:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b4c:	688b      	ldr	r3, [r1, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d1c6      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0xf0>
 8003b56:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <HAL_RCC_ClockConfig+0x194>)
 8003b58:	e7e0      	b.n	8003b1c <HAL_RCC_ClockConfig+0x128>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	0198      	lsls	r0, r3, #6
 8003b5c:	d487      	bmi.n	8003a6e <HAL_RCC_ClockConfig+0x7a>
 8003b5e:	e760      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003b60:	2001      	movs	r0, #1
}
 8003b62:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b64:	039e      	lsls	r6, r3, #14
 8003b66:	d482      	bmi.n	8003a6e <HAL_RCC_ClockConfig+0x7a>
 8003b68:	e75b      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003b6a:	2003      	movs	r0, #3
 8003b6c:	e75a      	b.n	8003a24 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6e:	4807      	ldr	r0, [pc, #28]	; (8003b8c <HAL_RCC_ClockConfig+0x198>)
 8003b70:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003b74:	fba1 0100 	umull	r0, r1, r1, r0
 8003b78:	f7fc fb5e 	bl	8000238 <__aeabi_uldivmod>
 8003b7c:	e7c4      	b.n	8003b08 <HAL_RCC_ClockConfig+0x114>
 8003b7e:	bf00      	nop
 8003b80:	40023c00 	.word	0x40023c00
 8003b84:	40023800 	.word	0x40023800
 8003b88:	007a1200 	.word	0x007a1200
 8003b8c:	00f42400 	.word	0x00f42400
 8003b90:	080046c0 	.word	0x080046c0
 8003b94:	20000028 	.word	0x20000028

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003b98:	4b01      	ldr	r3, [pc, #4]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000028 	.word	0x20000028

08003ba4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ba4:	6803      	ldr	r3, [r0, #0]
{
 8003ba6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003baa:	f013 0501 	ands.w	r5, r3, #1
{
 8003bae:	b083      	sub	sp, #12
 8003bb0:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bb2:	d00b      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bb4:	4a9f      	ldr	r2, [pc, #636]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003bb6:	6891      	ldr	r1, [r2, #8]
 8003bb8:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003bbc:	6091      	str	r1, [r2, #8]
 8003bbe:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8003bc0:	6891      	ldr	r1, [r2, #8]
 8003bc2:	4329      	orrs	r1, r5

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003bc4:	fab5 f585 	clz	r5, r5
 8003bc8:	096d      	lsrs	r5, r5, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bca:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003bcc:	f413 2600 	ands.w	r6, r3, #524288	; 0x80000
 8003bd0:	d010      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bd2:	4998      	ldr	r1, [pc, #608]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003bd4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8003bd6:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bda:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bde:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003be2:	ea42 0206 	orr.w	r2, r2, r6
 8003be6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bea:	f000 81d2 	beq.w	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bee:	fab6 f686 	clz	r6, r6
 8003bf2:	0976      	lsrs	r6, r6, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bf4:	02df      	lsls	r7, r3, #11
 8003bf6:	d510      	bpl.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bf8:	488e      	ldr	r0, [pc, #568]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003bfa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003bfc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c00:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c04:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003c08:	ea42 0201 	orr.w	r2, r2, r1
 8003c0c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c10:	f000 81c2 	beq.w	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8003c14:	2900      	cmp	r1, #0
 8003c16:	bf08      	it	eq
 8003c18:	2601      	moveq	r6, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c1a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003c1e:	bf18      	it	ne
 8003c20:	2501      	movne	r5, #1
  {
      plli2sused = 1;
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c22:	0698      	lsls	r0, r3, #26
 8003c24:	f100 816d 	bmi.w	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c28:	06d9      	lsls	r1, r3, #27
 8003c2a:	d50c      	bpl.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c2c:	4a81      	ldr	r2, [pc, #516]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003c2e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003c32:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003c36:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003c3a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003c3e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c40:	4301      	orrs	r1, r0
 8003c42:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c46:	045a      	lsls	r2, r3, #17
 8003c48:	d508      	bpl.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c4a:	497a      	ldr	r1, [pc, #488]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003c4c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003c4e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003c52:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003c56:	4302      	orrs	r2, r0
 8003c58:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c5c:	041f      	lsls	r7, r3, #16
 8003c5e:	d508      	bpl.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c60:	4974      	ldr	r1, [pc, #464]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003c62:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003c64:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003c68:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003c6c:	4302      	orrs	r2, r0
 8003c6e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c72:	03d8      	lsls	r0, r3, #15
 8003c74:	d508      	bpl.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c76:	496f      	ldr	r1, [pc, #444]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003c78:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003c7a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003c7e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003c82:	4302      	orrs	r2, r0
 8003c84:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c88:	0399      	lsls	r1, r3, #14
 8003c8a:	d508      	bpl.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c8c:	4969      	ldr	r1, [pc, #420]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003c8e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003c90:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003c94:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003c98:	4302      	orrs	r2, r0
 8003c9a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c9e:	065a      	lsls	r2, r3, #25
 8003ca0:	d508      	bpl.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ca2:	4964      	ldr	r1, [pc, #400]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003ca4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003ca6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003caa:	f022 0203 	bic.w	r2, r2, #3
 8003cae:	4302      	orrs	r2, r0
 8003cb0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cb4:	061f      	lsls	r7, r3, #24
 8003cb6:	d508      	bpl.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cb8:	495e      	ldr	r1, [pc, #376]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003cba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003cbc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003cc0:	f022 020c 	bic.w	r2, r2, #12
 8003cc4:	4302      	orrs	r2, r0
 8003cc6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cca:	05d8      	lsls	r0, r3, #23
 8003ccc:	d508      	bpl.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cce:	4959      	ldr	r1, [pc, #356]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003cd0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003cd2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003cd6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003cda:	4302      	orrs	r2, r0
 8003cdc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ce0:	0599      	lsls	r1, r3, #22
 8003ce2:	d508      	bpl.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ce4:	4953      	ldr	r1, [pc, #332]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003ce6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003ce8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003cec:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003cf0:	4302      	orrs	r2, r0
 8003cf2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cf6:	055a      	lsls	r2, r3, #21
 8003cf8:	d508      	bpl.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cfa:	494e      	ldr	r1, [pc, #312]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003cfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003cfe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d06:	4302      	orrs	r2, r0
 8003d08:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d0c:	051f      	lsls	r7, r3, #20
 8003d0e:	d508      	bpl.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d10:	4948      	ldr	r1, [pc, #288]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003d12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d14:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d1c:	4302      	orrs	r2, r0
 8003d1e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d22:	04d8      	lsls	r0, r3, #19
 8003d24:	d508      	bpl.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d26:	4943      	ldr	r1, [pc, #268]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003d28:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003d2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d2e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003d32:	4302      	orrs	r2, r0
 8003d34:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d38:	0499      	lsls	r1, r3, #18
 8003d3a:	d508      	bpl.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d3c:	493d      	ldr	r1, [pc, #244]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003d3e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003d40:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d44:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003d48:	4302      	orrs	r2, r0
 8003d4a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d4e:	025a      	lsls	r2, r3, #9
 8003d50:	d508      	bpl.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d52:	4938      	ldr	r1, [pc, #224]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003d54:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003d56:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d5a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003d5e:	4302      	orrs	r2, r0
 8003d60:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d64:	029f      	lsls	r7, r3, #10
 8003d66:	d50c      	bpl.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d68:	4932      	ldr	r1, [pc, #200]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003d6a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003d6c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003d70:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d74:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8003d78:	bf08      	it	eq
 8003d7a:	2601      	moveq	r6, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d7c:	4302      	orrs	r2, r0
 8003d7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003d82:	f013 0f08 	tst.w	r3, #8
 8003d86:	bf18      	it	ne
 8003d88:	2601      	movne	r6, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d8a:	0358      	lsls	r0, r3, #13
 8003d8c:	d508      	bpl.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d8e:	4929      	ldr	r1, [pc, #164]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003d90:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003d92:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d96:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d9a:	4302      	orrs	r2, r0
 8003d9c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003da0:	0219      	lsls	r1, r3, #8
 8003da2:	d509      	bpl.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003da4:	4923      	ldr	r1, [pc, #140]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003da6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003daa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003dae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003db2:	4302      	orrs	r2, r0
 8003db4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	d509      	bpl.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003dbc:	491d      	ldr	r1, [pc, #116]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003dbe:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003dc2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003dc6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003dca:	4302      	orrs	r2, r0
 8003dcc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dd0:	011f      	lsls	r7, r3, #4
 8003dd2:	d509      	bpl.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dd4:	4917      	ldr	r1, [pc, #92]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003dd6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8003dda:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003dde:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003de2:	4302      	orrs	r2, r0
 8003de4:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003de8:	00d8      	lsls	r0, r3, #3
 8003dea:	d40a      	bmi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003dec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003df0:	d015      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003df2:	b9a5      	cbnz	r5, 8003e1e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003df4:	2e01      	cmp	r6, #1
 8003df6:	f000 80d1 	beq.w	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003dfa:	2000      	movs	r0, #0
}
 8003dfc:	b003      	add	sp, #12
 8003dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e02:	490c      	ldr	r1, [pc, #48]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003e04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e08:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003e0c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003e10:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003e14:	ea42 0200 	orr.w	r2, r2, r0
 8003e18:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003e1c:	d1e9      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_PLLI2S_DISABLE();
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003e20:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e22:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8003e24:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003e28:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003e2a:	f7ff f963 	bl	80030f4 <HAL_GetTick>
 8003e2e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e30:	e007      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e38:	f7ff f95c 	bl	80030f4 <HAL_GetTick>
 8003e3c:	1b40      	subs	r0, r0, r5
 8003e3e:	2864      	cmp	r0, #100	; 0x64
 8003e40:	d85b      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x356>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	0119      	lsls	r1, r3, #4
 8003e46:	d4f7      	bmi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	07da      	lsls	r2, r3, #31
 8003e4c:	d512      	bpl.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003e4e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003e50:	b982      	cbnz	r2, 8003e74 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e52:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e56:	f8d7 5084 	ldr.w	r5, [r7, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e5a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8003e5e:	6860      	ldr	r0, [r4, #4]
 8003e60:	f005 6570 	and.w	r5, r5, #251658240	; 0xf000000
 8003e64:	68a1      	ldr	r1, [r4, #8]
 8003e66:	432a      	orrs	r2, r5
 8003e68:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003e6c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003e70:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e74:	031d      	lsls	r5, r3, #12
 8003e76:	f100 810f 	bmi.w	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003e7a:	02d8      	lsls	r0, r3, #11
 8003e7c:	d504      	bpl.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e80:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003e84:	f000 810d 	beq.w	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e88:	01d9      	lsls	r1, r3, #7
 8003e8a:	d511      	bpl.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e8c:	4da4      	ldr	r5, [pc, #656]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e8e:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e90:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e94:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e98:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8003e9c:	6921      	ldr	r1, [r4, #16]
 8003e9e:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8003ea2:	433a      	orrs	r2, r7
 8003ea4:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003ea8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003eac:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003eb0:	019a      	lsls	r2, r3, #6
 8003eb2:	d50d      	bpl.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eb4:	6923      	ldr	r3, [r4, #16]
 8003eb6:	6862      	ldr	r2, [r4, #4]
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8003ebe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003ec2:	4a97      	ldr	r2, [pc, #604]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003ec4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003ec8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003ecc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003ed0:	4b93      	ldr	r3, [pc, #588]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ed4:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8003ed6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003eda:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003edc:	f7ff f90a 	bl	80030f4 <HAL_GetTick>
 8003ee0:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ee2:	e004      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x34a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ee4:	f7ff f906 	bl	80030f4 <HAL_GetTick>
 8003ee8:	1b40      	subs	r0, r0, r5
 8003eea:	2864      	cmp	r0, #100	; 0x64
 8003eec:	d805      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x356>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	d5f7      	bpl.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  if(pllsaiused == 1)
 8003ef4:	2e01      	cmp	r6, #1
 8003ef6:	d180      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003ef8:	e050      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
        return HAL_TIMEOUT;
 8003efa:	2003      	movs	r0, #3
}
 8003efc:	b003      	add	sp, #12
 8003efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	4a87      	ldr	r2, [pc, #540]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
    PWR->CR1 |= PWR_CR1_DBP;
 8003f04:	4b87      	ldr	r3, [pc, #540]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f06:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f08:	4698      	mov	r8, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f0a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003f0e:	6411      	str	r1, [r2, #64]	; 0x40
 8003f10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f12:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003f16:	9201      	str	r2, [sp, #4]
 8003f18:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f20:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003f22:	f7ff f8e7 	bl	80030f4 <HAL_GetTick>
 8003f26:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f28:	e004      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2a:	f7ff f8e3 	bl	80030f4 <HAL_GetTick>
 8003f2e:	1bc0      	subs	r0, r0, r7
 8003f30:	2864      	cmp	r0, #100	; 0x64
 8003f32:	d8e2      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x356>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f34:	f8d8 3000 	ldr.w	r3, [r8]
 8003f38:	05d9      	lsls	r1, r3, #23
 8003f3a:	d5f6      	bpl.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x386>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f3c:	4f78      	ldr	r7, [pc, #480]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f42:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8003f46:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8003f4a:	d011      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003f4c:	4291      	cmp	r1, r2
 8003f4e:	d00f      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f52:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f58:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003f5c:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f5e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003f60:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8003f64:	6738      	str	r0, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003f66:	673a      	str	r2, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f6a:	07d2      	lsls	r2, r2, #31
 8003f6c:	f100 80c3 	bmi.w	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x552>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f70:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8003f74:	f000 80b1 	beq.w	80040da <HAL_RCCEx_PeriphCLKConfig+0x536>
 8003f78:	4969      	ldr	r1, [pc, #420]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003f7a:	688a      	ldr	r2, [r1, #8]
 8003f7c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003f80:	608a      	str	r2, [r1, #8]
 8003f82:	4a67      	ldr	r2, [pc, #412]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f88:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	e64a      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8003f92:	2501      	movs	r5, #1
  uint32_t pllsaiused = 0;
 8003f94:	2600      	movs	r6, #0
 8003f96:	e62d      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003f98:	2501      	movs	r5, #1
 8003f9a:	e63e      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    __HAL_RCC_PLLSAI_DISABLE();
 8003f9c:	4b60      	ldr	r3, [pc, #384]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fa0:	461e      	mov	r6, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8003fa2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003fa6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003fa8:	f7ff f8a4 	bl	80030f4 <HAL_GetTick>
 8003fac:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fae:	e004      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x416>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fb0:	f7ff f8a0 	bl	80030f4 <HAL_GetTick>
 8003fb4:	1b40      	subs	r0, r0, r5
 8003fb6:	2864      	cmp	r0, #100	; 0x64
 8003fb8:	d89f      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x356>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fba:	6833      	ldr	r3, [r6, #0]
 8003fbc:	009f      	lsls	r7, r3, #2
 8003fbe:	d4f7      	bmi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	031d      	lsls	r5, r3, #12
 8003fc4:	f100 8092 	bmi.w	80040ec <HAL_RCCEx_PeriphCLKConfig+0x548>
 8003fc8:	02d8      	lsls	r0, r3, #11
 8003fca:	d51d      	bpl.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x464>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fcc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003fce:	b9da      	cbnz	r2, 8004008 <HAL_RCCEx_PeriphCLKConfig+0x464>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fd0:	4953      	ldr	r1, [pc, #332]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fd2:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fd4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fd8:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fdc:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8003fe0:	69a0      	ldr	r0, [r4, #24]
 8003fe2:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8003fe6:	4332      	orrs	r2, r6
 8003fe8:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8003fec:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8003ff0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ff4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003ff8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003ffa:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8003ffe:	3801      	subs	r0, #1
 8004000:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004004:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004008:	0299      	lsls	r1, r3, #10
 800400a:	d515      	bpl.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800400c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800400e:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8004012:	d111      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x494>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004014:	4942      	ldr	r1, [pc, #264]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004016:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004018:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800401c:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004020:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8004024:	6a20      	ldr	r0, [r4, #32]
 8004026:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800402a:	4332      	orrs	r2, r6
 800402c:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8004030:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004034:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004038:	071a      	lsls	r2, r3, #28
 800403a:	d519      	bpl.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800403c:	4a38      	ldr	r2, [pc, #224]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800403e:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004040:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004044:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004048:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800404c:	69e0      	ldr	r0, [r4, #28]
 800404e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004052:	430b      	orrs	r3, r1
 8004054:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004058:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800405c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004060:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004064:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004066:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800406a:	430b      	orrs	r3, r1
 800406c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8004070:	4b2b      	ldr	r3, [pc, #172]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8004072:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004074:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8004076:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800407a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800407c:	f7ff f83a 	bl	80030f4 <HAL_GetTick>
 8004080:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004082:	e005      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004084:	f7ff f836 	bl	80030f4 <HAL_GetTick>
 8004088:	1b00      	subs	r0, r0, r4
 800408a:	2864      	cmp	r0, #100	; 0x64
 800408c:	f63f af35 	bhi.w	8003efa <HAL_RCCEx_PeriphCLKConfig+0x356>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	d5f6      	bpl.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004096:	e6b0      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x256>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004098:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800409a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800409e:	f47f aeec 	bne.w	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040a2:	4d1f      	ldr	r5, [pc, #124]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040a4:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040a6:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040aa:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040ae:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80040b2:	68e1      	ldr	r1, [r4, #12]
 80040b4:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 80040b8:	433a      	orrs	r2, r7
 80040ba:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80040be:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80040c2:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040c6:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 80040ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80040cc:	f021 011f 	bic.w	r1, r1, #31
 80040d0:	3a01      	subs	r2, #1
 80040d2:	430a      	orrs	r2, r1
 80040d4:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 80040d8:	e6d6      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040da:	4811      	ldr	r0, [pc, #68]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 80040dc:	4912      	ldr	r1, [pc, #72]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80040de:	6882      	ldr	r2, [r0, #8]
 80040e0:	4019      	ands	r1, r3
 80040e2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80040e6:	430a      	orrs	r2, r1
 80040e8:	6082      	str	r2, [r0, #8]
 80040ea:	e74a      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	f43f af6e 	beq.w	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80040f4:	e768      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x424>
        tickstart = HAL_GetTick();
 80040f6:	f7fe fffd 	bl	80030f4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80040fe:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	e006      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x56c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fe fff7 	bl	80030f4 <HAL_GetTick>
 8004106:	eba0 0008 	sub.w	r0, r0, r8
 800410a:	4548      	cmp	r0, r9
 800410c:	f63f aef5 	bhi.w	8003efa <HAL_RCCEx_PeriphCLKConfig+0x356>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004110:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004112:	0798      	lsls	r0, r3, #30
 8004114:	d5f5      	bpl.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8004116:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004118:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800411c:	e728      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800
 8004124:	40007000 	.word	0x40007000
 8004128:	0ffffcff 	.word	0x0ffffcff

0800412c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800412c:	2800      	cmp	r0, #0
 800412e:	d07d      	beq.n	800422c <HAL_TIM_Base_Init+0x100>
{
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004132:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004136:	4604      	mov	r4, r0
 8004138:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800413c:	2b00      	cmp	r3, #0
 800413e:	d065      	beq.n	800420c <HAL_TIM_Base_Init+0xe0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004140:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004142:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004144:	493b      	ldr	r1, [pc, #236]	; (8004234 <HAL_TIM_Base_Init+0x108>)
 8004146:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800414a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800414e:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8004152:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004154:	fab1 f181 	clz	r1, r1
 8004158:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800415c:	d03a      	beq.n	80041d4 <HAL_TIM_Base_Init+0xa8>
 800415e:	2900      	cmp	r1, #0
 8004160:	d138      	bne.n	80041d4 <HAL_TIM_Base_Init+0xa8>
 8004162:	4d35      	ldr	r5, [pc, #212]	; (8004238 <HAL_TIM_Base_Init+0x10c>)
 8004164:	4835      	ldr	r0, [pc, #212]	; (800423c <HAL_TIM_Base_Init+0x110>)
 8004166:	4282      	cmp	r2, r0
 8004168:	bf18      	it	ne
 800416a:	42aa      	cmpne	r2, r5
 800416c:	d032      	beq.n	80041d4 <HAL_TIM_Base_Init+0xa8>
 800416e:	4f34      	ldr	r7, [pc, #208]	; (8004240 <HAL_TIM_Base_Init+0x114>)
 8004170:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004174:	1bd7      	subs	r7, r2, r7
 8004176:	42aa      	cmp	r2, r5
 8004178:	fab7 f787 	clz	r7, r7
 800417c:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8004180:	d049      	beq.n	8004216 <HAL_TIM_Base_Init+0xea>
 8004182:	2f00      	cmp	r7, #0
 8004184:	d147      	bne.n	8004216 <HAL_TIM_Base_Init+0xea>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004186:	4f2f      	ldr	r7, [pc, #188]	; (8004244 <HAL_TIM_Base_Init+0x118>)
 8004188:	482f      	ldr	r0, [pc, #188]	; (8004248 <HAL_TIM_Base_Init+0x11c>)
 800418a:	4282      	cmp	r2, r0
 800418c:	bf18      	it	ne
 800418e:	42ba      	cmpne	r2, r7
 8004190:	bf0c      	ite	eq
 8004192:	2701      	moveq	r7, #1
 8004194:	2700      	movne	r7, #0
 8004196:	d04b      	beq.n	8004230 <HAL_TIM_Base_Init+0x104>
 8004198:	4d2c      	ldr	r5, [pc, #176]	; (800424c <HAL_TIM_Base_Init+0x120>)
 800419a:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800419e:	4282      	cmp	r2, r0
 80041a0:	bf18      	it	ne
 80041a2:	42aa      	cmpne	r2, r5
 80041a4:	d01f      	beq.n	80041e6 <HAL_TIM_Base_Init+0xba>
 80041a6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80041aa:	4282      	cmp	r2, r0
 80041ac:	d040      	beq.n	8004230 <HAL_TIM_Base_Init+0x104>
 80041ae:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80041b2:	4282      	cmp	r2, r0
 80041b4:	d03c      	beq.n	8004230 <HAL_TIM_Base_Init+0x104>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b6:	69a1      	ldr	r1, [r4, #24]
 80041b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041bc:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041be:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80041c2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80041c6:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c8:	2301      	movs	r3, #1
  return HAL_OK;
 80041ca:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80041cc:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80041ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80041d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041d4:	4f1a      	ldr	r7, [pc, #104]	; (8004240 <HAL_TIM_Base_Init+0x114>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80041da:	68a5      	ldr	r5, [r4, #8]
 80041dc:	1bd7      	subs	r7, r2, r7
 80041de:	432b      	orrs	r3, r5
 80041e0:	fab7 f787 	clz	r7, r7
 80041e4:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e6:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ec:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ee:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f0:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80041f2:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80041fa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041fc:	62d6      	str	r6, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80041fe:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004200:	b909      	cbnz	r1, 8004206 <HAL_TIM_Base_Init+0xda>
 8004202:	2f00      	cmp	r7, #0
 8004204:	d0e0      	beq.n	80041c8 <HAL_TIM_Base_Init+0x9c>
    TIMx->RCR = Structure->RepetitionCounter;
 8004206:	6963      	ldr	r3, [r4, #20]
 8004208:	6313      	str	r3, [r2, #48]	; 0x30
 800420a:	e7dd      	b.n	80041c8 <HAL_TIM_Base_Init+0x9c>
    htim->Lock = HAL_UNLOCKED;
 800420c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004210:	f7fe fe16 	bl	8002e40 <HAL_TIM_Base_MspInit>
 8004214:	e794      	b.n	8004140 <HAL_TIM_Base_Init+0x14>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004216:	480e      	ldr	r0, [pc, #56]	; (8004250 <HAL_TIM_Base_Init+0x124>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800421c:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800421e:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 8004220:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004224:	d0df      	beq.n	80041e6 <HAL_TIM_Base_Init+0xba>
 8004226:	2f00      	cmp	r7, #0
 8004228:	d1dd      	bne.n	80041e6 <HAL_TIM_Base_Init+0xba>
 800422a:	e7ac      	b.n	8004186 <HAL_TIM_Base_Init+0x5a>
    return HAL_ERROR;
 800422c:	2001      	movs	r0, #1
}
 800422e:	4770      	bx	lr
 8004230:	2700      	movs	r7, #0
 8004232:	e7d8      	b.n	80041e6 <HAL_TIM_Base_Init+0xba>
 8004234:	40010000 	.word	0x40010000
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800
 8004240:	40010400 	.word	0x40010400
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800
 8004250:	40000c00 	.word	0x40000c00

08004254 <HAL_TIM_Base_Start>:
{
 8004254:	b410      	push	{r4}
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004256:	6801      	ldr	r1, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	2402      	movs	r4, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800425a:	4a0b      	ldr	r2, [pc, #44]	; (8004288 <HAL_TIM_Base_Start+0x34>)
{
 800425c:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800425e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004262:	6888      	ldr	r0, [r1, #8]
 8004264:	4002      	ands	r2, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004266:	2a06      	cmp	r2, #6
 8004268:	d006      	beq.n	8004278 <HAL_TIM_Base_Start+0x24>
 800426a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800426e:	d003      	beq.n	8004278 <HAL_TIM_Base_Start+0x24>
    __HAL_TIM_ENABLE(htim);
 8004270:	680a      	ldr	r2, [r1, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	600a      	str	r2, [r1, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004278:	2201      	movs	r2, #1
}
 800427a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	00010007 	.word	0x00010007

0800428c <HAL_TIM_Base_Stop>:
{
 800428c:	b410      	push	{r4}
  __HAL_TIM_DISABLE(htim);
 800428e:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	2402      	movs	r4, #2
  __HAL_TIM_DISABLE(htim);
 8004292:	f241 1111 	movw	r1, #4369	; 0x1111
{
 8004296:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800429c:	6a10      	ldr	r0, [r2, #32]
 800429e:	4208      	tst	r0, r1
 80042a0:	d108      	bne.n	80042b4 <HAL_TIM_Base_Stop+0x28>
 80042a2:	6a10      	ldr	r0, [r2, #32]
 80042a4:	f240 4144 	movw	r1, #1092	; 0x444
 80042a8:	4208      	tst	r0, r1
 80042aa:	d103      	bne.n	80042b4 <HAL_TIM_Base_Stop+0x28>
 80042ac:	6811      	ldr	r1, [r2, #0]
 80042ae:	f021 0101 	bic.w	r1, r1, #1
 80042b2:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80042b4:	2201      	movs	r2, #1
}
 80042b6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80042bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop

080042c4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042c4:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042c8:	68d9      	ldr	r1, [r3, #12]
 80042ca:	f041 0101 	orr.w	r1, r1, #1
 80042ce:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d0:	6899      	ldr	r1, [r3, #8]
 80042d2:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d4:	2a06      	cmp	r2, #6
 80042d6:	d006      	beq.n	80042e6 <HAL_TIM_Base_Start_IT+0x22>
 80042d8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80042dc:	d003      	beq.n	80042e6 <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
}
 80042e6:	2000      	movs	r0, #0
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	00010007 	.word	0x00010007

080042f0 <HAL_TIM_OC_DelayElapsedCallback>:
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop

080042f4 <HAL_TIM_IC_CaptureCallback>:
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop

080042f8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop

080042fc <HAL_TIM_TriggerCallback>:
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop

08004300 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004300:	6803      	ldr	r3, [r0, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	0791      	lsls	r1, r2, #30
{
 8004306:	b510      	push	{r4, lr}
 8004308:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800430a:	d502      	bpl.n	8004312 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	0792      	lsls	r2, r2, #30
 8004310:	d468      	bmi.n	80043e4 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	0752      	lsls	r2, r2, #29
 8004316:	d502      	bpl.n	800431e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	0750      	lsls	r0, r2, #29
 800431c:	d44f      	bmi.n	80043be <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	0711      	lsls	r1, r2, #28
 8004322:	d502      	bpl.n	800432a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	0712      	lsls	r2, r2, #28
 8004328:	d437      	bmi.n	800439a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	06d0      	lsls	r0, r2, #27
 800432e:	d502      	bpl.n	8004336 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	06d1      	lsls	r1, r2, #27
 8004334:	d41e      	bmi.n	8004374 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	07d2      	lsls	r2, r2, #31
 800433a:	d502      	bpl.n	8004342 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	07d0      	lsls	r0, r2, #31
 8004340:	d469      	bmi.n	8004416 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	0611      	lsls	r1, r2, #24
 8004346:	d502      	bpl.n	800434e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	0612      	lsls	r2, r2, #24
 800434c:	d46b      	bmi.n	8004426 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	05d0      	lsls	r0, r2, #23
 8004352:	d502      	bpl.n	800435a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	0611      	lsls	r1, r2, #24
 8004358:	d46d      	bmi.n	8004436 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	0652      	lsls	r2, r2, #25
 800435e:	d502      	bpl.n	8004366 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	0650      	lsls	r0, r2, #25
 8004364:	d46f      	bmi.n	8004446 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	0691      	lsls	r1, r2, #26
 800436a:	d502      	bpl.n	8004372 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	0692      	lsls	r2, r2, #26
 8004370:	d449      	bmi.n	8004406 <HAL_TIM_IRQHandler+0x106>
}
 8004372:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004374:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004378:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800437c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800437e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004386:	d16f      	bne.n	8004468 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004388:	f7ff ffb2 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	4620      	mov	r0, r4
 800438e:	f7ff ffb3 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	2200      	movs	r2, #0
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	7722      	strb	r2, [r4, #28]
 8004398:	e7cd      	b.n	8004336 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800439a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800439e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80043a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043a2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	079b      	lsls	r3, r3, #30
 80043aa:	d15a      	bne.n	8004462 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ac:	f7ff ffa0 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	4620      	mov	r0, r4
 80043b2:	f7ff ffa1 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	2200      	movs	r2, #0
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	7722      	strb	r2, [r4, #28]
 80043bc:	e7b5      	b.n	800432a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043be:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043c2:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80043c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043c6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043c8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80043d0:	d144      	bne.n	800445c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d2:	f7ff ff8d 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d6:	4620      	mov	r0, r4
 80043d8:	f7ff ff8e 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043dc:	2200      	movs	r2, #0
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	7722      	strb	r2, [r4, #28]
 80043e2:	e79c      	b.n	800431e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043e4:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043e8:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043ea:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ec:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	0799      	lsls	r1, r3, #30
 80043f2:	d130      	bne.n	8004456 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f4:	f7ff ff7c 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff ff7d 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fe:	2200      	movs	r2, #0
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	7722      	strb	r2, [r4, #28]
 8004404:	e785      	b.n	8004312 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004406:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800440a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800440c:	611a      	str	r2, [r3, #16]
}
 800440e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004412:	f000 b85d 	b.w	80044d0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004416:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800441a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800441c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800441e:	f7fe fac7 	bl	80029b0 <HAL_TIM_PeriodElapsedCallback>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	e78d      	b.n	8004342 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004426:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800442a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800442c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800442e:	f000 f851 	bl	80044d4 <HAL_TIMEx_BreakCallback>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	e78b      	b.n	800434e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004436:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800443a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800443c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800443e:	f000 f84b 	bl	80044d8 <HAL_TIMEx_Break2Callback>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	e789      	b.n	800435a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004446:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800444a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800444c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800444e:	f7ff ff55 	bl	80042fc <HAL_TIM_TriggerCallback>
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	e787      	b.n	8004366 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8004456:	f7ff ff4d 	bl	80042f4 <HAL_TIM_IC_CaptureCallback>
 800445a:	e7d0      	b.n	80043fe <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800445c:	f7ff ff4a 	bl	80042f4 <HAL_TIM_IC_CaptureCallback>
 8004460:	e7bc      	b.n	80043dc <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8004462:	f7ff ff47 	bl	80042f4 <HAL_TIM_IC_CaptureCallback>
 8004466:	e7a6      	b.n	80043b6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004468:	f7ff ff44 	bl	80042f4 <HAL_TIM_IC_CaptureCallback>
 800446c:	e791      	b.n	8004392 <HAL_TIM_IRQHandler+0x92>
 800446e:	bf00      	nop

08004470 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004470:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004474:	2a01      	cmp	r2, #1
 8004476:	d026      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	2202      	movs	r2, #2
 800447a:	4603      	mov	r3, r0
{
 800447c:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800447e:	6804      	ldr	r4, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004480:	4d12      	ldr	r5, [pc, #72]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004482:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004486:	42ac      	cmp	r4, r5
  tmpcr2 = htim->Instance->CR2;
 8004488:	6862      	ldr	r2, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 800448a:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800448c:	d016      	beq.n	80044bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800448e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004492:	42ac      	cmp	r4, r5
 8004494:	d012      	beq.n	80044bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004496:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004498:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800449c:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800449e:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	2601      	movs	r6, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a4:	432a      	orrs	r2, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a6:	4301      	orrs	r1, r0

  __HAL_UNLOCK(htim);
 80044a8:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 80044aa:	6062      	str	r2, [r4, #4]

  return HAL_OK;
 80044ac:	4628      	mov	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 80044ae:	60a1      	str	r1, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80044b0:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80044b4:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 80044b8:	bc70      	pop	{r4, r5, r6}
 80044ba:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044bc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044c0:	684d      	ldr	r5, [r1, #4]
 80044c2:	432a      	orrs	r2, r5
 80044c4:	e7e7      	b.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x26>
  __HAL_LOCK(htim);
 80044c6:	2002      	movs	r0, #2
}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40010000 	.word	0x40010000

080044d0 <HAL_TIMEx_CommutCallback>:
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop

080044d4 <HAL_TIMEx_BreakCallback>:
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop

080044d8 <HAL_TIMEx_Break2Callback>:
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop

080044dc <__libc_init_array>:
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	4d0d      	ldr	r5, [pc, #52]	; (8004514 <__libc_init_array+0x38>)
 80044e0:	4c0d      	ldr	r4, [pc, #52]	; (8004518 <__libc_init_array+0x3c>)
 80044e2:	1b64      	subs	r4, r4, r5
 80044e4:	10a4      	asrs	r4, r4, #2
 80044e6:	2600      	movs	r6, #0
 80044e8:	42a6      	cmp	r6, r4
 80044ea:	d109      	bne.n	8004500 <__libc_init_array+0x24>
 80044ec:	4d0b      	ldr	r5, [pc, #44]	; (800451c <__libc_init_array+0x40>)
 80044ee:	4c0c      	ldr	r4, [pc, #48]	; (8004520 <__libc_init_array+0x44>)
 80044f0:	f000 f818 	bl	8004524 <_init>
 80044f4:	1b64      	subs	r4, r4, r5
 80044f6:	10a4      	asrs	r4, r4, #2
 80044f8:	2600      	movs	r6, #0
 80044fa:	42a6      	cmp	r6, r4
 80044fc:	d105      	bne.n	800450a <__libc_init_array+0x2e>
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	f855 3b04 	ldr.w	r3, [r5], #4
 8004504:	4798      	blx	r3
 8004506:	3601      	adds	r6, #1
 8004508:	e7ee      	b.n	80044e8 <__libc_init_array+0xc>
 800450a:	f855 3b04 	ldr.w	r3, [r5], #4
 800450e:	4798      	blx	r3
 8004510:	3601      	adds	r6, #1
 8004512:	e7f2      	b.n	80044fa <__libc_init_array+0x1e>
 8004514:	080046d8 	.word	0x080046d8
 8004518:	080046d8 	.word	0x080046d8
 800451c:	080046d8 	.word	0x080046d8
 8004520:	080046dc 	.word	0x080046dc

08004524 <_init>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr

08004530 <_fini>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr
