
thermin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006c14  08006c14  00016c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cf4  08006cf4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006cf4  08006cf4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006cf4  08006cf4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cf4  08006cf4  00016cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cf8  08006cf8  00016cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a24  20000010  08006d0c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a34  08006d0c  00021a34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ede  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b16  00000000  00000000  00037f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001290  00000000  00000000  0003aa38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  0003bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002b48  00000000  00000000  0003ce20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f0ed  00000000  00000000  0003f968  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cebf3  00000000  00000000  0004ea55  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d648  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e7c  00000000  00000000  0011d6c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bfc 	.word	0x08006bfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006bfc 	.word	0x08006bfc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay(uint16_t time){
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <delay+0x2c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER (&htim1)< time);
 80009be:	bf00      	nop
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <delay+0x2c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d3f9      	bcc.n	80009c0 <delay+0x14>
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	20001900 	.word	0x20001900
 80009dc:	00000000 	.word	0x00000000

080009e0 <HAL_TIM_IC_CaptureCallback>:

///*
  void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7f1b      	ldrb	r3, [r3, #28]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	f040 8083 	bne.w	8000af8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80009f2:	4b45      	ldr	r3, [pc, #276]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x128>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d11a      	bne.n	8000a30 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80009fa:	2100      	movs	r1, #0
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f002 fc59 	bl	80032b4 <HAL_TIM_ReadCapturedValue>
 8000a02:	4602      	mov	r2, r0
 8000a04:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a06:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000a08:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6a1a      	ldr	r2, [r3, #32]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f022 020a 	bic.w	r2, r2, #10
 8000a1c:	621a      	str	r2, [r3, #32]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	6a1a      	ldr	r2, [r3, #32]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f042 0202 	orr.w	r2, r2, #2
 8000a2c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}// */
 8000a2e:	e063      	b.n	8000af8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000a30:	4b35      	ldr	r3, [pc, #212]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d15f      	bne.n	8000af8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000a38:	2100      	movs	r1, #0
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f002 fc3a 	bl	80032b4 <HAL_TIM_ReadCapturedValue>
 8000a40:	4602      	mov	r2, r0
 8000a42:	4b33      	ldr	r3, [pc, #204]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a44:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000a4e:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d907      	bls.n	8000a6a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	4a2b      	ldr	r2, [pc, #172]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	e00f      	b.n	8000a8a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000a6a:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d909      	bls.n	8000a8a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000a84:	33ff      	adds	r3, #255	; 0xff
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000a88:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fce0 	bl	8000454 <__aeabi_ui2d>
 8000a94:	a31a      	add	r3, pc, #104	; (adr r3, 8000b00 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a9a:	f7ff fd55 	bl	8000548 <__aeabi_dmul>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	460c      	mov	r4, r1
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	4621      	mov	r1, r4
 8000aa6:	f04f 0200 	mov.w	r2, #0
 8000aaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aae:	f7ff fe75 	bl	800079c <__aeabi_ddiv>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460c      	mov	r4, r1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	4621      	mov	r1, r4
 8000aba:	f7ff ff57 	bl	800096c <__aeabi_d2uiz>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ac4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6a1a      	ldr	r2, [r3, #32]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f022 020a 	bic.w	r2, r2, #10
 8000ada:	621a      	str	r2, [r3, #32]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6a12      	ldr	r2, [r2, #32]
 8000ae6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 0202 	bic.w	r2, r2, #2
 8000af6:	60da      	str	r2, [r3, #12]
}// */
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	b020c49c 	.word	0xb020c49c
 8000b04:	3fa16872 	.word	0x3fa16872
 8000b08:	2000003c 	.word	0x2000003c
 8000b0c:	20000030 	.word	0x20000030
 8000b10:	20000034 	.word	0x20000034
 8000b14:	20000038 	.word	0x20000038
 8000b18:	2000003d 	.word	0x2000003d
 8000b1c:	20001900 	.word	0x20001900

08000b20 <HCSR04_Read>:
void HCSR04_Read (void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b24:	2201      	movs	r2, #1
 8000b26:	2102      	movs	r1, #2
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f000 fe1e 	bl	800176c <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000b30:	200a      	movs	r0, #10
 8000b32:	f7ff ff3b 	bl	80009ac <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000b36:	2200      	movs	r2, #0
 8000b38:	2102      	movs	r1, #2
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f000 fe15 	bl	800176c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HCSR04_Read+0x38>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HCSR04_Read+0x38>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f042 0202 	orr.w	r2, r2, #2
 8000b50:	60da      	str	r2, [r3, #12]
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20001900 	.word	0x20001900

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b60:	f000 fb7f 	bl	8001262 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b64:	f000 f840 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 f956 	bl	8000e18 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b6c:	f000 f882 	bl	8000c74 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b70:	f000 f8da 	bl	8000d28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000b74:	2100      	movs	r1, #0
 8000b76:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <main+0x64>)
 8000b78:	f001 fdc2 	bl	8002700 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_1);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <main+0x68>)
 8000b80:	f001 fef4 	bl	800296c <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b84:	f003 f932 	bl	8003dec <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <main+0x6c>)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f003 fa6b 	bl	8004068 <osSemaphoreNew>
 8000b92:	4602      	mov	r2, r0
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <main+0x70>)
 8000b96:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of setFreq01 */
  setFreq01Handle = osThreadNew(StartSetFreq01, NULL, &setFreq01_attributes);
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <main+0x74>)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <main+0x78>)
 8000b9e:	f003 f98f 	bl	8003ec0 <osThreadNew>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <main+0x7c>)
 8000ba6:	601a      	str	r2, [r3, #0]

  /* creation of readFreq01 */
  readFreq01Handle = osThreadNew(StartreadFreq01, NULL, &readFreq01_attributes);
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <main+0x80>)
 8000baa:	2100      	movs	r1, #0
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <main+0x84>)
 8000bae:	f003 f987 	bl	8003ec0 <osThreadNew>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <main+0x88>)
 8000bb6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bb8:	f003 f94c 	bl	8003e54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <main+0x60>
 8000bbe:	bf00      	nop
 8000bc0:	20001950 	.word	0x20001950
 8000bc4:	20001900 	.word	0x20001900
 8000bc8:	08006c9c 	.word	0x08006c9c
 8000bcc:	2000194c 	.word	0x2000194c
 8000bd0:	08006c54 	.word	0x08006c54
 8000bd4:	08000e7d 	.word	0x08000e7d
 8000bd8:	2000199c 	.word	0x2000199c
 8000bdc:	08006c78 	.word	0x08006c78
 8000be0:	08000ec1 	.word	0x08000ec1
 8000be4:	200019a0 	.word	0x200019a0

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b096      	sub	sp, #88	; 0x58
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	2244      	movs	r2, #68	; 0x44
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f005 fff7 	bl	8006bea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c0a:	2310      	movs	r3, #16
 8000c0c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c16:	2360      	movs	r3, #96	; 0x60
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fe1e 	bl	8001864 <HAL_RCC_OscConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000c2e:	f000 f96b 	bl	8000f08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c32:	230f      	movs	r3, #15
 8000c34:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 fa2a 	bl	80020a4 <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c56:	f000 f957 	bl	8000f08 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c5e:	f000 fdab 	bl	80017b8 <HAL_PWREx_ControlVoltageScaling>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c68:	f000 f94e 	bl	8000f08 <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3758      	adds	r7, #88	; 0x58
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000c94:	4a23      	ldr	r2, [pc, #140]	; (8000d24 <MX_TIM1_Init+0xb0>)
 8000c96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000c9a:	227f      	movs	r2, #127	; 0x7f
 8000c9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000ca6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000caa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000cbe:	4818      	ldr	r0, [pc, #96]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000cc0:	f001 fdfc 	bl	80028bc <HAL_TIM_IC_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000cca:	f000 f91d 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480f      	ldr	r0, [pc, #60]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000ce2:	f002 fff7 	bl	8003cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000cec:	f000 f90c 	bl	8000f08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000d08:	f002 f875 	bl	8002df6 <HAL_TIM_IC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000d12:	f000 f8f9 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3720      	adds	r7, #32
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20001900 	.word	0x20001900
 8000d24:	40012c00 	.word	0x40012c00

08000d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	; 0x38
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d5a:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000d62:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d68:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15000;
 8000d6e:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d70:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000d74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d76:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d7c:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d82:	4824      	ldr	r0, [pc, #144]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d84:	f001 fbae 	bl	80024e4 <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d8e:	f000 f8bb 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	481d      	ldr	r0, [pc, #116]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000da0:	f002 f9ce 	bl	8003140 <HAL_TIM_ConfigClockSource>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000daa:	f000 f8ad 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dae:	4819      	ldr	r0, [pc, #100]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000db0:	f001 fc44 	bl	800263c <HAL_TIM_PWM_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000dba:	f000 f8a5 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4811      	ldr	r0, [pc, #68]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000dce:	f002 ff81 	bl	8003cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000dd8:	f000 f896 	bl	8000f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ddc:	2360      	movs	r3, #96	; 0x60
 8000dde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 7500;
 8000de0:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000df6:	f002 f893 	bl	8002f20 <HAL_TIM_PWM_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e00:	f000 f882 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000e06:	f000 f915 	bl	8001034 <HAL_TIM_MspPostInit>

}
 8000e0a:	bf00      	nop
 8000e0c:	3738      	adds	r7, #56	; 0x38
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20001950 	.word	0x20001950

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_GPIO_Init+0x60>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <MX_GPIO_Init+0x60>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_GPIO_Init+0x60>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f240 2102 	movw	r1, #514	; 0x202
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4e:	f000 fc8d 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 8000e52:	f240 2302 	movw	r3, #514	; 0x202
 8000e56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f000 fb14 	bl	8001498 <HAL_GPIO_Init>

}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000

08000e7c <StartSetFreq01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSetFreq01 */
void StartSetFreq01(void *argument)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if (dataValid){
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <StartSetFreq01+0x3c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d010      	beq.n	8000eae <StartSetFreq01+0x32>
	TIM2->ARR = Difference*200;
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <StartSetFreq01+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e94:	21c8      	movs	r1, #200	; 0xc8
 8000e96:	fb01 f303 	mul.w	r3, r1, r3
 8000e9a:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR1 = (Difference*200)/2;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <StartSetFreq01+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	22c8      	movs	r2, #200	; 0xc8
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eaa:	085b      	lsrs	r3, r3, #1
 8000eac:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else {}
	osDelay(1);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f003 f8ac 	bl	800400c <osDelay>
	if (dataValid){
 8000eb4:	e7e6      	b.n	8000e84 <StartSetFreq01+0x8>
 8000eb6:	bf00      	nop
 8000eb8:	2000002c 	.word	0x2000002c
 8000ebc:	20000038 	.word	0x20000038

08000ec0 <StartreadFreq01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartreadFreq01 */
void StartreadFreq01(void *argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartreadFreq01 */
  /* Infinite loop */
  for(;;)
  {
	dataValid = 0;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <StartreadFreq01+0x20>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
	HCSR04_Read();
 8000ece:	f7ff fe27 	bl	8000b20 <HCSR04_Read>
	dataValid = 1;
 8000ed2:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <StartreadFreq01+0x20>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
    osDelay(160);
 8000ed8:	20a0      	movs	r0, #160	; 0xa0
 8000eda:	f003 f897 	bl	800400c <osDelay>
	dataValid = 0;
 8000ede:	e7f3      	b.n	8000ec8 <StartreadFreq01+0x8>
 8000ee0:	2000002c 	.word	0x2000002c

08000ee4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ef6:	f000 f9cd 	bl	8001294 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40001000 	.word	0x40001000

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <HAL_MspInit+0x44>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f22:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <HAL_MspInit+0x44>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_MspInit+0x44>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_MspInit+0x44>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_MspInit+0x44>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	6593      	str	r3, [r2, #88]	; 0x58
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_MspInit+0x44>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <HAL_TIM_IC_MspInit+0x90>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d131      	bne.n	8000fe6 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <HAL_TIM_IC_MspInit+0x94>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f86:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <HAL_TIM_IC_MspInit+0x94>)
 8000f88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_TIM_IC_MspInit+0x94>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_TIM_IC_MspInit+0x94>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <HAL_TIM_IC_MspInit+0x94>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_TIM_IC_MspInit+0x94>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd2:	f000 fa61 	bl	8001498 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	201b      	movs	r0, #27
 8000fdc:	f000 fa32 	bl	8001444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fe0:	201b      	movs	r0, #27
 8000fe2:	f000 fa4b 	bl	800147c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40012c00 	.word	0x40012c00
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001008:	d10b      	bne.n	8001022 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_TIM_Base_MspInit+0x38>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_TIM_Base_MspInit+0x38>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6593      	str	r3, [r2, #88]	; 0x58
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_TIM_Base_MspInit+0x38>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001054:	d11c      	bne.n	8001090 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_TIM_MspPostInit+0x64>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <HAL_TIM_MspPostInit+0x64>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <HAL_TIM_MspPostInit+0x64>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800106e:	2301      	movs	r3, #1
 8001070:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800107e:	2301      	movs	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f000 fa04 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08c      	sub	sp, #48	; 0x30
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	2036      	movs	r0, #54	; 0x36
 80010b2:	f000 f9c7 	bl	8001444 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010b6:	2036      	movs	r0, #54	; 0x36
 80010b8:	f000 f9e0 	bl	800147c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <HAL_InitTick+0x9c>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c0:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_InitTick+0x9c>)
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	6593      	str	r3, [r2, #88]	; 0x58
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_InitTick+0x9c>)
 80010ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010d4:	f107 0210 	add.w	r2, r7, #16
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4611      	mov	r1, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 f96e 	bl	80023c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010e4:	f001 f956 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 80010e8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	4a13      	ldr	r2, [pc, #76]	; (800113c <HAL_InitTick+0xa0>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0c9b      	lsrs	r3, r3, #18
 80010f4:	3b01      	subs	r3, #1
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_InitTick+0xa4>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <HAL_InitTick+0xa8>)
 80010fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_InitTick+0xa4>)
 8001100:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001104:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_InitTick+0xa4>)
 8001108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800110a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_InitTick+0xa4>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_InitTick+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <HAL_InitTick+0xa4>)
 800111a:	f001 f9e3 	bl	80024e4 <HAL_TIM_Base_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d104      	bne.n	800112e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001124:	4806      	ldr	r0, [pc, #24]	; (8001140 <HAL_InitTick+0xa4>)
 8001126:	f001 fa35 	bl	8002594 <HAL_TIM_Base_Start_IT>
 800112a:	4603      	mov	r3, r0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3730      	adds	r7, #48	; 0x30
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000
 800113c:	431bde83 	.word	0x431bde83
 8001140:	200019a4 	.word	0x200019a4
 8001144:	40001000 	.word	0x40001000

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler+0x4>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler+0x4>

0800116e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <TIM1_CC_IRQHandler+0x10>)
 8001182:	f001 fd19 	bl	8002bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20001900 	.word	0x20001900

08001190 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <TIM6_DAC_IRQHandler+0x10>)
 8001196:	f001 fd0f 	bl	8002bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200019a4 	.word	0x200019a4

080011a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <SystemInit+0x64>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <SystemInit+0x64>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <SystemInit+0x68>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a13      	ldr	r2, [pc, #76]	; (800120c <SystemInit+0x68>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <SystemInit+0x68>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <SystemInit+0x68>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a0f      	ldr	r2, [pc, #60]	; (800120c <SystemInit+0x68>)
 80011d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <SystemInit+0x68>)
 80011dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <SystemInit+0x68>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <SystemInit+0x68>)
 80011e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <SystemInit+0x68>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SystemInit+0x64>)
 80011f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011fa:	609a      	str	r2, [r3, #8]
#endif
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	40021000 	.word	0x40021000

08001210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001248 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001214:	f7ff ffc6 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001218:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800121a:	e003      	b.n	8001224 <LoopCopyDataInit>

0800121c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800121e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001220:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001222:	3104      	adds	r1, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001224:	480a      	ldr	r0, [pc, #40]	; (8001250 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001228:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800122a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800122c:	d3f6      	bcc.n	800121c <CopyDataInit>
	ldr	r2, =_sbss
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001230:	e002      	b.n	8001238 <LoopFillZerobss>

08001232 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001232:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001234:	f842 3b04 	str.w	r3, [r2], #4

08001238 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <LoopForever+0x16>)
	cmp	r2, r3
 800123a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800123c:	d3f9      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123e:	f005 fca5 	bl	8006b8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001242:	f7ff fc8b 	bl	8000b5c <main>

08001246 <LoopForever>:

LoopForever:
    b LoopForever
 8001246:	e7fe      	b.n	8001246 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001248:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800124c:	08006cfc 	.word	0x08006cfc
	ldr	r0, =_sdata
 8001250:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001254:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001258:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800125c:	20001a34 	.word	0x20001a34

08001260 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC1_IRQHandler>

08001262 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f000 f8de 	bl	800142e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff ff12 	bl	800109c <HAL_InitTick>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	e001      	b.n	8001288 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001284:	f7ff fe48 	bl	8000f18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001288:	79fb      	ldrb	r3, [r7, #7]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	200019f0 	.word	0x200019f0

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200019f0 	.word	0x200019f0

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff4c 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001456:	f7ff ff61 	bl	800131c <__NVIC_GetPriorityGrouping>
 800145a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	6978      	ldr	r0, [r7, #20]
 8001462:	f7ff ffb1 	bl	80013c8 <NVIC_EncodePriority>
 8001466:	4602      	mov	r2, r0
 8001468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff80 	bl	8001374 <__NVIC_SetPriority>
}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff54 	bl	8001338 <__NVIC_EnableIRQ>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a6:	e148      	b.n	800173a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	2101      	movs	r1, #1
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	4013      	ands	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 813a 	beq.w	8001734 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d00b      	beq.n	80014e0 <HAL_GPIO_Init+0x48>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d007      	beq.n	80014e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d4:	2b11      	cmp	r3, #17
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b12      	cmp	r3, #18
 80014de:	d130      	bne.n	8001542 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001516:	2201      	movs	r2, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	f003 0201 	and.w	r2, r3, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	2203      	movs	r2, #3
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0xea>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b12      	cmp	r3, #18
 8001580:	d123      	bne.n	80015ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	691a      	ldr	r2, [r3, #16]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	6939      	ldr	r1, [r7, #16]
 80015c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0203 	and.w	r2, r3, #3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 8094 	beq.w	8001734 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160c:	4b52      	ldr	r3, [pc, #328]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 800160e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001610:	4a51      	ldr	r2, [pc, #324]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6613      	str	r3, [r2, #96]	; 0x60
 8001618:	4b4f      	ldr	r3, [pc, #316]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 800161a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001624:	4a4d      	ldr	r2, [pc, #308]	; (800175c <HAL_GPIO_Init+0x2c4>)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3302      	adds	r3, #2
 800162c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800164e:	d00d      	beq.n	800166c <HAL_GPIO_Init+0x1d4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a43      	ldr	r2, [pc, #268]	; (8001760 <HAL_GPIO_Init+0x2c8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d007      	beq.n	8001668 <HAL_GPIO_Init+0x1d0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a42      	ldr	r2, [pc, #264]	; (8001764 <HAL_GPIO_Init+0x2cc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d101      	bne.n	8001664 <HAL_GPIO_Init+0x1cc>
 8001660:	2302      	movs	r3, #2
 8001662:	e004      	b.n	800166e <HAL_GPIO_Init+0x1d6>
 8001664:	2307      	movs	r3, #7
 8001666:	e002      	b.n	800166e <HAL_GPIO_Init+0x1d6>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_GPIO_Init+0x1d6>
 800166c:	2300      	movs	r3, #0
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	f002 0203 	and.w	r2, r2, #3
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	4093      	lsls	r3, r2
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800167e:	4937      	ldr	r1, [pc, #220]	; (800175c <HAL_GPIO_Init+0x2c4>)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800168c:	4b36      	ldr	r3, [pc, #216]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016b0:	4a2d      	ldr	r2, [pc, #180]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016b6:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016da:	4a23      	ldr	r2, [pc, #140]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001704:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	f47f aeaf 	bne.w	80014a8 <HAL_GPIO_Init+0x10>
  }
}
 800174a:	bf00      	nop
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	40010000 	.word	0x40010000
 8001760:	48000400 	.word	0x48000400
 8001764:	48000800 	.word	0x48000800
 8001768:	40010400 	.word	0x40010400

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001788:	e002      	b.n	8001790 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c6:	d130      	bne.n	800182a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c8:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d4:	d038      	beq.n	8001848 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017de:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2232      	movs	r2, #50	; 0x32
 80017ec:	fb02 f303 	mul.w	r3, r2, r3
 80017f0:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	0c9b      	lsrs	r3, r3, #18
 80017f8:	3301      	adds	r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017fc:	e002      	b.n	8001804 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3b01      	subs	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001810:	d102      	bne.n	8001818 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f2      	bne.n	80017fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001824:	d110      	bne.n	8001848 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e00f      	b.n	800184a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001836:	d007      	beq.n	8001848 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001840:	4a05      	ldr	r2, [pc, #20]	; (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001846:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40007000 	.word	0x40007000
 800185c:	20000000 	.word	0x20000000
 8001860:	431bde83 	.word	0x431bde83

08001864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	f000 bc11 	b.w	800209a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001878:	4ba0      	ldr	r3, [pc, #640]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001882:	4b9e      	ldr	r3, [pc, #632]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80e4 	beq.w	8001a62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <HAL_RCC_OscConfig+0x4c>
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	f040 808b 	bne.w	80019be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	f040 8087 	bne.w	80019be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018b0:	4b92      	ldr	r3, [pc, #584]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x64>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e3e8      	b.n	800209a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1a      	ldr	r2, [r3, #32]
 80018cc:	4b8b      	ldr	r3, [pc, #556]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <HAL_RCC_OscConfig+0x7e>
 80018d8:	4b88      	ldr	r3, [pc, #544]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e0:	e005      	b.n	80018ee <HAL_RCC_OscConfig+0x8a>
 80018e2:	4b86      	ldr	r3, [pc, #536]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 80018e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d223      	bcs.n	800193a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fd94 	bl	8002424 <RCC_SetFlashLatencyFromMSIRange>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e3c9      	b.n	800209a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001906:	4b7d      	ldr	r3, [pc, #500]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7c      	ldr	r2, [pc, #496]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 800190c:	f043 0308 	orr.w	r3, r3, #8
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b7a      	ldr	r3, [pc, #488]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4977      	ldr	r1, [pc, #476]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001924:	4b75      	ldr	r3, [pc, #468]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	4972      	ldr	r1, [pc, #456]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
 8001938:	e025      	b.n	8001986 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193a:	4b70      	ldr	r3, [pc, #448]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a6f      	ldr	r2, [pc, #444]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b6d      	ldr	r3, [pc, #436]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	496a      	ldr	r1, [pc, #424]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001958:	4b68      	ldr	r3, [pc, #416]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	4965      	ldr	r1, [pc, #404]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fd54 	bl	8002424 <RCC_SetFlashLatencyFromMSIRange>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e389      	b.n	800209a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001986:	f000 fc6f 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 800198a:	4601      	mov	r1, r0
 800198c:	4b5b      	ldr	r3, [pc, #364]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	4a5a      	ldr	r2, [pc, #360]	; (8001b00 <HAL_RCC_OscConfig+0x29c>)
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	fa21 f303 	lsr.w	r3, r1, r3
 80019a2:	4a58      	ldr	r2, [pc, #352]	; (8001b04 <HAL_RCC_OscConfig+0x2a0>)
 80019a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019a6:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <HAL_RCC_OscConfig+0x2a4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fb76 	bl	800109c <HAL_InitTick>
 80019b0:	4603      	mov	r3, r0
 80019b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d052      	beq.n	8001a60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	e36d      	b.n	800209a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d032      	beq.n	8001a2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019c6:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019d2:	f7ff fc73 	bl	80012bc <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019da:	f7ff fc6f 	bl	80012bc <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e356      	b.n	800209a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ec:	4b43      	ldr	r3, [pc, #268]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f8:	4b40      	ldr	r3, [pc, #256]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a3f      	ldr	r2, [pc, #252]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	493a      	ldr	r1, [pc, #232]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a16:	4b39      	ldr	r3, [pc, #228]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	4935      	ldr	r1, [pc, #212]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]
 8001a2a:	e01a      	b.n	8001a62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a32      	ldr	r2, [pc, #200]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fc40 	bl	80012bc <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a40:	f7ff fc3c 	bl	80012bc <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e323      	b.n	800209a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a52:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x1dc>
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d073      	beq.n	8001b56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_OscConfig+0x21c>
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d10e      	bne.n	8001a98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d10b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d063      	beq.n	8001b54 <HAL_RCC_OscConfig+0x2f0>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d15f      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e300      	b.n	800209a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x24c>
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a15      	ldr	r2, [pc, #84]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e01d      	b.n	8001aec <HAL_RCC_OscConfig+0x288>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x270>
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0x288>
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a05      	ldr	r2, [pc, #20]	; (8001afc <HAL_RCC_OscConfig+0x298>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01b      	beq.n	8001b2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff fbe2 	bl	80012bc <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afa:	e010      	b.n	8001b1e <HAL_RCC_OscConfig+0x2ba>
 8001afc:	40021000 	.word	0x40021000
 8001b00:	08006cac 	.word	0x08006cac
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fbd6 	bl	80012bc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e2bd      	b.n	800209a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1e:	4baf      	ldr	r3, [pc, #700]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x2a8>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fbc6 	bl	80012bc <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff fbc2 	bl	80012bc <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e2a9      	b.n	800209a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b46:	4ba5      	ldr	r3, [pc, #660]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x2d0>
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d060      	beq.n	8001c24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_OscConfig+0x310>
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d119      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d116      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b74:	4b99      	ldr	r3, [pc, #612]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_OscConfig+0x328>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e286      	b.n	800209a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b93      	ldr	r3, [pc, #588]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	061b      	lsls	r3, r3, #24
 8001b9a:	4990      	ldr	r1, [pc, #576]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba0:	e040      	b.n	8001c24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d023      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001baa:	4b8c      	ldr	r3, [pc, #560]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a8b      	ldr	r2, [pc, #556]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fb81 	bl	80012bc <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff fb7d 	bl	80012bc <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e264      	b.n	800209a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd0:	4b82      	ldr	r3, [pc, #520]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b7f      	ldr	r3, [pc, #508]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	061b      	lsls	r3, r3, #24
 8001bea:	497c      	ldr	r1, [pc, #496]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
 8001bf0:	e018      	b.n	8001c24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf2:	4b7a      	ldr	r3, [pc, #488]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a79      	ldr	r2, [pc, #484]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fb5d 	bl	80012bc <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff fb59 	bl	80012bc <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e240      	b.n	800209a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c18:	4b70      	ldr	r3, [pc, #448]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f0      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d03c      	beq.n	8001caa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01c      	beq.n	8001c72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c38:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3e:	4a67      	ldr	r2, [pc, #412]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff fb38 	bl	80012bc <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff fb34 	bl	80012bc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e21b      	b.n	800209a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c62:	4b5e      	ldr	r3, [pc, #376]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ef      	beq.n	8001c50 <HAL_RCC_OscConfig+0x3ec>
 8001c70:	e01b      	b.n	8001caa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c72:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c78:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff fb1b 	bl	80012bc <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fb17 	bl	80012bc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e1fe      	b.n	800209a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c9c:	4b4f      	ldr	r3, [pc, #316]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ef      	bne.n	8001c8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80a6 	beq.w	8001e04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cbc:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10d      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	4a43      	ldr	r2, [pc, #268]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd4:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce4:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <HAL_RCC_OscConfig+0x57c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d118      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf0:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_RCC_OscConfig+0x57c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a3a      	ldr	r2, [pc, #232]	; (8001de0 <HAL_RCC_OscConfig+0x57c>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff fade 	bl	80012bc <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d04:	f7ff fada 	bl	80012bc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e1c1      	b.n	800209a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d16:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_RCC_OscConfig+0x57c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d108      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4d8>
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d30:	4a2a      	ldr	r2, [pc, #168]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d3a:	e024      	b.n	8001d86 <HAL_RCC_OscConfig+0x522>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d110      	bne.n	8001d66 <HAL_RCC_OscConfig+0x502>
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	4a24      	ldr	r2, [pc, #144]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5a:	4a20      	ldr	r2, [pc, #128]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d64:	e00f      	b.n	8001d86 <HAL_RCC_OscConfig+0x522>
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6c:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7c:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001d7e:	f023 0304 	bic.w	r3, r3, #4
 8001d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d016      	beq.n	8001dbc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fa95 	bl	80012bc <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7ff fa91 	bl	80012bc <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e176      	b.n	800209a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_OscConfig+0x578>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0ed      	beq.n	8001d96 <HAL_RCC_OscConfig+0x532>
 8001dba:	e01a      	b.n	8001df2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7ff fa7e 	bl	80012bc <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dc2:	e00f      	b.n	8001de4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fa7a 	bl	80012bc <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d906      	bls.n	8001de4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e15f      	b.n	800209a <HAL_RCC_OscConfig+0x836>
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de4:	4baa      	ldr	r3, [pc, #680]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1e8      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df2:	7ffb      	ldrb	r3, [r7, #31]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df8:	4ba5      	ldr	r3, [pc, #660]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	4aa4      	ldr	r2, [pc, #656]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d03c      	beq.n	8001e8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01c      	beq.n	8001e52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e18:	4b9d      	ldr	r3, [pc, #628]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e1e:	4a9c      	ldr	r2, [pc, #624]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff fa48 	bl	80012bc <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e30:	f7ff fa44 	bl	80012bc <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e12b      	b.n	800209a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e42:	4b93      	ldr	r3, [pc, #588]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ef      	beq.n	8001e30 <HAL_RCC_OscConfig+0x5cc>
 8001e50:	e01b      	b.n	8001e8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e52:	4b8f      	ldr	r3, [pc, #572]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e58:	4a8d      	ldr	r2, [pc, #564]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7ff fa2b 	bl	80012bc <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6a:	f7ff fa27 	bl	80012bc <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e10e      	b.n	800209a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e7c:	4b84      	ldr	r3, [pc, #528]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1ef      	bne.n	8001e6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8102 	beq.w	8002098 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	f040 80c5 	bne.w	8002028 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e9e:	4b7c      	ldr	r3, [pc, #496]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0203 	and.w	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d12c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d123      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ece:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d11b      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d113      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eee:	085b      	lsrs	r3, r3, #1
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d109      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	085b      	lsrs	r3, r3, #1
 8001f04:	3b01      	subs	r3, #1
 8001f06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d067      	beq.n	8001fdc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d062      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f12:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0bb      	b.n	800209a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f22:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a5a      	ldr	r2, [pc, #360]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001f28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f2e:	f7ff f9c5 	bl	80012bc <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff f9c1 	bl	80012bc <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0a8      	b.n	800209a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f48:	4b51      	ldr	r3, [pc, #324]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f54:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <HAL_RCC_OscConfig+0x830>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f64:	3a01      	subs	r2, #1
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	4311      	orrs	r1, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f6e:	0212      	lsls	r2, r2, #8
 8001f70:	4311      	orrs	r1, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f76:	0852      	lsrs	r2, r2, #1
 8001f78:	3a01      	subs	r2, #1
 8001f7a:	0552      	lsls	r2, r2, #21
 8001f7c:	4311      	orrs	r1, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f82:	0852      	lsrs	r2, r2, #1
 8001f84:	3a01      	subs	r2, #1
 8001f86:	0652      	lsls	r2, r2, #25
 8001f88:	4311      	orrs	r1, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f8e:	06d2      	lsls	r2, r2, #27
 8001f90:	430a      	orrs	r2, r1
 8001f92:	493f      	ldr	r1, [pc, #252]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f98:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a3c      	ldr	r2, [pc, #240]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa4:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a39      	ldr	r2, [pc, #228]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fb0:	f7ff f984 	bl	80012bc <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f980 	bl	80012bc <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e067      	b.n	800209a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fca:	4b31      	ldr	r3, [pc, #196]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd6:	e05f      	b.n	8002098 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e05e      	b.n	800209a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fdc:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d157      	bne.n	8002098 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a28      	ldr	r2, [pc, #160]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ff4:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a25      	ldr	r2, [pc, #148]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002000:	f7ff f95c 	bl	80012bc <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7ff f958 	bl	80012bc <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e03f      	b.n	800209a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201a:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x7a4>
 8002026:	e037      	b.n	8002098 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d02d      	beq.n	800208a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a17      	ldr	r2, [pc, #92]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8002034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002038:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d105      	bne.n	8002052 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4a11      	ldr	r2, [pc, #68]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 800204c:	f023 0303 	bic.w	r3, r3, #3
 8002050:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8002058:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800205c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002060:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7ff f92b 	bl	80012bc <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206a:	f7ff f927 	bl	80012bc <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e00e      	b.n	800209a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f0      	bne.n	800206a <HAL_RCC_OscConfig+0x806>
 8002088:	e006      	b.n	8002098 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e005      	b.n	800209a <HAL_RCC_OscConfig+0x836>
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3720      	adds	r7, #32
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop

080020a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0c8      	b.n	800224a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b8:	4b66      	ldr	r3, [pc, #408]	; (8002254 <HAL_RCC_ClockConfig+0x1b0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d910      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b63      	ldr	r3, [pc, #396]	; (8002254 <HAL_RCC_ClockConfig+0x1b0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 0207 	bic.w	r2, r3, #7
 80020ce:	4961      	ldr	r1, [pc, #388]	; (8002254 <HAL_RCC_ClockConfig+0x1b0>)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d6:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <HAL_RCC_ClockConfig+0x1b0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0b0      	b.n	800224a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d04c      	beq.n	800218e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d107      	bne.n	800210c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fc:	4b56      	ldr	r3, [pc, #344]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d121      	bne.n	800214c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e09e      	b.n	800224a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d107      	bne.n	8002124 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002114:	4b50      	ldr	r3, [pc, #320]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d115      	bne.n	800214c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e092      	b.n	800224a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d107      	bne.n	800213c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800212c:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e086      	b.n	800224a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800213c:	4b46      	ldr	r3, [pc, #280]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e07e      	b.n	800224a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800214c:	4b42      	ldr	r3, [pc, #264]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f023 0203 	bic.w	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	493f      	ldr	r1, [pc, #252]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800215e:	f7ff f8ad 	bl	80012bc <HAL_GetTick>
 8002162:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002164:	e00a      	b.n	800217c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002166:	f7ff f8a9 	bl	80012bc <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e066      	b.n	800224a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217c:	4b36      	ldr	r3, [pc, #216]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 020c 	and.w	r2, r3, #12
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	429a      	cmp	r2, r3
 800218c:	d1eb      	bne.n	8002166 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800219a:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	492c      	ldr	r1, [pc, #176]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ac:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_RCC_ClockConfig+0x1b0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d210      	bcs.n	80021dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b26      	ldr	r3, [pc, #152]	; (8002254 <HAL_RCC_ClockConfig+0x1b0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 0207 	bic.w	r2, r3, #7
 80021c2:	4924      	ldr	r1, [pc, #144]	; (8002254 <HAL_RCC_ClockConfig+0x1b0>)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_RCC_ClockConfig+0x1b0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e036      	b.n	800224a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4918      	ldr	r1, [pc, #96]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4910      	ldr	r1, [pc, #64]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800221a:	f000 f825 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 800221e:	4601      	mov	r1, r0
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_RCC_ClockConfig+0x1b4>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	4a0c      	ldr	r2, [pc, #48]	; (800225c <HAL_RCC_ClockConfig+0x1b8>)
 800222c:	5cd3      	ldrb	r3, [r2, r3]
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	fa21 f303 	lsr.w	r3, r1, r3
 8002236:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe ff2c 	bl	800109c <HAL_InitTick>
 8002244:	4603      	mov	r3, r0
 8002246:	72fb      	strb	r3, [r7, #11]

  return status;
 8002248:	7afb      	ldrb	r3, [r7, #11]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40022000 	.word	0x40022000
 8002258:	40021000 	.word	0x40021000
 800225c:	08006cac 	.word	0x08006cac
 8002260:	20000000 	.word	0x20000000
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002276:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_RCC_GetSysClockFreq+0x104>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002280:	4b3a      	ldr	r3, [pc, #232]	; (800236c <HAL_RCC_GetSysClockFreq+0x104>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x34>
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d121      	bne.n	80022da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d11e      	bne.n	80022da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_RCC_GetSysClockFreq+0x104>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <HAL_RCC_GetSysClockFreq+0x104>)
 80022aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e005      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022b8:	4b2c      	ldr	r3, [pc, #176]	; (800236c <HAL_RCC_GetSysClockFreq+0x104>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022c4:	4a2a      	ldr	r2, [pc, #168]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10d      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d102      	bne.n	80022e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	e004      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022ec:	4b22      	ldr	r3, [pc, #136]	; (8002378 <HAL_RCC_GetSysClockFreq+0x110>)
 80022ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d133      	bne.n	800235e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_RCC_GetSysClockFreq+0x104>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d002      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0xa4>
 8002306:	2b03      	cmp	r3, #3
 8002308:	d003      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0xaa>
 800230a:	e005      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCC_GetSysClockFreq+0x10c>)
 800230e:	617b      	str	r3, [r7, #20]
      break;
 8002310:	e005      	b.n	800231e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_RCC_GetSysClockFreq+0x110>)
 8002314:	617b      	str	r3, [r7, #20]
      break;
 8002316:	e002      	b.n	800231e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	617b      	str	r3, [r7, #20]
      break;
 800231c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_RCC_GetSysClockFreq+0x104>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	3301      	adds	r3, #1
 800232a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_RCC_GetSysClockFreq+0x104>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	fb02 f203 	mul.w	r2, r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002342:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_GetSysClockFreq+0x104>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0e5b      	lsrs	r3, r3, #25
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	3301      	adds	r3, #1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800235e:	69bb      	ldr	r3, [r7, #24]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3724      	adds	r7, #36	; 0x24
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40021000 	.word	0x40021000
 8002370:	08006cc4 	.word	0x08006cc4
 8002374:	00f42400 	.word	0x00f42400
 8002378:	007a1200 	.word	0x007a1200

0800237c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_RCC_GetHCLKFreq+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000000 	.word	0x20000000

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002398:	f7ff fff0 	bl	800237c <HAL_RCC_GetHCLKFreq>
 800239c:	4601      	mov	r1, r0
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023aa:	5cd3      	ldrb	r3, [r2, r3]
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08006cbc 	.word	0x08006cbc

080023c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	220f      	movs	r2, #15
 80023ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_RCC_GetClockConfig+0x5c>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_RCC_GetClockConfig+0x5c>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_RCC_GetClockConfig+0x5c>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_GetClockConfig+0x5c>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	08db      	lsrs	r3, r3, #3
 80023fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <HAL_RCC_GetClockConfig+0x60>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0207 	and.w	r2, r3, #7
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	601a      	str	r2, [r3, #0]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	40022000 	.word	0x40022000

08002424 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002430:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800243c:	f7ff f9ae 	bl	800179c <HAL_PWREx_GetVoltageRange>
 8002440:	6178      	str	r0, [r7, #20]
 8002442:	e014      	b.n	800246e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4b25      	ldr	r3, [pc, #148]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	4a24      	ldr	r2, [pc, #144]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244e:	6593      	str	r3, [r2, #88]	; 0x58
 8002450:	4b22      	ldr	r3, [pc, #136]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800245c:	f7ff f99e 	bl	800179c <HAL_PWREx_GetVoltageRange>
 8002460:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002462:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002474:	d10b      	bne.n	800248e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d919      	bls.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2ba0      	cmp	r3, #160	; 0xa0
 8002480:	d902      	bls.n	8002488 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002482:	2302      	movs	r3, #2
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	e013      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002488:	2301      	movs	r3, #1
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	e010      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b80      	cmp	r3, #128	; 0x80
 8002492:	d902      	bls.n	800249a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002494:	2303      	movs	r3, #3
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	e00a      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b80      	cmp	r3, #128	; 0x80
 800249e:	d102      	bne.n	80024a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024a0:	2302      	movs	r3, #2
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	e004      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b70      	cmp	r3, #112	; 0x70
 80024aa:	d101      	bne.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024ac:	2301      	movs	r3, #1
 80024ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 0207 	bic.w	r2, r3, #7
 80024b8:	4909      	ldr	r1, [pc, #36]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d001      	beq.n	80024d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40022000 	.word	0x40022000

080024e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e049      	b.n	800258a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fd74 	bl	8000ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f000 ff28 	bl	8003378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d001      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e03b      	b.n	8002624 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a19      	ldr	r2, [pc, #100]	; (8002630 <HAL_TIM_Base_Start_IT+0x9c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_TIM_Base_Start_IT+0x4e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d6:	d004      	beq.n	80025e2 <HAL_TIM_Base_Start_IT+0x4e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a15      	ldr	r2, [pc, #84]	; (8002634 <HAL_TIM_Base_Start_IT+0xa0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d115      	bne.n	800260e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <HAL_TIM_Base_Start_IT+0xa4>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b06      	cmp	r3, #6
 80025f2:	d015      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x8c>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fa:	d011      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260c:	e008      	b.n	8002620 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e000      	b.n	8002622 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002620:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40012c00 	.word	0x40012c00
 8002634:	40014000 	.word	0x40014000
 8002638:	00010007 	.word	0x00010007

0800263c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e049      	b.n	80026e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f841 	bl	80026ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3304      	adds	r3, #4
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f000 fe7c 	bl	8003378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <HAL_TIM_PWM_Start+0x24>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	bf14      	ite	ne
 800271c:	2301      	movne	r3, #1
 800271e:	2300      	moveq	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	e03c      	b.n	800279e <HAL_TIM_PWM_Start+0x9e>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b04      	cmp	r3, #4
 8002728:	d109      	bne.n	800273e <HAL_TIM_PWM_Start+0x3e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	bf14      	ite	ne
 8002736:	2301      	movne	r3, #1
 8002738:	2300      	moveq	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	e02f      	b.n	800279e <HAL_TIM_PWM_Start+0x9e>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b08      	cmp	r3, #8
 8002742:	d109      	bne.n	8002758 <HAL_TIM_PWM_Start+0x58>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	bf14      	ite	ne
 8002750:	2301      	movne	r3, #1
 8002752:	2300      	moveq	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	e022      	b.n	800279e <HAL_TIM_PWM_Start+0x9e>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d109      	bne.n	8002772 <HAL_TIM_PWM_Start+0x72>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	bf14      	ite	ne
 800276a:	2301      	movne	r3, #1
 800276c:	2300      	moveq	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	e015      	b.n	800279e <HAL_TIM_PWM_Start+0x9e>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b10      	cmp	r3, #16
 8002776:	d109      	bne.n	800278c <HAL_TIM_PWM_Start+0x8c>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	bf14      	ite	ne
 8002784:	2301      	movne	r3, #1
 8002786:	2300      	moveq	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	e008      	b.n	800279e <HAL_TIM_PWM_Start+0x9e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	bf14      	ite	ne
 8002798:	2301      	movne	r3, #1
 800279a:	2300      	moveq	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e07e      	b.n	80028a4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d104      	bne.n	80027b6 <HAL_TIM_PWM_Start+0xb6>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b4:	e023      	b.n	80027fe <HAL_TIM_PWM_Start+0xfe>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d104      	bne.n	80027c6 <HAL_TIM_PWM_Start+0xc6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027c4:	e01b      	b.n	80027fe <HAL_TIM_PWM_Start+0xfe>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d104      	bne.n	80027d6 <HAL_TIM_PWM_Start+0xd6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d4:	e013      	b.n	80027fe <HAL_TIM_PWM_Start+0xfe>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d104      	bne.n	80027e6 <HAL_TIM_PWM_Start+0xe6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027e4:	e00b      	b.n	80027fe <HAL_TIM_PWM_Start+0xfe>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d104      	bne.n	80027f6 <HAL_TIM_PWM_Start+0xf6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f4:	e003      	b.n	80027fe <HAL_TIM_PWM_Start+0xfe>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2201      	movs	r2, #1
 8002804:	6839      	ldr	r1, [r7, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f001 fa3e 	bl	8003c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a26      	ldr	r2, [pc, #152]	; (80028ac <HAL_TIM_PWM_Start+0x1ac>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d009      	beq.n	800282a <HAL_TIM_PWM_Start+0x12a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a25      	ldr	r2, [pc, #148]	; (80028b0 <HAL_TIM_PWM_Start+0x1b0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d004      	beq.n	800282a <HAL_TIM_PWM_Start+0x12a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a23      	ldr	r2, [pc, #140]	; (80028b4 <HAL_TIM_PWM_Start+0x1b4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d101      	bne.n	800282e <HAL_TIM_PWM_Start+0x12e>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_TIM_PWM_Start+0x130>
 800282e:	2300      	movs	r3, #0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d007      	beq.n	8002844 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002842:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a18      	ldr	r2, [pc, #96]	; (80028ac <HAL_TIM_PWM_Start+0x1ac>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_TIM_PWM_Start+0x162>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002856:	d004      	beq.n	8002862 <HAL_TIM_PWM_Start+0x162>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <HAL_TIM_PWM_Start+0x1b0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d115      	bne.n	800288e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_TIM_PWM_Start+0x1b8>)
 800286a:	4013      	ands	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b06      	cmp	r3, #6
 8002872:	d015      	beq.n	80028a0 <HAL_TIM_PWM_Start+0x1a0>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287a:	d011      	beq.n	80028a0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288c:	e008      	b.n	80028a0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e000      	b.n	80028a2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40014000 	.word	0x40014000
 80028b4:	40014400 	.word	0x40014400
 80028b8:	00010007 	.word	0x00010007

080028bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e049      	b.n	8002962 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fb3c 	bl	8000f60 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 fd3c 	bl	8003378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d104      	bne.n	8002986 <HAL_TIM_IC_Start_IT+0x1a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e023      	b.n	80029ce <HAL_TIM_IC_Start_IT+0x62>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d104      	bne.n	8002996 <HAL_TIM_IC_Start_IT+0x2a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002992:	b2db      	uxtb	r3, r3
 8002994:	e01b      	b.n	80029ce <HAL_TIM_IC_Start_IT+0x62>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d104      	bne.n	80029a6 <HAL_TIM_IC_Start_IT+0x3a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	e013      	b.n	80029ce <HAL_TIM_IC_Start_IT+0x62>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	d104      	bne.n	80029b6 <HAL_TIM_IC_Start_IT+0x4a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	e00b      	b.n	80029ce <HAL_TIM_IC_Start_IT+0x62>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	d104      	bne.n	80029c6 <HAL_TIM_IC_Start_IT+0x5a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	e003      	b.n	80029ce <HAL_TIM_IC_Start_IT+0x62>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d104      	bne.n	80029e0 <HAL_TIM_IC_Start_IT+0x74>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e013      	b.n	8002a08 <HAL_TIM_IC_Start_IT+0x9c>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d104      	bne.n	80029f0 <HAL_TIM_IC_Start_IT+0x84>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	e00b      	b.n	8002a08 <HAL_TIM_IC_Start_IT+0x9c>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d104      	bne.n	8002a00 <HAL_TIM_IC_Start_IT+0x94>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e003      	b.n	8002a08 <HAL_TIM_IC_Start_IT+0x9c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d102      	bne.n	8002a16 <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a10:	7bbb      	ldrb	r3, [r7, #14]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d001      	beq.n	8002a1a <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0c4      	b.n	8002ba4 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d104      	bne.n	8002a2a <HAL_TIM_IC_Start_IT+0xbe>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a28:	e023      	b.n	8002a72 <HAL_TIM_IC_Start_IT+0x106>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d104      	bne.n	8002a3a <HAL_TIM_IC_Start_IT+0xce>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a38:	e01b      	b.n	8002a72 <HAL_TIM_IC_Start_IT+0x106>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d104      	bne.n	8002a4a <HAL_TIM_IC_Start_IT+0xde>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a48:	e013      	b.n	8002a72 <HAL_TIM_IC_Start_IT+0x106>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	d104      	bne.n	8002a5a <HAL_TIM_IC_Start_IT+0xee>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a58:	e00b      	b.n	8002a72 <HAL_TIM_IC_Start_IT+0x106>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d104      	bne.n	8002a6a <HAL_TIM_IC_Start_IT+0xfe>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a68:	e003      	b.n	8002a72 <HAL_TIM_IC_Start_IT+0x106>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d104      	bne.n	8002a82 <HAL_TIM_IC_Start_IT+0x116>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a80:	e013      	b.n	8002aaa <HAL_TIM_IC_Start_IT+0x13e>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d104      	bne.n	8002a92 <HAL_TIM_IC_Start_IT+0x126>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a90:	e00b      	b.n	8002aaa <HAL_TIM_IC_Start_IT+0x13e>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_IC_Start_IT+0x136>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002aa0:	e003      	b.n	8002aaa <HAL_TIM_IC_Start_IT+0x13e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b0c      	cmp	r3, #12
 8002aae:	d841      	bhi.n	8002b34 <HAL_TIM_IC_Start_IT+0x1c8>
 8002ab0:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <HAL_TIM_IC_Start_IT+0x14c>)
 8002ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002aed 	.word	0x08002aed
 8002abc:	08002b35 	.word	0x08002b35
 8002ac0:	08002b35 	.word	0x08002b35
 8002ac4:	08002b35 	.word	0x08002b35
 8002ac8:	08002aff 	.word	0x08002aff
 8002acc:	08002b35 	.word	0x08002b35
 8002ad0:	08002b35 	.word	0x08002b35
 8002ad4:	08002b35 	.word	0x08002b35
 8002ad8:	08002b11 	.word	0x08002b11
 8002adc:	08002b35 	.word	0x08002b35
 8002ae0:	08002b35 	.word	0x08002b35
 8002ae4:	08002b35 	.word	0x08002b35
 8002ae8:	08002b23 	.word	0x08002b23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0202 	orr.w	r2, r2, #2
 8002afa:	60da      	str	r2, [r3, #12]
      break;
 8002afc:	e01b      	b.n	8002b36 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0204 	orr.w	r2, r2, #4
 8002b0c:	60da      	str	r2, [r3, #12]
      break;
 8002b0e:	e012      	b.n	8002b36 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0208 	orr.w	r2, r2, #8
 8002b1e:	60da      	str	r2, [r3, #12]
      break;
 8002b20:	e009      	b.n	8002b36 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0210 	orr.w	r2, r2, #16
 8002b30:	60da      	str	r2, [r3, #12]
      break;
 8002b32:	e000      	b.n	8002b36 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8002b34:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 f8a2 	bl	8003c88 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a18      	ldr	r2, [pc, #96]	; (8002bac <HAL_TIM_IC_Start_IT+0x240>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_TIM_IC_Start_IT+0x1f6>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b56:	d004      	beq.n	8002b62 <HAL_TIM_IC_Start_IT+0x1f6>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <HAL_TIM_IC_Start_IT+0x244>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d115      	bne.n	8002b8e <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_TIM_IC_Start_IT+0x248>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b06      	cmp	r3, #6
 8002b72:	d015      	beq.n	8002ba0 <HAL_TIM_IC_Start_IT+0x234>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7a:	d011      	beq.n	8002ba0 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8c:	e008      	b.n	8002ba0 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0201 	orr.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	e000      	b.n	8002ba2 <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	00010007 	.word	0x00010007

08002bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0202 	mvn.w	r2, #2
 8002be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fd fef0 	bl	80009e0 <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fb9a 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fba1 	bl	8003350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0204 	mvn.w	r2, #4
 8002c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fd fec6 	bl	80009e0 <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fb70 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fb77 	bl	8003350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d122      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d11b      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0208 	mvn.w	r2, #8
 8002c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2204      	movs	r2, #4
 8002c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd fe9c 	bl	80009e0 <HAL_TIM_IC_CaptureCallback>
 8002ca8:	e005      	b.n	8002cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fb46 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fb4d 	bl	8003350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d122      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d11b      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0210 	mvn.w	r2, #16
 8002ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fd fe72 	bl	80009e0 <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fb1c 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fb23 	bl	8003350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0201 	mvn.w	r2, #1
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe f8d4 	bl	8000ee4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	2b80      	cmp	r3, #128	; 0x80
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f001 f826 	bl	8003db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d76:	d10e      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d82:	2b80      	cmp	r3, #128	; 0x80
 8002d84:	d107      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f001 f819 	bl	8003dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d10e      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d107      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fad1 	bl	8003364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d10e      	bne.n	8002dee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d107      	bne.n	8002dee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f06f 0220 	mvn.w	r2, #32
 8002de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 ffd9 	bl	8003da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e082      	b.n	8002f16 <HAL_TIM_IC_ConfigChannel+0x120>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11b      	bne.n	8002e56 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f000 fd85 	bl	800393c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 020c 	bic.w	r2, r2, #12
 8002e40:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6999      	ldr	r1, [r3, #24]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	619a      	str	r2, [r3, #24]
 8002e54:	e05a      	b.n	8002f0c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d11c      	bne.n	8002e96 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f000 fdeb 	bl	8003a46 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e7e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6999      	ldr	r1, [r3, #24]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	021a      	lsls	r2, r3, #8
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	619a      	str	r2, [r3, #24]
 8002e94:	e03a      	b.n	8002f0c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d11b      	bne.n	8002ed4 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6819      	ldr	r1, [r3, #0]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f000 fe38 	bl	8003b20 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 020c 	bic.w	r2, r2, #12
 8002ebe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69d9      	ldr	r1, [r3, #28]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	61da      	str	r2, [r3, #28]
 8002ed2:	e01b      	b.n	8002f0c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f000 fe58 	bl	8003b98 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69da      	ldr	r2, [r3, #28]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ef6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69d9      	ldr	r1, [r3, #28]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	021a      	lsls	r2, r3, #8
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e0fd      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x216>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b14      	cmp	r3, #20
 8002f46:	f200 80f0 	bhi.w	800312a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002f4a:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f50:	08002fa5 	.word	0x08002fa5
 8002f54:	0800312b 	.word	0x0800312b
 8002f58:	0800312b 	.word	0x0800312b
 8002f5c:	0800312b 	.word	0x0800312b
 8002f60:	08002fe5 	.word	0x08002fe5
 8002f64:	0800312b 	.word	0x0800312b
 8002f68:	0800312b 	.word	0x0800312b
 8002f6c:	0800312b 	.word	0x0800312b
 8002f70:	08003027 	.word	0x08003027
 8002f74:	0800312b 	.word	0x0800312b
 8002f78:	0800312b 	.word	0x0800312b
 8002f7c:	0800312b 	.word	0x0800312b
 8002f80:	08003067 	.word	0x08003067
 8002f84:	0800312b 	.word	0x0800312b
 8002f88:	0800312b 	.word	0x0800312b
 8002f8c:	0800312b 	.word	0x0800312b
 8002f90:	080030a9 	.word	0x080030a9
 8002f94:	0800312b 	.word	0x0800312b
 8002f98:	0800312b 	.word	0x0800312b
 8002f9c:	0800312b 	.word	0x0800312b
 8002fa0:	080030e9 	.word	0x080030e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fa48 	bl	8003440 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0208 	orr.w	r2, r2, #8
 8002fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6999      	ldr	r1, [r3, #24]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	619a      	str	r2, [r3, #24]
      break;
 8002fe2:	e0a3      	b.n	800312c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 faa4 	bl	8003538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	619a      	str	r2, [r3, #24]
      break;
 8003024:	e082      	b.n	800312c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fafd 	bl	800362c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0208 	orr.w	r2, r2, #8
 8003040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0204 	bic.w	r2, r2, #4
 8003050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69d9      	ldr	r1, [r3, #28]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	61da      	str	r2, [r3, #28]
      break;
 8003064:	e062      	b.n	800312c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fb55 	bl	800371c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	61da      	str	r2, [r3, #28]
      break;
 80030a6:	e041      	b.n	800312c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fb92 	bl	80037d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0208 	orr.w	r2, r2, #8
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0204 	bic.w	r2, r2, #4
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030e6:	e021      	b.n	800312c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fbca 	bl	8003888 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003102:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003112:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	021a      	lsls	r2, r3, #8
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003128:	e000      	b.n	800312c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800312a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop

08003140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_TIM_ConfigClockSource+0x18>
 8003154:	2302      	movs	r3, #2
 8003156:	e0a8      	b.n	80032aa <HAL_TIM_ConfigClockSource+0x16a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003176:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800317a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003182:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d067      	beq.n	8003264 <HAL_TIM_ConfigClockSource+0x124>
 8003194:	2b40      	cmp	r3, #64	; 0x40
 8003196:	d80b      	bhi.n	80031b0 <HAL_TIM_ConfigClockSource+0x70>
 8003198:	2b10      	cmp	r3, #16
 800319a:	d073      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0x144>
 800319c:	2b10      	cmp	r3, #16
 800319e:	d802      	bhi.n	80031a6 <HAL_TIM_ConfigClockSource+0x66>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d06f      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031a4:	e078      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d06c      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0x144>
 80031aa:	2b30      	cmp	r3, #48	; 0x30
 80031ac:	d06a      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80031ae:	e073      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80031b0:	2b70      	cmp	r3, #112	; 0x70
 80031b2:	d00d      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x90>
 80031b4:	2b70      	cmp	r3, #112	; 0x70
 80031b6:	d804      	bhi.n	80031c2 <HAL_TIM_ConfigClockSource+0x82>
 80031b8:	2b50      	cmp	r3, #80	; 0x50
 80031ba:	d033      	beq.n	8003224 <HAL_TIM_ConfigClockSource+0xe4>
 80031bc:	2b60      	cmp	r3, #96	; 0x60
 80031be:	d041      	beq.n	8003244 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80031c0:	e06a      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80031c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c6:	d066      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0x156>
 80031c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031cc:	d017      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80031ce:	e063      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6899      	ldr	r1, [r3, #8]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f000 fd32 	bl	8003c48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	609a      	str	r2, [r3, #8]
      break;
 80031fc:	e04c      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f000 fd1b 	bl	8003c48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003220:	609a      	str	r2, [r3, #8]
      break;
 8003222:	e039      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	461a      	mov	r2, r3
 8003232:	f000 fbd9 	bl	80039e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2150      	movs	r1, #80	; 0x50
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fce8 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 8003242:	e029      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	461a      	mov	r2, r3
 8003252:	f000 fc35 	bl	8003ac0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2160      	movs	r1, #96	; 0x60
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fcd8 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 8003262:	e019      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	461a      	mov	r2, r3
 8003272:	f000 fbb9 	bl	80039e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2140      	movs	r1, #64	; 0x40
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fcc8 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 8003282:	e009      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f000 fcbf 	bl	8003c12 <TIM_ITRx_SetConfig>
        break;
 8003294:	e000      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003296:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b0c      	cmp	r3, #12
 80032c6:	d831      	bhi.n	800332c <HAL_TIM_ReadCapturedValue+0x78>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	08003305 	.word	0x08003305
 80032d4:	0800332d 	.word	0x0800332d
 80032d8:	0800332d 	.word	0x0800332d
 80032dc:	0800332d 	.word	0x0800332d
 80032e0:	0800330f 	.word	0x0800330f
 80032e4:	0800332d 	.word	0x0800332d
 80032e8:	0800332d 	.word	0x0800332d
 80032ec:	0800332d 	.word	0x0800332d
 80032f0:	08003319 	.word	0x08003319
 80032f4:	0800332d 	.word	0x0800332d
 80032f8:	0800332d 	.word	0x0800332d
 80032fc:	0800332d 	.word	0x0800332d
 8003300:	08003323 	.word	0x08003323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330a:	60fb      	str	r3, [r7, #12]

      break;
 800330c:	e00f      	b.n	800332e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	60fb      	str	r3, [r7, #12]

      break;
 8003316:	e00a      	b.n	800332e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	60fb      	str	r3, [r7, #12]

      break;
 8003320:	e005      	b.n	800332e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	60fb      	str	r3, [r7, #12]

      break;
 800332a:	e000      	b.n	800332e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800332c:	bf00      	nop
  }

  return tmpreg;
 800332e:	68fb      	ldr	r3, [r7, #12]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a2a      	ldr	r2, [pc, #168]	; (8003434 <TIM_Base_SetConfig+0xbc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_Base_SetConfig+0x20>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003396:	d108      	bne.n	80033aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a21      	ldr	r2, [pc, #132]	; (8003434 <TIM_Base_SetConfig+0xbc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00b      	beq.n	80033ca <TIM_Base_SetConfig+0x52>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b8:	d007      	beq.n	80033ca <TIM_Base_SetConfig+0x52>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a1e      	ldr	r2, [pc, #120]	; (8003438 <TIM_Base_SetConfig+0xc0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d003      	beq.n	80033ca <TIM_Base_SetConfig+0x52>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a1d      	ldr	r2, [pc, #116]	; (800343c <TIM_Base_SetConfig+0xc4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d108      	bne.n	80033dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a0c      	ldr	r2, [pc, #48]	; (8003434 <TIM_Base_SetConfig+0xbc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d007      	beq.n	8003418 <TIM_Base_SetConfig+0xa0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <TIM_Base_SetConfig+0xc0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <TIM_Base_SetConfig+0xa0>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <TIM_Base_SetConfig+0xc4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d103      	bne.n	8003420 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	615a      	str	r2, [r3, #20]
}
 8003426:	bf00      	nop
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40012c00 	.word	0x40012c00
 8003438:	40014000 	.word	0x40014000
 800343c:	40014400 	.word	0x40014400

08003440 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f023 0201 	bic.w	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 0302 	bic.w	r3, r3, #2
 800348c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a24      	ldr	r2, [pc, #144]	; (800352c <TIM_OC1_SetConfig+0xec>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d007      	beq.n	80034b0 <TIM_OC1_SetConfig+0x70>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a23      	ldr	r2, [pc, #140]	; (8003530 <TIM_OC1_SetConfig+0xf0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d003      	beq.n	80034b0 <TIM_OC1_SetConfig+0x70>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a22      	ldr	r2, [pc, #136]	; (8003534 <TIM_OC1_SetConfig+0xf4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10c      	bne.n	80034ca <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f023 0308 	bic.w	r3, r3, #8
 80034b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a17      	ldr	r2, [pc, #92]	; (800352c <TIM_OC1_SetConfig+0xec>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <TIM_OC1_SetConfig+0xa2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a16      	ldr	r2, [pc, #88]	; (8003530 <TIM_OC1_SetConfig+0xf0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_OC1_SetConfig+0xa2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <TIM_OC1_SetConfig+0xf4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d111      	bne.n	8003506 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	621a      	str	r2, [r3, #32]
}
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40014000 	.word	0x40014000
 8003534:	40014400 	.word	0x40014400

08003538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f023 0210 	bic.w	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f023 0320 	bic.w	r3, r3, #32
 8003586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a22      	ldr	r2, [pc, #136]	; (8003620 <TIM_OC2_SetConfig+0xe8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d10d      	bne.n	80035b8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a19      	ldr	r2, [pc, #100]	; (8003620 <TIM_OC2_SetConfig+0xe8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d007      	beq.n	80035d0 <TIM_OC2_SetConfig+0x98>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a18      	ldr	r2, [pc, #96]	; (8003624 <TIM_OC2_SetConfig+0xec>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d003      	beq.n	80035d0 <TIM_OC2_SetConfig+0x98>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a17      	ldr	r2, [pc, #92]	; (8003628 <TIM_OC2_SetConfig+0xf0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d113      	bne.n	80035f8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40014000 	.word	0x40014000
 8003628:	40014400 	.word	0x40014400

0800362c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0303 	bic.w	r3, r3, #3
 8003666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a21      	ldr	r2, [pc, #132]	; (8003710 <TIM_OC3_SetConfig+0xe4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10d      	bne.n	80036aa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a18      	ldr	r2, [pc, #96]	; (8003710 <TIM_OC3_SetConfig+0xe4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d007      	beq.n	80036c2 <TIM_OC3_SetConfig+0x96>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a17      	ldr	r2, [pc, #92]	; (8003714 <TIM_OC3_SetConfig+0xe8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d003      	beq.n	80036c2 <TIM_OC3_SetConfig+0x96>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a16      	ldr	r2, [pc, #88]	; (8003718 <TIM_OC3_SetConfig+0xec>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d113      	bne.n	80036ea <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	621a      	str	r2, [r3, #32]
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400

0800371c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800374a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	021b      	lsls	r3, r3, #8
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800376a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	031b      	lsls	r3, r3, #12
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a14      	ldr	r2, [pc, #80]	; (80037cc <TIM_OC4_SetConfig+0xb0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d007      	beq.n	8003790 <TIM_OC4_SetConfig+0x74>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <TIM_OC4_SetConfig+0xb4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_OC4_SetConfig+0x74>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <TIM_OC4_SetConfig+0xb8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d109      	bne.n	80037a4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	019b      	lsls	r3, r3, #6
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40014000 	.word	0x40014000
 80037d4:	40014400 	.word	0x40014400

080037d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800381c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a13      	ldr	r2, [pc, #76]	; (800387c <TIM_OC5_SetConfig+0xa4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d007      	beq.n	8003842 <TIM_OC5_SetConfig+0x6a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a12      	ldr	r2, [pc, #72]	; (8003880 <TIM_OC5_SetConfig+0xa8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d003      	beq.n	8003842 <TIM_OC5_SetConfig+0x6a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a11      	ldr	r2, [pc, #68]	; (8003884 <TIM_OC5_SetConfig+0xac>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d109      	bne.n	8003856 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003848:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	621a      	str	r2, [r3, #32]
}
 8003870:	bf00      	nop
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40014000 	.word	0x40014000
 8003884:	40014400 	.word	0x40014400

08003888 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	051b      	lsls	r3, r3, #20
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a14      	ldr	r2, [pc, #80]	; (8003930 <TIM_OC6_SetConfig+0xa8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d007      	beq.n	80038f4 <TIM_OC6_SetConfig+0x6c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a13      	ldr	r2, [pc, #76]	; (8003934 <TIM_OC6_SetConfig+0xac>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d003      	beq.n	80038f4 <TIM_OC6_SetConfig+0x6c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a12      	ldr	r2, [pc, #72]	; (8003938 <TIM_OC6_SetConfig+0xb0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d109      	bne.n	8003908 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	029b      	lsls	r3, r3, #10
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40012c00 	.word	0x40012c00
 8003934:	40014000 	.word	0x40014000
 8003938:	40014400 	.word	0x40014400

0800393c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f023 0201 	bic.w	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a1e      	ldr	r2, [pc, #120]	; (80039e0 <TIM_TI1_SetConfig+0xa4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d007      	beq.n	800397a <TIM_TI1_SetConfig+0x3e>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003970:	d003      	beq.n	800397a <TIM_TI1_SetConfig+0x3e>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4a1b      	ldr	r2, [pc, #108]	; (80039e4 <TIM_TI1_SetConfig+0xa8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d101      	bne.n	800397e <TIM_TI1_SetConfig+0x42>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <TIM_TI1_SetConfig+0x44>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e003      	b.n	800399e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f023 030a 	bic.w	r3, r3, #10
 80039b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f003 030a 	and.w	r3, r3, #10
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	621a      	str	r2, [r3, #32]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40012c00 	.word	0x40012c00
 80039e4:	40014000 	.word	0x40014000

080039e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f023 0201 	bic.w	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f023 030a 	bic.w	r3, r3, #10
 8003a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f023 0210 	bic.w	r2, r3, #16
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	031b      	lsls	r3, r3, #12
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f023 0210 	bic.w	r2, r3, #16
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	031b      	lsls	r3, r3, #12
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003afc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	621a      	str	r2, [r3, #32]
}
 8003b14:	bf00      	nop
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f023 0303 	bic.w	r3, r3, #3
 8003b4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003b70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	621a      	str	r2, [r3, #32]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bd6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	031b      	lsls	r3, r3, #12
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003bea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	031b      	lsls	r3, r3, #12
 8003bf0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f043 0307 	orr.w	r3, r3, #7
 8003c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	609a      	str	r2, [r3, #8]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	021a      	lsls	r2, r3, #8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	609a      	str	r2, [r3, #8]
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1a      	ldr	r2, [r3, #32]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	401a      	ands	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a1a      	ldr	r2, [r3, #32]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	621a      	str	r2, [r3, #32]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e04f      	b.n	8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a21      	ldr	r2, [pc, #132]	; (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d108      	bne.n	8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a14      	ldr	r2, [pc, #80]	; (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d009      	beq.n	8003d60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d54:	d004      	beq.n	8003d60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a10      	ldr	r2, [pc, #64]	; (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d10c      	bne.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40014000 	.word	0x40014000

08003da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003df2:	f3ef 8305 	mrs	r3, IPSR
 8003df6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003df8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8003e02:	607b      	str	r3, [r7, #4]
  return(result);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d105      	bne.n	8003e16 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8003e0e:	603b      	str	r3, [r7, #0]
  return(result);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <osKernelInitialize+0x3a>
 8003e16:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <osKernelInitialize+0x64>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d103      	bne.n	8003e26 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003e1e:	f06f 0305 	mvn.w	r3, #5
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e00c      	b.n	8003e40 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <osKernelInitialize+0x64>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d105      	bne.n	8003e3a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <osKernelInitialize+0x64>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e002      	b.n	8003e40 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e40:	68fb      	ldr	r3, [r7, #12]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000040 	.word	0x20000040

08003e54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e5a:	f3ef 8305 	mrs	r3, IPSR
 8003e5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10f      	bne.n	8003e86 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e66:	f3ef 8310 	mrs	r3, PRIMASK
 8003e6a:	607b      	str	r3, [r7, #4]
  return(result);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d105      	bne.n	8003e7e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e72:	f3ef 8311 	mrs	r3, BASEPRI
 8003e76:	603b      	str	r3, [r7, #0]
  return(result);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <osKernelStart+0x3a>
 8003e7e:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <osKernelStart+0x68>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d103      	bne.n	8003e8e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003e86:	f06f 0305 	mvn.w	r3, #5
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e010      	b.n	8003eb0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <osKernelStart+0x68>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d109      	bne.n	8003eaa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e96:	f7ff ffa1 	bl	8003ddc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <osKernelStart+0x68>)
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ea0:	f001 fa00 	bl	80052a4 <vTaskStartScheduler>
      stat = osOK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e002      	b.n	8003eb0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003eae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000040 	.word	0x20000040

08003ec0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b090      	sub	sp, #64	; 0x40
 8003ec4:	af04      	add	r7, sp, #16
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ed0:	f3ef 8305 	mrs	r3, IPSR
 8003ed4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ed6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f040 808f 	bne.w	8003ffc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ede:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d105      	bne.n	8003ef6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003eea:	f3ef 8311 	mrs	r3, BASEPRI
 8003eee:	617b      	str	r3, [r7, #20]
  return(result);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <osThreadNew+0x3e>
 8003ef6:	4b44      	ldr	r3, [pc, #272]	; (8004008 <osThreadNew+0x148>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d07e      	beq.n	8003ffc <osThreadNew+0x13c>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d07b      	beq.n	8003ffc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003f08:	2318      	movs	r3, #24
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003f10:	f04f 33ff 	mov.w	r3, #4294967295
 8003f14:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d045      	beq.n	8003fa8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <osThreadNew+0x6a>
        name = attr->name;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d008      	beq.n	8003f50 <osThreadNew+0x90>
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	2b38      	cmp	r3, #56	; 0x38
 8003f42:	d805      	bhi.n	8003f50 <osThreadNew+0x90>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <osThreadNew+0x94>
        return (NULL);
 8003f50:	2300      	movs	r3, #0
 8003f52:	e054      	b.n	8003ffe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00e      	beq.n	8003f8a <osThreadNew+0xca>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	2b5b      	cmp	r3, #91	; 0x5b
 8003f72:	d90a      	bls.n	8003f8a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d006      	beq.n	8003f8a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <osThreadNew+0xca>
        mem = 1;
 8003f84:	2301      	movs	r3, #1
 8003f86:	623b      	str	r3, [r7, #32]
 8003f88:	e010      	b.n	8003fac <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10c      	bne.n	8003fac <osThreadNew+0xec>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d108      	bne.n	8003fac <osThreadNew+0xec>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d104      	bne.n	8003fac <osThreadNew+0xec>
          mem = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	623b      	str	r3, [r7, #32]
 8003fa6:	e001      	b.n	8003fac <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d110      	bne.n	8003fd4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fba:	9202      	str	r2, [sp, #8]
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 ff99 	bl	8004f00 <xTaskCreateStatic>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	e013      	b.n	8003ffc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d110      	bne.n	8003ffc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	f107 0310 	add.w	r3, r7, #16
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 ffe1 	bl	8004fb4 <xTaskCreate>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d001      	beq.n	8003ffc <osThreadNew+0x13c>
          hTask = NULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ffc:	693b      	ldr	r3, [r7, #16]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3730      	adds	r7, #48	; 0x30
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000040 	.word	0x20000040

0800400c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004014:	f3ef 8305 	mrs	r3, IPSR
 8004018:	613b      	str	r3, [r7, #16]
  return(result);
 800401a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10f      	bne.n	8004040 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004020:	f3ef 8310 	mrs	r3, PRIMASK
 8004024:	60fb      	str	r3, [r7, #12]
  return(result);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d105      	bne.n	8004038 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800402c:	f3ef 8311 	mrs	r3, BASEPRI
 8004030:	60bb      	str	r3, [r7, #8]
  return(result);
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <osDelay+0x3c>
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <osDelay+0x58>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d103      	bne.n	8004048 <osDelay+0x3c>
    stat = osErrorISR;
 8004040:	f06f 0305 	mvn.w	r3, #5
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e007      	b.n	8004058 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f001 f8f2 	bl	800523c <vTaskDelay>
    }
  }

  return (stat);
 8004058:	697b      	ldr	r3, [r7, #20]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000040 	.word	0x20000040

08004068 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b08c      	sub	sp, #48	; 0x30
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004074:	2300      	movs	r3, #0
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004078:	f3ef 8305 	mrs	r3, IPSR
 800407c:	61bb      	str	r3, [r7, #24]
  return(result);
 800407e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004080:	2b00      	cmp	r3, #0
 8004082:	f040 8087 	bne.w	8004194 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004086:	f3ef 8310 	mrs	r3, PRIMASK
 800408a:	617b      	str	r3, [r7, #20]
  return(result);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d105      	bne.n	800409e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004092:	f3ef 8311 	mrs	r3, BASEPRI
 8004096:	613b      	str	r3, [r7, #16]
  return(result);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <osSemaphoreNew+0x3e>
 800409e:	4b40      	ldr	r3, [pc, #256]	; (80041a0 <osSemaphoreNew+0x138>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d076      	beq.n	8004194 <osSemaphoreNew+0x12c>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d073      	beq.n	8004194 <osSemaphoreNew+0x12c>
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d86f      	bhi.n	8004194 <osSemaphoreNew+0x12c>
    mem = -1;
 80040b4:	f04f 33ff 	mov.w	r3, #4294967295
 80040b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d015      	beq.n	80040ec <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d006      	beq.n	80040d6 <osSemaphoreNew+0x6e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b4f      	cmp	r3, #79	; 0x4f
 80040ce:	d902      	bls.n	80040d6 <osSemaphoreNew+0x6e>
        mem = 1;
 80040d0:	2301      	movs	r3, #1
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	e00c      	b.n	80040f0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d108      	bne.n	80040f0 <osSemaphoreNew+0x88>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d104      	bne.n	80040f0 <osSemaphoreNew+0x88>
          mem = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	623b      	str	r3, [r7, #32]
 80040ea:	e001      	b.n	80040f0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f6:	d04d      	beq.n	8004194 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d129      	bne.n	8004152 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d10b      	bne.n	800411c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	2303      	movs	r3, #3
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	2200      	movs	r2, #0
 8004110:	2100      	movs	r1, #0
 8004112:	2001      	movs	r0, #1
 8004114:	f000 f996 	bl	8004444 <xQueueGenericCreateStatic>
 8004118:	6278      	str	r0, [r7, #36]	; 0x24
 800411a:	e005      	b.n	8004128 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800411c:	2203      	movs	r2, #3
 800411e:	2100      	movs	r1, #0
 8004120:	2001      	movs	r0, #1
 8004122:	f000 fa02 	bl	800452a <xQueueGenericCreate>
 8004126:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	2b00      	cmp	r3, #0
 800412c:	d022      	beq.n	8004174 <osSemaphoreNew+0x10c>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01f      	beq.n	8004174 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004134:	2300      	movs	r3, #0
 8004136:	2200      	movs	r2, #0
 8004138:	2100      	movs	r1, #0
 800413a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800413c:	f000 fabe 	bl	80046bc <xQueueGenericSend>
 8004140:	4603      	mov	r3, r0
 8004142:	2b01      	cmp	r3, #1
 8004144:	d016      	beq.n	8004174 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8004146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004148:	f000 fd22 	bl	8004b90 <vQueueDelete>
            hSemaphore = NULL;
 800414c:	2300      	movs	r3, #0
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
 8004150:	e010      	b.n	8004174 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d108      	bne.n	800416a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	461a      	mov	r2, r3
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 fa44 	bl	80045ee <xQueueCreateCountingSemaphoreStatic>
 8004166:	6278      	str	r0, [r7, #36]	; 0x24
 8004168:	e004      	b.n	8004174 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800416a:	68b9      	ldr	r1, [r7, #8]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fa73 	bl	8004658 <xQueueCreateCountingSemaphore>
 8004172:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00c      	beq.n	8004194 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <osSemaphoreNew+0x120>
          name = attr->name;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	e001      	b.n	800418c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800418c:	69f9      	ldr	r1, [r7, #28]
 800418e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004190:	f000 fe30 	bl	8004df4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004196:	4618      	mov	r0, r3
 8004198:	3728      	adds	r7, #40	; 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000040 	.word	0x20000040

080041a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a07      	ldr	r2, [pc, #28]	; (80041d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80041b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4a06      	ldr	r2, [pc, #24]	; (80041d4 <vApplicationGetIdleTaskMemory+0x30>)
 80041ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2280      	movs	r2, #128	; 0x80
 80041c0:	601a      	str	r2, [r3, #0]
}
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000044 	.word	0x20000044
 80041d4:	200000a0 	.word	0x200000a0

080041d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a07      	ldr	r2, [pc, #28]	; (8004204 <vApplicationGetTimerTaskMemory+0x2c>)
 80041e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4a06      	ldr	r2, [pc, #24]	; (8004208 <vApplicationGetTimerTaskMemory+0x30>)
 80041ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041f6:	601a      	str	r2, [r3, #0]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	200002a0 	.word	0x200002a0
 8004208:	200002fc 	.word	0x200002fc

0800420c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f103 0208 	add.w	r2, r3, #8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f04f 32ff 	mov.w	r2, #4294967295
 8004224:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f103 0208 	add.w	r2, r3, #8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f103 0208 	add.w	r2, r3, #8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	601a      	str	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d103      	bne.n	80042ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e00c      	b.n	80042e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3308      	adds	r3, #8
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e002      	b.n	80042dc <vListInsert+0x2e>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d2f6      	bcs.n	80042d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	601a      	str	r2, [r3, #0]
}
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6892      	ldr	r2, [r2, #8]
 8004336:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6852      	ldr	r2, [r2, #4]
 8004340:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	429a      	cmp	r2, r3
 800434a:	d103      	bne.n	8004354 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	1e5a      	subs	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d109      	bne.n	800439c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	e7fe      	b.n	800439a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800439c:	f002 f906 	bl	80065ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a8:	68f9      	ldr	r1, [r7, #12]
 80043aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	441a      	add	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043cc:	3b01      	subs	r3, #1
 80043ce:	68f9      	ldr	r1, [r7, #12]
 80043d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	441a      	add	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	22ff      	movs	r2, #255	; 0xff
 80043e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	22ff      	movs	r2, #255	; 0xff
 80043e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d114      	bne.n	800441c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01a      	beq.n	8004430 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3310      	adds	r3, #16
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 f9d0 	bl	80057a4 <xTaskRemoveFromEventList>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d012      	beq.n	8004430 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800440a:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <xQueueGenericReset+0xcc>)
 800440c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	e009      	b.n	8004430 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3310      	adds	r3, #16
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fef3 	bl	800420c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3324      	adds	r3, #36	; 0x24
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff feee 	bl	800420c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004430:	f002 f8ea 	bl	8006608 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004434:	2301      	movs	r3, #1
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	e000ed04 	.word	0xe000ed04

08004444 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08e      	sub	sp, #56	; 0x38
 8004448:	af02      	add	r7, sp, #8
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <xQueueGenericCreateStatic+0x28>
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
 800446a:	e7fe      	b.n	800446a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <xQueueGenericCreateStatic+0x42>
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
 8004484:	e7fe      	b.n	8004484 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <xQueueGenericCreateStatic+0x4e>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <xQueueGenericCreateStatic+0x52>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <xQueueGenericCreateStatic+0x54>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d109      	bne.n	80044b0 <xQueueGenericCreateStatic+0x6c>
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	623b      	str	r3, [r7, #32]
 80044ae:	e7fe      	b.n	80044ae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <xQueueGenericCreateStatic+0x78>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <xQueueGenericCreateStatic+0x7c>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <xQueueGenericCreateStatic+0x7e>
 80044c0:	2300      	movs	r3, #0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <xQueueGenericCreateStatic+0x96>
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	e7fe      	b.n	80044d8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044da:	2350      	movs	r3, #80	; 0x50
 80044dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b50      	cmp	r3, #80	; 0x50
 80044e2:	d009      	beq.n	80044f8 <xQueueGenericCreateStatic+0xb4>
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	e7fe      	b.n	80044f6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80044fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00d      	beq.n	8004520 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800450c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f844 	bl	80045a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004522:	4618      	mov	r0, r3
 8004524:	3730      	adds	r7, #48	; 0x30
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800452a:	b580      	push	{r7, lr}
 800452c:	b08a      	sub	sp, #40	; 0x28
 800452e:	af02      	add	r7, sp, #8
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	4613      	mov	r3, r2
 8004536:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <xQueueGenericCreate+0x28>
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	e7fe      	b.n	8004550 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d102      	bne.n	800455e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	e004      	b.n	8004568 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	fb02 f303 	mul.w	r3, r2, r3
 8004566:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	3350      	adds	r3, #80	; 0x50
 800456c:	4618      	mov	r0, r3
 800456e:	f002 f937 	bl	80067e0 <pvPortMalloc>
 8004572:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d011      	beq.n	800459e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	3350      	adds	r3, #80	; 0x50
 8004582:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800458c:	79fa      	ldrb	r2, [r7, #7]
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	4613      	mov	r3, r2
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f805 	bl	80045a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800459e:	69bb      	ldr	r3, [r7, #24]
	}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d103      	bne.n	80045c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e002      	b.n	80045ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045d6:	2101      	movs	r1, #1
 80045d8:	69b8      	ldr	r0, [r7, #24]
 80045da:	f7ff fecb 	bl	8004374 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	78fa      	ldrb	r2, [r7, #3]
 80045e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b08a      	sub	sp, #40	; 0x28
 80045f2:	af02      	add	r7, sp, #8
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <xQueueCreateCountingSemaphoreStatic+0x26>
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	e7fe      	b.n	8004612 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	429a      	cmp	r2, r3
 800461a:	d909      	bls.n	8004630 <xQueueCreateCountingSemaphoreStatic+0x42>
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e7fe      	b.n	800462e <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004630:	2302      	movs	r3, #2
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	2100      	movs	r1, #0
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff ff02 	bl	8004444 <xQueueGenericCreateStatic>
 8004640:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800464e:	69fb      	ldr	r3, [r7, #28]
	}
 8004650:	4618      	mov	r0, r3
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d109      	bne.n	800467c <xQueueCreateCountingSemaphore+0x24>
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	e7fe      	b.n	800467a <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d909      	bls.n	8004698 <xQueueCreateCountingSemaphore+0x40>
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e7fe      	b.n	8004696 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004698:	2202      	movs	r2, #2
 800469a:	2100      	movs	r1, #0
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff44 	bl	800452a <xQueueGenericCreate>
 80046a2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80046b0:	697b      	ldr	r3, [r7, #20]
	}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08e      	sub	sp, #56	; 0x38
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046ca:	2300      	movs	r3, #0
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <xQueueGenericSend+0x30>
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ea:	e7fe      	b.n	80046ea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d103      	bne.n	80046fa <xQueueGenericSend+0x3e>
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <xQueueGenericSend+0x42>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <xQueueGenericSend+0x44>
 80046fe:	2300      	movs	r3, #0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <xQueueGenericSend+0x5c>
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
 8004716:	e7fe      	b.n	8004716 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d103      	bne.n	8004726 <xQueueGenericSend+0x6a>
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <xQueueGenericSend+0x6e>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <xQueueGenericSend+0x70>
 800472a:	2300      	movs	r3, #0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <xQueueGenericSend+0x88>
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	623b      	str	r3, [r7, #32]
 8004742:	e7fe      	b.n	8004742 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004744:	f001 f9e4 	bl	8005b10 <xTaskGetSchedulerState>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <xQueueGenericSend+0x98>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <xQueueGenericSend+0x9c>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <xQueueGenericSend+0x9e>
 8004758:	2300      	movs	r3, #0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <xQueueGenericSend+0xb6>
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	e7fe      	b.n	8004770 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004772:	f001 ff1b 	bl	80065ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477e:	429a      	cmp	r2, r3
 8004780:	d302      	bcc.n	8004788 <xQueueGenericSend+0xcc>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d129      	bne.n	80047dc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800478e:	f000 fa21 	bl	8004bd4 <prvCopyDataToQueue>
 8004792:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	2b00      	cmp	r3, #0
 800479a:	d010      	beq.n	80047be <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	3324      	adds	r3, #36	; 0x24
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 ffff 	bl	80057a4 <xTaskRemoveFromEventList>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d013      	beq.n	80047d4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047ac:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <xQueueGenericSend+0x1f0>)
 80047ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	e00a      	b.n	80047d4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047c4:	4b39      	ldr	r3, [pc, #228]	; (80048ac <xQueueGenericSend+0x1f0>)
 80047c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047d4:	f001 ff18 	bl	8006608 <vPortExitCritical>
				return pdPASS;
 80047d8:	2301      	movs	r3, #1
 80047da:	e063      	b.n	80048a4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047e2:	f001 ff11 	bl	8006608 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e05c      	b.n	80048a4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047f0:	f107 0314 	add.w	r3, r7, #20
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 f837 	bl	8005868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047fa:	2301      	movs	r3, #1
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047fe:	f001 ff03 	bl	8006608 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004802:	f000 fdb3 	bl	800536c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004806:	f001 fed1 	bl	80065ac <vPortEnterCritical>
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004810:	b25b      	sxtb	r3, r3
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004816:	d103      	bne.n	8004820 <xQueueGenericSend+0x164>
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004826:	b25b      	sxtb	r3, r3
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d103      	bne.n	8004836 <xQueueGenericSend+0x17a>
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004836:	f001 fee7 	bl	8006608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800483a:	1d3a      	adds	r2, r7, #4
 800483c:	f107 0314 	add.w	r3, r7, #20
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f001 f826 	bl	8005894 <xTaskCheckForTimeOut>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d124      	bne.n	8004898 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800484e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004850:	f000 fab8 	bl	8004dc4 <prvIsQueueFull>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d018      	beq.n	800488c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	3310      	adds	r3, #16
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	4611      	mov	r1, r2
 8004862:	4618      	mov	r0, r3
 8004864:	f000 ff50 	bl	8005708 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800486a:	f000 fa43 	bl	8004cf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800486e:	f000 fd8b 	bl	8005388 <xTaskResumeAll>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	f47f af7c 	bne.w	8004772 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800487a:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <xQueueGenericSend+0x1f0>)
 800487c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	e772      	b.n	8004772 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800488c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800488e:	f000 fa31 	bl	8004cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004892:	f000 fd79 	bl	8005388 <xTaskResumeAll>
 8004896:	e76c      	b.n	8004772 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800489a:	f000 fa2b 	bl	8004cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800489e:	f000 fd73 	bl	8005388 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3738      	adds	r7, #56	; 0x38
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	e000ed04 	.word	0xe000ed04

080048b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08e      	sub	sp, #56	; 0x38
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d109      	bne.n	80048dc <xQueueGenericSendFromISR+0x2c>
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
 80048da:	e7fe      	b.n	80048da <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d103      	bne.n	80048ea <xQueueGenericSendFromISR+0x3a>
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <xQueueGenericSendFromISR+0x3e>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <xQueueGenericSendFromISR+0x40>
 80048ee:	2300      	movs	r3, #0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <xQueueGenericSendFromISR+0x58>
 80048f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	623b      	str	r3, [r7, #32]
 8004906:	e7fe      	b.n	8004906 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d103      	bne.n	8004916 <xQueueGenericSendFromISR+0x66>
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <xQueueGenericSendFromISR+0x6a>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <xQueueGenericSendFromISR+0x6c>
 800491a:	2300      	movs	r3, #0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <xQueueGenericSendFromISR+0x84>
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	e7fe      	b.n	8004932 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004934:	f001 ff16 	bl	8006764 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004938:	f3ef 8211 	mrs	r2, BASEPRI
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	61ba      	str	r2, [r7, #24]
 800494e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004950:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495c:	429a      	cmp	r2, r3
 800495e:	d302      	bcc.n	8004966 <xQueueGenericSendFromISR+0xb6>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d12c      	bne.n	80049c0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800496c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	68b9      	ldr	r1, [r7, #8]
 8004974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004976:	f000 f92d 	bl	8004bd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800497a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d112      	bne.n	80049aa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	2b00      	cmp	r3, #0
 800498a:	d016      	beq.n	80049ba <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	3324      	adds	r3, #36	; 0x24
 8004990:	4618      	mov	r0, r3
 8004992:	f000 ff07 	bl	80057a4 <xTaskRemoveFromEventList>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00e      	beq.n	80049ba <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e007      	b.n	80049ba <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049ae:	3301      	adds	r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	b25a      	sxtb	r2, r3
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80049ba:	2301      	movs	r3, #1
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80049be:	e001      	b.n	80049c4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	637b      	str	r3, [r7, #52]	; 0x34
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3738      	adds	r7, #56	; 0x38
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08c      	sub	sp, #48	; 0x30
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d109      	bne.n	8004a06 <xQueueReceive+0x2e>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	e7fe      	b.n	8004a04 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d103      	bne.n	8004a14 <xQueueReceive+0x3c>
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <xQueueReceive+0x40>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <xQueueReceive+0x42>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <xQueueReceive+0x5a>
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	61fb      	str	r3, [r7, #28]
 8004a30:	e7fe      	b.n	8004a30 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a32:	f001 f86d 	bl	8005b10 <xTaskGetSchedulerState>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <xQueueReceive+0x6a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <xQueueReceive+0x6e>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <xQueueReceive+0x70>
 8004a46:	2300      	movs	r3, #0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <xQueueReceive+0x88>
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	61bb      	str	r3, [r7, #24]
 8004a5e:	e7fe      	b.n	8004a5e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a60:	f001 fda4 	bl	80065ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01f      	beq.n	8004ab0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a74:	f000 f918 	bl	8004ca8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	1e5a      	subs	r2, r3, #1
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00f      	beq.n	8004aa8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	3310      	adds	r3, #16
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fe89 	bl	80057a4 <xTaskRemoveFromEventList>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d007      	beq.n	8004aa8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a98:	4b3c      	ldr	r3, [pc, #240]	; (8004b8c <xQueueReceive+0x1b4>)
 8004a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004aa8:	f001 fdae 	bl	8006608 <vPortExitCritical>
				return pdPASS;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e069      	b.n	8004b84 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ab6:	f001 fda7 	bl	8006608 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e062      	b.n	8004b84 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ac4:	f107 0310 	add.w	r3, r7, #16
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fecd 	bl	8005868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ad2:	f001 fd99 	bl	8006608 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ad6:	f000 fc49 	bl	800536c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ada:	f001 fd67 	bl	80065ac <vPortEnterCritical>
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ae4:	b25b      	sxtb	r3, r3
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aea:	d103      	bne.n	8004af4 <xQueueReceive+0x11c>
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004afa:	b25b      	sxtb	r3, r3
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d103      	bne.n	8004b0a <xQueueReceive+0x132>
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b0a:	f001 fd7d 	bl	8006608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b0e:	1d3a      	adds	r2, r7, #4
 8004b10:	f107 0310 	add.w	r3, r7, #16
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 febc 	bl	8005894 <xTaskCheckForTimeOut>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d123      	bne.n	8004b6a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b24:	f000 f938 	bl	8004d98 <prvIsQueueEmpty>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d017      	beq.n	8004b5e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	3324      	adds	r3, #36	; 0x24
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4611      	mov	r1, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fde6 	bl	8005708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b3e:	f000 f8d9 	bl	8004cf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b42:	f000 fc21 	bl	8005388 <xTaskResumeAll>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d189      	bne.n	8004a60 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <xQueueReceive+0x1b4>)
 8004b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	e780      	b.n	8004a60 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b60:	f000 f8c8 	bl	8004cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b64:	f000 fc10 	bl	8005388 <xTaskResumeAll>
 8004b68:	e77a      	b.n	8004a60 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b6c:	f000 f8c2 	bl	8004cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b70:	f000 fc0a 	bl	8005388 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b76:	f000 f90f 	bl	8004d98 <prvIsQueueEmpty>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f43f af6f 	beq.w	8004a60 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3730      	adds	r7, #48	; 0x30
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <vQueueDelete+0x26>
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	e7fe      	b.n	8004bb4 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f944 	bl	8004e44 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f001 fecc 	bl	8006964 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10d      	bne.n	8004c0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d14d      	bne.n	8004c96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 ffa4 	bl	8005b4c <xTaskPriorityDisinherit>
 8004c04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	609a      	str	r2, [r3, #8]
 8004c0c:	e043      	b.n	8004c96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d119      	bne.n	8004c48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6858      	ldr	r0, [r3, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	f001 ffd8 	bl	8006bd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	441a      	add	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d32b      	bcc.n	8004c96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	e026      	b.n	8004c96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	68d8      	ldr	r0, [r3, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	461a      	mov	r2, r3
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	f001 ffbe 	bl	8006bd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	425b      	negs	r3, r3
 8004c62:	441a      	add	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d207      	bcs.n	8004c84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	425b      	negs	r3, r3
 8004c7e:	441a      	add	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d105      	bne.n	8004c96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c9e:	697b      	ldr	r3, [r7, #20]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d018      	beq.n	8004cec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	441a      	add	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d303      	bcc.n	8004cdc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68d9      	ldr	r1, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6838      	ldr	r0, [r7, #0]
 8004ce8:	f001 ff74 	bl	8006bd4 <memcpy>
	}
}
 8004cec:	bf00      	nop
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cfc:	f001 fc56 	bl	80065ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d08:	e011      	b.n	8004d2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d012      	beq.n	8004d38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3324      	adds	r3, #36	; 0x24
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fd44 	bl	80057a4 <xTaskRemoveFromEventList>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d22:	f000 fe17 	bl	8005954 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	dce9      	bgt.n	8004d0a <prvUnlockQueue+0x16>
 8004d36:	e000      	b.n	8004d3a <prvUnlockQueue+0x46>
					break;
 8004d38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	22ff      	movs	r2, #255	; 0xff
 8004d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d42:	f001 fc61 	bl	8006608 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d46:	f001 fc31 	bl	80065ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d52:	e011      	b.n	8004d78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d012      	beq.n	8004d82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3310      	adds	r3, #16
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fd1f 	bl	80057a4 <xTaskRemoveFromEventList>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d6c:	f000 fdf2 	bl	8005954 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d70:	7bbb      	ldrb	r3, [r7, #14]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	dce9      	bgt.n	8004d54 <prvUnlockQueue+0x60>
 8004d80:	e000      	b.n	8004d84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	22ff      	movs	r2, #255	; 0xff
 8004d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d8c:	f001 fc3c 	bl	8006608 <vPortExitCritical>
}
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004da0:	f001 fc04 	bl	80065ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	e001      	b.n	8004db6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004db6:	f001 fc27 	bl	8006608 <vPortExitCritical>

	return xReturn;
 8004dba:	68fb      	ldr	r3, [r7, #12]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dcc:	f001 fbee 	bl	80065ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d102      	bne.n	8004de2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	e001      	b.n	8004de6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004de6:	f001 fc0f 	bl	8006608 <vPortExitCritical>

	return xReturn;
 8004dea:	68fb      	ldr	r3, [r7, #12]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	e014      	b.n	8004e2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e04:	4a0e      	ldr	r2, [pc, #56]	; (8004e40 <vQueueAddToRegistry+0x4c>)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e10:	490b      	ldr	r1, [pc, #44]	; (8004e40 <vQueueAddToRegistry+0x4c>)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e1a:	4a09      	ldr	r2, [pc, #36]	; (8004e40 <vQueueAddToRegistry+0x4c>)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	4413      	add	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e26:	e005      	b.n	8004e34 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b07      	cmp	r3, #7
 8004e32:	d9e7      	bls.n	8004e04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e34:	bf00      	nop
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	200019f4 	.word	0x200019f4

08004e44 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e016      	b.n	8004e80 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004e52:	4a10      	ldr	r2, [pc, #64]	; (8004e94 <vQueueUnregisterQueue+0x50>)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	4413      	add	r3, r2
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d10b      	bne.n	8004e7a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004e62:	4a0c      	ldr	r2, [pc, #48]	; (8004e94 <vQueueUnregisterQueue+0x50>)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2100      	movs	r1, #0
 8004e68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004e6c:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <vQueueUnregisterQueue+0x50>)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4413      	add	r3, r2
 8004e74:	2200      	movs	r2, #0
 8004e76:	605a      	str	r2, [r3, #4]
				break;
 8004e78:	e005      	b.n	8004e86 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b07      	cmp	r3, #7
 8004e84:	d9e5      	bls.n	8004e52 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	200019f4 	.word	0x200019f4

08004e98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ea8:	f001 fb80 	bl	80065ac <vPortEnterCritical>
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb2:	b25b      	sxtb	r3, r3
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d103      	bne.n	8004ec2 <vQueueWaitForMessageRestricted+0x2a>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ec8:	b25b      	sxtb	r3, r3
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d103      	bne.n	8004ed8 <vQueueWaitForMessageRestricted+0x40>
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ed8:	f001 fb96 	bl	8006608 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	3324      	adds	r3, #36	; 0x24
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fc2f 	bl	8005750 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ef2:	6978      	ldr	r0, [r7, #20]
 8004ef4:	f7ff fefe 	bl	8004cf4 <prvUnlockQueue>
	}
 8004ef8:	bf00      	nop
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08e      	sub	sp, #56	; 0x38
 8004f04:	af04      	add	r7, sp, #16
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d109      	bne.n	8004f28 <xTaskCreateStatic+0x28>
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	623b      	str	r3, [r7, #32]
 8004f26:	e7fe      	b.n	8004f26 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <xTaskCreateStatic+0x42>
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	61fb      	str	r3, [r7, #28]
 8004f40:	e7fe      	b.n	8004f40 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f42:	235c      	movs	r3, #92	; 0x5c
 8004f44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b5c      	cmp	r3, #92	; 0x5c
 8004f4a:	d009      	beq.n	8004f60 <xTaskCreateStatic+0x60>
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e7fe      	b.n	8004f5e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01e      	beq.n	8004fa6 <xTaskCreateStatic+0xa6>
 8004f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01b      	beq.n	8004fa6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f80:	2300      	movs	r3, #0
 8004f82:	9303      	str	r3, [sp, #12]
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	9302      	str	r3, [sp, #8]
 8004f88:	f107 0314 	add.w	r3, r7, #20
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f850 	bl	800503e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fa0:	f000 f8dc 	bl	800515c <prvAddNewTaskToReadyList>
 8004fa4:	e001      	b.n	8004faa <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004faa:	697b      	ldr	r3, [r7, #20]
	}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3728      	adds	r7, #40	; 0x28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08c      	sub	sp, #48	; 0x30
 8004fb8:	af04      	add	r7, sp, #16
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 fc09 	bl	80067e0 <pvPortMalloc>
 8004fce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00e      	beq.n	8004ff4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fd6:	205c      	movs	r0, #92	; 0x5c
 8004fd8:	f001 fc02 	bl	80067e0 <pvPortMalloc>
 8004fdc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8004fea:	e005      	b.n	8004ff8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fec:	6978      	ldr	r0, [r7, #20]
 8004fee:	f001 fcb9 	bl	8006964 <vPortFree>
 8004ff2:	e001      	b.n	8004ff8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d017      	beq.n	800502e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	2300      	movs	r3, #0
 800500a:	9303      	str	r3, [sp, #12]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	9302      	str	r3, [sp, #8]
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f80e 	bl	800503e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005022:	69f8      	ldr	r0, [r7, #28]
 8005024:	f000 f89a 	bl	800515c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005028:	2301      	movs	r3, #1
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	e002      	b.n	8005034 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800502e:	f04f 33ff 	mov.w	r3, #4294967295
 8005032:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005034:	69bb      	ldr	r3, [r7, #24]
	}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b088      	sub	sp, #32
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607a      	str	r2, [r7, #4]
 800504a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	461a      	mov	r2, r3
 8005056:	21a5      	movs	r1, #165	; 0xa5
 8005058:	f001 fdc7 	bl	8006bea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005066:	3b01      	subs	r3, #1
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	f023 0307 	bic.w	r3, r3, #7
 8005074:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	2b00      	cmp	r3, #0
 800507e:	d009      	beq.n	8005094 <prvInitialiseNewTask+0x56>
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	e7fe      	b.n	8005092 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01f      	beq.n	80050da <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	e012      	b.n	80050c6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	7819      	ldrb	r1, [r3, #0]
 80050a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	3334      	adds	r3, #52	; 0x34
 80050b0:	460a      	mov	r2, r1
 80050b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d006      	beq.n	80050ce <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	2b0f      	cmp	r3, #15
 80050ca:	d9e9      	bls.n	80050a0 <prvInitialiseNewTask+0x62>
 80050cc:	e000      	b.n	80050d0 <prvInitialiseNewTask+0x92>
			{
				break;
 80050ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050d8:	e003      	b.n	80050e2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	2b37      	cmp	r3, #55	; 0x37
 80050e6:	d901      	bls.n	80050ec <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050e8:	2337      	movs	r3, #55	; 0x37
 80050ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	2200      	movs	r2, #0
 80050fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	3304      	adds	r3, #4
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff f8a2 	bl	800424c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	3318      	adds	r3, #24
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff f89d 	bl	800424c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005116:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	2200      	movs	r2, #0
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	68f9      	ldr	r1, [r7, #12]
 800513a:	69b8      	ldr	r0, [r7, #24]
 800513c:	f001 f90c 	bl	8006358 <pxPortInitialiseStack>
 8005140:	4602      	mov	r2, r0
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005152:	bf00      	nop
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005164:	f001 fa22 	bl	80065ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005168:	4b2d      	ldr	r3, [pc, #180]	; (8005220 <prvAddNewTaskToReadyList+0xc4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3301      	adds	r3, #1
 800516e:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <prvAddNewTaskToReadyList+0xc4>)
 8005170:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005172:	4b2c      	ldr	r3, [pc, #176]	; (8005224 <prvAddNewTaskToReadyList+0xc8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800517a:	4a2a      	ldr	r2, [pc, #168]	; (8005224 <prvAddNewTaskToReadyList+0xc8>)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005180:	4b27      	ldr	r3, [pc, #156]	; (8005220 <prvAddNewTaskToReadyList+0xc4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d110      	bne.n	80051aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005188:	f000 fc08 	bl	800599c <prvInitialiseTaskLists>
 800518c:	e00d      	b.n	80051aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800518e:	4b26      	ldr	r3, [pc, #152]	; (8005228 <prvAddNewTaskToReadyList+0xcc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005196:	4b23      	ldr	r3, [pc, #140]	; (8005224 <prvAddNewTaskToReadyList+0xc8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d802      	bhi.n	80051aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051a4:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <prvAddNewTaskToReadyList+0xc8>)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051aa:	4b20      	ldr	r3, [pc, #128]	; (800522c <prvAddNewTaskToReadyList+0xd0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3301      	adds	r3, #1
 80051b0:	4a1e      	ldr	r2, [pc, #120]	; (800522c <prvAddNewTaskToReadyList+0xd0>)
 80051b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051b4:	4b1d      	ldr	r3, [pc, #116]	; (800522c <prvAddNewTaskToReadyList+0xd0>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <prvAddNewTaskToReadyList+0xd4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d903      	bls.n	80051d0 <prvAddNewTaskToReadyList+0x74>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	4a18      	ldr	r2, [pc, #96]	; (8005230 <prvAddNewTaskToReadyList+0xd4>)
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4a15      	ldr	r2, [pc, #84]	; (8005234 <prvAddNewTaskToReadyList+0xd8>)
 80051de:	441a      	add	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f7ff f83d 	bl	8004266 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051ec:	f001 fa0c 	bl	8006608 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051f0:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <prvAddNewTaskToReadyList+0xcc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00e      	beq.n	8005216 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051f8:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <prvAddNewTaskToReadyList+0xc8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	429a      	cmp	r2, r3
 8005204:	d207      	bcs.n	8005216 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <prvAddNewTaskToReadyList+0xdc>)
 8005208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000bd0 	.word	0x20000bd0
 8005224:	200006fc 	.word	0x200006fc
 8005228:	20000bdc 	.word	0x20000bdc
 800522c:	20000bec 	.word	0x20000bec
 8005230:	20000bd8 	.word	0x20000bd8
 8005234:	20000700 	.word	0x20000700
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d016      	beq.n	800527c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <vTaskDelay+0x60>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <vTaskDelay+0x2e>
 8005256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	60bb      	str	r3, [r7, #8]
 8005268:	e7fe      	b.n	8005268 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800526a:	f000 f87f 	bl	800536c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800526e:	2100      	movs	r1, #0
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fcd7 	bl	8005c24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005276:	f000 f887 	bl	8005388 <xTaskResumeAll>
 800527a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d107      	bne.n	8005292 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005282:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <vTaskDelay+0x64>)
 8005284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000bf8 	.word	0x20000bf8
 80052a0:	e000ed04 	.word	0xe000ed04

080052a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052b2:	463a      	mov	r2, r7
 80052b4:	1d39      	adds	r1, r7, #4
 80052b6:	f107 0308 	add.w	r3, r7, #8
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fe ff72 	bl	80041a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052c0:	6839      	ldr	r1, [r7, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	9202      	str	r2, [sp, #8]
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	2300      	movs	r3, #0
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	2300      	movs	r3, #0
 80052d0:	460a      	mov	r2, r1
 80052d2:	4920      	ldr	r1, [pc, #128]	; (8005354 <vTaskStartScheduler+0xb0>)
 80052d4:	4820      	ldr	r0, [pc, #128]	; (8005358 <vTaskStartScheduler+0xb4>)
 80052d6:	f7ff fe13 	bl	8004f00 <xTaskCreateStatic>
 80052da:	4602      	mov	r2, r0
 80052dc:	4b1f      	ldr	r3, [pc, #124]	; (800535c <vTaskStartScheduler+0xb8>)
 80052de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052e0:	4b1e      	ldr	r3, [pc, #120]	; (800535c <vTaskStartScheduler+0xb8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052e8:	2301      	movs	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e001      	b.n	80052f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d102      	bne.n	80052fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80052f8:	f000 fce8 	bl	8005ccc <xTimerCreateTimerTask>
 80052fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d115      	bne.n	8005330 <vTaskStartScheduler+0x8c>
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005316:	4b12      	ldr	r3, [pc, #72]	; (8005360 <vTaskStartScheduler+0xbc>)
 8005318:	f04f 32ff 	mov.w	r2, #4294967295
 800531c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <vTaskStartScheduler+0xc0>)
 8005320:	2201      	movs	r2, #1
 8005322:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005324:	4b10      	ldr	r3, [pc, #64]	; (8005368 <vTaskStartScheduler+0xc4>)
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800532a:	f001 f8a1 	bl	8006470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800532e:	e00d      	b.n	800534c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005336:	d109      	bne.n	800534c <vTaskStartScheduler+0xa8>
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	e7fe      	b.n	800534a <vTaskStartScheduler+0xa6>
}
 800534c:	bf00      	nop
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	08006c3c 	.word	0x08006c3c
 8005358:	0800596d 	.word	0x0800596d
 800535c:	20000bf4 	.word	0x20000bf4
 8005360:	20000bf0 	.word	0x20000bf0
 8005364:	20000bdc 	.word	0x20000bdc
 8005368:	20000bd4 	.word	0x20000bd4

0800536c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005370:	4b04      	ldr	r3, [pc, #16]	; (8005384 <vTaskSuspendAll+0x18>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3301      	adds	r3, #1
 8005376:	4a03      	ldr	r2, [pc, #12]	; (8005384 <vTaskSuspendAll+0x18>)
 8005378:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800537a:	bf00      	nop
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	20000bf8 	.word	0x20000bf8

08005388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005396:	4b41      	ldr	r3, [pc, #260]	; (800549c <xTaskResumeAll+0x114>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <xTaskResumeAll+0x2a>
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	e7fe      	b.n	80053b0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053b2:	f001 f8fb 	bl	80065ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053b6:	4b39      	ldr	r3, [pc, #228]	; (800549c <xTaskResumeAll+0x114>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	4a37      	ldr	r2, [pc, #220]	; (800549c <xTaskResumeAll+0x114>)
 80053be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053c0:	4b36      	ldr	r3, [pc, #216]	; (800549c <xTaskResumeAll+0x114>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d162      	bne.n	800548e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053c8:	4b35      	ldr	r3, [pc, #212]	; (80054a0 <xTaskResumeAll+0x118>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d05e      	beq.n	800548e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053d0:	e02f      	b.n	8005432 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d2:	4b34      	ldr	r3, [pc, #208]	; (80054a4 <xTaskResumeAll+0x11c>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3318      	adds	r3, #24
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fe ff9e 	bl	8004320 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fe ff99 	bl	8004320 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f2:	4b2d      	ldr	r3, [pc, #180]	; (80054a8 <xTaskResumeAll+0x120>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d903      	bls.n	8005402 <xTaskResumeAll+0x7a>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	4a2a      	ldr	r2, [pc, #168]	; (80054a8 <xTaskResumeAll+0x120>)
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4a27      	ldr	r2, [pc, #156]	; (80054ac <xTaskResumeAll+0x124>)
 8005410:	441a      	add	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3304      	adds	r3, #4
 8005416:	4619      	mov	r1, r3
 8005418:	4610      	mov	r0, r2
 800541a:	f7fe ff24 	bl	8004266 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005422:	4b23      	ldr	r3, [pc, #140]	; (80054b0 <xTaskResumeAll+0x128>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	429a      	cmp	r2, r3
 800542a:	d302      	bcc.n	8005432 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800542c:	4b21      	ldr	r3, [pc, #132]	; (80054b4 <xTaskResumeAll+0x12c>)
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005432:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <xTaskResumeAll+0x11c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1cb      	bne.n	80053d2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005440:	f000 fb46 	bl	8005ad0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005444:	4b1c      	ldr	r3, [pc, #112]	; (80054b8 <xTaskResumeAll+0x130>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d010      	beq.n	8005472 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005450:	f000 f846 	bl	80054e0 <xTaskIncrementTick>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800545a:	4b16      	ldr	r3, [pc, #88]	; (80054b4 <xTaskResumeAll+0x12c>)
 800545c:	2201      	movs	r2, #1
 800545e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3b01      	subs	r3, #1
 8005464:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f1      	bne.n	8005450 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800546c:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <xTaskResumeAll+0x130>)
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005472:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <xTaskResumeAll+0x12c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800547a:	2301      	movs	r3, #1
 800547c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800547e:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <xTaskResumeAll+0x134>)
 8005480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800548e:	f001 f8bb 	bl	8006608 <vPortExitCritical>

	return xAlreadyYielded;
 8005492:	68bb      	ldr	r3, [r7, #8]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20000bf8 	.word	0x20000bf8
 80054a0:	20000bd0 	.word	0x20000bd0
 80054a4:	20000b90 	.word	0x20000b90
 80054a8:	20000bd8 	.word	0x20000bd8
 80054ac:	20000700 	.word	0x20000700
 80054b0:	200006fc 	.word	0x200006fc
 80054b4:	20000be4 	.word	0x20000be4
 80054b8:	20000be0 	.word	0x20000be0
 80054bc:	e000ed04 	.word	0xe000ed04

080054c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054c6:	4b05      	ldr	r3, [pc, #20]	; (80054dc <xTaskGetTickCount+0x1c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054cc:	687b      	ldr	r3, [r7, #4]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	20000bd4 	.word	0x20000bd4

080054e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ea:	4b4e      	ldr	r3, [pc, #312]	; (8005624 <xTaskIncrementTick+0x144>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f040 8088 	bne.w	8005604 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054f4:	4b4c      	ldr	r3, [pc, #304]	; (8005628 <xTaskIncrementTick+0x148>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3301      	adds	r3, #1
 80054fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054fc:	4a4a      	ldr	r2, [pc, #296]	; (8005628 <xTaskIncrementTick+0x148>)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d11f      	bne.n	8005548 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005508:	4b48      	ldr	r3, [pc, #288]	; (800562c <xTaskIncrementTick+0x14c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d009      	beq.n	8005526 <xTaskIncrementTick+0x46>
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	e7fe      	b.n	8005524 <xTaskIncrementTick+0x44>
 8005526:	4b41      	ldr	r3, [pc, #260]	; (800562c <xTaskIncrementTick+0x14c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	4b40      	ldr	r3, [pc, #256]	; (8005630 <xTaskIncrementTick+0x150>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a3e      	ldr	r2, [pc, #248]	; (800562c <xTaskIncrementTick+0x14c>)
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	4a3e      	ldr	r2, [pc, #248]	; (8005630 <xTaskIncrementTick+0x150>)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	4b3e      	ldr	r3, [pc, #248]	; (8005634 <xTaskIncrementTick+0x154>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3301      	adds	r3, #1
 8005540:	4a3c      	ldr	r2, [pc, #240]	; (8005634 <xTaskIncrementTick+0x154>)
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	f000 fac4 	bl	8005ad0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005548:	4b3b      	ldr	r3, [pc, #236]	; (8005638 <xTaskIncrementTick+0x158>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	429a      	cmp	r2, r3
 8005550:	d349      	bcc.n	80055e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005552:	4b36      	ldr	r3, [pc, #216]	; (800562c <xTaskIncrementTick+0x14c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800555c:	4b36      	ldr	r3, [pc, #216]	; (8005638 <xTaskIncrementTick+0x158>)
 800555e:	f04f 32ff 	mov.w	r2, #4294967295
 8005562:	601a      	str	r2, [r3, #0]
					break;
 8005564:	e03f      	b.n	80055e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005566:	4b31      	ldr	r3, [pc, #196]	; (800562c <xTaskIncrementTick+0x14c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	429a      	cmp	r2, r3
 800557c:	d203      	bcs.n	8005586 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800557e:	4a2e      	ldr	r2, [pc, #184]	; (8005638 <xTaskIncrementTick+0x158>)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005584:	e02f      	b.n	80055e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	3304      	adds	r3, #4
 800558a:	4618      	mov	r0, r3
 800558c:	f7fe fec8 	bl	8004320 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	3318      	adds	r3, #24
 800559c:	4618      	mov	r0, r3
 800559e:	f7fe febf 	bl	8004320 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a6:	4b25      	ldr	r3, [pc, #148]	; (800563c <xTaskIncrementTick+0x15c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d903      	bls.n	80055b6 <xTaskIncrementTick+0xd6>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	4a22      	ldr	r2, [pc, #136]	; (800563c <xTaskIncrementTick+0x15c>)
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <xTaskIncrementTick+0x160>)
 80055c4:	441a      	add	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f7fe fe4a 	bl	8004266 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d6:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <xTaskIncrementTick+0x164>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	429a      	cmp	r2, r3
 80055de:	d3b8      	bcc.n	8005552 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80055e0:	2301      	movs	r3, #1
 80055e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055e4:	e7b5      	b.n	8005552 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055e6:	4b17      	ldr	r3, [pc, #92]	; (8005644 <xTaskIncrementTick+0x164>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ec:	4914      	ldr	r1, [pc, #80]	; (8005640 <xTaskIncrementTick+0x160>)
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d907      	bls.n	800560e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80055fe:	2301      	movs	r3, #1
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e004      	b.n	800560e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005604:	4b10      	ldr	r3, [pc, #64]	; (8005648 <xTaskIncrementTick+0x168>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3301      	adds	r3, #1
 800560a:	4a0f      	ldr	r2, [pc, #60]	; (8005648 <xTaskIncrementTick+0x168>)
 800560c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <xTaskIncrementTick+0x16c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005616:	2301      	movs	r3, #1
 8005618:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800561a:	697b      	ldr	r3, [r7, #20]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20000bf8 	.word	0x20000bf8
 8005628:	20000bd4 	.word	0x20000bd4
 800562c:	20000b88 	.word	0x20000b88
 8005630:	20000b8c 	.word	0x20000b8c
 8005634:	20000be8 	.word	0x20000be8
 8005638:	20000bf0 	.word	0x20000bf0
 800563c:	20000bd8 	.word	0x20000bd8
 8005640:	20000700 	.word	0x20000700
 8005644:	200006fc 	.word	0x200006fc
 8005648:	20000be0 	.word	0x20000be0
 800564c:	20000be4 	.word	0x20000be4

08005650 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005656:	4b27      	ldr	r3, [pc, #156]	; (80056f4 <vTaskSwitchContext+0xa4>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800565e:	4b26      	ldr	r3, [pc, #152]	; (80056f8 <vTaskSwitchContext+0xa8>)
 8005660:	2201      	movs	r2, #1
 8005662:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005664:	e040      	b.n	80056e8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005666:	4b24      	ldr	r3, [pc, #144]	; (80056f8 <vTaskSwitchContext+0xa8>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566c:	4b23      	ldr	r3, [pc, #140]	; (80056fc <vTaskSwitchContext+0xac>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	e00f      	b.n	8005694 <vTaskSwitchContext+0x44>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d109      	bne.n	800568e <vTaskSwitchContext+0x3e>
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	607b      	str	r3, [r7, #4]
 800568c:	e7fe      	b.n	800568c <vTaskSwitchContext+0x3c>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3b01      	subs	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	491a      	ldr	r1, [pc, #104]	; (8005700 <vTaskSwitchContext+0xb0>)
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0e5      	beq.n	8005674 <vTaskSwitchContext+0x24>
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4a13      	ldr	r2, [pc, #76]	; (8005700 <vTaskSwitchContext+0xb0>)
 80056b4:	4413      	add	r3, r2
 80056b6:	60bb      	str	r3, [r7, #8]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	3308      	adds	r3, #8
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d104      	bne.n	80056d8 <vTaskSwitchContext+0x88>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	605a      	str	r2, [r3, #4]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	4a09      	ldr	r2, [pc, #36]	; (8005704 <vTaskSwitchContext+0xb4>)
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	4a06      	ldr	r2, [pc, #24]	; (80056fc <vTaskSwitchContext+0xac>)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6013      	str	r3, [r2, #0]
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	20000bf8 	.word	0x20000bf8
 80056f8:	20000be4 	.word	0x20000be4
 80056fc:	20000bd8 	.word	0x20000bd8
 8005700:	20000700 	.word	0x20000700
 8005704:	200006fc 	.word	0x200006fc

08005708 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <vTaskPlaceOnEventList+0x24>
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e7fe      	b.n	800572a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800572c:	4b07      	ldr	r3, [pc, #28]	; (800574c <vTaskPlaceOnEventList+0x44>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3318      	adds	r3, #24
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fe fdba 	bl	80042ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800573a:	2101      	movs	r1, #1
 800573c:	6838      	ldr	r0, [r7, #0]
 800573e:	f000 fa71 	bl	8005c24 <prvAddCurrentTaskToDelayedList>
}
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	200006fc 	.word	0x200006fc

08005750 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <vTaskPlaceOnEventListRestricted+0x26>
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e7fe      	b.n	8005774 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005776:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <vTaskPlaceOnEventListRestricted+0x50>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3318      	adds	r3, #24
 800577c:	4619      	mov	r1, r3
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7fe fd71 	bl	8004266 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800578a:	f04f 33ff 	mov.w	r3, #4294967295
 800578e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	68b8      	ldr	r0, [r7, #8]
 8005794:	f000 fa46 	bl	8005c24 <prvAddCurrentTaskToDelayedList>
	}
 8005798:	bf00      	nop
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	200006fc 	.word	0x200006fc

080057a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <xTaskRemoveFromEventList+0x2a>
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	e7fe      	b.n	80057cc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	3318      	adds	r3, #24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe fda4 	bl	8004320 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d8:	4b1d      	ldr	r3, [pc, #116]	; (8005850 <xTaskRemoveFromEventList+0xac>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d11d      	bne.n	800581c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe fd9b 	bl	8004320 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ee:	4b19      	ldr	r3, [pc, #100]	; (8005854 <xTaskRemoveFromEventList+0xb0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d903      	bls.n	80057fe <xTaskRemoveFromEventList+0x5a>
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	4a16      	ldr	r2, [pc, #88]	; (8005854 <xTaskRemoveFromEventList+0xb0>)
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4a13      	ldr	r2, [pc, #76]	; (8005858 <xTaskRemoveFromEventList+0xb4>)
 800580c:	441a      	add	r2, r3
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f7fe fd26 	bl	8004266 <vListInsertEnd>
 800581a:	e005      	b.n	8005828 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	3318      	adds	r3, #24
 8005820:	4619      	mov	r1, r3
 8005822:	480e      	ldr	r0, [pc, #56]	; (800585c <xTaskRemoveFromEventList+0xb8>)
 8005824:	f7fe fd1f 	bl	8004266 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582c:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <xTaskRemoveFromEventList+0xbc>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	429a      	cmp	r2, r3
 8005834:	d905      	bls.n	8005842 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005836:	2301      	movs	r3, #1
 8005838:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800583a:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <xTaskRemoveFromEventList+0xc0>)
 800583c:	2201      	movs	r2, #1
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	e001      	b.n	8005846 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005846:	697b      	ldr	r3, [r7, #20]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20000bf8 	.word	0x20000bf8
 8005854:	20000bd8 	.word	0x20000bd8
 8005858:	20000700 	.word	0x20000700
 800585c:	20000b90 	.word	0x20000b90
 8005860:	200006fc 	.word	0x200006fc
 8005864:	20000be4 	.word	0x20000be4

08005868 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005870:	4b06      	ldr	r3, [pc, #24]	; (800588c <vTaskInternalSetTimeOutState+0x24>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <vTaskInternalSetTimeOutState+0x28>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	605a      	str	r2, [r3, #4]
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	20000be8 	.word	0x20000be8
 8005890:	20000bd4 	.word	0x20000bd4

08005894 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d109      	bne.n	80058b8 <xTaskCheckForTimeOut+0x24>
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	e7fe      	b.n	80058b6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <xTaskCheckForTimeOut+0x3e>
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	e7fe      	b.n	80058d0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80058d2:	f000 fe6b 	bl	80065ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058d6:	4b1d      	ldr	r3, [pc, #116]	; (800594c <xTaskCheckForTimeOut+0xb8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d102      	bne.n	80058f6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]
 80058f4:	e023      	b.n	800593e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4b15      	ldr	r3, [pc, #84]	; (8005950 <xTaskCheckForTimeOut+0xbc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d007      	beq.n	8005912 <xTaskCheckForTimeOut+0x7e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	429a      	cmp	r2, r3
 800590a:	d302      	bcc.n	8005912 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800590c:	2301      	movs	r3, #1
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	e015      	b.n	800593e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	429a      	cmp	r2, r3
 800591a:	d20b      	bcs.n	8005934 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	1ad2      	subs	r2, r2, r3
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff ff9d 	bl	8005868 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	e004      	b.n	800593e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2200      	movs	r2, #0
 8005938:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800593a:	2301      	movs	r3, #1
 800593c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800593e:	f000 fe63 	bl	8006608 <vPortExitCritical>

	return xReturn;
 8005942:	69fb      	ldr	r3, [r7, #28]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3720      	adds	r7, #32
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000bd4 	.word	0x20000bd4
 8005950:	20000be8 	.word	0x20000be8

08005954 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005958:	4b03      	ldr	r3, [pc, #12]	; (8005968 <vTaskMissedYield+0x14>)
 800595a:	2201      	movs	r2, #1
 800595c:	601a      	str	r2, [r3, #0]
}
 800595e:	bf00      	nop
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	20000be4 	.word	0x20000be4

0800596c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005974:	f000 f852 	bl	8005a1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <prvIdleTask+0x28>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d9f9      	bls.n	8005974 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <prvIdleTask+0x2c>)
 8005982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005990:	e7f0      	b.n	8005974 <prvIdleTask+0x8>
 8005992:	bf00      	nop
 8005994:	20000700 	.word	0x20000700
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	e00c      	b.n	80059c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4a12      	ldr	r2, [pc, #72]	; (80059fc <prvInitialiseTaskLists+0x60>)
 80059b4:	4413      	add	r3, r2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fc28 	bl	800420c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3301      	adds	r3, #1
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b37      	cmp	r3, #55	; 0x37
 80059c6:	d9ef      	bls.n	80059a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059c8:	480d      	ldr	r0, [pc, #52]	; (8005a00 <prvInitialiseTaskLists+0x64>)
 80059ca:	f7fe fc1f 	bl	800420c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059ce:	480d      	ldr	r0, [pc, #52]	; (8005a04 <prvInitialiseTaskLists+0x68>)
 80059d0:	f7fe fc1c 	bl	800420c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059d4:	480c      	ldr	r0, [pc, #48]	; (8005a08 <prvInitialiseTaskLists+0x6c>)
 80059d6:	f7fe fc19 	bl	800420c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059da:	480c      	ldr	r0, [pc, #48]	; (8005a0c <prvInitialiseTaskLists+0x70>)
 80059dc:	f7fe fc16 	bl	800420c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059e0:	480b      	ldr	r0, [pc, #44]	; (8005a10 <prvInitialiseTaskLists+0x74>)
 80059e2:	f7fe fc13 	bl	800420c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <prvInitialiseTaskLists+0x78>)
 80059e8:	4a05      	ldr	r2, [pc, #20]	; (8005a00 <prvInitialiseTaskLists+0x64>)
 80059ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <prvInitialiseTaskLists+0x7c>)
 80059ee:	4a05      	ldr	r2, [pc, #20]	; (8005a04 <prvInitialiseTaskLists+0x68>)
 80059f0:	601a      	str	r2, [r3, #0]
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000700 	.word	0x20000700
 8005a00:	20000b60 	.word	0x20000b60
 8005a04:	20000b74 	.word	0x20000b74
 8005a08:	20000b90 	.word	0x20000b90
 8005a0c:	20000ba4 	.word	0x20000ba4
 8005a10:	20000bbc 	.word	0x20000bbc
 8005a14:	20000b88 	.word	0x20000b88
 8005a18:	20000b8c 	.word	0x20000b8c

08005a1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a22:	e019      	b.n	8005a58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a24:	f000 fdc2 	bl	80065ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a28:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <prvCheckTasksWaitingTermination+0x4c>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3304      	adds	r3, #4
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fe fc73 	bl	8004320 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a3a:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <prvCheckTasksWaitingTermination+0x50>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	4a0a      	ldr	r2, [pc, #40]	; (8005a6c <prvCheckTasksWaitingTermination+0x50>)
 8005a42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a44:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <prvCheckTasksWaitingTermination+0x54>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <prvCheckTasksWaitingTermination+0x54>)
 8005a4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a4e:	f000 fddb 	bl	8006608 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f80e 	bl	8005a74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <prvCheckTasksWaitingTermination+0x54>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e1      	bne.n	8005a24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20000ba4 	.word	0x20000ba4
 8005a6c:	20000bd0 	.word	0x20000bd0
 8005a70:	20000bb8 	.word	0x20000bb8

08005a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d108      	bne.n	8005a98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 ff6a 	bl	8006964 <vPortFree>
				vPortFree( pxTCB );
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 ff67 	bl	8006964 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a96:	e017      	b.n	8005ac8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d103      	bne.n	8005aaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 ff5e 	bl	8006964 <vPortFree>
	}
 8005aa8:	e00e      	b.n	8005ac8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d009      	beq.n	8005ac8 <prvDeleteTCB+0x54>
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e7fe      	b.n	8005ac6 <prvDeleteTCB+0x52>
	}
 8005ac8:	bf00      	nop
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <prvResetNextTaskUnblockTime+0x38>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d104      	bne.n	8005aea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <prvResetNextTaskUnblockTime+0x3c>)
 8005ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ae8:	e008      	b.n	8005afc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aea:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <prvResetNextTaskUnblockTime+0x38>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	4a04      	ldr	r2, [pc, #16]	; (8005b0c <prvResetNextTaskUnblockTime+0x3c>)
 8005afa:	6013      	str	r3, [r2, #0]
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	20000b88 	.word	0x20000b88
 8005b0c:	20000bf0 	.word	0x20000bf0

08005b10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b16:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <xTaskGetSchedulerState+0x34>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d102      	bne.n	8005b24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	607b      	str	r3, [r7, #4]
 8005b22:	e008      	b.n	8005b36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b24:	4b08      	ldr	r3, [pc, #32]	; (8005b48 <xTaskGetSchedulerState+0x38>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d102      	bne.n	8005b32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	607b      	str	r3, [r7, #4]
 8005b30:	e001      	b.n	8005b36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b36:	687b      	ldr	r3, [r7, #4]
	}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	20000bdc 	.word	0x20000bdc
 8005b48:	20000bf8 	.word	0x20000bf8

08005b4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d054      	beq.n	8005c0c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b62:	4b2d      	ldr	r3, [pc, #180]	; (8005c18 <xTaskPriorityDisinherit+0xcc>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d009      	beq.n	8005b80 <xTaskPriorityDisinherit+0x34>
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	e7fe      	b.n	8005b7e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d109      	bne.n	8005b9c <xTaskPriorityDisinherit+0x50>
 8005b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	e7fe      	b.n	8005b9a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba0:	1e5a      	subs	r2, r3, #1
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d02c      	beq.n	8005c0c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d128      	bne.n	8005c0c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fbae 	bl	8004320 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <xTaskPriorityDisinherit+0xd0>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d903      	bls.n	8005bec <xTaskPriorityDisinherit+0xa0>
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	4a0c      	ldr	r2, [pc, #48]	; (8005c1c <xTaskPriorityDisinherit+0xd0>)
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <xTaskPriorityDisinherit+0xd4>)
 8005bfa:	441a      	add	r2, r3
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4619      	mov	r1, r3
 8005c02:	4610      	mov	r0, r2
 8005c04:	f7fe fb2f 	bl	8004266 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c0c:	697b      	ldr	r3, [r7, #20]
	}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	200006fc 	.word	0x200006fc
 8005c1c:	20000bd8 	.word	0x20000bd8
 8005c20:	20000700 	.word	0x20000700

08005c24 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c2e:	4b21      	ldr	r3, [pc, #132]	; (8005cb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c34:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fe fb70 	bl	8004320 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c46:	d10a      	bne.n	8005c5e <prvAddCurrentTaskToDelayedList+0x3a>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d007      	beq.n	8005c5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c4e:	4b1a      	ldr	r3, [pc, #104]	; (8005cb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3304      	adds	r3, #4
 8005c54:	4619      	mov	r1, r3
 8005c56:	4819      	ldr	r0, [pc, #100]	; (8005cbc <prvAddCurrentTaskToDelayedList+0x98>)
 8005c58:	f7fe fb05 	bl	8004266 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c5c:	e026      	b.n	8005cac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4413      	add	r3, r2
 8005c64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c66:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d209      	bcs.n	8005c8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c76:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4b0f      	ldr	r3, [pc, #60]	; (8005cb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f7fe fb13 	bl	80042ae <vListInsert>
}
 8005c88:	e010      	b.n	8005cac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c8a:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4619      	mov	r1, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	f7fe fb09 	bl	80042ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d202      	bcs.n	8005cac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ca6:	4a08      	ldr	r2, [pc, #32]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	6013      	str	r3, [r2, #0]
}
 8005cac:	bf00      	nop
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20000bd4 	.word	0x20000bd4
 8005cb8:	200006fc 	.word	0x200006fc
 8005cbc:	20000bbc 	.word	0x20000bbc
 8005cc0:	20000b8c 	.word	0x20000b8c
 8005cc4:	20000b88 	.word	0x20000b88
 8005cc8:	20000bf0 	.word	0x20000bf0

08005ccc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	; 0x28
 8005cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005cd6:	f000 faff 	bl	80062d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005cda:	4b1c      	ldr	r3, [pc, #112]	; (8005d4c <xTimerCreateTimerTask+0x80>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d021      	beq.n	8005d26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005cea:	1d3a      	adds	r2, r7, #4
 8005cec:	f107 0108 	add.w	r1, r7, #8
 8005cf0:	f107 030c 	add.w	r3, r7, #12
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fe fa6f 	bl	80041d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	9202      	str	r2, [sp, #8]
 8005d02:	9301      	str	r3, [sp, #4]
 8005d04:	2302      	movs	r3, #2
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	460a      	mov	r2, r1
 8005d0c:	4910      	ldr	r1, [pc, #64]	; (8005d50 <xTimerCreateTimerTask+0x84>)
 8005d0e:	4811      	ldr	r0, [pc, #68]	; (8005d54 <xTimerCreateTimerTask+0x88>)
 8005d10:	f7ff f8f6 	bl	8004f00 <xTaskCreateStatic>
 8005d14:	4602      	mov	r2, r0
 8005d16:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <xTimerCreateTimerTask+0x8c>)
 8005d18:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d1a:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <xTimerCreateTimerTask+0x8c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d22:	2301      	movs	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d109      	bne.n	8005d40 <xTimerCreateTimerTask+0x74>
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	e7fe      	b.n	8005d3e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005d40:	697b      	ldr	r3, [r7, #20]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000c2c 	.word	0x20000c2c
 8005d50:	08006c44 	.word	0x08006c44
 8005d54:	08005e8d 	.word	0x08005e8d
 8005d58:	20000c30 	.word	0x20000c30

08005d5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	; 0x28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <xTimerGenericCommand+0x2c>
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	623b      	str	r3, [r7, #32]
 8005d86:	e7fe      	b.n	8005d86 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d88:	4b19      	ldr	r3, [pc, #100]	; (8005df0 <xTimerGenericCommand+0x94>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d02a      	beq.n	8005de6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2b05      	cmp	r3, #5
 8005da0:	dc18      	bgt.n	8005dd4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005da2:	f7ff feb5 	bl	8005b10 <xTaskGetSchedulerState>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d109      	bne.n	8005dc0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005dac:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <xTimerGenericCommand+0x94>)
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	f107 0110 	add.w	r1, r7, #16
 8005db4:	2300      	movs	r3, #0
 8005db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db8:	f7fe fc80 	bl	80046bc <xQueueGenericSend>
 8005dbc:	6278      	str	r0, [r7, #36]	; 0x24
 8005dbe:	e012      	b.n	8005de6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <xTimerGenericCommand+0x94>)
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	f107 0110 	add.w	r1, r7, #16
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f7fe fc76 	bl	80046bc <xQueueGenericSend>
 8005dd0:	6278      	str	r0, [r7, #36]	; 0x24
 8005dd2:	e008      	b.n	8005de6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005dd4:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <xTimerGenericCommand+0x94>)
 8005dd6:	6818      	ldr	r0, [r3, #0]
 8005dd8:	f107 0110 	add.w	r1, r7, #16
 8005ddc:	2300      	movs	r3, #0
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	f7fe fd66 	bl	80048b0 <xQueueGenericSendFromISR>
 8005de4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3728      	adds	r7, #40	; 0x28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20000c2c 	.word	0x20000c2c

08005df4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfe:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <prvProcessExpiredTimer+0x94>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe fa87 	bl	8004320 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d021      	beq.n	8005e64 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	699a      	ldr	r2, [r3, #24]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	18d1      	adds	r1, r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	6978      	ldr	r0, [r7, #20]
 8005e2e:	f000 f8d1 	bl	8005fd4 <prvInsertTimerInActiveList>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01e      	beq.n	8005e76 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	2100      	movs	r1, #0
 8005e42:	6978      	ldr	r0, [r7, #20]
 8005e44:	f7ff ff8a 	bl	8005d5c <xTimerGenericCommand>
 8005e48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d112      	bne.n	8005e76 <prvProcessExpiredTimer+0x82>
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	e7fe      	b.n	8005e62 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e6a:	f023 0301 	bic.w	r3, r3, #1
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	6978      	ldr	r0, [r7, #20]
 8005e7c:	4798      	blx	r3
}
 8005e7e:	bf00      	nop
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000c24 	.word	0x20000c24

08005e8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e94:	f107 0308 	add.w	r3, r7, #8
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 f857 	bl	8005f4c <prvGetNextExpireTime>
 8005e9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f803 	bl	8005eb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005eaa:	f000 f8d5 	bl	8006058 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005eae:	e7f1      	b.n	8005e94 <prvTimerTask+0x8>

08005eb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005eba:	f7ff fa57 	bl	800536c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ebe:	f107 0308 	add.w	r3, r7, #8
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f866 	bl	8005f94 <prvSampleTimeNow>
 8005ec8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d130      	bne.n	8005f32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10a      	bne.n	8005eec <prvProcessTimerOrBlockTask+0x3c>
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d806      	bhi.n	8005eec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ede:	f7ff fa53 	bl	8005388 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ee2:	68f9      	ldr	r1, [r7, #12]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff85 	bl	8005df4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005eea:	e024      	b.n	8005f36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d008      	beq.n	8005f04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ef2:	4b13      	ldr	r3, [pc, #76]	; (8005f40 <prvProcessTimerOrBlockTask+0x90>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <prvProcessTimerOrBlockTask+0x50>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e000      	b.n	8005f02 <prvProcessTimerOrBlockTask+0x52>
 8005f00:	2300      	movs	r3, #0
 8005f02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f04:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <prvProcessTimerOrBlockTask+0x94>)
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	4619      	mov	r1, r3
 8005f12:	f7fe ffc1 	bl	8004e98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f16:	f7ff fa37 	bl	8005388 <xTaskResumeAll>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f20:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <prvProcessTimerOrBlockTask+0x98>)
 8005f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	f3bf 8f6f 	isb	sy
}
 8005f30:	e001      	b.n	8005f36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f32:	f7ff fa29 	bl	8005388 <xTaskResumeAll>
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000c28 	.word	0x20000c28
 8005f44:	20000c2c 	.word	0x20000c2c
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f54:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <prvGetNextExpireTime+0x44>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <prvGetNextExpireTime+0x16>
 8005f5e:	2201      	movs	r2, #1
 8005f60:	e000      	b.n	8005f64 <prvGetNextExpireTime+0x18>
 8005f62:	2200      	movs	r2, #0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d105      	bne.n	8005f7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f70:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <prvGetNextExpireTime+0x44>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	e001      	b.n	8005f80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f80:	68fb      	ldr	r3, [r7, #12]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	20000c24 	.word	0x20000c24

08005f94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f9c:	f7ff fa90 	bl	80054c0 <xTaskGetTickCount>
 8005fa0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fa2:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <prvSampleTimeNow+0x3c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d205      	bcs.n	8005fb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fac:	f000 f930 	bl	8006210 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e002      	b.n	8005fbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fbe:	4a04      	ldr	r2, [pc, #16]	; (8005fd0 <prvSampleTimeNow+0x3c>)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000c34 	.word	0x20000c34

08005fd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d812      	bhi.n	8006020 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	1ad2      	subs	r2, r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	429a      	cmp	r2, r3
 8006006:	d302      	bcc.n	800600e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006008:	2301      	movs	r3, #1
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	e01b      	b.n	8006046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800600e:	4b10      	ldr	r3, [pc, #64]	; (8006050 <prvInsertTimerInActiveList+0x7c>)
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3304      	adds	r3, #4
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f7fe f948 	bl	80042ae <vListInsert>
 800601e:	e012      	b.n	8006046 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d206      	bcs.n	8006036 <prvInsertTimerInActiveList+0x62>
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	429a      	cmp	r2, r3
 800602e:	d302      	bcc.n	8006036 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006030:	2301      	movs	r3, #1
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	e007      	b.n	8006046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006036:	4b07      	ldr	r3, [pc, #28]	; (8006054 <prvInsertTimerInActiveList+0x80>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3304      	adds	r3, #4
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f7fe f934 	bl	80042ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006046:	697b      	ldr	r3, [r7, #20]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20000c28 	.word	0x20000c28
 8006054:	20000c24 	.word	0x20000c24

08006058 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08e      	sub	sp, #56	; 0x38
 800605c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800605e:	e0c6      	b.n	80061ee <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	da17      	bge.n	8006096 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006066:	1d3b      	adds	r3, r7, #4
 8006068:	3304      	adds	r3, #4
 800606a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <prvProcessReceivedCommands+0x2e>
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	e7fe      	b.n	8006084 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800608c:	6850      	ldr	r0, [r2, #4]
 800608e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006090:	6892      	ldr	r2, [r2, #8]
 8006092:	4611      	mov	r1, r2
 8006094:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	f2c0 80a7 	blt.w	80061ec <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d004      	beq.n	80060b4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	3304      	adds	r3, #4
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe f936 	bl	8004320 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060b4:	463b      	mov	r3, r7
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff ff6c 	bl	8005f94 <prvSampleTimeNow>
 80060bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b09      	cmp	r3, #9
 80060c2:	f200 8094 	bhi.w	80061ee <prvProcessReceivedCommands+0x196>
 80060c6:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <prvProcessReceivedCommands+0x74>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	080060f5 	.word	0x080060f5
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	080060f5 	.word	0x080060f5
 80060d8:	08006167 	.word	0x08006167
 80060dc:	0800617b 	.word	0x0800617b
 80060e0:	080061c3 	.word	0x080061c3
 80060e4:	080060f5 	.word	0x080060f5
 80060e8:	080060f5 	.word	0x080060f5
 80060ec:	08006167 	.word	0x08006167
 80060f0:	0800617b 	.word	0x0800617b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060fa:	f043 0301 	orr.w	r3, r3, #1
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	18d1      	adds	r1, r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006114:	f7ff ff5e 	bl	8005fd4 <prvInsertTimerInActiveList>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d067      	beq.n	80061ee <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006124:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	d05c      	beq.n	80061ee <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	441a      	add	r2, r3
 800613c:	2300      	movs	r3, #0
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	2300      	movs	r3, #0
 8006142:	2100      	movs	r1, #0
 8006144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006146:	f7ff fe09 	bl	8005d5c <xTimerGenericCommand>
 800614a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d14d      	bne.n	80061ee <prvProcessReceivedCommands+0x196>
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	61bb      	str	r3, [r7, #24]
 8006164:	e7fe      	b.n	8006164 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800616c:	f023 0301 	bic.w	r3, r3, #1
 8006170:	b2da      	uxtb	r2, r3
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006178:	e039      	b.n	80061ee <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006180:	f043 0301 	orr.w	r3, r3, #1
 8006184:	b2da      	uxtb	r2, r3
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <prvProcessReceivedCommands+0x156>
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	e7fe      	b.n	80061ac <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	18d1      	adds	r1, r2, r3
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061bc:	f7ff ff0a 	bl	8005fd4 <prvInsertTimerInActiveList>
					break;
 80061c0:	e015      	b.n	80061ee <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d103      	bne.n	80061d8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80061d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d2:	f000 fbc7 	bl	8006964 <vPortFree>
 80061d6:	e00a      	b.n	80061ee <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061ea:	e000      	b.n	80061ee <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061ee:	4b07      	ldr	r3, [pc, #28]	; (800620c <prvProcessReceivedCommands+0x1b4>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	1d39      	adds	r1, r7, #4
 80061f4:	2200      	movs	r2, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe fbee 	bl	80049d8 <xQueueReceive>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f47f af2e 	bne.w	8006060 <prvProcessReceivedCommands+0x8>
	}
}
 8006204:	bf00      	nop
 8006206:	3730      	adds	r7, #48	; 0x30
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000c2c 	.word	0x20000c2c

08006210 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006216:	e047      	b.n	80062a8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006218:	4b2d      	ldr	r3, [pc, #180]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006222:	4b2b      	ldr	r3, [pc, #172]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3304      	adds	r3, #4
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe f875 	bl	8004320 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d02d      	beq.n	80062a8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	429a      	cmp	r2, r3
 800625c:	d90e      	bls.n	800627c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800626a:	4b19      	ldr	r3, [pc, #100]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3304      	adds	r3, #4
 8006272:	4619      	mov	r1, r3
 8006274:	4610      	mov	r0, r2
 8006276:	f7fe f81a 	bl	80042ae <vListInsert>
 800627a:	e015      	b.n	80062a8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800627c:	2300      	movs	r3, #0
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	2300      	movs	r3, #0
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	2100      	movs	r1, #0
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7ff fd68 	bl	8005d5c <xTimerGenericCommand>
 800628c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d109      	bne.n	80062a8 <prvSwitchTimerLists+0x98>
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	603b      	str	r3, [r7, #0]
 80062a6:	e7fe      	b.n	80062a6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062a8:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1b2      	bne.n	8006218 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062b2:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062b8:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <prvSwitchTimerLists+0xc4>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a04      	ldr	r2, [pc, #16]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 80062be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062c0:	4a04      	ldr	r2, [pc, #16]	; (80062d4 <prvSwitchTimerLists+0xc4>)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	6013      	str	r3, [r2, #0]
}
 80062c6:	bf00      	nop
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000c24 	.word	0x20000c24
 80062d4:	20000c28 	.word	0x20000c28

080062d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062de:	f000 f965 	bl	80065ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062e2:	4b15      	ldr	r3, [pc, #84]	; (8006338 <prvCheckForValidListAndQueue+0x60>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d120      	bne.n	800632c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062ea:	4814      	ldr	r0, [pc, #80]	; (800633c <prvCheckForValidListAndQueue+0x64>)
 80062ec:	f7fd ff8e 	bl	800420c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062f0:	4813      	ldr	r0, [pc, #76]	; (8006340 <prvCheckForValidListAndQueue+0x68>)
 80062f2:	f7fd ff8b 	bl	800420c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062f6:	4b13      	ldr	r3, [pc, #76]	; (8006344 <prvCheckForValidListAndQueue+0x6c>)
 80062f8:	4a10      	ldr	r2, [pc, #64]	; (800633c <prvCheckForValidListAndQueue+0x64>)
 80062fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062fc:	4b12      	ldr	r3, [pc, #72]	; (8006348 <prvCheckForValidListAndQueue+0x70>)
 80062fe:	4a10      	ldr	r2, [pc, #64]	; (8006340 <prvCheckForValidListAndQueue+0x68>)
 8006300:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006302:	2300      	movs	r3, #0
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	4b11      	ldr	r3, [pc, #68]	; (800634c <prvCheckForValidListAndQueue+0x74>)
 8006308:	4a11      	ldr	r2, [pc, #68]	; (8006350 <prvCheckForValidListAndQueue+0x78>)
 800630a:	2110      	movs	r1, #16
 800630c:	200a      	movs	r0, #10
 800630e:	f7fe f899 	bl	8004444 <xQueueGenericCreateStatic>
 8006312:	4602      	mov	r2, r0
 8006314:	4b08      	ldr	r3, [pc, #32]	; (8006338 <prvCheckForValidListAndQueue+0x60>)
 8006316:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006318:	4b07      	ldr	r3, [pc, #28]	; (8006338 <prvCheckForValidListAndQueue+0x60>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <prvCheckForValidListAndQueue+0x60>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	490b      	ldr	r1, [pc, #44]	; (8006354 <prvCheckForValidListAndQueue+0x7c>)
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fd64 	bl	8004df4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800632c:	f000 f96c 	bl	8006608 <vPortExitCritical>
}
 8006330:	bf00      	nop
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000c2c 	.word	0x20000c2c
 800633c:	20000bfc 	.word	0x20000bfc
 8006340:	20000c10 	.word	0x20000c10
 8006344:	20000c24 	.word	0x20000c24
 8006348:	20000c28 	.word	0x20000c28
 800634c:	20000cd8 	.word	0x20000cd8
 8006350:	20000c38 	.word	0x20000c38
 8006354:	08006c4c 	.word	0x08006c4c

08006358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b04      	subs	r3, #4
 8006368:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3b04      	subs	r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3b04      	subs	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006388:	4a0c      	ldr	r2, [pc, #48]	; (80063bc <pxPortInitialiseStack+0x64>)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b14      	subs	r3, #20
 8006392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3b04      	subs	r3, #4
 800639e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f06f 0202 	mvn.w	r2, #2
 80063a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3b20      	subs	r3, #32
 80063ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063ae:	68fb      	ldr	r3, [r7, #12]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	080063c1 	.word	0x080063c1

080063c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ca:	4b11      	ldr	r3, [pc, #68]	; (8006410 <prvTaskExitError+0x50>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d2:	d009      	beq.n	80063e8 <prvTaskExitError+0x28>
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	e7fe      	b.n	80063e6 <prvTaskExitError+0x26>
 80063e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063fa:	bf00      	nop
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0fc      	beq.n	80063fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	2000000c 	.word	0x2000000c
	...

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <prvPortStartFirstTask+0x24>)
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f380 8808 	msr	MSP, r0
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8814 	msr	CONTROL, r0
 800645a:	b662      	cpsie	i
 800645c:	b661      	cpsie	f
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	df00      	svc	0
 8006468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800646a:	bf00      	nop
 800646c:	e000ed08 	.word	0xe000ed08

08006470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006476:	4b44      	ldr	r3, [pc, #272]	; (8006588 <xPortStartScheduler+0x118>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a44      	ldr	r2, [pc, #272]	; (800658c <xPortStartScheduler+0x11c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d109      	bne.n	8006494 <xPortStartScheduler+0x24>
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	e7fe      	b.n	8006492 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006494:	4b3c      	ldr	r3, [pc, #240]	; (8006588 <xPortStartScheduler+0x118>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a3d      	ldr	r2, [pc, #244]	; (8006590 <xPortStartScheduler+0x120>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d109      	bne.n	80064b2 <xPortStartScheduler+0x42>
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e7fe      	b.n	80064b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064b2:	4b38      	ldr	r3, [pc, #224]	; (8006594 <xPortStartScheduler+0x124>)
 80064b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	22ff      	movs	r2, #255	; 0xff
 80064c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	4b30      	ldr	r3, [pc, #192]	; (8006598 <xPortStartScheduler+0x128>)
 80064d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064da:	4b30      	ldr	r3, [pc, #192]	; (800659c <xPortStartScheduler+0x12c>)
 80064dc:	2207      	movs	r2, #7
 80064de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064e0:	e009      	b.n	80064f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80064e2:	4b2e      	ldr	r3, [pc, #184]	; (800659c <xPortStartScheduler+0x12c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	4a2c      	ldr	r2, [pc, #176]	; (800659c <xPortStartScheduler+0x12c>)
 80064ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d0ef      	beq.n	80064e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006502:	4b26      	ldr	r3, [pc, #152]	; (800659c <xPortStartScheduler+0x12c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f1c3 0307 	rsb	r3, r3, #7
 800650a:	2b04      	cmp	r3, #4
 800650c:	d009      	beq.n	8006522 <xPortStartScheduler+0xb2>
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	e7fe      	b.n	8006520 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006522:	4b1e      	ldr	r3, [pc, #120]	; (800659c <xPortStartScheduler+0x12c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	021b      	lsls	r3, r3, #8
 8006528:	4a1c      	ldr	r2, [pc, #112]	; (800659c <xPortStartScheduler+0x12c>)
 800652a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800652c:	4b1b      	ldr	r3, [pc, #108]	; (800659c <xPortStartScheduler+0x12c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006534:	4a19      	ldr	r2, [pc, #100]	; (800659c <xPortStartScheduler+0x12c>)
 8006536:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006540:	4b17      	ldr	r3, [pc, #92]	; (80065a0 <xPortStartScheduler+0x130>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a16      	ldr	r2, [pc, #88]	; (80065a0 <xPortStartScheduler+0x130>)
 8006546:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800654a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800654c:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <xPortStartScheduler+0x130>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a13      	ldr	r2, [pc, #76]	; (80065a0 <xPortStartScheduler+0x130>)
 8006552:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006556:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006558:	f000 f8d6 	bl	8006708 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800655c:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <xPortStartScheduler+0x134>)
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006562:	f000 f8f5 	bl	8006750 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006566:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <xPortStartScheduler+0x138>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a0f      	ldr	r2, [pc, #60]	; (80065a8 <xPortStartScheduler+0x138>)
 800656c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006570:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006572:	f7ff ff69 	bl	8006448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006576:	f7ff f86b 	bl	8005650 <vTaskSwitchContext>
	prvTaskExitError();
 800657a:	f7ff ff21 	bl	80063c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	e000ed00 	.word	0xe000ed00
 800658c:	410fc271 	.word	0x410fc271
 8006590:	410fc270 	.word	0x410fc270
 8006594:	e000e400 	.word	0xe000e400
 8006598:	20000d28 	.word	0x20000d28
 800659c:	20000d2c 	.word	0x20000d2c
 80065a0:	e000ed20 	.word	0xe000ed20
 80065a4:	2000000c 	.word	0x2000000c
 80065a8:	e000ef34 	.word	0xe000ef34

080065ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065c4:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <vPortEnterCritical+0x54>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	4a0d      	ldr	r2, [pc, #52]	; (8006600 <vPortEnterCritical+0x54>)
 80065cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <vPortEnterCritical+0x54>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d10e      	bne.n	80065f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065d6:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <vPortEnterCritical+0x58>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d009      	beq.n	80065f4 <vPortEnterCritical+0x48>
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	e7fe      	b.n	80065f2 <vPortEnterCritical+0x46>
	}
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	2000000c 	.word	0x2000000c
 8006604:	e000ed04 	.word	0xe000ed04

08006608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800660e:	4b11      	ldr	r3, [pc, #68]	; (8006654 <vPortExitCritical+0x4c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <vPortExitCritical+0x22>
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	607b      	str	r3, [r7, #4]
 8006628:	e7fe      	b.n	8006628 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800662a:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <vPortExitCritical+0x4c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3b01      	subs	r3, #1
 8006630:	4a08      	ldr	r2, [pc, #32]	; (8006654 <vPortExitCritical+0x4c>)
 8006632:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006634:	4b07      	ldr	r3, [pc, #28]	; (8006654 <vPortExitCritical+0x4c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d104      	bne.n	8006646 <vPortExitCritical+0x3e>
 800663c:	2300      	movs	r3, #0
 800663e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	2000000c 	.word	0x2000000c
	...

08006660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006660:	f3ef 8009 	mrs	r0, PSP
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <pxCurrentTCBConst>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	f01e 0f10 	tst.w	lr, #16
 8006670:	bf08      	it	eq
 8006672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667a:	6010      	str	r0, [r2, #0]
 800667c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006684:	f380 8811 	msr	BASEPRI, r0
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f7fe ffde 	bl	8005650 <vTaskSwitchContext>
 8006694:	f04f 0000 	mov.w	r0, #0
 8006698:	f380 8811 	msr	BASEPRI, r0
 800669c:	bc09      	pop	{r0, r3}
 800669e:	6819      	ldr	r1, [r3, #0]
 80066a0:	6808      	ldr	r0, [r1, #0]
 80066a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a6:	f01e 0f10 	tst.w	lr, #16
 80066aa:	bf08      	it	eq
 80066ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066b0:	f380 8809 	msr	PSP, r0
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	f3af 8000 	nop.w

080066c0 <pxCurrentTCBConst>:
 80066c0:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop

080066c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066e0:	f7fe fefe 	bl	80054e0 <xTaskIncrementTick>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066ea:	4b06      	ldr	r3, [pc, #24]	; (8006704 <SysTick_Handler+0x3c>)
 80066ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	2300      	movs	r3, #0
 80066f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <vPortSetupTimerInterrupt+0x34>)
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006712:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <vPortSetupTimerInterrupt+0x38>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <vPortSetupTimerInterrupt+0x3c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a0a      	ldr	r2, [pc, #40]	; (8006748 <vPortSetupTimerInterrupt+0x40>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	099b      	lsrs	r3, r3, #6
 8006724:	4a09      	ldr	r2, [pc, #36]	; (800674c <vPortSetupTimerInterrupt+0x44>)
 8006726:	3b01      	subs	r3, #1
 8006728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800672a:	4b04      	ldr	r3, [pc, #16]	; (800673c <vPortSetupTimerInterrupt+0x34>)
 800672c:	2207      	movs	r2, #7
 800672e:	601a      	str	r2, [r3, #0]
}
 8006730:	bf00      	nop
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	e000e010 	.word	0xe000e010
 8006740:	e000e018 	.word	0xe000e018
 8006744:	20000000 	.word	0x20000000
 8006748:	10624dd3 	.word	0x10624dd3
 800674c:	e000e014 	.word	0xe000e014

08006750 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006750:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006760 <vPortEnableVFP+0x10>
 8006754:	6801      	ldr	r1, [r0, #0]
 8006756:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800675a:	6001      	str	r1, [r0, #0]
 800675c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800675e:	bf00      	nop
 8006760:	e000ed88 	.word	0xe000ed88

08006764 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800676a:	f3ef 8305 	mrs	r3, IPSR
 800676e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b0f      	cmp	r3, #15
 8006774:	d913      	bls.n	800679e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006776:	4a16      	ldr	r2, [pc, #88]	; (80067d0 <vPortValidateInterruptPriority+0x6c>)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006780:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <vPortValidateInterruptPriority+0x70>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	7afa      	ldrb	r2, [r7, #11]
 8006786:	429a      	cmp	r2, r3
 8006788:	d209      	bcs.n	800679e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	607b      	str	r3, [r7, #4]
 800679c:	e7fe      	b.n	800679c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800679e:	4b0e      	ldr	r3, [pc, #56]	; (80067d8 <vPortValidateInterruptPriority+0x74>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <vPortValidateInterruptPriority+0x78>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d909      	bls.n	80067c2 <vPortValidateInterruptPriority+0x5e>
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	e7fe      	b.n	80067c0 <vPortValidateInterruptPriority+0x5c>
	}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	e000e3f0 	.word	0xe000e3f0
 80067d4:	20000d28 	.word	0x20000d28
 80067d8:	e000ed0c 	.word	0xe000ed0c
 80067dc:	20000d2c 	.word	0x20000d2c

080067e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08a      	sub	sp, #40	; 0x28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067ec:	f7fe fdbe 	bl	800536c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067f0:	4b57      	ldr	r3, [pc, #348]	; (8006950 <pvPortMalloc+0x170>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067f8:	f000 f90c 	bl	8006a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067fc:	4b55      	ldr	r3, [pc, #340]	; (8006954 <pvPortMalloc+0x174>)
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4013      	ands	r3, r2
 8006804:	2b00      	cmp	r3, #0
 8006806:	f040 808c 	bne.w	8006922 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01c      	beq.n	800684a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006810:	2208      	movs	r2, #8
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4413      	add	r3, r2
 8006816:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	2b00      	cmp	r3, #0
 8006820:	d013      	beq.n	800684a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f023 0307 	bic.w	r3, r3, #7
 8006828:	3308      	adds	r3, #8
 800682a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	2b00      	cmp	r3, #0
 8006834:	d009      	beq.n	800684a <pvPortMalloc+0x6a>
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	e7fe      	b.n	8006848 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d068      	beq.n	8006922 <pvPortMalloc+0x142>
 8006850:	4b41      	ldr	r3, [pc, #260]	; (8006958 <pvPortMalloc+0x178>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	429a      	cmp	r2, r3
 8006858:	d863      	bhi.n	8006922 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800685a:	4b40      	ldr	r3, [pc, #256]	; (800695c <pvPortMalloc+0x17c>)
 800685c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800685e:	4b3f      	ldr	r3, [pc, #252]	; (800695c <pvPortMalloc+0x17c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006864:	e004      	b.n	8006870 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	429a      	cmp	r2, r3
 8006878:	d903      	bls.n	8006882 <pvPortMalloc+0xa2>
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1f1      	bne.n	8006866 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006882:	4b33      	ldr	r3, [pc, #204]	; (8006950 <pvPortMalloc+0x170>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006888:	429a      	cmp	r2, r3
 800688a:	d04a      	beq.n	8006922 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2208      	movs	r2, #8
 8006892:	4413      	add	r3, r2
 8006894:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	1ad2      	subs	r2, r2, r3
 80068a6:	2308      	movs	r3, #8
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d91e      	bls.n	80068ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4413      	add	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	f003 0307 	and.w	r3, r3, #7
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d009      	beq.n	80068d4 <pvPortMalloc+0xf4>
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	e7fe      	b.n	80068d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	1ad2      	subs	r2, r2, r3
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068e6:	69b8      	ldr	r0, [r7, #24]
 80068e8:	f000 f8f6 	bl	8006ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068ec:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <pvPortMalloc+0x178>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	4a18      	ldr	r2, [pc, #96]	; (8006958 <pvPortMalloc+0x178>)
 80068f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068fa:	4b17      	ldr	r3, [pc, #92]	; (8006958 <pvPortMalloc+0x178>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4b18      	ldr	r3, [pc, #96]	; (8006960 <pvPortMalloc+0x180>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d203      	bcs.n	800690e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006906:	4b14      	ldr	r3, [pc, #80]	; (8006958 <pvPortMalloc+0x178>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a15      	ldr	r2, [pc, #84]	; (8006960 <pvPortMalloc+0x180>)
 800690c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	4b10      	ldr	r3, [pc, #64]	; (8006954 <pvPortMalloc+0x174>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	431a      	orrs	r2, r3
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006922:	f7fe fd31 	bl	8005388 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	2b00      	cmp	r3, #0
 800692e:	d009      	beq.n	8006944 <pvPortMalloc+0x164>
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	e7fe      	b.n	8006942 <pvPortMalloc+0x162>
	return pvReturn;
 8006944:	69fb      	ldr	r3, [r7, #28]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3728      	adds	r7, #40	; 0x28
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	200018f0 	.word	0x200018f0
 8006954:	200018fc 	.word	0x200018fc
 8006958:	200018f4 	.word	0x200018f4
 800695c:	200018e8 	.word	0x200018e8
 8006960:	200018f8 	.word	0x200018f8

08006964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d046      	beq.n	8006a04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006976:	2308      	movs	r3, #8
 8006978:	425b      	negs	r3, r3
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	4413      	add	r3, r2
 800697e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	4b20      	ldr	r3, [pc, #128]	; (8006a0c <vPortFree+0xa8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4013      	ands	r3, r2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d109      	bne.n	80069a6 <vPortFree+0x42>
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e7fe      	b.n	80069a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <vPortFree+0x5e>
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	60bb      	str	r3, [r7, #8]
 80069c0:	e7fe      	b.n	80069c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	4b11      	ldr	r3, [pc, #68]	; (8006a0c <vPortFree+0xa8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4013      	ands	r3, r2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d019      	beq.n	8006a04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d115      	bne.n	8006a04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <vPortFree+0xa8>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	43db      	mvns	r3, r3
 80069e2:	401a      	ands	r2, r3
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069e8:	f7fe fcc0 	bl	800536c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <vPortFree+0xac>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4413      	add	r3, r2
 80069f6:	4a06      	ldr	r2, [pc, #24]	; (8006a10 <vPortFree+0xac>)
 80069f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069fa:	6938      	ldr	r0, [r7, #16]
 80069fc:	f000 f86c 	bl	8006ad8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a00:	f7fe fcc2 	bl	8005388 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a04:	bf00      	nop
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	200018fc 	.word	0x200018fc
 8006a10:	200018f4 	.word	0x200018f4

08006a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a20:	4b27      	ldr	r3, [pc, #156]	; (8006ac0 <prvHeapInit+0xac>)
 8006a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00c      	beq.n	8006a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3307      	adds	r3, #7
 8006a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0307 	bic.w	r3, r3, #7
 8006a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	4a1f      	ldr	r2, [pc, #124]	; (8006ac0 <prvHeapInit+0xac>)
 8006a44:	4413      	add	r3, r2
 8006a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <prvHeapInit+0xb0>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a52:	4b1c      	ldr	r3, [pc, #112]	; (8006ac4 <prvHeapInit+0xb0>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a60:	2208      	movs	r2, #8
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1a9b      	subs	r3, r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0307 	bic.w	r3, r3, #7
 8006a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a76:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a7e:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a94:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <prvHeapInit+0xb8>)
 8006aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <prvHeapInit+0xbc>)
 8006aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <prvHeapInit+0xc0>)
 8006aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ab2:	601a      	str	r2, [r3, #0]
}
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	20000d30 	.word	0x20000d30
 8006ac4:	200018e8 	.word	0x200018e8
 8006ac8:	200018f0 	.word	0x200018f0
 8006acc:	200018f8 	.word	0x200018f8
 8006ad0:	200018f4 	.word	0x200018f4
 8006ad4:	200018fc 	.word	0x200018fc

08006ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ae0:	4b28      	ldr	r3, [pc, #160]	; (8006b84 <prvInsertBlockIntoFreeList+0xac>)
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e002      	b.n	8006aec <prvInsertBlockIntoFreeList+0x14>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d8f7      	bhi.n	8006ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	4413      	add	r3, r2
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d108      	bne.n	8006b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	441a      	add	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	441a      	add	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d118      	bne.n	8006b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <prvInsertBlockIntoFreeList+0xb0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d00d      	beq.n	8006b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	441a      	add	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e008      	b.n	8006b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b56:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <prvInsertBlockIntoFreeList+0xb0>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e003      	b.n	8006b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d002      	beq.n	8006b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	200018e8 	.word	0x200018e8
 8006b88:	200018f0 	.word	0x200018f0

08006b8c <__libc_init_array>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4e0d      	ldr	r6, [pc, #52]	; (8006bc4 <__libc_init_array+0x38>)
 8006b90:	4c0d      	ldr	r4, [pc, #52]	; (8006bc8 <__libc_init_array+0x3c>)
 8006b92:	1ba4      	subs	r4, r4, r6
 8006b94:	10a4      	asrs	r4, r4, #2
 8006b96:	2500      	movs	r5, #0
 8006b98:	42a5      	cmp	r5, r4
 8006b9a:	d109      	bne.n	8006bb0 <__libc_init_array+0x24>
 8006b9c:	4e0b      	ldr	r6, [pc, #44]	; (8006bcc <__libc_init_array+0x40>)
 8006b9e:	4c0c      	ldr	r4, [pc, #48]	; (8006bd0 <__libc_init_array+0x44>)
 8006ba0:	f000 f82c 	bl	8006bfc <_init>
 8006ba4:	1ba4      	subs	r4, r4, r6
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	2500      	movs	r5, #0
 8006baa:	42a5      	cmp	r5, r4
 8006bac:	d105      	bne.n	8006bba <__libc_init_array+0x2e>
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bb4:	4798      	blx	r3
 8006bb6:	3501      	adds	r5, #1
 8006bb8:	e7ee      	b.n	8006b98 <__libc_init_array+0xc>
 8006bba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bbe:	4798      	blx	r3
 8006bc0:	3501      	adds	r5, #1
 8006bc2:	e7f2      	b.n	8006baa <__libc_init_array+0x1e>
 8006bc4:	08006cf4 	.word	0x08006cf4
 8006bc8:	08006cf4 	.word	0x08006cf4
 8006bcc:	08006cf4 	.word	0x08006cf4
 8006bd0:	08006cf8 	.word	0x08006cf8

08006bd4 <memcpy>:
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	1e43      	subs	r3, r0, #1
 8006bd8:	440a      	add	r2, r1
 8006bda:	4291      	cmp	r1, r2
 8006bdc:	d100      	bne.n	8006be0 <memcpy+0xc>
 8006bde:	bd10      	pop	{r4, pc}
 8006be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006be8:	e7f7      	b.n	8006bda <memcpy+0x6>

08006bea <memset>:
 8006bea:	4402      	add	r2, r0
 8006bec:	4603      	mov	r3, r0
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d100      	bne.n	8006bf4 <memset+0xa>
 8006bf2:	4770      	bx	lr
 8006bf4:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf8:	e7f9      	b.n	8006bee <memset+0x4>
	...

08006bfc <_init>:
 8006bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfe:	bf00      	nop
 8006c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c02:	bc08      	pop	{r3}
 8006c04:	469e      	mov	lr, r3
 8006c06:	4770      	bx	lr

08006c08 <_fini>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	bf00      	nop
 8006c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0e:	bc08      	pop	{r3}
 8006c10:	469e      	mov	lr, r3
 8006c12:	4770      	bx	lr
