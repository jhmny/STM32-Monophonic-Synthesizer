/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <float.h>
#include <math.h>
#include <string.h>
#include <stdio.h>
#include <stdbool.h> // for bool
#include "sine_animation.h"
#include "stdlib.h"
#include "ssd1306.h"
#include "fonts.h"
#include "test.h"
#include "bitmap.h"
#include "llist.h" // linked list for note storage as well as note struct
#include "wavetable16bit.h" //hardcoded wavetable
#include "wavetable_24.h" //24 overtone table
#include "pitchTable.h" //tables of pitches

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define MIDI_BUFFER_LENGTH 64
#define AUDIO_BUFFER_LENGTH 8192
#define AUDIO_BUFFER_LENGTH_DIV2 AUDIO_BUFFER_LENGTH / 2
#define WAVETABLE_LENGTH 1024
#define SAMPLE_RATE 44100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

I2C_HandleTypeDef hi2c2;

I2S_HandleTypeDef hi2s1;

SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_rx;

/* USER CODE BEGIN PV */
//var for new bytes
uint8_t nb_MIDI_bytes;
bool trig;
bool newNote;

//synth calc variables
float osc1WavePointer = 0;
float osc1;
float osc2WavePointer = 0;
float osc2;

uint8_t	osc1Waveform, osc2Waveform;

float signal = 0;
float signalPost = 0;
float pitch = 0;

float_t adsr1Output = 0;

uint8_t	adsr1State = 0;
float_t	attack1Inc = 0;
float_t	decay1Inc = 0;
float_t	release1Inc = 0;

float_t	adsr2Output = 0;

uint8_t	adsr2State = 0;
float_t	attack2Inc = 0;
float_t	decay2Inc = 0;
float_t	release2Inc = 0;

float adsr1Attack = 0.1f;
float adsr1Decay = 0.1f;
float adsr1Sus = 0.1f;
float adsr1Rel = 0.1f;

float adsr2Attack = 0.1f;
float adsr2Decay = 0.1f;
float adsr2Sus = 0.1f;
float adsr2Rel = 0.1f;


//LFO 1
float_t lfo1WavePointer = 0;
float_t lfo1WaveInc = 0;
float_t	lfo1Output = 0;

float_t	lfo1Freq = 10.0;
float_t	lfo1Depth = 0.8f;

//pitch bend
uint16_t pitchBendWheel;
float_t det = 0.0f;

// MOOG Variables
float_t	loPass = 24.0f;
float_t	reso = 1.0f;
float_t	f, fb, in1=0, in2=0, in3=0, in4=0, out1=0, out2=0, out3=0, out4=0;

float osc1mix = 0.2f;
float osc2mix = 0.2f;


//linked list of notes
llist	note_list = NULL;
uint8_t paramvalue[32];

void play_note(uint8_t, uint8_t);
void stop_note(uint8_t);
void LocalMidiHandler(uint8_t, uint8_t);
uint8_t MIDI_GetNbNewBytes();
void processBuffer(uint8_t* MIDI_buffer, uint8_t nb_MIDI_bytes);
void setParams();
void calcSynth(uint16_t startIndex);
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2S1_Init(void);
static void MX_DMA_Init(void);
static void MX_UART4_Init(void);
static void MX_I2C2_Init(void);
static void MX_SAI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint16_t sendBuff[AUDIO_BUFFER_LENGTH] = {0};
uint8_t UART4_rxBuffer[MIDI_BUFFER_LENGTH] = {0};
uint8_t msgnum, midimsg, received_char, key, velocity, ctrl, data;
uint8_t wavesel, velsel, pwm, pwm2, mod, vcf, tun, sus, notepos, bend,param, paramNum, paramVal, patch, pitchBend1, pitchBend2;

//

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

	int screenOn;
	note* play_note;
	//for dma counting
	//uint8_t	nb_MIDI_bytes;

	int i = 0;
	for (i=0; i<AUDIO_BUFFER_LENGTH; i=i+2)
		{
			sendBuff[i] = (uint16_t)((int16_t) 0.0f);			// Left Channel value
			sendBuff[i+1] = (uint16_t)((int16_t) 0.0f);		// Right Channel Value
		}


  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2S1_Init();
  MX_DMA_Init();
  MX_UART4_Init();
  MX_I2C2_Init();
  MX_SAI1_Init();
  /* USER CODE BEGIN 2 */
  //Setting up the interupt case/callback
	//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);
  //AUDIO_BUFFER_LENGTH = DATA NEEDED TO TRIGGER INTERUPT

  /*
	SSD1306_Init(); // initialize the LCD screen display
	SSD1306_Clear();
	  	SSD1306_GotoXY (0,0); 					// goto 10, 10
	  	SSD1306_Puts ("ECE 186B", &Font_11x18, 1); // print ECE 186B & our names
	  	SSD1306_GotoXY (0, 30);
	  	SSD1306_Puts ("Joshua Mendoza", &Font_7x10, 1);
	  	SSD1306_GotoXY (0, 40);
	  	SSD1306_Puts ("Megan Abundo", &Font_7x10, 1);
	  	SSD1306_GotoXY (0, 50);
	  	SSD1306_Puts ("Paris Villarrial", &Font_7x10, 1);
	//SSD1306_DrawBitmap(0,0,wave1,128,64,1);
	//SSD1306_InvertDisplay(1);
	//SSD1306_Scrolldiagleft(0x00, 0x0f); 		//Scroll entire screen diagonally left


	SSD1306_UpdateScreen();
	HAL_Delay (2000);
 */
  HAL_SAI_Transmit_DMA(&hsai_BlockA1,(uint16_t *) sendBuff, AUDIO_BUFFER_LENGTH);
  HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		// HAL_I2S_Transmit(&hi2s1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);

		nb_MIDI_bytes = MIDI_GetNbNewBytes();


		if(nb_MIDI_bytes){
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			processBuffer(UART4_rxBuffer,nb_MIDI_bytes);
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
		}

		play_note = get_last_note(note_list);

		if (play_note == NULL){ //no notes in the list
			//pitch = 0;
			trig = 0;
		}
		else {
			//set the pitch and trigger the notes
			pitch = pitch_table[(play_note->midi_note)-18];
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			trig = 1;
		}
		//test code
		if ( trig == 1)
		{
			//HAL_SAI_Transmit(&hsai_BlockA1, tone_c, sizeof(tone_c) / sizeof(tone_c[0]), 1000);
			if (screenOn == 0)
			{
				//SSD1306_Note0();
				screenOn = 1;
			}
		}
		else
		{
			screenOn = 0;
			//SSD1306_Clear();
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
  PeriphClkInitStruct.PLLI2SDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.Timing = 0x0090194B;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{

  /* USER CODE BEGIN I2S1_Init 0 */

  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}

/**
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{

  /* USER CODE BEGIN SAI1_Init 0 */

  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}

/**
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
  huart4.Init.BaudRate = 31250;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
	HAL_I2S_Receive(&hi2s1, sendBuff, 8, 100);
	//HAL_I2S_(hi2s1, sendBuff, 16, 100);
	HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, 8);
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
	//make_sound(0);
	calcSynth(0);
}

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
	//make_sound(AUDIO_BUFFER_LENGTH_DIV2);
	calcSynth(AUDIO_BUFFER_LENGTH_DIV2);
}

//void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef * hi2s1){
//HAL_I2S_Receive(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH, 100);
//HAL_I2S_(hi2s1, sendBuff, 16, 100);
//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);

//}

uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
}


uint8_t MIDI_GetNbNewBytes()
{
	static uint16_t dma_cpt_prev = MIDI_BUFFER_LENGTH;
	uint16_t dma_cpt, n = 0;
	// Get current DMA counter
	dma_cpt = DMA_GetCurrDataCounter(DMA1_Stream2);

	// If DMA counter has changed, compute the number of received MIDI bytes
	if (dma_cpt != dma_cpt_prev)
	{
		if (dma_cpt < dma_cpt_prev)
		{
			n = dma_cpt_prev - dma_cpt;
		}
		else
		{
			n = dma_cpt_prev - (dma_cpt - MIDI_BUFFER_LENGTH);
		}
		// Store the new DMA counter
		dma_cpt_prev = dma_cpt;
	}
	return (n);
}

//Author: Synthol Project, Adjusted to fit projec
void processBuffer(uint8_t* MIDI_buffer, uint8_t nb_MIDI_bytes)
{

	__IO uint32_t received_char;

	static uint8_t i = 0;
	static uint8_t state = 0;

	while (nb_MIDI_bytes != 0)
	{
		//reading a byte from the buffer
		received_char = UART4_rxBuffer[i];
		switch (state)
		{
		// State 0 = Starting point for a new MIDI message
		case 0:
		{
			switch (received_char & 0xF0)
			{
			case 0x90: // Note ON message
			{
				state = 10; // Next state is 10
				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				break;
			}
			case 0x80: // Note OFF message
			{
				state = 20; // Next state is 20
				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				break;
			}
			case 0xB0: // CC message
			{
				state = 30; // Next state is 30
				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				break;
			}

			case 0xE0: // Pitch Bend message
			{
				state = 40; // Next state is 40
				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				break;
			}
			default: // Other type of message, move to next byte but stays in state 0
			{
				//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
				i++;
				break;
			}
			}
			break;
		}
		// State 10 & 11 : Note ON command
		case 10:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
			{
				state = 0; // Return to state 0 without moving to next byte
			}
			else
			{ // Save MIDI note
				ctrl = key = received_char;

				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				state = 11; // Next state is 11
			}
			break;
		}
		case 11:
		{
			data = velocity = received_char; //will only ever get velocity in this section i think

			if (i == (MIDI_BUFFER_LENGTH-1)) {
				i = 0;				// Move to next MIDI byte
			}
			else {
				i++;
			}
			nb_MIDI_bytes--;

			state = 10; // Next state is 10

			if (velocity > 0)
			{

				note_list = add_note_last(note_list, key, velocity);

				newNote = 1;

			}
			else
			{
				//find the key and deletes it
				note_list = delete_note(note_list, key);
			}
			break;
		}
		// State 20 & 21 : Note OFF command
		case 20:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
			{
				state = 0; // Return to state 0 without moving to next byte
			}

			else
			{
				ctrl = key = received_char; // Save MIDI note

				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;

				state = 21; // Next state is 21
			}
			break;
		}
		case 21:
		{
			velocity = data = received_char; // Save MIDI velocity
			if (i == (MIDI_BUFFER_LENGTH-1)) {
				i = 0;				// Move to next MIDI byte
			}
			else {
				i++;
			}
			nb_MIDI_bytes--;

			state = 20; // Next state is 20

			note_list = delete_note(note_list, key);
			break;
		}
		// State 30 & 31 : CC command
		case 30:
		{
			if (received_char > 0x7F) // If the following byte is not a CC number
			{
				state = 0; // Return to state 0 without moving to next byte
			}
			else
			{
				paramNum = received_char; // Save MIDI CC number

				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				state = 31; // Next state is 31
			}
			break;
		}
		case 31:
		{
			paramVal = received_char; // Save MIDI velocity
			if (i == (MIDI_BUFFER_LENGTH-1)) {
				i = 0;				// Move to next MIDI byte
			}
			else {
				i++;
			}
			nb_MIDI_bytes--;
			state = 30;

			setParams();

			break;
		}
		// State 40 & 41 : Pitch Bend message
		case 40:
		{
			if (received_char > 0x7F) // If following byte is note a PB value
			{
				state = 0; // Return to state 0
			}
			else
			{
				pitchBend1 = received_char; // Save MIDI CC number
				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				state = 41; // Next state is 41
			}
			break;
		}
		case 41:
		{
			pitchBend2 = received_char; // Save MIDI velocity
			if (i == (MIDI_BUFFER_LENGTH-1)) {
				i = 0;				// Move to next MIDI byte
			}
			else {
				i++;
			}
			nb_MIDI_bytes--;

			pitchBendWheel = (uint8_t) pitchBend2;
			pitchBendWheel <=7;
			pitchBendWheel != (uint8_t) pitchBend1;

			det = pitch * 2.0f * ( (float_t)pitchBendWheel - 8192.0f) / (4096.0f * 12.0f);
			state = 40; // Next state is 00
			break;
		}
	}
	}
}

//TODO:logic for ADSR as well as DSP
void setParams(){
	switch (paramNum){
	case 73:								// ADRS Attack Time
		{
			adsr1Attack = 0.001f + (float_t) paramVal / 127;
			break;
		}

	case 75:								// ADRS Decay Time
		{
			adsr1Decay = 0.001f + (float_t) paramVal / 127;
			break;
		}

	case 79:								// ADRS Sustain Level
		{
			adsr1Sus = (float_t) paramVal / 127;
			break;
		}

	case 72:								// ADRS Release Time
		{
			adsr1Rel = 0.001f + (float_t) paramVal / 127;
			break;
		}

	//second ASDR
	case 80:								// ADRS Attack Time
		{
			adsr2Attack = 0.001f + (float_t) paramVal / 127;
			break;
		}

	case 81:								// ADRS Decay Time
		{
			adsr2Decay = 0.001f + (float_t) paramVal / 127;
			break;
		}

	case 82:								// ADRS Sustain Level
		{
			adsr2Sus = (float_t) paramVal / 127;
			break;
		}

	case 83:								// ADRS Release Time
		{
			adsr2Rel = 0.001f + (float_t) paramVal / 127;
			break;
		}


	//Waveform Select OSC2
	case 17:
	{
		if (paramVal >= 0 && paramVal < 32)	{
			osc2Waveform = 0;
		}
		else if (paramVal >= 32 && paramVal < 64)	{
			osc2Waveform = 1;
		}
		else if (paramVal >= 64 && paramVal < 96)	{
			osc2Waveform = 2;
		}
		else if (paramVal >= 96 && paramVal < 125){
			osc2Waveform = 3;
		}
		else if (paramVal >= 125 ){
			osc2Waveform = 4;
		}
		else {
			osc2Waveform = 0;
		}
		break;
	}
	//Waveform Select OSC1
	case 16:
	{
		if (paramVal >= 0 && paramVal < 32)	{
			osc1Waveform = 0;
		}
		else if (paramVal >= 32 && paramVal < 64)	{
			osc1Waveform = 1;
		}
		else if (paramVal >= 64 && paramVal < 96)	{
			osc1Waveform = 2;
		}
		else if (paramVal >= 96 && paramVal < 125){
			osc1Waveform = 3;
		}
		else if (paramVal >= 125 ){
			osc1Waveform = 4;
		}
		else {
			osc1Waveform = 0;
		}
		break;
	}
	case 74 :								// OSC1 mix level
	{
		osc1mix = (float_t) paramVal / 127;
		break;
	}

	case 71 :								// OSC2 mix level
	{
		osc2mix = (float_t) paramVal / 127;
		break;
	}

	case 76 :								// low pass
	{
		loPass = (float_t) 1.0f + (200.0f * paramVal / 127);
		break;
	}

	case 77 :								// Resonance
	{
		reso = 4.0f * (float_t) paramVal / 127;
		break;
	}
	case 93 :								// ADRS Release Time
	{
		lfo1Freq = 10.0f * (float_t) paramVal / 127;
		break;
	}

	case 18 :								// ADRS Release Time
	{
	lfo1Depth = 1.0f * (float_t) paramVal / 127;
	break;
	}
	}
}

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
	//HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	//HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
	//new version dose not call here
		//processBuffer();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	//HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	//HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
	//once MIDI buffer is full we send to the process buffer function
	//new version dose not call here
	//processBuffer();
}

void calcSynth(uint16_t startIndex){
	uint16_t a,b;
	float da, db;

	if (newNote)	{
		newNote = 0;
		adsr1State = 1; //first attck
		adsr2State = 1; //first attck

		attack1Inc = (1 - adsr1Output)/(adsr1Attack * SAMPLE_RATE);
		attack2Inc = (1 - adsr2Output)/(adsr2Attack * SAMPLE_RATE);
	}

	if (trig == 0)	{ //note is complete, set the release time
			if (adsr1State != 4)	{
				adsr1State = 4;
				release1Inc = adsr1Output /(adsr1Rel * SAMPLE_RATE);
			}
			if (adsr2State != 4)	{
				adsr2State = 4;
				release2Inc = adsr2Output /(adsr2Rel * SAMPLE_RATE);
			}
	}

	decay1Inc = (1-adsr1Sus) / (adsr1Decay * SAMPLE_RATE);
	decay2Inc = (1-adsr2Sus) / (adsr2Decay * SAMPLE_RATE);

	//BEGIN FILLING BUFFER

	uint16_t i; //keep track of audio buffer
	i = 0;

	while (i < AUDIO_BUFFER_LENGTH_DIV2){

		//LFO 1

		//pitch = pitch + det;
		float osc1WaveIncr = WAVETABLE_LENGTH * (pitch) / SAMPLE_RATE;
		osc1WavePointer = osc1WavePointer + osc1WaveIncr;

		if(osc1WavePointer > WAVETABLE_LENGTH){
			osc1WavePointer = osc1WavePointer - WAVETABLE_LENGTH;
		}

		float osc2WaveIncr = WAVETABLE_LENGTH * (pitch) / SAMPLE_RATE;
		osc2WavePointer = osc2WavePointer + osc2WaveIncr;

		if(osc2WavePointer > WAVETABLE_LENGTH){
			osc2WavePointer = osc2WavePointer - WAVETABLE_LENGTH;
		}

		a = (int)osc1WavePointer;
		da = osc1WavePointer -a;
		b= a+1;
		db = b - osc1WavePointer;

		if (b>= WAVETABLE_LENGTH){
			b = 0;
		}

		switch (osc1Waveform)
		{
			case 0 :
			{
				osc1 = db*square[a] + da*square[b];					// Linear interpolation (same as weighted average)
				break;
			}

			case 1 :
			{
				osc1 = db*triangle[a] + da*triangle[b];
				break;
			}

			case 2 :
			{
				osc1 = db*sawtooth[a] + da*sawtooth[b];
				break;
			}

			case 3 :
			{
				osc1 = db*distosine[a] + da*distosine[b];
				break;
			}
			case 4 :
			{
				osc1 = db*sinewave[a] + da*sinewave[b];
				break;
			}

			default :
			{
				osc1 = db*sinewave[a] + da*sinewave[b];
				break;
			}
		}


		/*
		a  = (int) osc2WavePointer;
		da = osc2WavePointer - a;
		b  = a + 1;
		db = b - osc2WavePointer;
		*/

		switch (osc2Waveform)
		{
			case 0 :
			{
				osc2 = db*square[a] + da*square[b];
				break;
			}

			case 1 :
			{
				osc2 = db*triangle[a] + da*triangle[b];
				break;
			}

			case 2 :
			{
				osc2 = db*sawtooth[a] + da*sawtooth[b];
				break;
			}

			case 3 :
			{
				osc2 = db*distosine[a] + da*distosine[b];
				break;
			}
			case 4 :
			{
				osc2 = db*sinewave[a] + da*sinewave[b];
				break;
			}

			default :
			{
				osc2 = db*sinewave[a] + da*sinewave[b];
				break;
			}
		}


		//mixing of singals
		signal = (osc1mix * osc1) + (osc2mix * osc2);
		//signal = (osc1mix * osc1);

		//MOOG Filter
		//f =  (float_t) params.cutoff * (1.0f+ lfo1_output) * (1.0f + adsr2_output) * pitch * 1.16f / (SAMPLERATE/2) ;
		f =  (float_t) loPass * pitch * 1.16f / (SAMPLE_RATE/2) ;

		if (f>1.0f) f=1.0f;

		fb = (float_t) reso * (1.0f - 0.15f * f*f);

//		signal -= out4 * fb;
//		signal *= 0.35013f * (f*f) * (f*f);

		out1 = signal + 0.3f * in1 + (1-f) * out1; 				// Pole 1
		in1 = signal;
		out2 = out1 + 0.3f * in2 + (1-f) * out2; 				// Pole 2
		in2 = out1;
		out3 = out2 + 0.3f * in3 + (1-f) * out3; 				// Pole 3
		in3 = out2;
		out4 = out3 + 0.3f * in4 + (1-f) * out4; 				// Pole 4
		in4 = out3;

		signalPost = out4;

		//ADSR SECTION

		switch (adsr1State)
		{
			case 0 :
			{
				adsr1Output = 0;
				break;
			}

			case 1 :
			{
				adsr1Output = adsr1Output + attack1Inc;

				if (adsr1Output > 1)
				{
					adsr1Output = 1;
					adsr1State = 2;
				}
				break;
			}
			case 2 :
			{
				adsr1Output = adsr1Output - decay1Inc;

				if (adsr1Output < adsr1Sus)
				{
					adsr1Output = adsr1Sus;
					adsr1State = 3;
				}
				break;
			}

			case 3 :
			{
				adsr1Output = adsr1Sus;
				break;
			}
			case 4 :
			{
				adsr1Output = adsr1Output - release1Inc;
				if (adsr1Output < 0)
				{
					adsr1Output = 0;
					adsr1State = 0;
				}
				break;
			}
		}

		switch (adsr2State)
		{
			case 0 :
			{
				adsr2Output = 0;
				break;
			}

			case 1 :
			{
				adsr2Output = adsr2Output + attack2Inc;

				if (adsr2Output > 1)
				{
					adsr2Output = 1;
					adsr2State = 2;
				}
				break;
			}
			case 2 :
			{
				adsr2Output = adsr2Output - decay2Inc;

				if (adsr2Output < adsr1Sus)
				{
					adsr2Output = adsr1Sus;
					adsr2State = 3;
				}
				break;
			}

			case 3 :
			{
				adsr2Output = adsr2Sus;
				break;
			}
			case 4 :
			{
				adsr2Output = adsr2Output - release2Inc;
				if (adsr1Output < 0)
				{
					adsr2Output = 0;
					adsr2State = 0;
				}
				break;
			}
		}

		//signal =  signal * 32767.0f * signalPost;
		signal =  adsr1Output * signal * 32767.0f;

		if (signal > 32767.0f){
			signal = 32767.0f;
		}
		if (signal < -32767.0f){
			signal = -32767.0f;
		}

		//FILL BUFFER
		sendBuff[startIndex+i] =   (uint16_t)((int16_t) signal);		// Left Channel value
		sendBuff[startIndex+i+1] = (uint16_t)((int16_t) signal);		// Right Channel Value

		i = i+2;
	}
}

void make_sound(uint16_t startIndex) {
	calcSynth(startIndex);
	/*
	for (uint16_t i = 0; i < AUDIO_BUFFER_LENGTH_DIV2 ;  i=i+2) {
		float signal = calcSynth();
		sendBuff[start_index + i] = (int16_t)signal;
		sendBuff[start_index + i + 1] = (int16_t)signal;
	}
	*/
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
