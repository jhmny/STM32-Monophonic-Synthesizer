/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <float.h>
#include <math.h>
#include <string.h>
#include <stdio.h>
#include <stdbool.h> // for bool
#include "sine_animation.h"
#include "stdlib.h"
#include "ssd1306.h"
#include "fonts.h"
#include "test.h"
#include "bitmap.h"
#include "llist.h" // linked list for note storage as well as note struct
#include "wavetable16bit.h" // 16 bit wavetables

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define MIDI_BUFFER_LENGTH 6
#define AUDIO_BUFFER_LENGTH 4
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

I2C_HandleTypeDef hi2c2;

I2S_HandleTypeDef hi2s1;

SAI_HandleTypeDef hsai_BlockA1;

UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_rx;

/* USER CODE BEGIN PV */
//var for new bytes
uint8_t nb_MIDI_bytes;
int playNoteB;
bool trig;


//linked list of notes
llist	note_list = NULL;


uint8_t paramvalue[32];

void play_note(uint8_t, uint8_t);
void stop_note(uint8_t);
void LocalMidiHandler(uint8_t, uint8_t);
uint8_t MIDI_GetNbNewBytes();
void processBuffer(uint8_t* MIDI_buffer, uint8_t nb_MIDI_bytes);
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2S1_Init(void);
static void MX_DMA_Init(void);
static void MX_UART4_Init(void);
static void MX_I2C2_Init(void);
static void MX_SAI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const uint16_t triangle_wave[] = {
	0x400,
	0x800,
	0xc00,
	0x1000,
	0x1400,
	0x1800,
	0x1c00,
	0x2000,
	0x2400,
	0x2800,
	0x2c00,
	0x3000,
	0x3400,
	0x3800,
	0x3c00,
	0x4000,
	0x4400,
	0x4800,
	0x4c00,
	0x5000,
	0x5400,
	0x5800,
	0x5c00,
	0x6000,
	0x6400,
	0x6800,
	0x6c00,
	0x7000,
	0x7400,
	0x7800,
	0x7c00,
	0x8000,
	0x83ff,
	0x87ff,
	0x8bff,
	0x8fff,
	0x93ff,
	0x97ff,
	0x9bff,
	0x9fff,
	0xa3ff,
	0xa7ff,
	0xabff,
	0xafff,
	0xb3ff,
	0xb7ff,
	0xbbff,
	0xbfff,
	0xc3ff,
	0xc7ff,
	0xcbff,
	0xcfff,
	0xd3ff,
	0xd7ff,
	0xdbff,
	0xdfff,
	0xe3ff,
	0xe7ff,
	0xebff,
	0xefff,
	0xf3ff,
	0xf7ff,
	0xfbff,
	0xffff,
	0xfbff,
	0xf7ff,
	0xf3ff,
	0xefff,
	0xebff,
	0xe7ff,
	0xe3ff,
	0xdfff,
	0xdbff,
	0xd7ff,
	0xd3ff,
	0xcfff,
	0xcbff,
	0xc7ff,
	0xc3ff,
	0xbfff,
	0xbbff,
	0xb7ff,
	0xb3ff,
	0xafff,
	0xabff,
	0xa7ff,
	0xa3ff,
	0x9fff,
	0x9bff,
	0x97ff,
	0x93ff,
	0x8fff,
	0x8bff,
	0x87ff,
	0x83ff,
	0x8000,
	0x7c00,
	0x7800,
	0x7400,
	0x7000,
	0x6c00,
	0x6800,
	0x6400,
	0x6000,
	0x5c00,
	0x5800,
	0x5400,
	0x5000,
	0x4c00,
	0x4800,
	0x4400,
	0x4000,
	0x3c00,
	0x3800,
	0x3400,
	0x3000,
	0x2c00,
	0x2800,
	0x2400,
	0x2000,
	0x1c00,
	0x1800,
	0x1400,
	0x1000,
	0xc00,
	0x800,
	0x400,
	0x0,
};

const uint16_t sin_wave[] = {
	0x80, 0x83, 0x86, 0x89, 0x8c, 0x8f, 0x92, 0x95, 0x98, 0x9c, 0x9f, 0xa2, 0xa5, 0xa8, 0xab, 0xae,
	0xb0, 0xb3, 0xb6, 0xb9, 0xbc, 0xbf, 0xc1, 0xc4, 0xc7, 0xc9, 0xcc, 0xce, 0xd1, 0xd3, 0xd5, 0xd8,
	0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xed, 0xef, 0xf0, 0xf2, 0xf3, 0xf5,
	0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfc, 0xfd, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfd, 0xfc, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7,
	0xf6, 0xf5, 0xf3, 0xf2, 0xf0, 0xef, 0xed, 0xec, 0xea, 0xe8, 0xe6, 0xe4, 0xe2, 0xe0, 0xde, 0xdc,
	0xda, 0xd8, 0xd5, 0xd3, 0xd1, 0xce, 0xcc, 0xc9, 0xc7, 0xc4, 0xc1, 0xbf, 0xbc, 0xb9, 0xb6, 0xb3,
	0xb0, 0xae, 0xab, 0xa8, 0xa5, 0xa2, 0x9f, 0x9c, 0x98, 0x95, 0x92, 0x8f, 0x8c, 0x89, 0x86, 0x83,
	0x80, 0x7c, 0x79, 0x76, 0x73, 0x70, 0x6d, 0x6a, 0x67, 0x63, 0x60, 0x5d, 0x5a, 0x57, 0x54, 0x51,
	0x4f, 0x4c, 0x49, 0x46, 0x43, 0x40, 0x3e, 0x3b, 0x38, 0x36, 0x33, 0x31, 0x2e, 0x2c, 0x2a, 0x27,
	0x25, 0x23, 0x21, 0x1f, 0x1d, 0x1b, 0x19, 0x17, 0x15, 0x13, 0x12, 0x10, 0x0f, 0x0d, 0x0c, 0x0a,
	0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
	0x09, 0x0a, 0x0c, 0x0d, 0x0f, 0x10, 0x12, 0x13, 0x15, 0x17, 0x19, 0x1b, 0x1d, 0x1f, 0x21, 0x23,
	0x25, 0x27, 0x2a, 0x2c, 0x2e, 0x31, 0x33, 0x36, 0x38, 0x3b, 0x3e, 0x40, 0x43, 0x46, 0x49, 0x4c,
	0x4f, 0x51, 0x54, 0x57, 0x5a, 0x5d, 0x60, 0x63, 0x67, 0x6a, 0x6d, 0x70, 0x73, 0x76, 0x79, 0x7c};

uint16_t sendBuff[AUDIO_BUFFER_LENGTH] = {0};

uint8_t UART4_rxBuffer[MIDI_BUFFER_LENGTH] = {0};
uint8_t msgnum, midimsg, received_char, key, velocity, ctrl, data;
uint8_t wavesel, velsel, pwm, pwm2, mod, vcf, tun, det, sus, notepos, bend, param, patch;

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	int screenOn;

	note* play_note;
	//for dma counting
	uint8_t	nb_MIDI_bytes;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2S1_Init();
  MX_DMA_Init();
  MX_UART4_Init();
  MX_I2C2_Init();
  MX_SAI1_Init();
  /* USER CODE BEGIN 2 */
	HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);
	SSD1306_Init(); // initialize the LCD screen display
	SSD1306_Menu();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// HAL_I2S_Transmit(&hi2s1, triangle_wave, sizeof(triangle_wave)/sizeof(triangle_wave[0]), 10);
		nb_MIDI_bytes = MIDI_GetNbNewBytes();

		if(nb_MIDI_bytes){
			processBuffer(UART4_rxBuffer,nb_MIDI_bytes);
		}

		play_note = get_last_note(note_list);

		if (play_note == NULL){ //no notes in the list
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			trig = 0;
			playNoteB = 0;
		}
		else {
			//set the pitch and trigger the notes
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			trig = 1;
			playNoteB = 1;
		}

		//test code
		if ( trig == 1)
		{
			if (key == 60 ){
				HAL_SAI_Transmit(&hsai_BlockA1, tone_c, sizeof(tone_c) / sizeof(tone_c[0]), 100);
			}
			else if (key == 61 ){
					HAL_SAI_Transmit(&hsai_BlockA1, tone_c_sharp, sizeof(tone_c_sharp) / sizeof(tone_c_sharp[0]), 100);
			}
			//HAL_SAI_Transmit(&hsai_BlockA1, tone_c, sizeof(tone_c) / sizeof(tone_c[0]), 1000);
			HAL_SAI_Transmit(&hsai_BlockA1, triangle_wave, sizeof(triangle_wave) / sizeof(triangle_wave[0]), 10);
			if (screenOn == 0)
			{
				SSD1306_Note0();
				screenOn = 1;
			}
		}
		else
		{
			screenOn = 0;
			//SSD1306_Clear();
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
  PeriphClkInitStruct.PLLI2SDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.Timing = 0x0090194B;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{

  /* USER CODE BEGIN I2S1_Init 0 */

  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}

/**
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{

  /* USER CODE BEGIN SAI1_Init 0 */

  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}

/**
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
  huart4.Init.BaudRate = 31250;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
	HAL_I2S_Receive(&hi2s1, sendBuff, 8, 100);
	//HAL_I2S_(hi2s1, sendBuff, 16, 100);
	HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, 8);
}

//void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef * hi2s1){
//HAL_I2S_Receive(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH, 100);
//HAL_I2S_(hi2s1, sendBuff, 16, 100);
//HAL_I2S_Transmit_DMA(&hi2s1, sendBuff, AUDIO_BUFFER_LENGTH);

//}

uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
}


//TODO: Need to fix function for HAL not LL
uint8_t MIDI_GetNbNewBytes()
{
	static uint16_t dma_cpt_prev = MIDI_BUFFER_LENGTH;
	uint16_t dma_cpt, n = 0;
	// Get current DMA counter
	dma_cpt = DMA_GetCurrDataCounter(DMA1_Stream2);

	// If DMA counter has changed, compute the number of received MIDI bytes
	if (dma_cpt != dma_cpt_prev)
	{
		if (dma_cpt < dma_cpt_prev)
		{
			n = dma_cpt_prev - dma_cpt;
		}
		else
		{
			n = dma_cpt_prev - (dma_cpt - MIDI_BUFFER_LENGTH);
		}
		// Store the new DMA counter
		dma_cpt_prev = dma_cpt;
	}
	return (n);
}


void processBuffer(uint8_t* MIDI_buffer, uint8_t nb_MIDI_bytes)
{
	__IO uint32_t received_char;

	static uint8_t i = 0;
	static uint8_t state = 0;

	while (nb_MIDI_bytes != 0)
	{
		//reading a byte from the buffer
		received_char = UART4_rxBuffer[i];
		switch (state)
		{
		// State 0 = Starting point for a new MIDI message
		case 0:
		{
			switch (received_char & 0xF0)
			{
			case 0x90: // Note ON message
			{
				state = 10; // Next state is 10
				printf ("note ON event\n");
				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				break;
			}
			case 0x80: // Note OFF message
			{
				state = 20; // Next state is 20
				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				break;
			}
			case 0xB0: // CC message
			{
				state = 30; // Next state is 30
				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				break;
			}

			case 0xE0: // Pitch Bend message
			{
				state = 40; // Next state is 40
				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				break;
			}
			default: // Other type of message, move to next byte but stays in state 0
			{
				//if (i == (MIDI_BUFFER_LENGTH-1)) i = 0;				// Move to next MIDI byte
				i++;
				break;
			}
			}
			break;
		}
		// State 10 & 11 : Note ON command
		case 10:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
			{
				state = 0; // Return to state 0 without moving to next byte
			}
			else
			{ // Save MIDI note
				ctrl = key = received_char;

				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				state = 11; // Next state is 11
			}
			break;
		}
		case 11:
		{
			data = velocity = received_char; //will only ever get velocity in this section i think

			if (i == (MIDI_BUFFER_LENGTH-1)) {
				i = 0;				// Move to next MIDI byte
			}
			else {
				i++;
			}
			nb_MIDI_bytes--;

			state = 10; // Next state is 10

			if (velocity > 0)
			{

				note_list = add_note_last(note_list, key, velocity);


				//play_note(midimsg, velocity);
			}
			else
			{
				//find the key and deletes it
				note_list = delete_note(note_list, key);
			}
			break;
		}
		// State 20 & 21 : Note OFF command
		case 20:
		{
			if (received_char > 0x7F) // If the following byte is not a note number
			{
				state = 0; // Return to state 0 without moving to next byte
			}

			else
			{
				ctrl = key = received_char; // Save MIDI note

				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;

				state = 21; // Next state is 21
			}
			break;
		}
		case 21:
		{
			velocity = data = received_char; // Save MIDI velocity
			if (i == (MIDI_BUFFER_LENGTH-1)) {
				i = 0;				// Move to next MIDI byte
			}
			else {
				i++;
			}
			nb_MIDI_bytes--;

			state = 20; // Next state is 20

			note_list = delete_note(note_list, key);
			break;
		}
		// State 30 & 31 : CC command
		case 30:
		{
			if (received_char > 0x7F) // If the following byte is not a CC number
			{
				state = 0; // Return to state 0 without moving to next byte
			}
			else
			{
				param = received_char; // Save MIDI CC number

				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				state = 31; // Next state is 31
			}
			break;
		}
		case 31:
		{
			param = received_char; // Save MIDI velocity
			if (i == (MIDI_BUFFER_LENGTH-1)) {
				i = 0;				// Move to next MIDI byte
			}
			else {
				i++;
			}
			nb_MIDI_bytes--;
			state = 30; // Next state is 30
			break;
		}
		// State 40 & 41 : Pitch Bend message
		case 40:
		{
			if (received_char > 0x7F) // If following byte is note a PB value
			{
				state = 0; // Return to state 0
			}
			else
			{
				param = received_char; // Save MIDI CC number
				if (i == (MIDI_BUFFER_LENGTH-1)) {
					i = 0;				// Move to next MIDI byte
				}
				else {
					i++;
				}
				nb_MIDI_bytes--;
				state = 41; // Next state is 41
			}
			break;
		}
		case 41:
		{
			param = received_char; // Save MIDI velocity
			if (i == (MIDI_BUFFER_LENGTH-1)) {
				i = 0;				// Move to next MIDI byte
			}
			else {
				i++;
			}
			nb_MIDI_bytes--;
			state = 40; // Next state is 00
			break;
		}
	}
	}
}

//Author: Synthol Project, Adjusted to fit projec

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
	HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);

	//new version dose not call here
		//processBuffer();
}

//buffer is full here, do something when full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	HAL_UART_Transmit(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH, 100);
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, MIDI_BUFFER_LENGTH);

	//once MIDI buffer is full we send to the process buffer function


	//new version dose not call here
	//processBuffer();
}

void play_note(uint8_t note, uint8_t velocity)
{
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	playNoteB = 1;
}

void stop_note(uint8_t note)
{
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	playNoteB = 0;
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
