/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

UART_HandleTypeDef huart4;

/* USER CODE BEGIN PV */
#define MIDI_BUFFER_LENGTH		64
uint8_t msgnum, midimsg, received_char, key, velocity, ctrl, data;
uint8_t MIDI_buffer[MIDI_BUFFER_LENGTH] = {0};

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_UART4_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_UART4_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive (&huart4, MIDI_buffer, 64, 5000);
	  MIDI_parser(MIDI_buffer);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
  huart4.Init.BaudRate = 31250;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */


void MIDI_parser(uint8_t* MIDI_buffer){
	static uint8_t 	index = 0;
	static uint8_t	state = 0;
	nb_MIDI_bytes = 1;

	static uint8_t	MIDI_note, MIDI_velocity;
	static uint8_t  MIDI_CC_number, MIDI_CC_value;
	static uint8_t  MIDI_PB_byte1, MIDI_PB_byte2;

	uint8_t			MIDI_byte;

	uint16_t		PB_wheel;

	// Process message

	while (nb_MIDI_bytes != 0)
	{
		// Read a new byte from the MIDI buffer

		MIDI_byte = MIDI_buffer[index];

		//printf ("0x%x @index = %d\n", MIDI_byte, index);

		// Move to next byte

		switch (state)
		{

			// State 0 = Starting point for a new MIDI message

			case 0 :
			{
				switch (MIDI_byte & 0xF0)
				{

					case 0x90 :														// Note ON message
					{
						state = 10;													// Next state is 10

						// printf ("note ON event\n");

						if (index == (MIDI_BUFFER_LENGTH-1)) index = 0;				// Move to next MIDI byte
						else index ++;
						nb_MIDI_bytes--;

						break;
					}


					case 0x80 :														// Note OFF message
					{
						state = 20;													// Next state is 20

						// printf ("note OFF event\n");

						if (index == (MIDI_BUFFER_LENGTH-1)) index = 0;				// Move to next MIDI byte
						else index ++;
						nb_MIDI_bytes--;

						break;
					}

					case 0xB0 :														// CC message
					{
						state = 30;													// Next state is 30

						// printf ("CC event\n");

						if (index == (MIDI_BUFFER_LENGTH-1)) index = 0;				// Move to next MIDI byte
						else index ++;
						nb_MIDI_bytes--;

						break;
					}

					case 0xE0 :														// Pitch Bend message
					{
						state = 40;													// Next state is 40

						// printf ("PB event\n");

						if (index == (MIDI_BUFFER_LENGTH-1)) index = 0;				// Move to next MIDI byte
						else index ++;
						nb_MIDI_bytes--;

						break;
					}


					default :														// Other type of message, move to next byte but stays in state 0
					{
						if (index == (MIDI_BUFFER_LENGTH-1)) index = 0;				// Move to next MIDI byte
						else index ++;
						nb_MIDI_bytes--;

						break;
					}
				}

				break;
			}


			// State 10 & 11 : Note ON command

			case 10 :
			{
				if (MIDI_byte>0x7F)												// If the following byte is not a note number
				{
					state = 0;													// Return to state 0 without moving to next byte
				}

				else
				{
					MIDI_note = MIDI_byte;										// Save MIDI note

					if (index == (MIDI_BUFFER_LENGTH-1)) index = 0;				// Move to next MIDI byte
					else index ++;
					nb_MIDI_bytes--;

					state = 11;													// Next state is 11
				}

				break;
			}

			case 11 :
			{
				MIDI_velocity = MIDI_byte;										// Save MIDI velocity

				if (index == (MIDI_BUFFER_LENGTH-1)) index = 0;					// Move to next MIDI byte
				else index ++;
				nb_MIDI_bytes--;

				state = 10;														// Next state is 10

				break;
			}

			// State 20 & 21 : Note OFF command

			case 20 :
			{
				if (MIDI_byte>0x7F)												// If the following byte is not a note number
				{
					state = 0;													// Return to state 0 without moving to next byte
				}

				else
				{
					MIDI_note = MIDI_byte;										// Save MIDI note

					if (index == (MIDI_BUFFER_LENGTH-1)) index = 0;				// Move to next MIDI byte
					else index ++;
					nb_MIDI_bytes--;

					state = 21;													// Next state is 21
				}

				break;
			}

			case 21 :
			{
				MIDI_velocity = MIDI_byte;										// Save MIDI velocity

				if (index == (MIDI_BUFFER_LENGTH-1)) index = 0;					// Move to next MIDI byte
				else index ++;
				nb_MIDI_bytes--;

				state = 20;														// Next state is 20

				printf ("Note OFF : %d %d\n", MIDI_note, MIDI_velocity);
				note_list = delete_note(note_list, MIDI_note);

				break;
			}


			// State 30 & 31 : CC command

			case 30 :
			{
				if (MIDI_byte>0x7F)												// If the following byte is not a CC number
				{
					state = 0;													// Return to state 0 without moving to next byte
				}

				else
				{
					MIDI_CC_number = MIDI_byte;									// Save MIDI CC number

					if (index == (MIDI_BUFFER_LENGTH-1)) index = 0;				// Move to next MIDI byte
					else index ++;
					nb_MIDI_bytes--;

					state = 31;													// Next state is 31
				}

				break;
			}

			case 31 :
			{
				MIDI_CC_value = MIDI_byte;										// Save MIDI velocity

				if (index == (MIDI_BUFFER_LENGTH-1)) index = 0;					// Move to next MIDI byte
				else index ++;
				nb_MIDI_bytes--;

				state = 30;														// Next state is 30

				printf ("CC : %d %d\n", MIDI_CC_number, MIDI_CC_value);
				ChangeParam(MIDI_CC_number, MIDI_CC_value);

				break;
			}



			// State 40 & 41 : Pitch Bend message

			case 40 :
			{
				if (MIDI_byte > 0x7F)												// If following byte is note a PB value
				{
					state = 0;													// Return to state 0
				}

				else
				{
					MIDI_PB_byte1 = MIDI_byte;									// Save MIDI CC number

					if (index == (MIDI_BUFFER_LENGTH-1)) index = 0;				// Move to next MIDI byte
					else index ++;
					nb_MIDI_bytes--;

					state = 41;													// Next state is 41
				}

				break;
			}

			case 41 :
			{
				MIDI_PB_byte2 = MIDI_byte;										// Save MIDI velocity

				if (index == (MIDI_BUFFER_LENGTH-1)) index = 0;					// Move to next MIDI byte
				else index ++;
				nb_MIDI_bytes--;

				PB_wheel = (uint8_t) MIDI_PB_byte2;
				PB_wheel <<=7;
				PB_wheel |= (uint8_t) MIDI_PB_byte1;

				// printf ("PB : %x\n", PB_wheel);

				params.bend = params.pitch * 2.0f * ( (float_t)PB_wheel - 8192.0f) / (4096.0f * 12.0f);

				state = 40;														// Next state is 00

				break;
			}

		}
	}

}
void UARTx_CharReception_Callback(void)
{
 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
/* Read Received character. RXNE flag is cleared by reading of RDR register */
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
