
STM_Led_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033a8  080033a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000130  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bffd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f18  00000000  00000000  0002c039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  0002df58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000988  00000000  00000000  0002e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bd2  00000000  00000000  0002f338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e075  00000000  00000000  00051f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1099  00000000  00000000  0005ff7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00131018  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029ec  00000000  00000000  0013106c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003368 	.word	0x08003368

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003368 	.word	0x08003368

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fb92 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f80c 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f92c 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 80004f4:	f000 f90a 	bl	800070c <MX_DMA_Init>
  MX_I2S2_Init();
 80004f8:	f000 f8da 	bl	80006b0 <MX_I2S2_Init>
  MX_I2C1_Init();
 80004fc:	f000 f898 	bl	8000630 <MX_I2C1_Init>
  MX_DAC_Init();
 8000500:	f000 f86c 	bl	80005dc <MX_DAC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x20>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 ff1e 	bl	8003358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000578:	2304      	movs	r3, #4
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800057c:	23a8      	movs	r3, #168	; 0xa8
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000584:	2304      	movs	r3, #4
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f002 f843 	bl	8002618 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 f95a 	bl	8000850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2105      	movs	r1, #5
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 faa4 	bl	8002b08 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 f943 	bl	8000850 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_DAC_Init+0x4c>)
 80005ec:	4a0f      	ldr	r2, [pc, #60]	; (800062c <MX_DAC_Init+0x50>)
 80005ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <MX_DAC_Init+0x4c>)
 80005f2:	f000 fc90 	bl	8000f16 <HAL_DAC_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80005fc:	f000 f928 	bl	8000850 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000600:	2300      	movs	r3, #0
 8000602:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <MX_DAC_Init+0x4c>)
 8000610:	f000 fca3 	bl	8000f5a <HAL_DAC_ConfigChannel>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800061a:	f000 f919 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000007c 	.word	0x2000007c
 800062c:	40007400 	.word	0x40007400

08000630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <MX_I2C1_Init+0x78>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_I2C1_Init+0x74>)
 800063c:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <MX_I2C1_Init+0x7c>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_I2C1_Init+0x74>)
 800064e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2C1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_I2C1_Init+0x74>)
 800066e:	f001 f973 	bl	8001958 <HAL_I2C_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 f8ea 	bl	8000850 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800067c:	2100      	movs	r1, #0
 800067e:	4809      	ldr	r0, [pc, #36]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000680:	f001 faae 	bl	8001be0 <HAL_I2CEx_ConfigAnalogFilter>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800068a:	f000 f8e1 	bl	8000850 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800068e:	2100      	movs	r1, #0
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000692:	f001 fae1 	bl	8001c58 <HAL_I2CEx_ConfigDigitalFilter>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800069c:	f000 f8d8 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_I2S2_Init+0x54>)
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <MX_I2S2_Init+0x58>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_I2S2_Init+0x54>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_I2S2_Init+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_I2S2_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_I2S2_Init+0x54>)
 80006d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d4:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_I2S2_Init+0x54>)
 80006d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006dc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_I2S2_Init+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_I2S2_Init+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_I2S2_Init+0x54>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_I2S2_Init+0x54>)
 80006f2:	f001 faf1 	bl	8001cd8 <HAL_I2S_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80006fc:	f000 f8a8 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000f0 	.word	0x200000f0
 8000708:	40003800 	.word	0x40003800

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_DMA_Init+0x3c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <MX_DMA_Init+0x3c>)
 800071c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_DMA_Init+0x3c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	200f      	movs	r0, #15
 8000734:	f000 fbb9 	bl	8000eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000738:	200f      	movs	r0, #15
 800073a:	f000 fbd2 	bl	8000ee2 <HAL_NVIC_EnableIRQ>

}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b37      	ldr	r3, [pc, #220]	; (8000844 <MX_GPIO_Init+0xf8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a36      	ldr	r2, [pc, #216]	; (8000844 <MX_GPIO_Init+0xf8>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <MX_GPIO_Init+0xf8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b30      	ldr	r3, [pc, #192]	; (8000844 <MX_GPIO_Init+0xf8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a2f      	ldr	r2, [pc, #188]	; (8000844 <MX_GPIO_Init+0xf8>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <MX_GPIO_Init+0xf8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b29      	ldr	r3, [pc, #164]	; (8000844 <MX_GPIO_Init+0xf8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a28      	ldr	r2, [pc, #160]	; (8000844 <MX_GPIO_Init+0xf8>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0xf8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b22      	ldr	r3, [pc, #136]	; (8000844 <MX_GPIO_Init+0xf8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a21      	ldr	r2, [pc, #132]	; (8000844 <MX_GPIO_Init+0xf8>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_GPIO_Init+0xf8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_GPIO_Init+0xf8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <MX_GPIO_Init+0xf8>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_GPIO_Init+0xf8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2101      	movs	r1, #1
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <MX_GPIO_Init+0xfc>)
 80007f4:	f001 f896 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_RESET_GPIO_Port, CODEC_RESET_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2110      	movs	r1, #16
 80007fc:	4813      	ldr	r0, [pc, #76]	; (800084c <MX_GPIO_Init+0x100>)
 80007fe:	f001 f891 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000802:	2301      	movs	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <MX_GPIO_Init+0xfc>)
 800081a:	f000 fed7 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_RESET_Pin */
  GPIO_InitStruct.Pin = CODEC_RESET_Pin;
 800081e:	2310      	movs	r3, #16
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_RESET_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_GPIO_Init+0x100>)
 8000836:	f000 fec9 	bl	80015cc <HAL_GPIO_Init>

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40020400 	.word	0x40020400
 800084c:	40020c00 	.word	0x40020c00

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <HAL_MspInit+0x4c>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <HAL_MspInit+0x4c>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a17      	ldr	r2, [pc, #92]	; (8000928 <HAL_DAC_MspInit+0x7c>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d127      	bne.n	800091e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <HAL_DAC_MspInit+0x80>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <HAL_DAC_MspInit+0x80>)
 80008d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <HAL_DAC_MspInit+0x80>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_DAC_MspInit+0x80>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_DAC_MspInit+0x80>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_DAC_MspInit+0x80>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000906:	2310      	movs	r3, #16
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090a:	2303      	movs	r3, #3
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <HAL_DAC_MspInit+0x84>)
 800091a:	f000 fe57 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	; 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40007400 	.word	0x40007400
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000

08000934 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <HAL_I2C_MspInit+0x84>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d12c      	bne.n	80009b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_I2C_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <HAL_I2C_MspInit+0x88>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_I2C_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000972:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000978:	2312      	movs	r3, #18
 800097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000984:	2304      	movs	r3, #4
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <HAL_I2C_MspInit+0x8c>)
 8000990:	f000 fe1c 	bl	80015cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_I2C_MspInit+0x88>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_I2C_MspInit+0x88>)
 800099e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_I2C_MspInit+0x88>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40005400 	.word	0x40005400
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400

080009c4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b096      	sub	sp, #88	; 0x58
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2230      	movs	r2, #48	; 0x30
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 fcb7 	bl	8003358 <memset>
  if(hi2s->Instance==SPI2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a4a      	ldr	r2, [pc, #296]	; (8000b18 <HAL_I2S_MspInit+0x154>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	f040 808c 	bne.w	8000b0e <HAL_I2S_MspInit+0x14a>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fa66 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000a12:	f7ff ff1d 	bl	8000850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b40      	ldr	r3, [pc, #256]	; (8000b1c <HAL_I2S_MspInit+0x158>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a3f      	ldr	r2, [pc, #252]	; (8000b1c <HAL_I2S_MspInit+0x158>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b3d      	ldr	r3, [pc, #244]	; (8000b1c <HAL_I2S_MspInit+0x158>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <HAL_I2S_MspInit+0x158>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a38      	ldr	r2, [pc, #224]	; (8000b1c <HAL_I2S_MspInit+0x158>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b36      	ldr	r3, [pc, #216]	; (8000b1c <HAL_I2S_MspInit+0x158>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <HAL_I2S_MspInit+0x158>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a31      	ldr	r2, [pc, #196]	; (8000b1c <HAL_I2S_MspInit+0x158>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <HAL_I2S_MspInit+0x158>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000a6a:	2348      	movs	r3, #72	; 0x48
 8000a6c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a82:	4619      	mov	r1, r3
 8000a84:	4826      	ldr	r0, [pc, #152]	; (8000b20 <HAL_I2S_MspInit+0x15c>)
 8000a86:	f000 fda1 	bl	80015cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a8e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a9c:	2305      	movs	r3, #5
 8000a9e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481f      	ldr	r0, [pc, #124]	; (8000b24 <HAL_I2S_MspInit+0x160>)
 8000aa8:	f000 fd90 	bl	80015cc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <HAL_I2S_MspInit+0x164>)
 8000aae:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <HAL_I2S_MspInit+0x168>)
 8000ab0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <HAL_I2S_MspInit+0x164>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <HAL_I2S_MspInit+0x164>)
 8000aba:	2240      	movs	r2, #64	; 0x40
 8000abc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <HAL_I2S_MspInit+0x164>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <HAL_I2S_MspInit+0x164>)
 8000ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aca:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_I2S_MspInit+0x164>)
 8000ace:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ad2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_I2S_MspInit+0x164>)
 8000ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ada:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_I2S_MspInit+0x164>)
 8000ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_I2S_MspInit+0x164>)
 8000ae6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aea:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_I2S_MspInit+0x164>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000af2:	480d      	ldr	r0, [pc, #52]	; (8000b28 <HAL_I2S_MspInit+0x164>)
 8000af4:	f000 fa80 	bl	8000ff8 <HAL_DMA_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8000afe:	f7ff fea7 	bl	8000850 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_I2S_MspInit+0x164>)
 8000b06:	639a      	str	r2, [r3, #56]	; 0x38
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_I2S_MspInit+0x164>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3758      	adds	r7, #88	; 0x58
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40003800 	.word	0x40003800
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020800 	.word	0x40020800
 8000b24:	40020400 	.word	0x40020400
 8000b28:	20000090 	.word	0x20000090
 8000b2c:	40026070 	.word	0x40026070

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7c:	f000 f89a 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <DMA1_Stream4_IRQHandler+0x10>)
 8000b8a:	f000 fae3 	bl	8001154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000090 	.word	0x20000090

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd8:	4c0b      	ldr	r4, [pc, #44]	; (8000c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000be6:	f7ff ffd7 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f002 fb91 	bl	8003310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fc79 	bl	80004e4 <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bf4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c00:	080033b0 	.word	0x080033b0
  ldr r2, =_sbss
 8000c04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c08:	2000013c 	.word	0x2000013c

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <HAL_Init+0x40>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_Init+0x40>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x40>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f92b 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	200f      	movs	r0, #15
 8000c40:	f000 f808 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fe0a 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x54>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x58>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f943 	bl	8000efe <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 f90b 	bl	8000eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <HAL_InitTick+0x5c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000138 	.word	0x20000138

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000138 	.word	0x20000138

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db0b      	blt.n	8000d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	4907      	ldr	r1, [pc, #28]	; (8000d90 <__NVIC_EnableIRQ+0x38>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	db0a      	blt.n	8000dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <__NVIC_SetPriority+0x4c>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dbc:	e00a      	b.n	8000dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4908      	ldr	r1, [pc, #32]	; (8000de4 <__NVIC_SetPriority+0x50>)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	761a      	strb	r2, [r3, #24]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f1c3 0307 	rsb	r3, r3, #7
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf28      	it	cs
 8000e06:	2304      	movcs	r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2b06      	cmp	r3, #6
 8000e10:	d902      	bls.n	8000e18 <NVIC_EncodePriority+0x30>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3b03      	subs	r3, #3
 8000e16:	e000      	b.n	8000e1a <NVIC_EncodePriority+0x32>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43da      	mvns	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e30:	f04f 31ff 	mov.w	r1, #4294967295
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43d9      	mvns	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	4313      	orrs	r3, r2
         );
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3724      	adds	r7, #36	; 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e60:	d301      	bcc.n	8000e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00f      	b.n	8000e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <SysTick_Config+0x40>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f7ff ff8e 	bl	8000d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SysTick_Config+0x40>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SysTick_Config+0x40>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000e010 	.word	0xe000e010

08000e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff29 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff3e 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff8e 	bl	8000de8 <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5d 	bl	8000d94 <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff31 	bl	8000d58 <__NVIC_EnableIRQ>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffa2 	bl	8000e50 <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e014      	b.n	8000f52 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	791b      	ldrb	r3, [r3, #4]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d105      	bne.n	8000f3e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fcb7 	bl	80008ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2202      	movs	r2, #2
 8000f42:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b087      	sub	sp, #28
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	795b      	ldrb	r3, [r3, #5]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d101      	bne.n	8000f72 <HAL_DAC_ConfigChannel+0x18>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e03c      	b.n	8000fec <HAL_DAC_ConfigChannel+0x92>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2201      	movs	r2, #1
 8000f76:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	22c0      	movs	r2, #192	; 0xc0
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43da      	mvns	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	400a      	ands	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff fe6a 	bl	8000cdc <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e099      	b.n	8001148 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2202      	movs	r2, #2
 8001018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0201 	bic.w	r2, r2, #1
 8001032:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001034:	e00f      	b.n	8001056 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001036:	f7ff fe51 	bl	8000cdc <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b05      	cmp	r3, #5
 8001042:	d908      	bls.n	8001056 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2220      	movs	r2, #32
 8001048:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2203      	movs	r2, #3
 800104e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e078      	b.n	8001148 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1e8      	bne.n	8001036 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	4b38      	ldr	r3, [pc, #224]	; (8001150 <HAL_DMA_Init+0x158>)
 8001070:	4013      	ands	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001082:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d107      	bne.n	80010c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4313      	orrs	r3, r2
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4313      	orrs	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f023 0307 	bic.w	r3, r3, #7
 80010d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	4313      	orrs	r3, r2
 80010e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d117      	bne.n	800111a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00e      	beq.n	800111a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f9e9 	bl	80014d4 <DMA_CheckFifoParam>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2240      	movs	r2, #64	; 0x40
 800110c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001116:	2301      	movs	r3, #1
 8001118:	e016      	b.n	8001148 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f9a0 	bl	8001468 <DMA_CalcBaseAndBitshift>
 8001128:	4603      	mov	r3, r0
 800112a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001130:	223f      	movs	r2, #63	; 0x3f
 8001132:	409a      	lsls	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	f010803f 	.word	0xf010803f

08001154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001160:	4b92      	ldr	r3, [pc, #584]	; (80013ac <HAL_DMA_IRQHandler+0x258>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a92      	ldr	r2, [pc, #584]	; (80013b0 <HAL_DMA_IRQHandler+0x25c>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	0a9b      	lsrs	r3, r3, #10
 800116c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117e:	2208      	movs	r2, #8
 8001180:	409a      	lsls	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4013      	ands	r3, r2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d01a      	beq.n	80011c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d013      	beq.n	80011c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0204 	bic.w	r2, r2, #4
 80011a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ac:	2208      	movs	r2, #8
 80011ae:	409a      	lsls	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c4:	2201      	movs	r2, #1
 80011c6:	409a      	lsls	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d012      	beq.n	80011f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e2:	2201      	movs	r2, #1
 80011e4:	409a      	lsls	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ee:	f043 0202 	orr.w	r2, r3, #2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fa:	2204      	movs	r2, #4
 80011fc:	409a      	lsls	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4013      	ands	r3, r2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d012      	beq.n	800122c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00b      	beq.n	800122c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001218:	2204      	movs	r2, #4
 800121a:	409a      	lsls	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001224:	f043 0204 	orr.w	r2, r3, #4
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001230:	2210      	movs	r2, #16
 8001232:	409a      	lsls	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d043      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d03c      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124e:	2210      	movs	r2, #16
 8001250:	409a      	lsls	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d018      	beq.n	8001296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d108      	bne.n	8001284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	2b00      	cmp	r3, #0
 8001278:	d024      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	4798      	blx	r3
 8001282:	e01f      	b.n	80012c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001288:	2b00      	cmp	r3, #0
 800128a:	d01b      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	4798      	blx	r3
 8001294:	e016      	b.n	80012c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d107      	bne.n	80012b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0208 	bic.w	r2, r2, #8
 80012b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c8:	2220      	movs	r2, #32
 80012ca:	409a      	lsls	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 808e 	beq.w	80013f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 8086 	beq.w	80013f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ea:	2220      	movs	r2, #32
 80012ec:	409a      	lsls	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b05      	cmp	r3, #5
 80012fc:	d136      	bne.n	800136c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0216 	bic.w	r2, r2, #22
 800130c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	695a      	ldr	r2, [r3, #20]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800131c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	2b00      	cmp	r3, #0
 8001324:	d103      	bne.n	800132e <HAL_DMA_IRQHandler+0x1da>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0208 	bic.w	r2, r2, #8
 800133c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001342:	223f      	movs	r2, #63	; 0x3f
 8001344:	409a      	lsls	r2, r3
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800135e:	2b00      	cmp	r3, #0
 8001360:	d07d      	beq.n	800145e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	4798      	blx	r3
        }
        return;
 800136a:	e078      	b.n	800145e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d01c      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d108      	bne.n	800139a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	2b00      	cmp	r3, #0
 800138e:	d030      	beq.n	80013f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	4798      	blx	r3
 8001398:	e02b      	b.n	80013f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d027      	beq.n	80013f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	4798      	blx	r3
 80013aa:	e022      	b.n	80013f2 <HAL_DMA_IRQHandler+0x29e>
 80013ac:	20000000 	.word	0x20000000
 80013b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10f      	bne.n	80013e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0210 	bic.w	r2, r2, #16
 80013d0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d032      	beq.n	8001460 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d022      	beq.n	800144c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2205      	movs	r2, #5
 800140a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0201 	bic.w	r2, r2, #1
 800141c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	3301      	adds	r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	429a      	cmp	r2, r3
 8001428:	d307      	bcc.n	800143a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f2      	bne.n	800141e <HAL_DMA_IRQHandler+0x2ca>
 8001438:	e000      	b.n	800143c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800143a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	4798      	blx	r3
 800145c:	e000      	b.n	8001460 <HAL_DMA_IRQHandler+0x30c>
        return;
 800145e:	bf00      	nop
    }
  }
}
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop

08001468 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	3b10      	subs	r3, #16
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <DMA_CalcBaseAndBitshift+0x64>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001482:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <DMA_CalcBaseAndBitshift+0x68>)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d909      	bls.n	80014aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800149e:	f023 0303 	bic.w	r3, r3, #3
 80014a2:	1d1a      	adds	r2, r3, #4
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	659a      	str	r2, [r3, #88]	; 0x58
 80014a8:	e007      	b.n	80014ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	aaaaaaab 	.word	0xaaaaaaab
 80014d0:	08003398 	.word	0x08003398

080014d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d11f      	bne.n	800152e <DMA_CheckFifoParam+0x5a>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d856      	bhi.n	80015a2 <DMA_CheckFifoParam+0xce>
 80014f4:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <DMA_CheckFifoParam+0x28>)
 80014f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fa:	bf00      	nop
 80014fc:	0800150d 	.word	0x0800150d
 8001500:	0800151f 	.word	0x0800151f
 8001504:	0800150d 	.word	0x0800150d
 8001508:	080015a3 	.word	0x080015a3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d046      	beq.n	80015a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800151c:	e043      	b.n	80015a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001526:	d140      	bne.n	80015aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800152c:	e03d      	b.n	80015aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001536:	d121      	bne.n	800157c <DMA_CheckFifoParam+0xa8>
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d837      	bhi.n	80015ae <DMA_CheckFifoParam+0xda>
 800153e:	a201      	add	r2, pc, #4	; (adr r2, 8001544 <DMA_CheckFifoParam+0x70>)
 8001540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001544:	08001555 	.word	0x08001555
 8001548:	0800155b 	.word	0x0800155b
 800154c:	08001555 	.word	0x08001555
 8001550:	0800156d 	.word	0x0800156d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
      break;
 8001558:	e030      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d025      	beq.n	80015b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800156a:	e022      	b.n	80015b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001574:	d11f      	bne.n	80015b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800157a:	e01c      	b.n	80015b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d903      	bls.n	800158a <DMA_CheckFifoParam+0xb6>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d003      	beq.n	8001590 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001588:	e018      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
      break;
 800158e:	e015      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00e      	beq.n	80015ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
      break;
 80015a0:	e00b      	b.n	80015ba <DMA_CheckFifoParam+0xe6>
      break;
 80015a2:	bf00      	nop
 80015a4:	e00a      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015a6:	bf00      	nop
 80015a8:	e008      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015aa:	bf00      	nop
 80015ac:	e006      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015ae:	bf00      	nop
 80015b0:	e004      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015b2:	bf00      	nop
 80015b4:	e002      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;   
 80015b6:	bf00      	nop
 80015b8:	e000      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015ba:	bf00      	nop
    }
  } 
  
  return status; 
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	e177      	b.n	80018d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	429a      	cmp	r2, r3
 8001602:	f040 8166 	bne.w	80018d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d005      	beq.n	800161e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161a:	2b02      	cmp	r3, #2
 800161c:	d130      	bne.n	8001680 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f003 0201 	and.w	r2, r3, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b03      	cmp	r3, #3
 800168a:	d017      	beq.n	80016bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d123      	bne.n	8001710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	08da      	lsrs	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3208      	adds	r2, #8
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0203 	and.w	r2, r3, #3
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80c0 	beq.w	80018d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b66      	ldr	r3, [pc, #408]	; (80018f0 <HAL_GPIO_Init+0x324>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a65      	ldr	r2, [pc, #404]	; (80018f0 <HAL_GPIO_Init+0x324>)
 800175c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b63      	ldr	r3, [pc, #396]	; (80018f0 <HAL_GPIO_Init+0x324>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176e:	4a61      	ldr	r2, [pc, #388]	; (80018f4 <HAL_GPIO_Init+0x328>)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	220f      	movs	r2, #15
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_GPIO_Init+0x32c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d037      	beq.n	800180a <HAL_GPIO_Init+0x23e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a57      	ldr	r2, [pc, #348]	; (80018fc <HAL_GPIO_Init+0x330>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d031      	beq.n	8001806 <HAL_GPIO_Init+0x23a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a56      	ldr	r2, [pc, #344]	; (8001900 <HAL_GPIO_Init+0x334>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d02b      	beq.n	8001802 <HAL_GPIO_Init+0x236>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a55      	ldr	r2, [pc, #340]	; (8001904 <HAL_GPIO_Init+0x338>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d025      	beq.n	80017fe <HAL_GPIO_Init+0x232>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a54      	ldr	r2, [pc, #336]	; (8001908 <HAL_GPIO_Init+0x33c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d01f      	beq.n	80017fa <HAL_GPIO_Init+0x22e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a53      	ldr	r2, [pc, #332]	; (800190c <HAL_GPIO_Init+0x340>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d019      	beq.n	80017f6 <HAL_GPIO_Init+0x22a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a52      	ldr	r2, [pc, #328]	; (8001910 <HAL_GPIO_Init+0x344>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0x226>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a51      	ldr	r2, [pc, #324]	; (8001914 <HAL_GPIO_Init+0x348>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00d      	beq.n	80017ee <HAL_GPIO_Init+0x222>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a50      	ldr	r2, [pc, #320]	; (8001918 <HAL_GPIO_Init+0x34c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d007      	beq.n	80017ea <HAL_GPIO_Init+0x21e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4f      	ldr	r2, [pc, #316]	; (800191c <HAL_GPIO_Init+0x350>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d101      	bne.n	80017e6 <HAL_GPIO_Init+0x21a>
 80017e2:	2309      	movs	r3, #9
 80017e4:	e012      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017e6:	230a      	movs	r3, #10
 80017e8:	e010      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017ea:	2308      	movs	r3, #8
 80017ec:	e00e      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017ee:	2307      	movs	r3, #7
 80017f0:	e00c      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017f2:	2306      	movs	r3, #6
 80017f4:	e00a      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017f6:	2305      	movs	r3, #5
 80017f8:	e008      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017fa:	2304      	movs	r3, #4
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017fe:	2303      	movs	r3, #3
 8001800:	e004      	b.n	800180c <HAL_GPIO_Init+0x240>
 8001802:	2302      	movs	r3, #2
 8001804:	e002      	b.n	800180c <HAL_GPIO_Init+0x240>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x240>
 800180a:	2300      	movs	r3, #0
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	f002 0203 	and.w	r2, r2, #3
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	4093      	lsls	r3, r2
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800181c:	4935      	ldr	r1, [pc, #212]	; (80018f4 <HAL_GPIO_Init+0x328>)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182a:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <HAL_GPIO_Init+0x354>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800184e:	4a34      	ldr	r2, [pc, #208]	; (8001920 <HAL_GPIO_Init+0x354>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001854:	4b32      	ldr	r3, [pc, #200]	; (8001920 <HAL_GPIO_Init+0x354>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001878:	4a29      	ldr	r2, [pc, #164]	; (8001920 <HAL_GPIO_Init+0x354>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_GPIO_Init+0x354>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a2:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <HAL_GPIO_Init+0x354>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_GPIO_Init+0x354>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <HAL_GPIO_Init+0x354>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b0f      	cmp	r3, #15
 80018dc:	f67f ae84 	bls.w	80015e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40013800 	.word	0x40013800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020800 	.word	0x40020800
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40021000 	.word	0x40021000
 800190c:	40021400 	.word	0x40021400
 8001910:	40021800 	.word	0x40021800
 8001914:	40021c00 	.word	0x40021c00
 8001918:	40022000 	.word	0x40022000
 800191c:	40022400 	.word	0x40022400
 8001920:	40013c00 	.word	0x40013c00

08001924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
 8001930:	4613      	mov	r3, r2
 8001932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001934:	787b      	ldrb	r3, [r7, #1]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001940:	e003      	b.n	800194a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	041a      	lsls	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	619a      	str	r2, [r3, #24]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e12b      	b.n	8001bc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d106      	bne.n	8001984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7fe ffd8 	bl	8000934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2224      	movs	r2, #36	; 0x24
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019bc:	f001 fa78 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 80019c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a81      	ldr	r2, [pc, #516]	; (8001bcc <HAL_I2C_Init+0x274>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d807      	bhi.n	80019dc <HAL_I2C_Init+0x84>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4a80      	ldr	r2, [pc, #512]	; (8001bd0 <HAL_I2C_Init+0x278>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	bf94      	ite	ls
 80019d4:	2301      	movls	r3, #1
 80019d6:	2300      	movhi	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e006      	b.n	80019ea <HAL_I2C_Init+0x92>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4a7d      	ldr	r2, [pc, #500]	; (8001bd4 <HAL_I2C_Init+0x27c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	bf94      	ite	ls
 80019e4:	2301      	movls	r3, #1
 80019e6:	2300      	movhi	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0e7      	b.n	8001bc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4a78      	ldr	r2, [pc, #480]	; (8001bd8 <HAL_I2C_Init+0x280>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0c9b      	lsrs	r3, r3, #18
 80019fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4a6a      	ldr	r2, [pc, #424]	; (8001bcc <HAL_I2C_Init+0x274>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d802      	bhi.n	8001a2c <HAL_I2C_Init+0xd4>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	e009      	b.n	8001a40 <HAL_I2C_Init+0xe8>
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a32:	fb02 f303 	mul.w	r3, r2, r3
 8001a36:	4a69      	ldr	r2, [pc, #420]	; (8001bdc <HAL_I2C_Init+0x284>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	099b      	lsrs	r3, r3, #6
 8001a3e:	3301      	adds	r3, #1
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	430b      	orrs	r3, r1
 8001a46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	495c      	ldr	r1, [pc, #368]	; (8001bcc <HAL_I2C_Init+0x274>)
 8001a5c:	428b      	cmp	r3, r1
 8001a5e:	d819      	bhi.n	8001a94 <HAL_I2C_Init+0x13c>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1e59      	subs	r1, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a6e:	1c59      	adds	r1, r3, #1
 8001a70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a74:	400b      	ands	r3, r1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00a      	beq.n	8001a90 <HAL_I2C_Init+0x138>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1e59      	subs	r1, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a88:	3301      	adds	r3, #1
 8001a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a8e:	e051      	b.n	8001b34 <HAL_I2C_Init+0x1dc>
 8001a90:	2304      	movs	r3, #4
 8001a92:	e04f      	b.n	8001b34 <HAL_I2C_Init+0x1dc>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d111      	bne.n	8001ac0 <HAL_I2C_Init+0x168>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1e58      	subs	r0, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	440b      	add	r3, r1
 8001aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	e012      	b.n	8001ae6 <HAL_I2C_Init+0x18e>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1e58      	subs	r0, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	0099      	lsls	r1, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf0c      	ite	eq
 8001ae0:	2301      	moveq	r3, #1
 8001ae2:	2300      	movne	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_I2C_Init+0x196>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e022      	b.n	8001b34 <HAL_I2C_Init+0x1dc>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10e      	bne.n	8001b14 <HAL_I2C_Init+0x1bc>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1e58      	subs	r0, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6859      	ldr	r1, [r3, #4]
 8001afe:	460b      	mov	r3, r1
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	440b      	add	r3, r1
 8001b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b12:	e00f      	b.n	8001b34 <HAL_I2C_Init+0x1dc>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1e58      	subs	r0, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	0099      	lsls	r1, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	6809      	ldr	r1, [r1, #0]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69da      	ldr	r2, [r3, #28]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6911      	ldr	r1, [r2, #16]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68d2      	ldr	r2, [r2, #12]
 8001b6e:	4311      	orrs	r1, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	430b      	orrs	r3, r1
 8001b76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	000186a0 	.word	0x000186a0
 8001bd0:	001e847f 	.word	0x001e847f
 8001bd4:	003d08ff 	.word	0x003d08ff
 8001bd8:	431bde83 	.word	0x431bde83
 8001bdc:	10624dd3 	.word	0x10624dd3

08001be0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b20      	cmp	r3, #32
 8001bf4:	d129      	bne.n	8001c4a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2224      	movs	r2, #36	; 0x24
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0210 	bic.w	r2, r2, #16
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2220      	movs	r2, #32
 8001c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
  }
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	d12a      	bne.n	8001cc8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2224      	movs	r2, #36	; 0x24
 8001c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001c92:	89fb      	ldrh	r3, [r7, #14]
 8001c94:	f023 030f 	bic.w	r3, r3, #15
 8001c98:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	89fa      	ldrh	r2, [r7, #14]
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e000      	b.n	8001cca <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8001cc8:	2302      	movs	r3, #2
  }
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e128      	b.n	8001f3c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a90      	ldr	r2, [pc, #576]	; (8001f44 <HAL_I2S_Init+0x26c>)
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7fe fe5d 	bl	80009c4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d20:	f023 030f 	bic.w	r3, r3, #15
 8001d24:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d060      	beq.n	8001df8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001d3e:	2310      	movs	r3, #16
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e001      	b.n	8001d48 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001d44:	2320      	movs	r3, #32
 8001d46:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	d802      	bhi.n	8001d56 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d56:	2001      	movs	r0, #1
 8001d58:	f001 fa7c 	bl	8003254 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d5c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d66:	d125      	bne.n	8001db4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d010      	beq.n	8001d92 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8c:	3305      	adds	r3, #5
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	e01f      	b.n	8001dd2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	461a      	mov	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	3305      	adds	r3, #5
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	e00e      	b.n	8001dd2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	3305      	adds	r3, #5
 8001dd0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4a5c      	ldr	r2, [pc, #368]	; (8001f48 <HAL_I2S_Init+0x270>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	08db      	lsrs	r3, r3, #3
 8001ddc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	085b      	lsrs	r3, r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	e003      	b.n	8001e00 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d902      	bls.n	8001e0c <HAL_I2S_Init+0x134>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	2bff      	cmp	r3, #255	; 0xff
 8001e0a:	d907      	bls.n	8001e1c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	f043 0210 	orr.w	r2, r3, #16
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e08f      	b.n	8001f3c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	ea42 0103 	orr.w	r1, r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e3a:	f023 030f 	bic.w	r3, r3, #15
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6851      	ldr	r1, [r2, #4]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6892      	ldr	r2, [r2, #8]
 8001e46:	4311      	orrs	r1, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68d2      	ldr	r2, [r2, #12]
 8001e4c:	4311      	orrs	r1, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6992      	ldr	r2, [r2, #24]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d161      	bne.n	8001f2c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a38      	ldr	r2, [pc, #224]	; (8001f4c <HAL_I2S_Init+0x274>)
 8001e6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a37      	ldr	r2, [pc, #220]	; (8001f50 <HAL_I2S_Init+0x278>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d101      	bne.n	8001e7c <HAL_I2S_Init+0x1a4>
 8001e78:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_I2S_Init+0x27c>)
 8001e7a:	e001      	b.n	8001e80 <HAL_I2S_Init+0x1a8>
 8001e7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	4932      	ldr	r1, [pc, #200]	; (8001f50 <HAL_I2S_Init+0x278>)
 8001e88:	428a      	cmp	r2, r1
 8001e8a:	d101      	bne.n	8001e90 <HAL_I2S_Init+0x1b8>
 8001e8c:	4a31      	ldr	r2, [pc, #196]	; (8001f54 <HAL_I2S_Init+0x27c>)
 8001e8e:	e001      	b.n	8001e94 <HAL_I2S_Init+0x1bc>
 8001e90:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001e94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e98:	f023 030f 	bic.w	r3, r3, #15
 8001e9c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2b      	ldr	r2, [pc, #172]	; (8001f50 <HAL_I2S_Init+0x278>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d101      	bne.n	8001eac <HAL_I2S_Init+0x1d4>
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <HAL_I2S_Init+0x27c>)
 8001eaa:	e001      	b.n	8001eb0 <HAL_I2S_Init+0x1d8>
 8001eac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a25      	ldr	r2, [pc, #148]	; (8001f50 <HAL_I2S_Init+0x278>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_I2S_Init+0x1ea>
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_I2S_Init+0x27c>)
 8001ec0:	e001      	b.n	8001ec6 <HAL_I2S_Init+0x1ee>
 8001ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ed2:	d003      	beq.n	8001edc <HAL_I2S_Init+0x204>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d103      	bne.n	8001ee4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	e001      	b.n	8001ee8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f06:	4313      	orrs	r3, r2
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	897b      	ldrh	r3, [r7, #10]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f14:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <HAL_I2S_Init+0x278>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_I2S_Init+0x24c>
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_I2S_Init+0x27c>)
 8001f22:	e001      	b.n	8001f28 <HAL_I2S_Init+0x250>
 8001f24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f28:	897a      	ldrh	r2, [r7, #10]
 8001f2a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3720      	adds	r7, #32
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	0800204f 	.word	0x0800204f
 8001f48:	cccccccd 	.word	0xcccccccd
 8001f4c:	08002165 	.word	0x08002165
 8001f50:	40003800 	.word	0x40003800
 8001f54:	40003400 	.word	0x40003400

08001f58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	881a      	ldrh	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	1c9a      	adds	r2, r3, #2
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10e      	bne.n	8001fe8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fd8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ffb8 	bl	8001f58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	b292      	uxth	r2, r2
 8002004:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	1c9a      	adds	r2, r3, #2
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10e      	bne.n	8002046 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002036:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff93 	bl	8001f6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b04      	cmp	r3, #4
 8002068:	d13a      	bne.n	80020e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d109      	bne.n	8002088 <I2S_IRQHandler+0x3a>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	d102      	bne.n	8002088 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ffb4 	bl	8001ff0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208e:	2b40      	cmp	r3, #64	; 0x40
 8002090:	d126      	bne.n	80020e0 <I2S_IRQHandler+0x92>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b20      	cmp	r3, #32
 800209e:	d11f      	bne.n	80020e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f043 0202 	orr.w	r2, r3, #2
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ff50 	bl	8001f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d136      	bne.n	800215a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d109      	bne.n	800210a <I2S_IRQHandler+0xbc>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d102      	bne.n	800210a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff45 	bl	8001f94 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b08      	cmp	r3, #8
 8002112:	d122      	bne.n	800215a <I2S_IRQHandler+0x10c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b20      	cmp	r3, #32
 8002120:	d11b      	bne.n	800215a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002130:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214c:	f043 0204 	orr.w	r2, r3, #4
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff13 	bl	8001f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4aa2      	ldr	r2, [pc, #648]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800217e:	4ba2      	ldr	r3, [pc, #648]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002180:	e001      	b.n	8002186 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002182:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a9b      	ldr	r2, [pc, #620]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800219c:	4b9a      	ldr	r3, [pc, #616]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800219e:	e001      	b.n	80021a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80021a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b0:	d004      	beq.n	80021bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 8099 	bne.w	80022ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d107      	bne.n	80021d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f925 	bl	8002420 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d107      	bne.n	80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f9c8 	bl	8002580 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f6:	2b40      	cmp	r3, #64	; 0x40
 80021f8:	d13a      	bne.n	8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b00      	cmp	r3, #0
 8002202:	d035      	beq.n	8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a7e      	ldr	r2, [pc, #504]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800220e:	4b7e      	ldr	r3, [pc, #504]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002210:	e001      	b.n	8002216 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002212:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4979      	ldr	r1, [pc, #484]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800221e:	428b      	cmp	r3, r1
 8002220:	d101      	bne.n	8002226 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002222:	4b79      	ldr	r3, [pc, #484]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002224:	e001      	b.n	800222a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002226:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800222a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800222e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800223e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f043 0202 	orr.w	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff fe88 	bl	8001f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b08      	cmp	r3, #8
 8002278:	f040 80be 	bne.w	80023f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80b8 	beq.w	80023f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002296:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a59      	ldr	r2, [pc, #356]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80022a2:	4b59      	ldr	r3, [pc, #356]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80022a4:	e001      	b.n	80022aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80022a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4954      	ldr	r1, [pc, #336]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80022b2:	428b      	cmp	r3, r1
 80022b4:	d101      	bne.n	80022ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80022b6:	4b54      	ldr	r3, [pc, #336]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80022b8:	e001      	b.n	80022be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80022ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f043 0204 	orr.w	r2, r3, #4
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fe4a 	bl	8001f80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022ec:	e084      	b.n	80023f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d107      	bne.n	8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f8be 	bl	8002484 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f8fd 	bl	800251c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d12f      	bne.n	800238c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	2b00      	cmp	r3, #0
 8002334:	d02a      	beq.n	800238c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002344:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a2e      	ldr	r2, [pc, #184]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d101      	bne.n	8002354 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002350:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002352:	e001      	b.n	8002358 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002354:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4929      	ldr	r1, [pc, #164]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002360:	428b      	cmp	r3, r1
 8002362:	d101      	bne.n	8002368 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002366:	e001      	b.n	800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800236c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002370:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f043 0202 	orr.w	r2, r3, #2
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fdfa 	bl	8001f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b08      	cmp	r3, #8
 8002394:	d131      	bne.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d02c      	beq.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023ac:	e001      	b.n	80023b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80023ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4912      	ldr	r1, [pc, #72]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023ba:	428b      	cmp	r3, r1
 80023bc:	d101      	bne.n	80023c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80023be:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023c0:	e001      	b.n	80023c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80023c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023da:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	f043 0204 	orr.w	r2, r3, #4
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff fdc5 	bl	8001f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023f6:	e000      	b.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023f8:	bf00      	nop
}
 80023fa:	bf00      	nop
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40003800 	.word	0x40003800
 8002408:	40003400 	.word	0x40003400

0800240c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	1c99      	adds	r1, r3, #2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6251      	str	r1, [r2, #36]	; 0x24
 8002432:	881a      	ldrh	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d113      	bne.n	800247a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002460:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ffc9 	bl	800240c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	1c99      	adds	r1, r3, #2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6251      	str	r1, [r2, #36]	; 0x24
 8002496:	8819      	ldrh	r1, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <I2SEx_TxISR_I2SExt+0x90>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <I2SEx_TxISR_I2SExt+0x22>
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <I2SEx_TxISR_I2SExt+0x94>)
 80024a4:	e001      	b.n	80024aa <I2SEx_TxISR_I2SExt+0x26>
 80024a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024aa:	460a      	mov	r2, r1
 80024ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d121      	bne.n	800250a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <I2SEx_TxISR_I2SExt+0x90>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d101      	bne.n	80024d4 <I2SEx_TxISR_I2SExt+0x50>
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <I2SEx_TxISR_I2SExt+0x94>)
 80024d2:	e001      	b.n	80024d8 <I2SEx_TxISR_I2SExt+0x54>
 80024d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	490d      	ldr	r1, [pc, #52]	; (8002514 <I2SEx_TxISR_I2SExt+0x90>)
 80024e0:	428b      	cmp	r3, r1
 80024e2:	d101      	bne.n	80024e8 <I2SEx_TxISR_I2SExt+0x64>
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <I2SEx_TxISR_I2SExt+0x94>)
 80024e6:	e001      	b.n	80024ec <I2SEx_TxISR_I2SExt+0x68>
 80024e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d106      	bne.n	800250a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff81 	bl	800240c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40003800 	.word	0x40003800
 8002518:	40003400 	.word	0x40003400

0800251c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68d8      	ldr	r0, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	1c99      	adds	r1, r3, #2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002534:	b282      	uxth	r2, r0
 8002536:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d113      	bne.n	8002578 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800255e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ff4a 	bl	800240c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a20      	ldr	r2, [pc, #128]	; (8002610 <I2SEx_RxISR_I2SExt+0x90>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d101      	bne.n	8002596 <I2SEx_RxISR_I2SExt+0x16>
 8002592:	4b20      	ldr	r3, [pc, #128]	; (8002614 <I2SEx_RxISR_I2SExt+0x94>)
 8002594:	e001      	b.n	800259a <I2SEx_RxISR_I2SExt+0x1a>
 8002596:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800259a:	68d8      	ldr	r0, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	1c99      	adds	r1, r3, #2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80025a6:	b282      	uxth	r2, r0
 80025a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d121      	bne.n	8002606 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <I2SEx_RxISR_I2SExt+0x90>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d101      	bne.n	80025d0 <I2SEx_RxISR_I2SExt+0x50>
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <I2SEx_RxISR_I2SExt+0x94>)
 80025ce:	e001      	b.n	80025d4 <I2SEx_RxISR_I2SExt+0x54>
 80025d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	490d      	ldr	r1, [pc, #52]	; (8002610 <I2SEx_RxISR_I2SExt+0x90>)
 80025dc:	428b      	cmp	r3, r1
 80025de:	d101      	bne.n	80025e4 <I2SEx_RxISR_I2SExt+0x64>
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <I2SEx_RxISR_I2SExt+0x94>)
 80025e2:	e001      	b.n	80025e8 <I2SEx_RxISR_I2SExt+0x68>
 80025e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff03 	bl	800240c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40003800 	.word	0x40003800
 8002614:	40003400 	.word	0x40003400

08002618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e264      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d075      	beq.n	8002722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002636:	4ba3      	ldr	r3, [pc, #652]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b04      	cmp	r3, #4
 8002640:	d00c      	beq.n	800265c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4ba0      	ldr	r3, [pc, #640]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264a:	2b08      	cmp	r3, #8
 800264c:	d112      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264e:	4b9d      	ldr	r3, [pc, #628]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265a:	d10b      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	4b99      	ldr	r3, [pc, #612]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d05b      	beq.n	8002720 <HAL_RCC_OscConfig+0x108>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d157      	bne.n	8002720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e23f      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d106      	bne.n	800268c <HAL_RCC_OscConfig+0x74>
 800267e:	4b91      	ldr	r3, [pc, #580]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a90      	ldr	r2, [pc, #576]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x98>
 8002696:	4b8b      	ldr	r3, [pc, #556]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a8a      	ldr	r2, [pc, #552]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a87      	ldr	r2, [pc, #540]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 80026b0:	4b84      	ldr	r3, [pc, #528]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a83      	ldr	r2, [pc, #524]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b81      	ldr	r3, [pc, #516]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a80      	ldr	r2, [pc, #512]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fb04 	bl	8000cdc <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe fb00 	bl	8000cdc <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e204      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b76      	ldr	r3, [pc, #472]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xc0>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe faf0 	bl	8000cdc <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002700:	f7fe faec 	bl	8000cdc <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1f0      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b6c      	ldr	r3, [pc, #432]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0xe8>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800272e:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b62      	ldr	r3, [pc, #392]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11c      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	4b5f      	ldr	r3, [pc, #380]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	4b5c      	ldr	r3, [pc, #368]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1c4      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b56      	ldr	r3, [pc, #344]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4952      	ldr	r1, [pc, #328]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002788:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <HAL_RCC_OscConfig+0x2b0>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe faa5 	bl	8000cdc <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe faa1 	bl	8000cdc <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1a5      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b43      	ldr	r3, [pc, #268]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4940      	ldr	r1, [pc, #256]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_RCC_OscConfig+0x2b0>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fa84 	bl	8000cdc <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d8:	f7fe fa80 	bl	8000cdc <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e184      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d030      	beq.n	8002864 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b30      	ldr	r3, [pc, #192]	; (80028cc <HAL_RCC_OscConfig+0x2b4>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7fe fa64 	bl	8000cdc <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe fa60 	bl	8000cdc <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e164      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x200>
 8002836:	e015      	b.n	8002864 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_RCC_OscConfig+0x2b4>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7fe fa4d 	bl	8000cdc <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002846:	f7fe fa49 	bl	8000cdc <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e14d      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800285a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a0 	beq.w	80029b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289e:	2301      	movs	r3, #1
 80028a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_OscConfig+0x2b8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d121      	bne.n	80028f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_RCC_OscConfig+0x2b8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <HAL_RCC_OscConfig+0x2b8>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ba:	f7fe fa0f 	bl	8000cdc <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	e011      	b.n	80028e6 <HAL_RCC_OscConfig+0x2ce>
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	42470000 	.word	0x42470000
 80028cc:	42470e80 	.word	0x42470e80
 80028d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d4:	f7fe fa02 	bl	8000cdc <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e106      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e6:	4b85      	ldr	r3, [pc, #532]	; (8002afc <HAL_RCC_OscConfig+0x4e4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d106      	bne.n	8002908 <HAL_RCC_OscConfig+0x2f0>
 80028fa:	4b81      	ldr	r3, [pc, #516]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	4a80      	ldr	r2, [pc, #512]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6713      	str	r3, [r2, #112]	; 0x70
 8002906:	e01c      	b.n	8002942 <HAL_RCC_OscConfig+0x32a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b05      	cmp	r3, #5
 800290e:	d10c      	bne.n	800292a <HAL_RCC_OscConfig+0x312>
 8002910:	4b7b      	ldr	r3, [pc, #492]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	4a7a      	ldr	r2, [pc, #488]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	6713      	str	r3, [r2, #112]	; 0x70
 800291c:	4b78      	ldr	r3, [pc, #480]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	4a77      	ldr	r2, [pc, #476]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6713      	str	r3, [r2, #112]	; 0x70
 8002928:	e00b      	b.n	8002942 <HAL_RCC_OscConfig+0x32a>
 800292a:	4b75      	ldr	r3, [pc, #468]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	4a74      	ldr	r2, [pc, #464]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	6713      	str	r3, [r2, #112]	; 0x70
 8002936:	4b72      	ldr	r3, [pc, #456]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293a:	4a71      	ldr	r2, [pc, #452]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d015      	beq.n	8002976 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294a:	f7fe f9c7 	bl	8000cdc <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe f9c3 	bl	8000cdc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e0c5      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002968:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ee      	beq.n	8002952 <HAL_RCC_OscConfig+0x33a>
 8002974:	e014      	b.n	80029a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002976:	f7fe f9b1 	bl	8000cdc <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7fe f9ad 	bl	8000cdc <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	; 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e0af      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002994:	4b5a      	ldr	r3, [pc, #360]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ee      	bne.n	800297e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d105      	bne.n	80029b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a6:	4b56      	ldr	r3, [pc, #344]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	4a55      	ldr	r2, [pc, #340]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 80029ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 809b 	beq.w	8002af2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029bc:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d05c      	beq.n	8002a82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d141      	bne.n	8002a54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d0:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <HAL_RCC_OscConfig+0x4ec>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7fe f981 	bl	8000cdc <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029de:	f7fe f97d 	bl	8000cdc <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e081      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f0:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	019b      	lsls	r3, r3, #6
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	3b01      	subs	r3, #1
 8002a16:	041b      	lsls	r3, r3, #16
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	061b      	lsls	r3, r3, #24
 8002a20:	4937      	ldr	r1, [pc, #220]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a26:	4b37      	ldr	r3, [pc, #220]	; (8002b04 <HAL_RCC_OscConfig+0x4ec>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe f956 	bl	8000cdc <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe f952 	bl	8000cdc <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e056      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	4b2e      	ldr	r3, [pc, #184]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x41c>
 8002a52:	e04e      	b.n	8002af2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a54:	4b2b      	ldr	r3, [pc, #172]	; (8002b04 <HAL_RCC_OscConfig+0x4ec>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe f93f 	bl	8000cdc <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a62:	f7fe f93b 	bl	8000cdc <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e03f      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a74:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x44a>
 8002a80:	e037      	b.n	8002af2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e032      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d028      	beq.n	8002aee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d121      	bne.n	8002aee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d11a      	bne.n	8002aee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002abe:	4013      	ands	r3, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ac4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d111      	bne.n	8002aee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d001      	beq.n	8002af2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40007000 	.word	0x40007000
 8002b00:	40023800 	.word	0x40023800
 8002b04:	42470060 	.word	0x42470060

08002b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0cc      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b68      	ldr	r3, [pc, #416]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d90c      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b65      	ldr	r3, [pc, #404]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b63      	ldr	r3, [pc, #396]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0b8      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b5c:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a58      	ldr	r2, [pc, #352]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b74:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a52      	ldr	r2, [pc, #328]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	494d      	ldr	r1, [pc, #308]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d044      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d119      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e07f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e067      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4934      	ldr	r1, [pc, #208]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe f870 	bl	8000cdc <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7fe f86c 	bl	8000cdc <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e04f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d20c      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e032      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4916      	ldr	r1, [pc, #88]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	490e      	ldr	r1, [pc, #56]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c8e:	f000 f821 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	490a      	ldr	r1, [pc, #40]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	5ccb      	ldrb	r3, [r1, r3]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd ffd0 	bl	8000c54 <HAL_InitTick>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023c00 	.word	0x40023c00
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08003380 	.word	0x08003380
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	607b      	str	r3, [r7, #4]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cec:	4b67      	ldr	r3, [pc, #412]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d00d      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x40>
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	f200 80bd 	bhi.w	8002e78 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x34>
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d06:	e0b7      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d0a:	60bb      	str	r3, [r7, #8]
       break;
 8002d0c:	e0b7      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d0e:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d10:	60bb      	str	r3, [r7, #8]
      break;
 8002d12:	e0b4      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d14:	4b5d      	ldr	r3, [pc, #372]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d04d      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	4b58      	ldr	r3, [pc, #352]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	099b      	lsrs	r3, r3, #6
 8002d30:	461a      	mov	r2, r3
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	ea02 0800 	and.w	r8, r2, r0
 8002d42:	ea03 0901 	and.w	r9, r3, r1
 8002d46:	4640      	mov	r0, r8
 8002d48:	4649      	mov	r1, r9
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	014b      	lsls	r3, r1, #5
 8002d54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d58:	0142      	lsls	r2, r0, #5
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	ebb0 0008 	subs.w	r0, r0, r8
 8002d62:	eb61 0109 	sbc.w	r1, r1, r9
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	018b      	lsls	r3, r1, #6
 8002d70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d74:	0182      	lsls	r2, r0, #6
 8002d76:	1a12      	subs	r2, r2, r0
 8002d78:	eb63 0301 	sbc.w	r3, r3, r1
 8002d7c:	f04f 0000 	mov.w	r0, #0
 8002d80:	f04f 0100 	mov.w	r1, #0
 8002d84:	00d9      	lsls	r1, r3, #3
 8002d86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d8a:	00d0      	lsls	r0, r2, #3
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	eb12 0208 	adds.w	r2, r2, r8
 8002d94:	eb43 0309 	adc.w	r3, r3, r9
 8002d98:	f04f 0000 	mov.w	r0, #0
 8002d9c:	f04f 0100 	mov.w	r1, #0
 8002da0:	0259      	lsls	r1, r3, #9
 8002da2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002da6:	0250      	lsls	r0, r2, #9
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	461a      	mov	r2, r3
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	f7fd fa18 	bl	80001ec <__aeabi_uldivmod>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e04a      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc6:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dd6:	f04f 0100 	mov.w	r1, #0
 8002dda:	ea02 0400 	and.w	r4, r2, r0
 8002dde:	ea03 0501 	and.w	r5, r3, r1
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	014b      	lsls	r3, r1, #5
 8002df0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002df4:	0142      	lsls	r2, r0, #5
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	1b00      	subs	r0, r0, r4
 8002dfc:	eb61 0105 	sbc.w	r1, r1, r5
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	018b      	lsls	r3, r1, #6
 8002e0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e0e:	0182      	lsls	r2, r0, #6
 8002e10:	1a12      	subs	r2, r2, r0
 8002e12:	eb63 0301 	sbc.w	r3, r3, r1
 8002e16:	f04f 0000 	mov.w	r0, #0
 8002e1a:	f04f 0100 	mov.w	r1, #0
 8002e1e:	00d9      	lsls	r1, r3, #3
 8002e20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e24:	00d0      	lsls	r0, r2, #3
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	1912      	adds	r2, r2, r4
 8002e2c:	eb45 0303 	adc.w	r3, r5, r3
 8002e30:	f04f 0000 	mov.w	r0, #0
 8002e34:	f04f 0100 	mov.w	r1, #0
 8002e38:	0299      	lsls	r1, r3, #10
 8002e3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e3e:	0290      	lsls	r0, r2, #10
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	f7fd f9cc 	bl	80001ec <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	3301      	adds	r3, #1
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	60bb      	str	r3, [r7, #8]
      break;
 8002e76:	e002      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e7a:	60bb      	str	r3, [r7, #8]
      break;
 8002e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	007a1200 	.word	0x007a1200

08002e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000000 	.word	0x20000000

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eb4:	f7ff fff0 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	0a9b      	lsrs	r3, r3, #10
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4903      	ldr	r1, [pc, #12]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	08003390 	.word	0x08003390

08002ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d105      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d075      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f0c:	4bad      	ldr	r3, [pc, #692]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f12:	f7fd fee3 	bl	8000cdc <HAL_GetTick>
 8002f16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f1a:	f7fd fedf 	bl	8000cdc <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e18b      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f2c:	4ba6      	ldr	r3, [pc, #664]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f0      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	019a      	lsls	r2, r3, #6
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	071b      	lsls	r3, r3, #28
 8002f50:	499d      	ldr	r1, [pc, #628]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01f      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f64:	4b98      	ldr	r3, [pc, #608]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6a:	0f1b      	lsrs	r3, r3, #28
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	019a      	lsls	r2, r3, #6
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	061b      	lsls	r3, r3, #24
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	071b      	lsls	r3, r3, #28
 8002f84:	4990      	ldr	r1, [pc, #576]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f8c:	4b8e      	ldr	r3, [pc, #568]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f92:	f023 021f 	bic.w	r2, r3, #31
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	498a      	ldr	r1, [pc, #552]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00d      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	019a      	lsls	r2, r3, #6
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	061b      	lsls	r3, r3, #24
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	071b      	lsls	r3, r3, #28
 8002fc4:	4980      	ldr	r1, [pc, #512]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fcc:	4b7d      	ldr	r3, [pc, #500]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fd2:	f7fd fe83 	bl	8000cdc <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002fda:	f7fd fe7f 	bl	8000cdc <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e12b      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fec:	4b76      	ldr	r3, [pc, #472]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800300c:	2b00      	cmp	r3, #0
 800300e:	d079      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003010:	4b6e      	ldr	r3, [pc, #440]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003016:	f7fd fe61 	bl	8000cdc <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800301e:	f7fd fe5d 	bl	8000cdc <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e109      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003030:	4b65      	ldr	r3, [pc, #404]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800303c:	d0ef      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d020      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800304a:	4b5f      	ldr	r3, [pc, #380]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003050:	0f1b      	lsrs	r3, r3, #28
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	019a      	lsls	r2, r3, #6
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	061b      	lsls	r3, r3, #24
 8003064:	431a      	orrs	r2, r3
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	071b      	lsls	r3, r3, #28
 800306a:	4957      	ldr	r1, [pc, #348]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003072:	4b55      	ldr	r3, [pc, #340]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003078:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	3b01      	subs	r3, #1
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	4950      	ldr	r1, [pc, #320]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01e      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003098:	4b4b      	ldr	r3, [pc, #300]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	0e1b      	lsrs	r3, r3, #24
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	019a      	lsls	r2, r3, #6
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	061b      	lsls	r3, r3, #24
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	071b      	lsls	r3, r3, #28
 80030b8:	4943      	ldr	r1, [pc, #268]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030c0:	4b41      	ldr	r3, [pc, #260]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	493e      	ldr	r1, [pc, #248]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030d6:	4b3d      	ldr	r3, [pc, #244]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030dc:	f7fd fdfe 	bl	8000cdc <HAL_GetTick>
 80030e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80030e4:	f7fd fdfa 	bl	8000cdc <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e0a6      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030f6:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003102:	d1ef      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 808d 	beq.w	800322c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	4b2c      	ldr	r3, [pc, #176]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a2b      	ldr	r2, [pc, #172]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800312e:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a27      	ldr	r2, [pc, #156]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003138:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800313a:	f7fd fdcf 	bl	8000cdc <HAL_GetTick>
 800313e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003142:	f7fd fdcb 	bl	8000cdc <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e077      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003154:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003168:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d039      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	429a      	cmp	r2, r3
 800317c:	d032      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003186:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003188:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003194:	4a0c      	ldr	r2, [pc, #48]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d11e      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fd fd99 	bl	8000cdc <HAL_GetTick>
 80031aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ac:	e014      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f7fd fd95 	bl	8000cdc <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031bc:	4293      	cmp	r3, r2
 80031be:	d90b      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e03f      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80031c4:	42470068 	.word	0x42470068
 80031c8:	40023800 	.word	0x40023800
 80031cc:	42470070 	.word	0x42470070
 80031d0:	40007000 	.word	0x40007000
 80031d4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d8:	4b1c      	ldr	r3, [pc, #112]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0e4      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031f0:	d10d      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x336>
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003206:	4911      	ldr	r1, [pc, #68]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003208:	4313      	orrs	r3, r2
 800320a:	608b      	str	r3, [r1, #8]
 800320c:	e005      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003214:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003218:	6093      	str	r3, [r2, #8]
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800321c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003226:	4909      	ldr	r1, [pc, #36]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003228:	4313      	orrs	r3, r2
 800322a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003240:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40023800 	.word	0x40023800
 8003250:	424711e0 	.word	0x424711e0

08003254 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d13e      	bne.n	80032f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d12f      	bne.n	80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003288:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800328a:	617b      	str	r3, [r7, #20]
          break;
 800328c:	e02f      	b.n	80032ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329a:	d108      	bne.n	80032ae <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800329c:	4b18      	ldr	r3, [pc, #96]	; (8003300 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a4:	4a18      	ldr	r2, [pc, #96]	; (8003308 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	e007      	b.n	80032be <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80032ae:	4b14      	ldr	r3, [pc, #80]	; (8003300 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b6:	4a15      	ldr	r2, [pc, #84]	; (800330c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80032b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032bc:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80032c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c4:	099b      	lsrs	r3, r3, #6
 80032c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80032d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d8:	0f1b      	lsrs	r3, r3, #28
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]
          break;
 80032e6:	e002      	b.n	80032ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
          break;
 80032ec:	bf00      	nop
        }
      }
      break;
 80032ee:	bf00      	nop
    }
  }
  return frequency;
 80032f0:	697b      	ldr	r3, [r7, #20]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	00bb8000 	.word	0x00bb8000
 8003308:	007a1200 	.word	0x007a1200
 800330c:	00f42400 	.word	0x00f42400

08003310 <__libc_init_array>:
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	4d0d      	ldr	r5, [pc, #52]	; (8003348 <__libc_init_array+0x38>)
 8003314:	4c0d      	ldr	r4, [pc, #52]	; (800334c <__libc_init_array+0x3c>)
 8003316:	1b64      	subs	r4, r4, r5
 8003318:	10a4      	asrs	r4, r4, #2
 800331a:	2600      	movs	r6, #0
 800331c:	42a6      	cmp	r6, r4
 800331e:	d109      	bne.n	8003334 <__libc_init_array+0x24>
 8003320:	4d0b      	ldr	r5, [pc, #44]	; (8003350 <__libc_init_array+0x40>)
 8003322:	4c0c      	ldr	r4, [pc, #48]	; (8003354 <__libc_init_array+0x44>)
 8003324:	f000 f820 	bl	8003368 <_init>
 8003328:	1b64      	subs	r4, r4, r5
 800332a:	10a4      	asrs	r4, r4, #2
 800332c:	2600      	movs	r6, #0
 800332e:	42a6      	cmp	r6, r4
 8003330:	d105      	bne.n	800333e <__libc_init_array+0x2e>
 8003332:	bd70      	pop	{r4, r5, r6, pc}
 8003334:	f855 3b04 	ldr.w	r3, [r5], #4
 8003338:	4798      	blx	r3
 800333a:	3601      	adds	r6, #1
 800333c:	e7ee      	b.n	800331c <__libc_init_array+0xc>
 800333e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003342:	4798      	blx	r3
 8003344:	3601      	adds	r6, #1
 8003346:	e7f2      	b.n	800332e <__libc_init_array+0x1e>
 8003348:	080033a8 	.word	0x080033a8
 800334c:	080033a8 	.word	0x080033a8
 8003350:	080033a8 	.word	0x080033a8
 8003354:	080033ac 	.word	0x080033ac

08003358 <memset>:
 8003358:	4402      	add	r2, r0
 800335a:	4603      	mov	r3, r0
 800335c:	4293      	cmp	r3, r2
 800335e:	d100      	bne.n	8003362 <memset+0xa>
 8003360:	4770      	bx	lr
 8003362:	f803 1b01 	strb.w	r1, [r3], #1
 8003366:	e7f9      	b.n	800335c <memset+0x4>

08003368 <_init>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr

08003374 <_fini>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	bf00      	nop
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr
