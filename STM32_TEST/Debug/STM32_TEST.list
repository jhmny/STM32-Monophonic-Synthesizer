
STM32_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018d4  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001ba0  08001ba0  00011ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001bb0  08001bb0  00011bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001bb4  08001bb4  00011bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08001bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08001bc8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08001bc8  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c9fe  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001921  00000000  00000000  0002ca3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000618  00000000  00000000  0002e360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000580  00000000  00000000  0002e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00030829  00000000  00000000  0002eef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00006e73  00000000  00000000  0005f721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013a6eb  00000000  00000000  00066594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001a0c7f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001710  00000000  00000000  001a0cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08001b88 	.word	0x08001b88

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08001b88 	.word	0x08001b88

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f000 f99a 	bl	8000648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f804 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f000 f860 	bl	80003dc <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800031c:	e7fe      	b.n	800031c <main+0x10>
	...

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b09c      	sub	sp, #112	; 0x70
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800032a:	224c      	movs	r2, #76	; 0x4c
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fc22 	bl	8001b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2220      	movs	r2, #32
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f001 fc1c 	bl	8001b78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000340:	2004      	movs	r0, #4
 8000342:	f000 fcdd 	bl	8000d00 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000346:	2300      	movs	r3, #0
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <SystemClock_Config+0xb8>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000352:	4a21      	ldr	r2, [pc, #132]	; (80003d8 <SystemClock_Config+0xb8>)
 8000354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <SystemClock_Config+0xb8>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000366:	bf00      	nop
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <SystemClock_Config+0xb8>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000374:	d1f8      	bne.n	8000368 <SystemClock_Config+0x48>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000376:	2302      	movs	r3, #2
 8000378:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800037a:	2301      	movs	r3, #1
 800037c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800037e:	2340      	movs	r3, #64	; 0x40
 8000380:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000382:	2300      	movs	r3, #0
 8000384:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800038a:	4618      	mov	r0, r3
 800038c:	f000 fd12 	bl	8000db4 <HAL_RCC_OscConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000396:	f000 f855 	bl	8000444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	233f      	movs	r3, #63	; 0x3f
 800039c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800039e:	2300      	movs	r3, #0
 80003a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2101      	movs	r1, #1
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 f886 	bl	80014d0 <HAL_RCC_ClockConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003ca:	f000 f83b 	bl	8000444 <Error_Handler>
  }
}
 80003ce:	bf00      	nop
 80003d0:	3770      	adds	r7, #112	; 0x70
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	58024800 	.word	0x58024800

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <MX_GPIO_Init+0x60>)
 80003f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f6:	4a11      	ldr	r2, [pc, #68]	; (800043c <MX_GPIO_Init+0x60>)
 80003f8:	f043 0310 	orr.w	r3, r3, #16
 80003fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000400:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_GPIO_Init+0x60>)
 8000402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000406:	f003 0310 	and.w	r3, r3, #16
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2120      	movs	r1, #32
 8000412:	480b      	ldr	r0, [pc, #44]	; (8000440 <MX_GPIO_Init+0x64>)
 8000414:	f000 fc5a 	bl	8000ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000418:	2320      	movs	r3, #32
 800041a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	2301      	movs	r3, #1
 800041e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	4619      	mov	r1, r3
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <MX_GPIO_Init+0x64>)
 800042e:	f000 faa5 	bl	800097c <HAL_GPIO_Init>

}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	58024400 	.word	0x58024400
 8000440:	58021000 	.word	0x58021000

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  // LED ON
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800044c:	2201      	movs	r2, #1
 800044e:	2120      	movs	r1, #32
 8000450:	4807      	ldr	r0, [pc, #28]	; (8000470 <Error_Handler+0x2c>)
 8000452:	f000 fc3b 	bl	8000ccc <HAL_GPIO_WritePin>
	        HAL_Delay(100);
 8000456:	2064      	movs	r0, #100	; 0x64
 8000458:	f000 f988 	bl	800076c <HAL_Delay>
	        // LED OFF
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2120      	movs	r1, #32
 8000460:	4803      	ldr	r0, [pc, #12]	; (8000470 <Error_Handler+0x2c>)
 8000462:	f000 fc33 	bl	8000ccc <HAL_GPIO_WritePin>
	        HAL_Delay(100);
 8000466:	2064      	movs	r0, #100	; 0x64
 8000468:	f000 f980 	bl	800076c <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800046c:	e7ee      	b.n	800044c <Error_Handler+0x8>
 800046e:	bf00      	nop
 8000470:	58020000 	.word	0x58020000

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <HAL_MspInit+0x30>)
 800047c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000480:	4a08      	ldr	r2, [pc, #32]	; (80004a4 <HAL_MspInit+0x30>)
 8000482:	f043 0302 	orr.w	r3, r3, #2
 8000486:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <HAL_MspInit+0x30>)
 800048c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000490:	f003 0302 	and.w	r3, r3, #2
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	58024400 	.word	0x58024400

080004a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <NMI_Handler+0x4>

080004ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <HardFault_Handler+0x4>

080004b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <MemManage_Handler+0x4>

080004ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <BusFault_Handler+0x4>

080004c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <UsageFault_Handler+0x4>

080004c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f4:	f000 f91a 	bl	800072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000500:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <SystemInit+0xd8>)
 8000502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000506:	4a33      	ldr	r2, [pc, #204]	; (80005d4 <SystemInit+0xd8>)
 8000508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800050c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000510:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <SystemInit+0xdc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f003 030f 	and.w	r3, r3, #15
 8000518:	2b06      	cmp	r3, #6
 800051a:	d807      	bhi.n	800052c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800051c:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <SystemInit+0xdc>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f023 030f 	bic.w	r3, r3, #15
 8000524:	4a2c      	ldr	r2, [pc, #176]	; (80005d8 <SystemInit+0xdc>)
 8000526:	f043 0307 	orr.w	r3, r3, #7
 800052a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800052c:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <SystemInit+0xe0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a2a      	ldr	r2, [pc, #168]	; (80005dc <SystemInit+0xe0>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <SystemInit+0xe0>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800053e:	4b27      	ldr	r3, [pc, #156]	; (80005dc <SystemInit+0xe0>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4926      	ldr	r1, [pc, #152]	; (80005dc <SystemInit+0xe0>)
 8000544:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <SystemInit+0xe4>)
 8000546:	4013      	ands	r3, r2
 8000548:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800054a:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <SystemInit+0xdc>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f003 0308 	and.w	r3, r3, #8
 8000552:	2b00      	cmp	r3, #0
 8000554:	d007      	beq.n	8000566 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <SystemInit+0xdc>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f023 030f 	bic.w	r3, r3, #15
 800055e:	4a1e      	ldr	r2, [pc, #120]	; (80005d8 <SystemInit+0xdc>)
 8000560:	f043 0307 	orr.w	r3, r3, #7
 8000564:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <SystemInit+0xe0>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <SystemInit+0xe0>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000572:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <SystemInit+0xe0>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <SystemInit+0xe0>)
 800057a:	4a1a      	ldr	r2, [pc, #104]	; (80005e4 <SystemInit+0xe8>)
 800057c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <SystemInit+0xe0>)
 8000580:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <SystemInit+0xec>)
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <SystemInit+0xe0>)
 8000586:	4a19      	ldr	r2, [pc, #100]	; (80005ec <SystemInit+0xf0>)
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <SystemInit+0xe0>)
 800058c:	2200      	movs	r2, #0
 800058e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <SystemInit+0xe0>)
 8000592:	4a16      	ldr	r2, [pc, #88]	; (80005ec <SystemInit+0xf0>)
 8000594:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <SystemInit+0xe0>)
 8000598:	2200      	movs	r2, #0
 800059a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <SystemInit+0xe0>)
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <SystemInit+0xf0>)
 80005a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <SystemInit+0xe0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <SystemInit+0xe0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <SystemInit+0xe0>)
 80005ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <SystemInit+0xe0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <SystemInit+0xf4>)
 80005bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80005c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005c2:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <SystemInit+0xd8>)
 80005c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005c8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00
 80005d8:	52002000 	.word	0x52002000
 80005dc:	58024400 	.word	0x58024400
 80005e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80005e4:	02020200 	.word	0x02020200
 80005e8:	01ff0000 	.word	0x01ff0000
 80005ec:	01010280 	.word	0x01010280
 80005f0:	52004000 	.word	0x52004000

080005f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80005f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800062c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f8:	f7ff ff80 	bl	80004fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	; (8000634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	; (8000640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000622:	f001 fa85 	bl	8001b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000626:	f7ff fe71 	bl	800030c <main>
  bx  lr
 800062a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800062c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000630:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000634:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000638:	08001bb8 	.word	0x08001bb8
  ldr r2, =_sbss
 800063c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000640:	24000030 	.word	0x24000030

08000644 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC3_IRQHandler>
	...

08000648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f962 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000654:	f001 f8f2 	bl	800183c <HAL_RCC_GetSysClockFreq>
 8000658:	4602      	mov	r2, r0
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_Init+0x68>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	0a1b      	lsrs	r3, r3, #8
 8000660:	f003 030f 	and.w	r3, r3, #15
 8000664:	4913      	ldr	r1, [pc, #76]	; (80006b4 <HAL_Init+0x6c>)
 8000666:	5ccb      	ldrb	r3, [r1, r3]
 8000668:	f003 031f 	and.w	r3, r3, #31
 800066c:	fa22 f303 	lsr.w	r3, r2, r3
 8000670:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_Init+0x68>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <HAL_Init+0x6c>)
 800067c:	5cd3      	ldrb	r3, [r2, r3]
 800067e:	f003 031f 	and.w	r3, r3, #31
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	fa22 f303 	lsr.w	r3, r2, r3
 8000688:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <HAL_Init+0x70>)
 800068a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <HAL_Init+0x74>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000692:	200f      	movs	r0, #15
 8000694:	f000 f814 	bl	80006c0 <HAL_InitTick>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e002      	b.n	80006a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006a2:	f7ff fee7 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	58024400 	.word	0x58024400
 80006b4:	08001ba0 	.word	0x08001ba0
 80006b8:	24000004 	.word	0x24000004
 80006bc:	24000000 	.word	0x24000000

080006c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_InitTick+0x60>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80006d0:	2301      	movs	r3, #1
 80006d2:	e021      	b.n	8000718 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <HAL_InitTick+0x64>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <HAL_InitTick+0x60>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f939 	bl	8000962 <HAL_SYSTICK_Config>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00e      	b.n	8000718 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d80a      	bhi.n	8000716 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000700:	2200      	movs	r2, #0
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000708:	f000 f911 	bl	800092e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <HAL_InitTick+0x68>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2400000c 	.word	0x2400000c
 8000724:	24000000 	.word	0x24000000
 8000728:	24000008 	.word	0x24000008

0800072c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_IncTick+0x20>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_IncTick+0x24>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <HAL_IncTick+0x24>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	2400000c 	.word	0x2400000c
 8000750:	2400002c 	.word	0x2400002c

08000754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <HAL_GetTick+0x14>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	2400002c 	.word	0x2400002c

0800076c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000774:	f7ff ffee 	bl	8000754 <HAL_GetTick>
 8000778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000784:	d005      	beq.n	8000792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_Delay+0x44>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	4413      	add	r3, r2
 8000790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000792:	bf00      	nop
 8000794:	f7ff ffde 	bl	8000754 <HAL_GetTick>
 8000798:	4602      	mov	r2, r0
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d8f7      	bhi.n	8000794 <HAL_Delay+0x28>
  {
  }
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2400000c 	.word	0x2400000c

080007b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <__NVIC_SetPriorityGrouping+0x40>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007de:	4313      	orrs	r3, r2
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <__NVIC_SetPriorityGrouping+0x40>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00
 80007f8:	05fa0000 	.word	0x05fa0000

080007fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <__NVIC_GetPriorityGrouping+0x18>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	f003 0307 	and.w	r3, r3, #7
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000828:	2b00      	cmp	r3, #0
 800082a:	db0a      	blt.n	8000842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	b2da      	uxtb	r2, r3
 8000830:	490c      	ldr	r1, [pc, #48]	; (8000864 <__NVIC_SetPriority+0x4c>)
 8000832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	440b      	add	r3, r1
 800083c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000840:	e00a      	b.n	8000858 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4908      	ldr	r1, [pc, #32]	; (8000868 <__NVIC_SetPriority+0x50>)
 8000848:	88fb      	ldrh	r3, [r7, #6]
 800084a:	f003 030f 	and.w	r3, r3, #15
 800084e:	3b04      	subs	r3, #4
 8000850:	0112      	lsls	r2, r2, #4
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	440b      	add	r3, r1
 8000856:	761a      	strb	r2, [r3, #24]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000e100 	.word	0xe000e100
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086c:	b480      	push	{r7}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f1c3 0307 	rsb	r3, r3, #7
 8000886:	2b04      	cmp	r3, #4
 8000888:	bf28      	it	cs
 800088a:	2304      	movcs	r3, #4
 800088c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3304      	adds	r3, #4
 8000892:	2b06      	cmp	r3, #6
 8000894:	d902      	bls.n	800089c <NVIC_EncodePriority+0x30>
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3b03      	subs	r3, #3
 800089a:	e000      	b.n	800089e <NVIC_EncodePriority+0x32>
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43da      	mvns	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	401a      	ands	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43d9      	mvns	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	4313      	orrs	r3, r2
         );
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3724      	adds	r7, #36	; 0x24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008e4:	d301      	bcc.n	80008ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00f      	b.n	800090a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <SysTick_Config+0x40>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f2:	210f      	movs	r1, #15
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f8:	f7ff ff8e 	bl	8000818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SysTick_Config+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SysTick_Config+0x40>)
 8000904:	2207      	movs	r2, #7
 8000906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	e000e010 	.word	0xe000e010

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff47 	bl	80007b4 <__NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800093c:	f7ff ff5e 	bl	80007fc <__NVIC_GetPriorityGrouping>
 8000940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff ff90 	bl	800086c <NVIC_EncodePriority>
 800094c:	4602      	mov	r2, r0
 800094e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff5f 	bl	8000818 <__NVIC_SetPriority>
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffb2 	bl	80008d4 <SysTick_Config>
 8000970:	4603      	mov	r3, r0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	; 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800098a:	4b86      	ldr	r3, [pc, #536]	; (8000ba4 <HAL_GPIO_Init+0x228>)
 800098c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800098e:	e18c      	b.n	8000caa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 817e 	beq.w	8000ca4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d00b      	beq.n	80009c8 <HAL_GPIO_Init+0x4c>
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d007      	beq.n	80009c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009bc:	2b11      	cmp	r3, #17
 80009be:	d003      	beq.n	80009c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	2b12      	cmp	r3, #18
 80009c6:	d130      	bne.n	8000a2a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	2203      	movs	r2, #3
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	4013      	ands	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009fe:	2201      	movs	r2, #1
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	091b      	lsrs	r3, r3, #4
 8000a14:	f003 0201 	and.w	r2, r3, #1
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	2203      	movs	r2, #3
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0xee>
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2b12      	cmp	r3, #18
 8000a68:	d123      	bne.n	8000ab2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	08da      	lsrs	r2, r3, #3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3208      	adds	r2, #8
 8000a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	220f      	movs	r2, #15
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	691a      	ldr	r2, [r3, #16]
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	f003 0307 	and.w	r3, r3, #7
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	08da      	lsrs	r2, r3, #3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3208      	adds	r2, #8
 8000aac:	69b9      	ldr	r1, [r7, #24]
 8000aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	2203      	movs	r2, #3
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 0203 	and.w	r2, r3, #3
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 80d8 	beq.w	8000ca4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af4:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <HAL_GPIO_Init+0x22c>)
 8000af6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000afa:	4a2b      	ldr	r2, [pc, #172]	; (8000ba8 <HAL_GPIO_Init+0x22c>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <HAL_GPIO_Init+0x22c>)
 8000b06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b12:	4a26      	ldr	r2, [pc, #152]	; (8000bac <HAL_GPIO_Init+0x230>)
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	3302      	adds	r3, #2
 8000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	220f      	movs	r2, #15
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4013      	ands	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <HAL_GPIO_Init+0x234>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d04a      	beq.n	8000bd4 <HAL_GPIO_Init+0x258>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <HAL_GPIO_Init+0x238>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d02b      	beq.n	8000b9e <HAL_GPIO_Init+0x222>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <HAL_GPIO_Init+0x23c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d025      	beq.n	8000b9a <HAL_GPIO_Init+0x21e>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a1a      	ldr	r2, [pc, #104]	; (8000bbc <HAL_GPIO_Init+0x240>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d01f      	beq.n	8000b96 <HAL_GPIO_Init+0x21a>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_GPIO_Init+0x244>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d019      	beq.n	8000b92 <HAL_GPIO_Init+0x216>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <HAL_GPIO_Init+0x248>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d013      	beq.n	8000b8e <HAL_GPIO_Init+0x212>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_GPIO_Init+0x24c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d00d      	beq.n	8000b8a <HAL_GPIO_Init+0x20e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <HAL_GPIO_Init+0x250>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d007      	beq.n	8000b86 <HAL_GPIO_Init+0x20a>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a15      	ldr	r2, [pc, #84]	; (8000bd0 <HAL_GPIO_Init+0x254>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d101      	bne.n	8000b82 <HAL_GPIO_Init+0x206>
 8000b7e:	2309      	movs	r3, #9
 8000b80:	e029      	b.n	8000bd6 <HAL_GPIO_Init+0x25a>
 8000b82:	230a      	movs	r3, #10
 8000b84:	e027      	b.n	8000bd6 <HAL_GPIO_Init+0x25a>
 8000b86:	2307      	movs	r3, #7
 8000b88:	e025      	b.n	8000bd6 <HAL_GPIO_Init+0x25a>
 8000b8a:	2306      	movs	r3, #6
 8000b8c:	e023      	b.n	8000bd6 <HAL_GPIO_Init+0x25a>
 8000b8e:	2305      	movs	r3, #5
 8000b90:	e021      	b.n	8000bd6 <HAL_GPIO_Init+0x25a>
 8000b92:	2304      	movs	r3, #4
 8000b94:	e01f      	b.n	8000bd6 <HAL_GPIO_Init+0x25a>
 8000b96:	2303      	movs	r3, #3
 8000b98:	e01d      	b.n	8000bd6 <HAL_GPIO_Init+0x25a>
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	e01b      	b.n	8000bd6 <HAL_GPIO_Init+0x25a>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e019      	b.n	8000bd6 <HAL_GPIO_Init+0x25a>
 8000ba2:	bf00      	nop
 8000ba4:	58000080 	.word	0x58000080
 8000ba8:	58024400 	.word	0x58024400
 8000bac:	58000400 	.word	0x58000400
 8000bb0:	58020000 	.word	0x58020000
 8000bb4:	58020400 	.word	0x58020400
 8000bb8:	58020800 	.word	0x58020800
 8000bbc:	58020c00 	.word	0x58020c00
 8000bc0:	58021000 	.word	0x58021000
 8000bc4:	58021400 	.word	0x58021400
 8000bc8:	58021800 	.word	0x58021800
 8000bcc:	58021c00 	.word	0x58021c00
 8000bd0:	58022400 	.word	0x58022400
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	f002 0203 	and.w	r2, r2, #3
 8000bdc:	0092      	lsls	r2, r2, #2
 8000bde:	4093      	lsls	r3, r2
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000be6:	4938      	ldr	r1, [pc, #224]	; (8000cc8 <HAL_GPIO_Init+0x34c>)
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	3302      	adds	r3, #2
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	43db      	mvns	r3, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4013      	ands	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f47f ae6b 	bne.w	8000990 <HAL_GPIO_Init+0x14>
  }
}
 8000cba:	bf00      	nop
 8000cbc:	bf00      	nop
 8000cbe:	3724      	adds	r7, #36	; 0x24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	58000400 	.word	0x58000400

08000ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cdc:	787b      	ldrb	r3, [r7, #1]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000ce8:	e003      	b.n	8000cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	041a      	lsls	r2, r3, #16
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	619a      	str	r2, [r3, #24]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000d08:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <HAL_PWREx_ConfigSupply+0xb0>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	2b06      	cmp	r3, #6
 8000d12:	d00a      	beq.n	8000d2a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000d14:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <HAL_PWREx_ConfigSupply+0xb0>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d001      	beq.n	8000d26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e03f      	b.n	8000da6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e03d      	b.n	8000da6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <HAL_PWREx_ConfigSupply+0xb0>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000d32:	491f      	ldr	r1, [pc, #124]	; (8000db0 <HAL_PWREx_ConfigSupply+0xb0>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000d3a:	f7ff fd0b 	bl	8000754 <HAL_GetTick>
 8000d3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000d40:	e009      	b.n	8000d56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000d42:	f7ff fd07 	bl	8000754 <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d50:	d901      	bls.n	8000d56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e027      	b.n	8000da6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_PWREx_ConfigSupply+0xb0>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d62:	d1ee      	bne.n	8000d42 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b1e      	cmp	r3, #30
 8000d68:	d008      	beq.n	8000d7c <HAL_PWREx_ConfigSupply+0x7c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8000d6e:	d005      	beq.n	8000d7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b1d      	cmp	r3, #29
 8000d74:	d002      	beq.n	8000d7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b2d      	cmp	r3, #45	; 0x2d
 8000d7a:	d113      	bne.n	8000da4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000d7c:	f7ff fcea 	bl	8000754 <HAL_GetTick>
 8000d80:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000d82:	e009      	b.n	8000d98 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000d84:	f7ff fce6 	bl	8000754 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d92:	d901      	bls.n	8000d98 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e006      	b.n	8000da6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_PWREx_ConfigSupply+0xb0>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	f003 0311 	and.w	r3, r3, #17
 8000da0:	2b11      	cmp	r3, #17
 8000da2:	d1ef      	bne.n	8000d84 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	58024800 	.word	0x58024800

08000db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	; 0x30
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e37a      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 8087 	beq.w	8000ee2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dd4:	4ba0      	ldr	r3, [pc, #640]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000dde:	4b9e      	ldr	r3, [pc, #632]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de6:	2b10      	cmp	r3, #16
 8000de8:	d007      	beq.n	8000dfa <HAL_RCC_OscConfig+0x46>
 8000dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dec:	2b18      	cmp	r3, #24
 8000dee:	d110      	bne.n	8000e12 <HAL_RCC_OscConfig+0x5e>
 8000df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d10b      	bne.n	8000e12 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfa:	4b97      	ldr	r3, [pc, #604]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d06c      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x12c>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d168      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e354      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e1a:	d106      	bne.n	8000e2a <HAL_RCC_OscConfig+0x76>
 8000e1c:	4b8e      	ldr	r3, [pc, #568]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a8d      	ldr	r2, [pc, #564]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	e02e      	b.n	8000e88 <HAL_RCC_OscConfig+0xd4>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10c      	bne.n	8000e4c <HAL_RCC_OscConfig+0x98>
 8000e32:	4b89      	ldr	r3, [pc, #548]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a88      	ldr	r2, [pc, #544]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b86      	ldr	r3, [pc, #536]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a85      	ldr	r2, [pc, #532]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e01d      	b.n	8000e88 <HAL_RCC_OscConfig+0xd4>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e54:	d10c      	bne.n	8000e70 <HAL_RCC_OscConfig+0xbc>
 8000e56:	4b80      	ldr	r3, [pc, #512]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a7f      	ldr	r2, [pc, #508]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	4b7d      	ldr	r3, [pc, #500]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a7c      	ldr	r2, [pc, #496]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e00b      	b.n	8000e88 <HAL_RCC_OscConfig+0xd4>
 8000e70:	4b79      	ldr	r3, [pc, #484]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a78      	ldr	r2, [pc, #480]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b76      	ldr	r3, [pc, #472]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a75      	ldr	r2, [pc, #468]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d013      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e90:	f7ff fc60 	bl	8000754 <HAL_GetTick>
 8000e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e98:	f7ff fc5c 	bl	8000754 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b64      	cmp	r3, #100	; 0x64
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e308      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000eaa:	4b6b      	ldr	r3, [pc, #428]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f0      	beq.n	8000e98 <HAL_RCC_OscConfig+0xe4>
 8000eb6:	e014      	b.n	8000ee2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fc4c 	bl	8000754 <HAL_GetTick>
 8000ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fc48 	bl	8000754 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b64      	cmp	r3, #100	; 0x64
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e2f4      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ed2:	4b61      	ldr	r3, [pc, #388]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f0      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x10c>
 8000ede:	e000      	b.n	8000ee2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d06d      	beq.n	8000fca <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eee:	4b5a      	ldr	r3, [pc, #360]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ef6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000ef8:	4b57      	ldr	r3, [pc, #348]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000efe:	6a3b      	ldr	r3, [r7, #32]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d007      	beq.n	8000f14 <HAL_RCC_OscConfig+0x160>
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	2b18      	cmp	r3, #24
 8000f08:	d11b      	bne.n	8000f42 <HAL_RCC_OscConfig+0x18e>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d116      	bne.n	8000f42 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f14:	4b50      	ldr	r3, [pc, #320]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d005      	beq.n	8000f2c <HAL_RCC_OscConfig+0x178>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e2c7      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2c:	4b4a      	ldr	r3, [pc, #296]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	061b      	lsls	r3, r3, #24
 8000f3a:	4947      	ldr	r1, [pc, #284]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f40:	e043      	b.n	8000fca <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d026      	beq.n	8000f98 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000f4a:	4b43      	ldr	r3, [pc, #268]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f023 0219 	bic.w	r2, r3, #25
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	4940      	ldr	r1, [pc, #256]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fbfa 	bl	8000754 <HAL_GetTick>
 8000f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f64:	f7ff fbf6 	bl	8000754 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e2a2      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f76:	4b38      	ldr	r3, [pc, #224]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f0      	beq.n	8000f64 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f82:	4b35      	ldr	r3, [pc, #212]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	061b      	lsls	r3, r3, #24
 8000f90:	4931      	ldr	r1, [pc, #196]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	604b      	str	r3, [r1, #4]
 8000f96:	e018      	b.n	8000fca <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a2e      	ldr	r2, [pc, #184]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fbd6 	bl	8000754 <HAL_GetTick>
 8000fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fac:	f7ff fbd2 	bl	8000754 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e27e      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d06c      	beq.n	80010b0 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000fde:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d007      	beq.n	8000ffc <HAL_RCC_OscConfig+0x248>
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2b18      	cmp	r3, #24
 8000ff0:	d11b      	bne.n	800102a <HAL_RCC_OscConfig+0x276>
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d116      	bne.n	800102a <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <HAL_RCC_OscConfig+0x260>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	2b80      	cmp	r3, #128	; 0x80
 800100e:	d001      	beq.n	8001014 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e253      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	061b      	lsls	r3, r3, #24
 8001022:	490d      	ldr	r1, [pc, #52]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8001024:	4313      	orrs	r3, r2
 8001026:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001028:	e042      	b.n	80010b0 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d025      	beq.n	800107e <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_RCC_OscConfig+0x2a4>)
 8001038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103e:	f7ff fb89 	bl	8000754 <HAL_GetTick>
 8001042:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001044:	e00a      	b.n	800105c <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001046:	f7ff fb85 	bl	8000754 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d903      	bls.n	800105c <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e231      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
 8001058:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800105c:	4ba3      	ldr	r3, [pc, #652]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0ee      	beq.n	8001046 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001068:	4ba0      	ldr	r3, [pc, #640]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	061b      	lsls	r3, r3, #24
 8001076:	499d      	ldr	r1, [pc, #628]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001078:	4313      	orrs	r3, r2
 800107a:	60cb      	str	r3, [r1, #12]
 800107c:	e018      	b.n	80010b0 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800107e:	4b9b      	ldr	r3, [pc, #620]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a9a      	ldr	r2, [pc, #616]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108a:	f7ff fb63 	bl	8000754 <HAL_GetTick>
 800108e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001092:	f7ff fb5f 	bl	8000754 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e20b      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80010a4:	4b91      	ldr	r3, [pc, #580]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f0      	bne.n	8001092 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d036      	beq.n	800112a <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d019      	beq.n	80010f8 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c4:	4b89      	ldr	r3, [pc, #548]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 80010c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010c8:	4a88      	ldr	r2, [pc, #544]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d0:	f7ff fb40 	bl	8000754 <HAL_GetTick>
 80010d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fb3c 	bl	8000754 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e1e8      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010ea:	4b80      	ldr	r3, [pc, #512]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 80010ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0x324>
 80010f6:	e018      	b.n	800112a <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f8:	4b7c      	ldr	r3, [pc, #496]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 80010fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010fc:	4a7b      	ldr	r2, [pc, #492]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 80010fe:	f023 0301 	bic.w	r3, r3, #1
 8001102:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001104:	f7ff fb26 	bl	8000754 <HAL_GetTick>
 8001108:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800110c:	f7ff fb22 	bl	8000754 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e1ce      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800111e:	4b73      	ldr	r3, [pc, #460]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	2b00      	cmp	r3, #0
 8001134:	d036      	beq.n	80011a4 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d019      	beq.n	8001172 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800113e:	4b6b      	ldr	r3, [pc, #428]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a6a      	ldr	r2, [pc, #424]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001144:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001148:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800114a:	f7ff fb03 	bl	8000754 <HAL_GetTick>
 800114e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001152:	f7ff faff 	bl	8000754 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e1ab      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001164:	4b61      	ldr	r3, [pc, #388]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x39e>
 8001170:	e018      	b.n	80011a4 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001172:	4b5e      	ldr	r3, [pc, #376]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a5d      	ldr	r2, [pc, #372]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800117c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800117e:	f7ff fae9 	bl	8000754 <HAL_GetTick>
 8001182:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001186:	f7ff fae5 	bl	8000754 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e191      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001198:	4b54      	ldr	r3, [pc, #336]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f0      	bne.n	8001186 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 8081 	beq.w	80012b4 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80011b2:	4b4f      	ldr	r3, [pc, #316]	; (80012f0 <HAL_RCC_OscConfig+0x53c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <HAL_RCC_OscConfig+0x53c>)
 80011b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80011be:	f7ff fac9 	bl	8000754 <HAL_GetTick>
 80011c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80011c6:	f7ff fac5 	bl	8000754 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b64      	cmp	r3, #100	; 0x64
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e171      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <HAL_RCC_OscConfig+0x53c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f0      	beq.n	80011c6 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d106      	bne.n	80011fa <HAL_RCC_OscConfig+0x446>
 80011ec:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 80011ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f0:	4a3e      	ldr	r2, [pc, #248]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6713      	str	r3, [r2, #112]	; 0x70
 80011f8:	e02d      	b.n	8001256 <HAL_RCC_OscConfig+0x4a2>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0x468>
 8001202:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001206:	4a39      	ldr	r2, [pc, #228]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	6713      	str	r3, [r2, #112]	; 0x70
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001212:	4a36      	ldr	r2, [pc, #216]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001214:	f023 0304 	bic.w	r3, r3, #4
 8001218:	6713      	str	r3, [r2, #112]	; 0x70
 800121a:	e01c      	b.n	8001256 <HAL_RCC_OscConfig+0x4a2>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b05      	cmp	r3, #5
 8001222:	d10c      	bne.n	800123e <HAL_RCC_OscConfig+0x48a>
 8001224:	4b31      	ldr	r3, [pc, #196]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001228:	4a30      	ldr	r2, [pc, #192]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6713      	str	r3, [r2, #112]	; 0x70
 8001230:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001234:	4a2d      	ldr	r2, [pc, #180]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6713      	str	r3, [r2, #112]	; 0x70
 800123c:	e00b      	b.n	8001256 <HAL_RCC_OscConfig+0x4a2>
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001242:	4a2a      	ldr	r2, [pc, #168]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	6713      	str	r3, [r2, #112]	; 0x70
 800124a:	4b28      	ldr	r3, [pc, #160]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 800124c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124e:	4a27      	ldr	r2, [pc, #156]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 8001250:	f023 0304 	bic.w	r3, r3, #4
 8001254:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d015      	beq.n	800128a <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125e:	f7ff fa79 	bl	8000754 <HAL_GetTick>
 8001262:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001264:	e00a      	b.n	800127c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001266:	f7ff fa75 	bl	8000754 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	f241 3288 	movw	r2, #5000	; 0x1388
 8001274:	4293      	cmp	r3, r2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e11f      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 800127e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0ee      	beq.n	8001266 <HAL_RCC_OscConfig+0x4b2>
 8001288:	e014      	b.n	80012b4 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128a:	f7ff fa63 	bl	8000754 <HAL_GetTick>
 800128e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff fa5f 	bl	8000754 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e109      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 80012aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1ee      	bne.n	8001292 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80fe 	beq.w	80014ba <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012c6:	2b18      	cmp	r3, #24
 80012c8:	f000 80b9 	beq.w	800143e <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	f040 809a 	bne.w	800140a <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_RCC_OscConfig+0x538>)
 80012dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e2:	f7ff fa37 	bl	8000754 <HAL_GetTick>
 80012e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012e8:	e00d      	b.n	8001306 <HAL_RCC_OscConfig+0x552>
 80012ea:	bf00      	nop
 80012ec:	58024400 	.word	0x58024400
 80012f0:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f4:	f7ff fa2e 	bl	8000754 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e0da      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001306:	4b6f      	ldr	r3, [pc, #444]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001312:	4b6c      	ldr	r3, [pc, #432]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 8001314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001316:	4b6c      	ldr	r3, [pc, #432]	; (80014c8 <HAL_RCC_OscConfig+0x714>)
 8001318:	4013      	ands	r3, r2
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	430a      	orrs	r2, r1
 8001326:	4967      	ldr	r1, [pc, #412]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 8001328:	4313      	orrs	r3, r2
 800132a:	628b      	str	r3, [r1, #40]	; 0x28
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	3b01      	subs	r3, #1
 8001332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133a:	3b01      	subs	r3, #1
 800133c:	025b      	lsls	r3, r3, #9
 800133e:	b29b      	uxth	r3, r3
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001346:	3b01      	subs	r3, #1
 8001348:	041b      	lsls	r3, r3, #16
 800134a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001354:	3b01      	subs	r3, #1
 8001356:	061b      	lsls	r3, r3, #24
 8001358:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800135c:	4959      	ldr	r1, [pc, #356]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 800135e:	4313      	orrs	r3, r2
 8001360:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001362:	4b58      	ldr	r3, [pc, #352]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 8001364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001366:	4a57      	ldr	r2, [pc, #348]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800136e:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 8001370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001372:	4b56      	ldr	r3, [pc, #344]	; (80014cc <HAL_RCC_OscConfig+0x718>)
 8001374:	4013      	ands	r3, r2
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800137a:	00d2      	lsls	r2, r2, #3
 800137c:	4951      	ldr	r1, [pc, #324]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 800137e:	4313      	orrs	r3, r2
 8001380:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001382:	4b50      	ldr	r3, [pc, #320]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	f023 020c 	bic.w	r2, r3, #12
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	494d      	ldr	r1, [pc, #308]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 8001390:	4313      	orrs	r3, r2
 8001392:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001394:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	f023 0202 	bic.w	r2, r3, #2
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	4948      	ldr	r1, [pc, #288]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	4a46      	ldr	r2, [pc, #280]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80013b2:	4b44      	ldr	r3, [pc, #272]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	4a43      	ldr	r2, [pc, #268]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80013be:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	4a40      	ldr	r2, [pc, #256]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 80013c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80013ca:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	4a3d      	ldr	r2, [pc, #244]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a3a      	ldr	r2, [pc, #232]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 80013dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff f9b7 	bl	8000754 <HAL_GetTick>
 80013e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff f9b3 	bl	8000754 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e05f      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x636>
 8001408:	e057      	b.n	80014ba <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a2d      	ldr	r2, [pc, #180]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 8001410:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff f99d 	bl	8000754 <HAL_GetTick>
 800141a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff f999 	bl	8000754 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e045      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x66a>
 800143c:	e03d      	b.n	80014ba <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 8001440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001442:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <HAL_RCC_OscConfig+0x710>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	2b01      	cmp	r3, #1
 8001450:	d031      	beq.n	80014b6 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	f003 0203 	and.w	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d12a      	bne.n	80014b6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d122      	bne.n	80014b6 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d11a      	bne.n	80014b6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	0a5b      	lsrs	r3, r3, #9
 8001484:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800148e:	429a      	cmp	r2, r3
 8001490:	d111      	bne.n	80014b6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	0c1b      	lsrs	r3, r3, #16
 8001496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d108      	bne.n	80014b6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	0e1b      	lsrs	r3, r3, #24
 80014a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3730      	adds	r7, #48	; 0x30
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	58024400 	.word	0x58024400
 80014c8:	fffffc0c 	.word	0xfffffc0c
 80014cc:	ffff0007 	.word	0xffff0007

080014d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e19c      	b.n	800181e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014e4:	4b8a      	ldr	r3, [pc, #552]	; (8001710 <HAL_RCC_ClockConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d910      	bls.n	8001514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	4b87      	ldr	r3, [pc, #540]	; (8001710 <HAL_RCC_ClockConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 020f 	bic.w	r2, r3, #15
 80014fa:	4985      	ldr	r1, [pc, #532]	; (8001710 <HAL_RCC_ClockConfig+0x240>)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001502:	4b83      	ldr	r3, [pc, #524]	; (8001710 <HAL_RCC_ClockConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d001      	beq.n	8001514 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e184      	b.n	800181e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d010      	beq.n	8001542 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	4b7b      	ldr	r3, [pc, #492]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800152c:	429a      	cmp	r2, r3
 800152e:	d908      	bls.n	8001542 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001530:	4b78      	ldr	r3, [pc, #480]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	4975      	ldr	r1, [pc, #468]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 800153e:	4313      	orrs	r3, r2
 8001540:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d010      	beq.n	8001570 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	4b70      	ldr	r3, [pc, #448]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800155a:	429a      	cmp	r2, r3
 800155c:	d908      	bls.n	8001570 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800155e:	4b6d      	ldr	r3, [pc, #436]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	496a      	ldr	r1, [pc, #424]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 800156c:	4313      	orrs	r3, r2
 800156e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0310 	and.w	r3, r3, #16
 8001578:	2b00      	cmp	r3, #0
 800157a:	d010      	beq.n	800159e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699a      	ldr	r2, [r3, #24]
 8001580:	4b64      	ldr	r3, [pc, #400]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001588:	429a      	cmp	r2, r3
 800158a:	d908      	bls.n	800159e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800158c:	4b61      	ldr	r3, [pc, #388]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	495e      	ldr	r1, [pc, #376]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 800159a:	4313      	orrs	r3, r2
 800159c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0320 	and.w	r3, r3, #32
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d010      	beq.n	80015cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69da      	ldr	r2, [r3, #28]
 80015ae:	4b59      	ldr	r3, [pc, #356]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d908      	bls.n	80015cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80015ba:	4b56      	ldr	r3, [pc, #344]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4953      	ldr	r1, [pc, #332]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d010      	beq.n	80015fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d908      	bls.n	80015fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e8:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f023 020f 	bic.w	r2, r3, #15
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4947      	ldr	r1, [pc, #284]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d055      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001606:	4b43      	ldr	r3, [pc, #268]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	4940      	ldr	r1, [pc, #256]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 8001614:	4313      	orrs	r3, r2
 8001616:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d107      	bne.n	8001630 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001620:	4b3c      	ldr	r3, [pc, #240]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d121      	bne.n	8001670 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0f6      	b.n	800181e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d107      	bne.n	8001648 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001638:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d115      	bne.n	8001670 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0ea      	b.n	800181e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d107      	bne.n	8001660 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001650:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d109      	bne.n	8001670 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0de      	b.n	800181e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001660:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0d6      	b.n	800181e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	f023 0207 	bic.w	r2, r3, #7
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4925      	ldr	r1, [pc, #148]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 800167e:	4313      	orrs	r3, r2
 8001680:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001682:	f7ff f867 	bl	8000754 <HAL_GetTick>
 8001686:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168a:	f7ff f863 	bl	8000754 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e0be      	b.n	800181e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d1eb      	bne.n	800168a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d010      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d208      	bcs.n	80016e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f023 020f 	bic.w	r2, r3, #15
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	490e      	ldr	r1, [pc, #56]	; (8001714 <HAL_RCC_ClockConfig+0x244>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_ClockConfig+0x240>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d214      	bcs.n	8001718 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_RCC_ClockConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 020f 	bic.w	r2, r3, #15
 80016f6:	4906      	ldr	r1, [pc, #24]	; (8001710 <HAL_RCC_ClockConfig+0x240>)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <HAL_RCC_ClockConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d005      	beq.n	8001718 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e086      	b.n	800181e <HAL_RCC_ClockConfig+0x34e>
 8001710:	52002000 	.word	0x52002000
 8001714:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d010      	beq.n	8001746 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	4b3f      	ldr	r3, [pc, #252]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001730:	429a      	cmp	r2, r3
 8001732:	d208      	bcs.n	8001746 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001734:	4b3c      	ldr	r3, [pc, #240]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	4939      	ldr	r1, [pc, #228]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 8001742:	4313      	orrs	r3, r2
 8001744:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d010      	beq.n	8001774 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800175e:	429a      	cmp	r2, r3
 8001760:	d208      	bcs.n	8001774 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001762:	4b31      	ldr	r3, [pc, #196]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	492e      	ldr	r1, [pc, #184]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 8001770:	4313      	orrs	r3, r2
 8001772:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	2b00      	cmp	r3, #0
 800177e:	d010      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699a      	ldr	r2, [r3, #24]
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800178c:	429a      	cmp	r2, r3
 800178e:	d208      	bcs.n	80017a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4922      	ldr	r1, [pc, #136]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d010      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69da      	ldr	r2, [r3, #28]
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d208      	bcs.n	80017d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4917      	ldr	r1, [pc, #92]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017d0:	f000 f834 	bl	800183c <HAL_RCC_GetSysClockFreq>
 80017d4:	4602      	mov	r2, r0
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	4912      	ldr	r1, [pc, #72]	; (800182c <HAL_RCC_ClockConfig+0x35c>)
 80017e2:	5ccb      	ldrb	r3, [r1, r3]
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_RCC_ClockConfig+0x358>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	4a0d      	ldr	r2, [pc, #52]	; (800182c <HAL_RCC_ClockConfig+0x35c>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_RCC_ClockConfig+0x360>)
 8001806:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001808:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_RCC_ClockConfig+0x364>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_RCC_ClockConfig+0x368>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe ff54 	bl	80006c0 <HAL_InitTick>
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	58024400 	.word	0x58024400
 800182c:	08001ba0 	.word	0x08001ba0
 8001830:	24000004 	.word	0x24000004
 8001834:	24000000 	.word	0x24000000
 8001838:	24000008 	.word	0x24000008

0800183c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001842:	4bb3      	ldr	r3, [pc, #716]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800184a:	2b18      	cmp	r3, #24
 800184c:	f200 8155 	bhi.w	8001afa <HAL_RCC_GetSysClockFreq+0x2be>
 8001850:	a201      	add	r2, pc, #4	; (adr r2, 8001858 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001856:	bf00      	nop
 8001858:	080018bd 	.word	0x080018bd
 800185c:	08001afb 	.word	0x08001afb
 8001860:	08001afb 	.word	0x08001afb
 8001864:	08001afb 	.word	0x08001afb
 8001868:	08001afb 	.word	0x08001afb
 800186c:	08001afb 	.word	0x08001afb
 8001870:	08001afb 	.word	0x08001afb
 8001874:	08001afb 	.word	0x08001afb
 8001878:	080018e3 	.word	0x080018e3
 800187c:	08001afb 	.word	0x08001afb
 8001880:	08001afb 	.word	0x08001afb
 8001884:	08001afb 	.word	0x08001afb
 8001888:	08001afb 	.word	0x08001afb
 800188c:	08001afb 	.word	0x08001afb
 8001890:	08001afb 	.word	0x08001afb
 8001894:	08001afb 	.word	0x08001afb
 8001898:	080018e9 	.word	0x080018e9
 800189c:	08001afb 	.word	0x08001afb
 80018a0:	08001afb 	.word	0x08001afb
 80018a4:	08001afb 	.word	0x08001afb
 80018a8:	08001afb 	.word	0x08001afb
 80018ac:	08001afb 	.word	0x08001afb
 80018b0:	08001afb 	.word	0x08001afb
 80018b4:	08001afb 	.word	0x08001afb
 80018b8:	080018ef 	.word	0x080018ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018bc:	4b94      	ldr	r3, [pc, #592]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d009      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80018c8:	4b91      	ldr	r3, [pc, #580]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	4a90      	ldr	r2, [pc, #576]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
 80018d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80018da:	e111      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80018dc:	4b8d      	ldr	r3, [pc, #564]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80018de:	61bb      	str	r3, [r7, #24]
    break;
 80018e0:	e10e      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80018e2:	4b8d      	ldr	r3, [pc, #564]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80018e4:	61bb      	str	r3, [r7, #24]
    break;
 80018e6:	e10b      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80018e8:	4b8c      	ldr	r3, [pc, #560]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80018ea:	61bb      	str	r3, [r7, #24]
    break;
 80018ec:	e108      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80018ee:	4b88      	ldr	r3, [pc, #544]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80018f8:	4b85      	ldr	r3, [pc, #532]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001902:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001904:	4b82      	ldr	r3, [pc, #520]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800190e:	4b80      	ldr	r3, [pc, #512]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001912:	08db      	lsrs	r3, r3, #3
 8001914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	fb02 f303 	mul.w	r3, r2, r3
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001926:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80e1 	beq.w	8001af4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b02      	cmp	r3, #2
 8001936:	f000 8083 	beq.w	8001a40 <HAL_RCC_GetSysClockFreq+0x204>
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b02      	cmp	r3, #2
 800193e:	f200 80a1 	bhi.w	8001a84 <HAL_RCC_GetSysClockFreq+0x248>
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x114>
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d056      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800194e:	e099      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001950:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0320 	and.w	r3, r3, #32
 8001958:	2b00      	cmp	r3, #0
 800195a:	d02d      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800195c:	4b6c      	ldr	r3, [pc, #432]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	08db      	lsrs	r3, r3, #3
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	4a6b      	ldr	r2, [pc, #428]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
 800196c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001986:	4b62      	ldr	r3, [pc, #392]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001996:	ed97 6a02 	vldr	s12, [r7, #8]
 800199a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800199e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80019b6:	e087      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001b24 <HAL_RCC_GetSysClockFreq+0x2e8>
 80019c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019ca:	4b51      	ldr	r3, [pc, #324]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019da:	ed97 6a02 	vldr	s12, [r7, #8]
 80019de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 80019e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80019fa:	e065      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001b28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a0e:	4b40      	ldr	r3, [pc, #256]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001a3e:	e043      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001b2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001a82:	e021      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001b28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a96:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001aaa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ac6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	0a5b      	lsrs	r3, r3, #9
 8001ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ae0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aec:	ee17 3a90 	vmov	r3, s15
 8001af0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001af2:	e005      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
    break;
 8001af8:	e002      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001afc:	61bb      	str	r3, [r7, #24]
    break;
 8001afe:	bf00      	nop
  }

  return sysclockfreq;
 8001b00:	69bb      	ldr	r3, [r7, #24]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	58024400 	.word	0x58024400
 8001b14:	03d09000 	.word	0x03d09000
 8001b18:	003d0900 	.word	0x003d0900
 8001b1c:	017d7840 	.word	0x017d7840
 8001b20:	46000000 	.word	0x46000000
 8001b24:	4c742400 	.word	0x4c742400
 8001b28:	4a742400 	.word	0x4a742400
 8001b2c:	4bbebc20 	.word	0x4bbebc20

08001b30 <__libc_init_array>:
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	4d0d      	ldr	r5, [pc, #52]	; (8001b68 <__libc_init_array+0x38>)
 8001b34:	4c0d      	ldr	r4, [pc, #52]	; (8001b6c <__libc_init_array+0x3c>)
 8001b36:	1b64      	subs	r4, r4, r5
 8001b38:	10a4      	asrs	r4, r4, #2
 8001b3a:	2600      	movs	r6, #0
 8001b3c:	42a6      	cmp	r6, r4
 8001b3e:	d109      	bne.n	8001b54 <__libc_init_array+0x24>
 8001b40:	4d0b      	ldr	r5, [pc, #44]	; (8001b70 <__libc_init_array+0x40>)
 8001b42:	4c0c      	ldr	r4, [pc, #48]	; (8001b74 <__libc_init_array+0x44>)
 8001b44:	f000 f820 	bl	8001b88 <_init>
 8001b48:	1b64      	subs	r4, r4, r5
 8001b4a:	10a4      	asrs	r4, r4, #2
 8001b4c:	2600      	movs	r6, #0
 8001b4e:	42a6      	cmp	r6, r4
 8001b50:	d105      	bne.n	8001b5e <__libc_init_array+0x2e>
 8001b52:	bd70      	pop	{r4, r5, r6, pc}
 8001b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b58:	4798      	blx	r3
 8001b5a:	3601      	adds	r6, #1
 8001b5c:	e7ee      	b.n	8001b3c <__libc_init_array+0xc>
 8001b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b62:	4798      	blx	r3
 8001b64:	3601      	adds	r6, #1
 8001b66:	e7f2      	b.n	8001b4e <__libc_init_array+0x1e>
 8001b68:	08001bb0 	.word	0x08001bb0
 8001b6c:	08001bb0 	.word	0x08001bb0
 8001b70:	08001bb0 	.word	0x08001bb0
 8001b74:	08001bb4 	.word	0x08001bb4

08001b78 <memset>:
 8001b78:	4402      	add	r2, r0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d100      	bne.n	8001b82 <memset+0xa>
 8001b80:	4770      	bx	lr
 8001b82:	f803 1b01 	strb.w	r1, [r3], #1
 8001b86:	e7f9      	b.n	8001b7c <memset+0x4>

08001b88 <_init>:
 8001b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8a:	bf00      	nop
 8001b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8e:	bc08      	pop	{r3}
 8001b90:	469e      	mov	lr, r3
 8001b92:	4770      	bx	lr

08001b94 <_fini>:
 8001b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b96:	bf00      	nop
 8001b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b9a:	bc08      	pop	{r3}
 8001b9c:	469e      	mov	lr, r3
 8001b9e:	4770      	bx	lr
