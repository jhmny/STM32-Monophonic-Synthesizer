
STM_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005100  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001040  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006338  08006338  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006338  08006338  00016338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006340  08006340  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006340  08006340  00016340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000428c  20000070  080063c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042fc  080063c0  000242fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015aea  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3d  00000000  00000000  00035b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  000385c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  000392e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd5a  00000000  00000000  00039f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ace  00000000  00000000  00065c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100517  00000000  00000000  00076748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176c5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c4  00000000  00000000  00176cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	080052e0 	.word	0x080052e0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	080052e0 	.word	0x080052e0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <_ZN5CodecC1Ev>:

#define CODEC_RESET_Pin GPIO_PIN_4
//FOR HAL FUNCTIONS
//#include "stm32F7xx_hal.h"

Codec::Codec() {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <_ZN5CodecC1Ev+0x1c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4618      	mov	r0, r3
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	08005300 	.word	0x08005300

08000550 <_ZN5CodecD1Ev>:

Codec::~Codec() {
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <_ZN5CodecD1Ev+0x1c>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4618      	mov	r0, r3
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	08005300 	.word	0x08005300

08000570 <_ZN5CodecD0Ev>:
Codec::~Codec() {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
}
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff ffe9 	bl	8000550 <_ZN5CodecD1Ev>
 800057e:	2104      	movs	r1, #4
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f004 fe16 	bl	80051b2 <_ZdlPvj>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <_ZN5Codec4initEv>:

uint8_t Codec::init(){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOD,CODEC_RESET_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2110      	movs	r1, #16
 80005a0:	4812      	ldr	r0, [pc, #72]	; (80005ec <_ZN5Codec4initEv+0x5c>)
 80005a2:	f002 fabf 	bl	8002b24 <HAL_GPIO_WritePin>
	status += write(0x04, 0xaf);
 80005a6:	22af      	movs	r2, #175	; 0xaf
 80005a8:	2104      	movs	r1, #4
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f000 f820 	bl	80005f0 <_ZN5Codec5writeEhh>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	4413      	add	r3, r2
 80005b8:	73fb      	strb	r3, [r7, #15]
	status += write(0x06, 0x07);
 80005ba:	2207      	movs	r2, #7
 80005bc:	2106      	movs	r1, #6
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f000 f816 	bl	80005f0 <_ZN5Codec5writeEhh>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	4413      	add	r3, r2
 80005cc:	73fb      	strb	r3, [r7, #15]
	status += write(0x02, 0x9e);
 80005ce:	229e      	movs	r2, #158	; 0x9e
 80005d0:	2102      	movs	r1, #2
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 f80c 	bl	80005f0 <_ZN5Codec5writeEhh>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	4413      	add	r3, r2
 80005e0:	73fb      	strb	r3, [r7, #15]

	return status;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40020c00 	.word	0x40020c00

080005f0 <_ZN5Codec5writeEhh>:

uint8_t Codec::write(uint8_t reg, uint8_t val){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af04      	add	r7, sp, #16
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
 80005fc:	4613      	mov	r3, r2
 80005fe:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(&hi2c1, 0x94, reg, 1, &val, sizeof(val), HAL_MAX_DELAY);
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	b29a      	uxth	r2, r3
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	9302      	str	r3, [sp, #8]
 800060e:	2301      	movs	r3, #1
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	1cbb      	adds	r3, r7, #2
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	2194      	movs	r1, #148	; 0x94
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <_ZN5Codec5writeEhh+0x48>)
 800061c:	f002 fb2c 	bl	8002c78 <HAL_I2C_Mem_Write>
 8000620:	4603      	mov	r3, r0
 8000622:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <_ZN5Codec5writeEhh+0x3e>
		return 1;
 800062a:	2301      	movs	r3, #1
 800062c:	e000      	b.n	8000630 <_ZN5Codec5writeEhh+0x40>
	}
	return 0;
 800062e:	2300      	movs	r3, #0
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000d4 	.word	0x200000d4

0800063c <_ZN5SynthC1Ev>:

#include "Synth.h"

//#include "wavetable.h"

Synth::Synth() {
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <_ZN5SynthC1Ev+0x34>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f04f 0200 	mov.w	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f04f 0200 	mov.w	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f04f 0200 	mov.w	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
	// TODO Auto-generated constructor stub

}
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	08006310 	.word	0x08006310

08000674 <_ZN5SynthD1Ev>:

Synth::~Synth() {
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <_ZN5SynthD1Ev+0x1c>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	08006310 	.word	0x08006310

08000694 <_ZN5SynthD0Ev>:
Synth::~Synth() {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
}
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ffe9 	bl	8000674 <_ZN5SynthD1Ev>
 80006a2:	2114      	movs	r1, #20
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f004 fd84 	bl	80051b2 <_ZdlPvj>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <_ZN5Synth18calculateOscilatorEv>:

float Synth::calculateOscilator(){
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	uint16_t a,b;
	float da, db;

	float oscWTBInc = WTB_LEN * (pitch) / SAMPLE_RATE;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	edd3 7a04 	vldr	s15, [r3, #16]
 80006c2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80007f4 <_ZN5Synth18calculateOscilatorEv+0x140>
 80006c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006ca:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80007f8 <_ZN5Synth18calculateOscilatorEv+0x144>
 80006ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006d2:	edc7 7a06 	vstr	s15, [r7, #24]
	oscWTBPointer = oscWTBPointer + oscWTBInc;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80006dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80006e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	edc3 7a01 	vstr	s15, [r3, #4]

	if (oscWTBPointer > WTB_LEN){
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80006f0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80007f4 <_ZN5Synth18calculateOscilatorEv+0x140>
 80006f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006fc:	dd09      	ble.n	8000712 <_ZN5Synth18calculateOscilatorEv+0x5e>
		oscWTBPointer = oscWTBPointer - WTB_LEN;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	edd3 7a01 	vldr	s15, [r3, #4]
 8000704:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80007f4 <_ZN5Synth18calculateOscilatorEv+0x140>
 8000708:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	edc3 7a01 	vstr	s15, [r3, #4]
	}

	a = (int)oscWTBPointer;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	edd3 7a01 	vldr	s15, [r3, #4]
 8000718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800071c:	ee17 3a90 	vmov	r3, s15
 8000720:	82fb      	strh	r3, [r7, #22]
	da = oscWTBPointer - a;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	ed93 7a01 	vldr	s14, [r3, #4]
 8000728:	8afb      	ldrh	r3, [r7, #22]
 800072a:	ee07 3a90 	vmov	s15, r3
 800072e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000736:	edc7 7a04 	vstr	s15, [r7, #16]
	b = a+1;
 800073a:	8afb      	ldrh	r3, [r7, #22]
 800073c:	3301      	adds	r3, #1
 800073e:	83fb      	strh	r3, [r7, #30]

	db = b - oscWTBPointer;
 8000740:	8bfb      	ldrh	r3, [r7, #30]
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000754:	edc7 7a03 	vstr	s15, [r7, #12]

	if (b>= WTB_LEN){
 8000758:	8bfb      	ldrh	r3, [r7, #30]
 800075a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800075e:	d301      	bcc.n	8000764 <_ZN5Synth18calculateOscilatorEv+0xb0>
		b = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	83fb      	strh	r3, [r7, #30]
	}
	osc = db * triangle[a] + da * triangle[b];
 8000764:	8afb      	ldrh	r3, [r7, #22]
 8000766:	4a25      	ldr	r2, [pc, #148]	; (80007fc <_ZN5Synth18calculateOscilatorEv+0x148>)
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	ed93 7a00 	vldr	s14, [r3]
 8000770:	edd7 7a03 	vldr	s15, [r7, #12]
 8000774:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000778:	8bfb      	ldrh	r3, [r7, #30]
 800077a:	4a20      	ldr	r2, [pc, #128]	; (80007fc <_ZN5Synth18calculateOscilatorEv+0x148>)
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	edd3 6a00 	vldr	s13, [r3]
 8000784:	edd7 7a04 	vldr	s15, [r7, #16]
 8000788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800078c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	edc3 7a02 	vstr	s15, [r3, #8]

	signal = osc * 32767.0f;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	edd3 7a02 	vldr	s15, [r3, #8]
 800079c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000800 <_ZN5Synth18calculateOscilatorEv+0x14c>
 80007a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	edc3 7a03 	vstr	s15, [r3, #12]
	if (signal > 32767.0f){
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80007b0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000800 <_ZN5Synth18calculateOscilatorEv+0x14c>
 80007b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007bc:	dd02      	ble.n	80007c4 <_ZN5Synth18calculateOscilatorEv+0x110>
		signal = 32767.0f;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a10      	ldr	r2, [pc, #64]	; (8000804 <_ZN5Synth18calculateOscilatorEv+0x150>)
 80007c2:	60da      	str	r2, [r3, #12]
	}
	if (signal < -32767.0f){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80007ca:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000808 <_ZN5Synth18calculateOscilatorEv+0x154>
 80007ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d6:	d502      	bpl.n	80007de <_ZN5Synth18calculateOscilatorEv+0x12a>
		signal = -32767.0f;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a0c      	ldr	r2, [pc, #48]	; (800080c <_ZN5Synth18calculateOscilatorEv+0x158>)
 80007dc:	60da      	str	r2, [r3, #12]
		}
return signal;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	ee07 3a90 	vmov	s15, r3
}
 80007e6:	eeb0 0a67 	vmov.f32	s0, s15
 80007ea:	3724      	adds	r7, #36	; 0x24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	44800000 	.word	0x44800000
 80007f8:	473b8000 	.word	0x473b8000
 80007fc:	08005308 	.word	0x08005308
 8000800:	46fffe00 	.word	0x46fffe00
 8000804:	46fffe00 	.word	0x46fffe00
 8000808:	c6fffe00 	.word	0xc6fffe00
 800080c:	c6fffe00 	.word	0xc6fffe00

08000810 <_Z9makeSoundt>:
Codec codec;
Synth synth;

int16_t audioBuff[BUFF_LEN];

void makeSound(uint16_t start_index){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i < BUFF_LEN_HALF; i++){
 800081a:	2300      	movs	r3, #0
 800081c:	81fb      	strh	r3, [r7, #14]
 800081e:	89fb      	ldrh	r3, [r7, #14]
 8000820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000824:	d223      	bcs.n	800086e <_Z9makeSoundt+0x5e>
		float signal = synth.calculateOscilator();
 8000826:	4814      	ldr	r0, [pc, #80]	; (8000878 <_Z9makeSoundt+0x68>)
 8000828:	f7ff ff44 	bl	80006b4 <_ZN5Synth18calculateOscilatorEv>
 800082c:	ed87 0a02 	vstr	s0, [r7, #8]
		audioBuff[start_index + i] = (int16_t)signal;
 8000830:	88fa      	ldrh	r2, [r7, #6]
 8000832:	89fb      	ldrh	r3, [r7, #14]
 8000834:	4413      	add	r3, r2
 8000836:	edd7 7a02 	vldr	s15, [r7, #8]
 800083a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800083e:	ee17 2a90 	vmov	r2, s15
 8000842:	b211      	sxth	r1, r2
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <_Z9makeSoundt+0x6c>)
 8000846:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		audioBuff[start_index + i + 1] = (int16_t)signal;
 800084a:	88fa      	ldrh	r2, [r7, #6]
 800084c:	89fb      	ldrh	r3, [r7, #14]
 800084e:	4413      	add	r3, r2
 8000850:	3301      	adds	r3, #1
 8000852:	edd7 7a02 	vldr	s15, [r7, #8]
 8000856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800085a:	ee17 2a90 	vmov	r2, s15
 800085e:	b211      	sxth	r1, r2
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <_Z9makeSoundt+0x6c>)
 8000862:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i=0; i < BUFF_LEN_HALF; i++){
 8000866:	89fb      	ldrh	r3, [r7, #14]
 8000868:	3301      	adds	r3, #1
 800086a:	81fb      	strh	r3, [r7, #14]
 800086c:	e7d7      	b.n	800081e <_Z9makeSoundt+0xe>
	}
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200002cc 	.word	0x200002cc
 800087c:	200002e0 	.word	0x200002e0

08000880 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s3){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	makeSound(0);
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff ffc1 	bl	8000810 <_Z9makeSoundt>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s3){
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
	makeSound(BUFF_LEN_HALF);
 800089e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80008a2:	f7ff ffb5 	bl	8000810 <_Z9makeSoundt>

}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b6:	f000 fe14 	bl	80014e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ba:	f000 f829 	bl	8000910 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008be:	f000 fa1f 	bl	8000d00 <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 80008c2:	f000 f8d1 	bl	8000a68 <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 80008c6:	f000 f9c9 	bl	8000c5c <_ZL19MX_USART3_UART_Initv>
  MX_DMA_Init();
 80008ca:	f000 f9fb 	bl	8000cc4 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80008ce:	f000 f913 	bl	8000af8 <_ZL12MX_I2C1_Initv>
  MX_I2S3_Init();
 80008d2:	f000 f95f 	bl	8000b94 <_ZL12MX_I2S3_Initv>
  MX_UART4_Init();
 80008d6:	f000 f98d 	bl	8000bf4 <_ZL13MX_UART4_Initv>
  /* USER CODE BEGIN 2 */
  uint8_t status = codec.init();
 80008da:	480a      	ldr	r0, [pc, #40]	; (8000904 <main+0x54>)
 80008dc:	f7ff fe58 	bl	8000590 <_ZN5Codec4initEv>
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
    if(status != 0){
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <main+0x3e>
  	  return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e006      	b.n	80008fc <main+0x4c>
    }
    HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)audioBuff, BUFF_LEN);
 80008ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f2:	4905      	ldr	r1, [pc, #20]	; (8000908 <main+0x58>)
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <main+0x5c>)
 80008f6:	f002 fe19 	bl	800352c <HAL_I2S_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <main+0x4a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200002c8 	.word	0x200002c8
 8000908:	200002e0 	.word	0x200002e0
 800090c:	20000120 	.word	0x20000120

08000910 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b0b8      	sub	sp, #224	; 0xe0
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800091a:	2234      	movs	r2, #52	; 0x34
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f004 fc78 	bl	8005214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	2290      	movs	r2, #144	; 0x90
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f004 fc69 	bl	8005214 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <_Z18SystemClock_Configv+0x150>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a46      	ldr	r2, [pc, #280]	; (8000a60 <_Z18SystemClock_Configv+0x150>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b44      	ldr	r3, [pc, #272]	; (8000a60 <_Z18SystemClock_Configv+0x150>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800095a:	4b42      	ldr	r3, [pc, #264]	; (8000a64 <_Z18SystemClock_Configv+0x154>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000962:	4a40      	ldr	r2, [pc, #256]	; (8000a64 <_Z18SystemClock_Configv+0x154>)
 8000964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000968:	6013      	str	r3, [r2, #0]
 800096a:	4b3e      	ldr	r3, [pc, #248]	; (8000a64 <_Z18SystemClock_Configv+0x154>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000976:	2301      	movs	r3, #1
 8000978:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800097c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000980:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000984:	2302      	movs	r3, #2
 8000986:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800098e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000992:	2304      	movs	r3, #4
 8000994:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000998:	23a8      	movs	r3, #168	; 0xa8
 800099a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099e:	2302      	movs	r3, #2
 80009a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a4:	2307      	movs	r3, #7
 80009a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 ff0d 	bl	80037d4 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf14      	ite	ne
 80009c0:	2301      	movne	r3, #1
 80009c2:	2300      	moveq	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80009ca:	f000 fa71 	bl	8000eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ce:	230f      	movs	r3, #15
 80009d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d4:	2302      	movs	r3, #2
 80009d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009f4:	2105      	movs	r1, #5
 80009f6:	4618      	mov	r0, r3
 80009f8:	f003 f99a 	bl	8003d30 <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	bf14      	ite	ne
 8000a02:	2301      	movne	r3, #1
 8000a04:	2300      	moveq	r3, #0
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <_Z18SystemClock_Configv+0x100>
  {
    Error_Handler();
 8000a0c:	f000 fa50 	bl	8000eb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
 8000a10:	f244 3301 	movw	r3, #17153	; 0x4301
 8000a14:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000a16:	2360      	movs	r3, #96	; 0x60
 8000a18:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 fb78 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf14      	ite	ne
 8000a4a:	2301      	movne	r3, #1
 8000a4c:	2300      	moveq	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <_Z18SystemClock_Configv+0x148>
  {
    Error_Handler();
 8000a54:	f000 fa2c 	bl	8000eb0 <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	37e0      	adds	r7, #224	; 0xe0
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000

08000a68 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <_ZL11MX_ETH_Initv+0x84>)
 8000a6e:	4a20      	ldr	r2, [pc, #128]	; (8000af0 <_ZL11MX_ETH_Initv+0x88>)
 8000a70:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000a72:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <_ZL11MX_ETH_Initv+0x84>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <_ZL11MX_ETH_Initv+0x84>)
 8000a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a7e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <_ZL11MX_ETH_Initv+0x84>)
 8000a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a86:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <_ZL11MX_ETH_Initv+0x84>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <_ZL11MX_ETH_Initv+0x8c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <_ZL11MX_ETH_Initv+0x8c>)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <_ZL11MX_ETH_Initv+0x8c>)
 8000a9c:	22e1      	movs	r2, #225	; 0xe1
 8000a9e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <_ZL11MX_ETH_Initv+0x8c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <_ZL11MX_ETH_Initv+0x8c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <_ZL11MX_ETH_Initv+0x8c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <_ZL11MX_ETH_Initv+0x84>)
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <_ZL11MX_ETH_Initv+0x8c>)
 8000ab6:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <_ZL11MX_ETH_Initv+0x84>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <_ZL11MX_ETH_Initv+0x84>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <_ZL11MX_ETH_Initv+0x84>)
 8000ac6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000aca:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <_ZL11MX_ETH_Initv+0x84>)
 8000ace:	f001 fa13 	bl	8001ef8 <HAL_ETH_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf14      	ite	ne
 8000ad8:	2301      	movne	r3, #1
 8000ada:	2300      	moveq	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <_ZL11MX_ETH_Initv+0x7e>
  {
    Error_Handler();
 8000ae2:	f000 f9e5 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000008c 	.word	0x2000008c
 8000af0:	40028000 	.word	0x40028000
 8000af4:	200042e0 	.word	0x200042e0

08000af8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000afc:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <_ZL12MX_I2C1_Initv+0x90>)
 8000afe:	4a23      	ldr	r2, [pc, #140]	; (8000b8c <_ZL12MX_I2C1_Initv+0x94>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A3F7;
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <_ZL12MX_I2C1_Initv+0x90>)
 8000b04:	4a22      	ldr	r2, [pc, #136]	; (8000b90 <_ZL12MX_I2C1_Initv+0x98>)
 8000b06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <_ZL12MX_I2C1_Initv+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <_ZL12MX_I2C1_Initv+0x90>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <_ZL12MX_I2C1_Initv+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <_ZL12MX_I2C1_Initv+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <_ZL12MX_I2C1_Initv+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <_ZL12MX_I2C1_Initv+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <_ZL12MX_I2C1_Initv+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b32:	4815      	ldr	r0, [pc, #84]	; (8000b88 <_ZL12MX_I2C1_Initv+0x90>)
 8000b34:	f002 f810 	bl	8002b58 <HAL_I2C_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bf14      	ite	ne
 8000b3e:	2301      	movne	r3, #1
 8000b40:	2300      	moveq	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000b48:	f000 f9b2 	bl	8000eb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <_ZL12MX_I2C1_Initv+0x90>)
 8000b50:	f002 fb6e 	bl	8003230 <HAL_I2CEx_ConfigAnalogFilter>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf14      	ite	ne
 8000b5a:	2301      	movne	r3, #1
 8000b5c:	2300      	moveq	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000b64:	f000 f9a4 	bl	8000eb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <_ZL12MX_I2C1_Initv+0x90>)
 8000b6c:	f002 fbab 	bl	80032c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	bf14      	ite	ne
 8000b76:	2301      	movne	r3, #1
 8000b78:	2300      	moveq	r3, #0
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000b80:	f000 f996 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000d4 	.word	0x200000d4
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	00a0a3f7 	.word	0x00a0a3f7

08000b94 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <_ZL12MX_I2S3_Initv+0x58>)
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <_ZL12MX_I2S3_Initv+0x5c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <_ZL12MX_I2S3_Initv+0x58>)
 8000ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <_ZL12MX_I2S3_Initv+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <_ZL12MX_I2S3_Initv+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <_ZL12MX_I2S3_Initv+0x58>)
 8000bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <_ZL12MX_I2S3_Initv+0x58>)
 8000bbc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000bc0:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <_ZL12MX_I2S3_Initv+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <_ZL12MX_I2S3_Initv+0x58>)
 8000bca:	2202      	movs	r2, #2
 8000bcc:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bce:	4807      	ldr	r0, [pc, #28]	; (8000bec <_ZL12MX_I2S3_Initv+0x58>)
 8000bd0:	f002 fbc6 	bl	8003360 <HAL_I2S_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	bf14      	ite	ne
 8000bda:	2301      	movne	r3, #1
 8000bdc:	2300      	moveq	r3, #0
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <_ZL12MX_I2S3_Initv+0x54>
  {
    Error_Handler();
 8000be4:	f000 f964 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000120 	.word	0x20000120
 8000bf0:	40003c00 	.word	0x40003c00

08000bf4 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <_ZL13MX_UART4_Initv+0x60>)
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <_ZL13MX_UART4_Initv+0x64>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <_ZL13MX_UART4_Initv+0x60>)
 8000c00:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000c04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_ZL13MX_UART4_Initv+0x60>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_ZL13MX_UART4_Initv+0x60>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_ZL13MX_UART4_Initv+0x60>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <_ZL13MX_UART4_Initv+0x60>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <_ZL13MX_UART4_Initv+0x60>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <_ZL13MX_UART4_Initv+0x60>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <_ZL13MX_UART4_Initv+0x60>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_ZL13MX_UART4_Initv+0x60>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <_ZL13MX_UART4_Initv+0x60>)
 8000c38:	f003 fea4 	bl	8004984 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	bf14      	ite	ne
 8000c42:	2301      	movne	r3, #1
 8000c44:	2300      	moveq	r3, #0
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8000c4c:	f000 f930 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200001c0 	.word	0x200001c0
 8000c58:	40004c00 	.word	0x40004c00

08000c5c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000c62:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c9e:	4807      	ldr	r0, [pc, #28]	; (8000cbc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000ca0:	f003 fe70 	bl	8004984 <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	bf14      	ite	ne
 8000caa:	2301      	movne	r3, #1
 8000cac:	2300      	moveq	r3, #0
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8000cb4:	f000 f8fc 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000244 	.word	0x20000244
 8000cc0:	40004800 	.word	0x40004800

08000cc4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <_ZL11MX_DMA_Initv+0x38>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <_ZL11MX_DMA_Initv+0x38>)
 8000cd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <_ZL11MX_DMA_Initv+0x38>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2010      	movs	r0, #16
 8000ce8:	f000 fd57 	bl	800179a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cec:	2010      	movs	r0, #16
 8000cee:	f000 fd70 	bl	80017d2 <HAL_NVIC_EnableIRQ>

}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b5f      	ldr	r3, [pc, #380]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a5e      	ldr	r2, [pc, #376]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b5c      	ldr	r3, [pc, #368]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	61bb      	str	r3, [r7, #24]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2e:	4b59      	ldr	r3, [pc, #356]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a58      	ldr	r2, [pc, #352]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b56      	ldr	r3, [pc, #344]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a52      	ldr	r2, [pc, #328]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b50      	ldr	r3, [pc, #320]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	4b4d      	ldr	r3, [pc, #308]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a4c      	ldr	r2, [pc, #304]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d76:	4b47      	ldr	r3, [pc, #284]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a46      	ldr	r2, [pc, #280]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b44      	ldr	r3, [pc, #272]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8e:	4b41      	ldr	r3, [pc, #260]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a40      	ldr	r2, [pc, #256]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <_ZL12MX_GPIO_Initv+0x194>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000dac:	483a      	ldr	r0, [pc, #232]	; (8000e98 <_ZL12MX_GPIO_Initv+0x198>)
 8000dae:	f001 feb9 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	4839      	ldr	r0, [pc, #228]	; (8000e9c <_ZL12MX_GPIO_Initv+0x19c>)
 8000db8:	f001 feb4 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_RESET_GPIO_Port, CODEC_RESET_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	4837      	ldr	r0, [pc, #220]	; (8000ea0 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000dc2:	f001 feaf 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dcc:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4833      	ldr	r0, [pc, #204]	; (8000ea8 <_ZL12MX_GPIO_Initv+0x1a8>)
 8000ddc:	f001 fcf6 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000de0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4827      	ldr	r0, [pc, #156]	; (8000e98 <_ZL12MX_GPIO_Initv+0x198>)
 8000dfa:	f001 fce7 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dfe:	2340      	movs	r3, #64	; 0x40
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4821      	ldr	r0, [pc, #132]	; (8000e9c <_ZL12MX_GPIO_Initv+0x19c>)
 8000e16:	f001 fcd9 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	481b      	ldr	r0, [pc, #108]	; (8000e9c <_ZL12MX_GPIO_Initv+0x19c>)
 8000e2e:	f001 fccd 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e32:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e44:	230a      	movs	r3, #10
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4817      	ldr	r0, [pc, #92]	; (8000eac <_ZL12MX_GPIO_Initv+0x1ac>)
 8000e50:	f001 fcbc 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4810      	ldr	r0, [pc, #64]	; (8000eac <_ZL12MX_GPIO_Initv+0x1ac>)
 8000e6a:	f001 fcaf 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_RESET_Pin */
  GPIO_InitStruct.Pin = CODEC_RESET_Pin;
 8000e6e:	2310      	movs	r3, #16
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CODEC_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000e86:	f001 fca1 	bl	80027cc <HAL_GPIO_Init>

}
 8000e8a:	bf00      	nop
 8000e8c:	3730      	adds	r7, #48	; 0x30
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40021800 	.word	0x40021800
 8000ea0:	40020c00 	.word	0x40020c00
 8000ea4:	10110000 	.word	0x10110000
 8000ea8:	40020800 	.word	0x40020800
 8000eac:	40020000 	.word	0x40020000

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d10a      	bne.n	8000ee2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d105      	bne.n	8000ee2 <_Z41__static_initialization_and_destruction_0ii+0x26>
Codec codec;
 8000ed6:	480c      	ldr	r0, [pc, #48]	; (8000f08 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000ed8:	f7ff fb2a 	bl	8000530 <_ZN5CodecC1Ev>
Synth synth;
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000ede:	f7ff fbad 	bl	800063c <_ZN5SynthC1Ev>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10a      	bne.n	8000efe <_Z41__static_initialization_and_destruction_0ii+0x42>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d105      	bne.n	8000efe <_Z41__static_initialization_and_destruction_0ii+0x42>
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000ef4:	f7ff fbbe 	bl	8000674 <_ZN5SynthD1Ev>
Codec codec;
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000efa:	f7ff fb29 	bl	8000550 <_ZN5CodecD1Ev>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200002c8 	.word	0x200002c8
 8000f0c:	200002cc 	.word	0x200002cc

08000f10 <_GLOBAL__sub_I_heth>:
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f7ff ffcf 	bl	8000ebc <_Z41__static_initialization_and_destruction_0ii>
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_GLOBAL__sub_D_heth>:
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff ffc7 	bl	8000ebc <_Z41__static_initialization_and_destruction_0ii>
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_MspInit+0x44>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_MspInit+0x44>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_MspInit+0x44>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_MspInit+0x44>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_MspInit+0x44>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_MspInit+0x44>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08e      	sub	sp, #56	; 0x38
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <HAL_ETH_MspInit+0x158>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	f040 8096 	bne.w	80010c8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f9c:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa8:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	623b      	str	r3, [r7, #32]
 8000fb2:	6a3b      	ldr	r3, [r7, #32]
 8000fb4:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4a46      	ldr	r2, [pc, #280]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc0:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a40      	ldr	r2, [pc, #256]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe4:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a3a      	ldr	r2, [pc, #232]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b38      	ldr	r3, [pc, #224]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a34      	ldr	r2, [pc, #208]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	6313      	str	r3, [r2, #48]	; 0x30
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a28      	ldr	r2, [pc, #160]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8001032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001044:	2332      	movs	r3, #50	; 0x32
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001054:	230b      	movs	r3, #11
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	481e      	ldr	r0, [pc, #120]	; (80010d8 <HAL_ETH_MspInit+0x160>)
 8001060:	f001 fbb4 	bl	80027cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001064:	2386      	movs	r3, #134	; 0x86
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001074:	230b      	movs	r3, #11
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4817      	ldr	r0, [pc, #92]	; (80010dc <HAL_ETH_MspInit+0x164>)
 8001080:	f001 fba4 	bl	80027cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001096:	230b      	movs	r3, #11
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	480f      	ldr	r0, [pc, #60]	; (80010e0 <HAL_ETH_MspInit+0x168>)
 80010a2:	f001 fb93 	bl	80027cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b8:	230b      	movs	r3, #11
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4808      	ldr	r0, [pc, #32]	; (80010e4 <HAL_ETH_MspInit+0x16c>)
 80010c4:	f001 fb82 	bl	80027cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40028000 	.word	0x40028000
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40021800 	.word	0x40021800

080010e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <HAL_I2C_MspInit+0x7c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d128      	bne.n	800115c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_I2C_MspInit+0x80>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a16      	ldr	r2, [pc, #88]	; (8001168 <HAL_I2C_MspInit+0x80>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_I2C_MspInit+0x80>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001122:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001128:	2312      	movs	r3, #18
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001134:	2304      	movs	r3, #4
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	480b      	ldr	r0, [pc, #44]	; (800116c <HAL_I2C_MspInit+0x84>)
 8001140:	f001 fb44 	bl	80027cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_I2C_MspInit+0x80>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_I2C_MspInit+0x80>)
 800114a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800114e:	6413      	str	r3, [r2, #64]	; 0x40
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_I2C_MspInit+0x80>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40005400 	.word	0x40005400
 8001168:	40023800 	.word	0x40023800
 800116c:	40020400 	.word	0x40020400

08001170 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a4c      	ldr	r2, [pc, #304]	; (80012c0 <HAL_I2S_MspInit+0x150>)
 800118e:	4293      	cmp	r3, r2
 8001190:	f040 8092 	bne.w	80012b8 <HAL_I2S_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001194:	4b4b      	ldr	r3, [pc, #300]	; (80012c4 <HAL_I2S_MspInit+0x154>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a4a      	ldr	r2, [pc, #296]	; (80012c4 <HAL_I2S_MspInit+0x154>)
 800119a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
 80011a0:	4b48      	ldr	r3, [pc, #288]	; (80012c4 <HAL_I2S_MspInit+0x154>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011a8:	61bb      	str	r3, [r7, #24]
 80011aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <HAL_I2S_MspInit+0x154>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <HAL_I2S_MspInit+0x154>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
 80011b8:	4b42      	ldr	r3, [pc, #264]	; (80012c4 <HAL_I2S_MspInit+0x154>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <HAL_I2S_MspInit+0x154>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a3e      	ldr	r2, [pc, #248]	; (80012c4 <HAL_I2S_MspInit+0x154>)
 80011ca:	f043 0302 	orr.w	r3, r3, #2
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
 80011d0:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <HAL_I2S_MspInit+0x154>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <HAL_I2S_MspInit+0x154>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	4a38      	ldr	r2, [pc, #224]	; (80012c4 <HAL_I2S_MspInit+0x154>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6313      	str	r3, [r2, #48]	; 0x30
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <HAL_I2S_MspInit+0x154>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S3_WS
    PB2     ------> I2S3_SD
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011f4:	2310      	movs	r3, #16
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001204:	2306      	movs	r3, #6
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	482e      	ldr	r0, [pc, #184]	; (80012c8 <HAL_I2S_MspInit+0x158>)
 8001210:	f001 fadc 	bl	80027cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001214:	2304      	movs	r3, #4
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001224:	2307      	movs	r3, #7
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	4827      	ldr	r0, [pc, #156]	; (80012cc <HAL_I2S_MspInit+0x15c>)
 8001230:	f001 facc 	bl	80027cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8001234:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001246:	2306      	movs	r3, #6
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	481f      	ldr	r0, [pc, #124]	; (80012d0 <HAL_I2S_MspInit+0x160>)
 8001252:	f001 fabb 	bl	80027cc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_I2S_MspInit+0x164>)
 8001258:	4a1f      	ldr	r2, [pc, #124]	; (80012d8 <HAL_I2S_MspInit+0x168>)
 800125a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_I2S_MspInit+0x164>)
 800125e:	2200      	movs	r2, #0
 8001260:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <HAL_I2S_MspInit+0x164>)
 8001264:	2240      	movs	r2, #64	; 0x40
 8001266:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_I2S_MspInit+0x164>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_I2S_MspInit+0x164>)
 8001270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001274:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_I2S_MspInit+0x164>)
 8001278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800127c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_I2S_MspInit+0x164>)
 8001280:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001284:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_I2S_MspInit+0x164>)
 8001288:	f44f 7280 	mov.w	r2, #256	; 0x100
 800128c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_I2S_MspInit+0x164>)
 8001290:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001294:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_I2S_MspInit+0x164>)
 8001298:	2200      	movs	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <HAL_I2S_MspInit+0x164>)
 800129e:	f000 fab3 	bl	8001808 <HAL_DMA_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 80012a8:	f7ff fe02 	bl	8000eb0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <HAL_I2S_MspInit+0x164>)
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_I2S_MspInit+0x164>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	3730      	adds	r7, #48	; 0x30
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40003c00 	.word	0x40003c00
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020800 	.word	0x40020800
 80012d4:	20000160 	.word	0x20000160
 80012d8:	40026088 	.word	0x40026088

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a3d      	ldr	r2, [pc, #244]	; (80013f0 <HAL_UART_MspInit+0x114>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d145      	bne.n	800138a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012fe:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <HAL_UART_MspInit+0x118>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a3c      	ldr	r2, [pc, #240]	; (80013f4 <HAL_UART_MspInit+0x118>)
 8001304:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <HAL_UART_MspInit+0x118>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <HAL_UART_MspInit+0x118>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a36      	ldr	r2, [pc, #216]	; (80013f4 <HAL_UART_MspInit+0x118>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <HAL_UART_MspInit+0x118>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_UART_MspInit+0x118>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <HAL_UART_MspInit+0x118>)
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <HAL_UART_MspInit+0x118>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001358:	2308      	movs	r3, #8
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4825      	ldr	r0, [pc, #148]	; (80013f8 <HAL_UART_MspInit+0x11c>)
 8001364:	f001 fa32 	bl	80027cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001368:	2302      	movs	r3, #2
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001378:	2308      	movs	r3, #8
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	481e      	ldr	r0, [pc, #120]	; (80013fc <HAL_UART_MspInit+0x120>)
 8001384:	f001 fa22 	bl	80027cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001388:	e02d      	b.n	80013e6 <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART3)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <HAL_UART_MspInit+0x124>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d128      	bne.n	80013e6 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_UART_MspInit+0x118>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <HAL_UART_MspInit+0x118>)
 800139a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139e:	6413      	str	r3, [r2, #64]	; 0x40
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_UART_MspInit+0x118>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_UART_MspInit+0x118>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_UART_MspInit+0x118>)
 80013b2:	f043 0308 	orr.w	r3, r3, #8
 80013b6:	6313      	str	r3, [r2, #48]	; 0x30
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_UART_MspInit+0x118>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013d6:	2307      	movs	r3, #7
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <HAL_UART_MspInit+0x120>)
 80013e2:	f001 f9f3 	bl	80027cc <HAL_GPIO_Init>
}
 80013e6:	bf00      	nop
 80013e8:	3730      	adds	r7, #48	; 0x30
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40004c00 	.word	0x40004c00
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40004800 	.word	0x40004800

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <NMI_Handler+0x4>

0800140a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler+0x4>

08001416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <UsageFault_Handler+0x4>

08001422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001450:	f000 f884 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DMA1_Stream5_IRQHandler+0x10>)
 800145e:	f000 fae1 	bl	8001a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000160 	.word	0x20000160

0800146c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001496:	490e      	ldr	r1, [pc, #56]	; (80014d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014ac:	4c0b      	ldr	r4, [pc, #44]	; (80014dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ba:	f7ff ffd7 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014be:	f003 fe7d 	bl	80051bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c2:	f7ff f9f5 	bl	80008b0 <main>
  bx  lr    
 80014c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014d4:	08006350 	.word	0x08006350
  ldr r2, =_sbss
 80014d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014dc:	200042fc 	.word	0x200042fc

080014e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC_IRQHandler>

080014e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e6:	2003      	movs	r0, #3
 80014e8:	f000 f94c 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f000 f805 	bl	80014fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80014f2:	f7ff fd1d 	bl	8000f30 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f967 	bl	80017ee <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f000 f92f 	bl	800179a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000000 	.word	0x20000000
 8001554:	20000008 	.word	0x20000008
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000008 	.word	0x20000008
 8001580:	200042ec 	.word	0x200042ec

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200042ec 	.word	0x200042ec

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffde 	bl	8001584 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <__NVIC_SetPriorityGrouping+0x40>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	4313      	orrs	r3, r2
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <__NVIC_SetPriorityGrouping+0x40>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00
 8001628:	05fa0000 	.word	0x05fa0000

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4907      	ldr	r1, [pc, #28]	; (8001680 <__NVIC_EnableIRQ+0x38>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001750:	d301      	bcc.n	8001756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2301      	movs	r3, #1
 8001754:	e00f      	b.n	8001776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <SysTick_Config+0x40>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175e:	210f      	movs	r1, #15
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f7ff ff8e 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <SysTick_Config+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <SysTick_Config+0x40>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff29 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ac:	f7ff ff3e 	bl	800162c <__NVIC_GetPriorityGrouping>
 80017b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7ff ff8e 	bl	80016d8 <NVIC_EncodePriority>
 80017bc:	4602      	mov	r2, r0
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff5d 	bl	8001684 <__NVIC_SetPriority>
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff31 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffa2 	bl	8001740 <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff feb6 	bl	8001584 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e099      	b.n	8001958 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2202      	movs	r2, #2
 8001830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001844:	e00f      	b.n	8001866 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001846:	f7ff fe9d 	bl	8001584 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b05      	cmp	r3, #5
 8001852:	d908      	bls.n	8001866 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2220      	movs	r2, #32
 8001858:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2203      	movs	r2, #3
 800185e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e078      	b.n	8001958 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e8      	bne.n	8001846 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	4b38      	ldr	r3, [pc, #224]	; (8001960 <HAL_DMA_Init+0x158>)
 8001880:	4013      	ands	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001892:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d107      	bne.n	80018d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	4313      	orrs	r3, r2
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f023 0307 	bic.w	r3, r3, #7
 80018e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d117      	bne.n	800192a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4313      	orrs	r3, r2
 8001902:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00e      	beq.n	800192a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 fa77 	bl	8001e00 <DMA_CheckFifoParam>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d008      	beq.n	800192a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2240      	movs	r2, #64	; 0x40
 800191c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001926:	2301      	movs	r3, #1
 8001928:	e016      	b.n	8001958 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fa2e 	bl	8001d94 <DMA_CalcBaseAndBitshift>
 8001938:	4603      	mov	r3, r0
 800193a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001940:	223f      	movs	r2, #63	; 0x3f
 8001942:	409a      	lsls	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	e010803f 	.word	0xe010803f

08001964 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_DMA_Start_IT+0x26>
 8001986:	2302      	movs	r3, #2
 8001988:	e048      	b.n	8001a1c <HAL_DMA_Start_IT+0xb8>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d137      	bne.n	8001a0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2202      	movs	r2, #2
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f9c0 	bl	8001d38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	223f      	movs	r2, #63	; 0x3f
 80019be:	409a      	lsls	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0216 	orr.w	r2, r2, #22
 80019d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019e2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d007      	beq.n	80019fc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0208 	orr.w	r2, r2, #8
 80019fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e005      	b.n	8001a1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a16:	2302      	movs	r3, #2
 8001a18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001a30:	4b92      	ldr	r3, [pc, #584]	; (8001c7c <HAL_DMA_IRQHandler+0x258>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a92      	ldr	r2, [pc, #584]	; (8001c80 <HAL_DMA_IRQHandler+0x25c>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	0a9b      	lsrs	r3, r3, #10
 8001a3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4e:	2208      	movs	r2, #8
 8001a50:	409a      	lsls	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01a      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d013      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0204 	bic.w	r2, r2, #4
 8001a76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a88:	f043 0201 	orr.w	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2201      	movs	r2, #1
 8001a96:	409a      	lsls	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d012      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abe:	f043 0202 	orr.w	r2, r3, #2
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	2204      	movs	r2, #4
 8001acc:	409a      	lsls	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d012      	beq.n	8001afc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00b      	beq.n	8001afc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae8:	2204      	movs	r2, #4
 8001aea:	409a      	lsls	r2, r3
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af4:	f043 0204 	orr.w	r2, r3, #4
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	2210      	movs	r2, #16
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d043      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d03c      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1e:	2210      	movs	r2, #16
 8001b20:	409a      	lsls	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d018      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d108      	bne.n	8001b54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d024      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
 8001b52:	e01f      	b.n	8001b94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01b      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
 8001b64:	e016      	b.n	8001b94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0208 	bic.w	r2, r2, #8
 8001b82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b98:	2220      	movs	r2, #32
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 808e 	beq.w	8001cc2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 8086 	beq.w	8001cc2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bba:	2220      	movs	r2, #32
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b05      	cmp	r3, #5
 8001bcc:	d136      	bne.n	8001c3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0216 	bic.w	r2, r2, #22
 8001bdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <HAL_DMA_IRQHandler+0x1da>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0208 	bic.w	r2, r2, #8
 8001c0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c12:	223f      	movs	r2, #63	; 0x3f
 8001c14:	409a      	lsls	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d07d      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
        }
        return;
 8001c3a:	e078      	b.n	8001d2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d01c      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d108      	bne.n	8001c6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d030      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
 8001c68:	e02b      	b.n	8001cc2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d027      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	4798      	blx	r3
 8001c7a:	e022      	b.n	8001cc2 <HAL_DMA_IRQHandler+0x29e>
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10f      	bne.n	8001cb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0210 	bic.w	r2, r2, #16
 8001ca0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d032      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d022      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2205      	movs	r2, #5
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d307      	bcc.n	8001d0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f2      	bne.n	8001cee <HAL_DMA_IRQHandler+0x2ca>
 8001d08:	e000      	b.n	8001d0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d0a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
 8001d2c:	e000      	b.n	8001d30 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d2e:	bf00      	nop
    }
  }
}
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop

08001d38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b40      	cmp	r3, #64	; 0x40
 8001d64:	d108      	bne.n	8001d78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d76:	e007      	b.n	8001d88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	60da      	str	r2, [r3, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	3b10      	subs	r3, #16
 8001da4:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <DMA_CalcBaseAndBitshift+0x60>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <DMA_CalcBaseAndBitshift+0x64>)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d908      	bls.n	8001dd4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <DMA_CalcBaseAndBitshift+0x68>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	1d1a      	adds	r2, r3, #4
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	659a      	str	r2, [r3, #88]	; 0x58
 8001dd2:	e006      	b.n	8001de2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <DMA_CalcBaseAndBitshift+0x68>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	aaaaaaab 	.word	0xaaaaaaab
 8001df8:	08006330 	.word	0x08006330
 8001dfc:	fffffc00 	.word	0xfffffc00

08001e00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d11f      	bne.n	8001e5a <DMA_CheckFifoParam+0x5a>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d856      	bhi.n	8001ece <DMA_CheckFifoParam+0xce>
 8001e20:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <DMA_CheckFifoParam+0x28>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001e39 	.word	0x08001e39
 8001e2c:	08001e4b 	.word	0x08001e4b
 8001e30:	08001e39 	.word	0x08001e39
 8001e34:	08001ecf 	.word	0x08001ecf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d046      	beq.n	8001ed2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e48:	e043      	b.n	8001ed2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e52:	d140      	bne.n	8001ed6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e58:	e03d      	b.n	8001ed6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e62:	d121      	bne.n	8001ea8 <DMA_CheckFifoParam+0xa8>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d837      	bhi.n	8001eda <DMA_CheckFifoParam+0xda>
 8001e6a:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <DMA_CheckFifoParam+0x70>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001e81 	.word	0x08001e81
 8001e74:	08001e87 	.word	0x08001e87
 8001e78:	08001e81 	.word	0x08001e81
 8001e7c:	08001e99 	.word	0x08001e99
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
      break;
 8001e84:	e030      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d025      	beq.n	8001ede <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e96:	e022      	b.n	8001ede <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ea0:	d11f      	bne.n	8001ee2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ea6:	e01c      	b.n	8001ee2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d903      	bls.n	8001eb6 <DMA_CheckFifoParam+0xb6>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d003      	beq.n	8001ebc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001eb4:	e018      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8001eba:	e015      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00e      	beq.n	8001ee6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
      break;
 8001ecc:	e00b      	b.n	8001ee6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ece:	bf00      	nop
 8001ed0:	e00a      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ed2:	bf00      	nop
 8001ed4:	e008      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ed6:	bf00      	nop
 8001ed8:	e006      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8001eda:	bf00      	nop
 8001edc:	e004      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ede:	bf00      	nop
 8001ee0:	e002      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ee2:	bf00      	nop
 8001ee4:	e000      	b.n	8001ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ee6:	bf00      	nop
    }
  } 
  
  return status; 
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop

08001ef8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001f08:	4ba9      	ldr	r3, [pc, #676]	; (80021b0 <HAL_ETH_Init+0x2b8>)
 8001f0a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e181      	b.n	8002222 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff f820 	bl	8000f78 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f38:	4b9e      	ldr	r3, [pc, #632]	; (80021b4 <HAL_ETH_Init+0x2bc>)
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	4a9d      	ldr	r2, [pc, #628]	; (80021b4 <HAL_ETH_Init+0x2bc>)
 8001f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f42:	6453      	str	r3, [r2, #68]	; 0x44
 8001f44:	4b9b      	ldr	r3, [pc, #620]	; (80021b4 <HAL_ETH_Init+0x2bc>)
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f50:	4b99      	ldr	r3, [pc, #612]	; (80021b8 <HAL_ETH_Init+0x2c0>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4a98      	ldr	r2, [pc, #608]	; (80021b8 <HAL_ETH_Init+0x2c0>)
 8001f56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f5a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f5c:	4b96      	ldr	r3, [pc, #600]	; (80021b8 <HAL_ETH_Init+0x2c0>)
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4994      	ldr	r1, [pc, #592]	; (80021b8 <HAL_ETH_Init+0x2c0>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0201 	orr.w	r2, r2, #1
 8001f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f80:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f82:	f7ff faff 	bl	8001584 <HAL_GetTick>
 8001f86:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f88:	e011      	b.n	8001fae <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001f8a:	f7ff fafb 	bl	8001584 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f98:	d909      	bls.n	8001fae <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e139      	b.n	8002222 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e4      	bne.n	8001f8a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f023 031c 	bic.w	r3, r3, #28
 8001fce:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001fd0:	f002 f87c 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 8001fd4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4a78      	ldr	r2, [pc, #480]	; (80021bc <HAL_ETH_Init+0x2c4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d908      	bls.n	8001ff0 <HAL_ETH_Init+0xf8>
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4a77      	ldr	r2, [pc, #476]	; (80021c0 <HAL_ETH_Init+0x2c8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d804      	bhi.n	8001ff0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f043 0308 	orr.w	r3, r3, #8
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e027      	b.n	8002040 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	4a73      	ldr	r2, [pc, #460]	; (80021c0 <HAL_ETH_Init+0x2c8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d908      	bls.n	800200a <HAL_ETH_Init+0x112>
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	4a6d      	ldr	r2, [pc, #436]	; (80021b0 <HAL_ETH_Init+0x2b8>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d204      	bcs.n	800200a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f043 030c 	orr.w	r3, r3, #12
 8002006:	61fb      	str	r3, [r7, #28]
 8002008:	e01a      	b.n	8002040 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4a68      	ldr	r2, [pc, #416]	; (80021b0 <HAL_ETH_Init+0x2b8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d303      	bcc.n	800201a <HAL_ETH_Init+0x122>
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4a6b      	ldr	r2, [pc, #428]	; (80021c4 <HAL_ETH_Init+0x2cc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d911      	bls.n	800203e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4a69      	ldr	r2, [pc, #420]	; (80021c4 <HAL_ETH_Init+0x2cc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d908      	bls.n	8002034 <HAL_ETH_Init+0x13c>
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4a68      	ldr	r2, [pc, #416]	; (80021c8 <HAL_ETH_Init+0x2d0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d804      	bhi.n	8002034 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e005      	b.n	8002040 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	e000      	b.n	8002040 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800203e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002048:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800204c:	2100      	movs	r1, #0
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f954 	bl	80022fc <HAL_ETH_WritePHYRegister>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800205e:	6939      	ldr	r1, [r7, #16]
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f9b1 	bl	80023c8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0d7      	b.n	8002222 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002072:	20ff      	movs	r0, #255	; 0xff
 8002074:	f7ff fa92 	bl	800159c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80a5 	beq.w	80021cc <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002082:	f7ff fa7f 	bl	8001584 <HAL_GetTick>
 8002086:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	461a      	mov	r2, r3
 800208e:	2101      	movs	r1, #1
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f8cb 	bl	800222c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002096:	f7ff fa75 	bl	8001584 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d90f      	bls.n	80020c8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80020ac:	6939      	ldr	r1, [r7, #16]
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f98a 	bl	80023c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0ac      	b.n	8002222 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0da      	beq.n	8002088 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80020d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020d6:	2100      	movs	r1, #0
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f90f 	bl	80022fc <HAL_ETH_WritePHYRegister>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00b      	beq.n	80020fc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020e8:	6939      	ldr	r1, [r7, #16]
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f96c 	bl	80023c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80020f8:	2301      	movs	r3, #1
 80020fa:	e092      	b.n	8002222 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80020fc:	f7ff fa42 	bl	8001584 <HAL_GetTick>
 8002100:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002102:	f107 030c 	add.w	r3, r7, #12
 8002106:	461a      	mov	r2, r3
 8002108:	2101      	movs	r1, #1
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f88e 	bl	800222c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002110:	f7ff fa38 	bl	8001584 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d90f      	bls.n	8002142 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002126:	6939      	ldr	r1, [r7, #16]
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f94d 	bl	80023c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e06f      	b.n	8002222 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0da      	beq.n	8002102 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	461a      	mov	r2, r3
 8002152:	2110      	movs	r1, #16
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f869 	bl	800222c <HAL_ETH_ReadPHYRegister>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00b      	beq.n	8002178 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002164:	6939      	ldr	r1, [r7, #16]
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f92e 	bl	80023c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002174:	2301      	movs	r3, #1
 8002176:	e054      	b.n	8002222 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d004      	beq.n	800218c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	e002      	b.n	8002192 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	e035      	b.n	8002210 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	e030      	b.n	8002210 <HAL_ETH_Init+0x318>
 80021ae:	bf00      	nop
 80021b0:	03938700 	.word	0x03938700
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40013800 	.word	0x40013800
 80021bc:	01312cff 	.word	0x01312cff
 80021c0:	02160ebf 	.word	0x02160ebf
 80021c4:	05f5e0ff 	.word	0x05f5e0ff
 80021c8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80021dc:	4313      	orrs	r3, r2
 80021de:	b29b      	uxth	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	2100      	movs	r1, #0
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f889 	bl	80022fc <HAL_ETH_WritePHYRegister>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00b      	beq.n	8002208 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f8e6 	bl	80023c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e00c      	b.n	8002222 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002208:	f640 70ff 	movw	r0, #4095	; 0xfff
 800220c:	f7ff f9c6 	bl	800159c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002210:	6939      	ldr	r1, [r7, #16]
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f8d8 	bl	80023c8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop

0800222c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	460b      	mov	r3, r1
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b82      	cmp	r3, #130	; 0x82
 800224c:	d101      	bne.n	8002252 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800224e:	2302      	movs	r3, #2
 8002250:	e050      	b.n	80022f4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2282      	movs	r2, #130	; 0x82
 8002256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 031c 	and.w	r3, r3, #28
 8002268:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8a1b      	ldrh	r3, [r3, #16]
 800226e:	02db      	lsls	r3, r3, #11
 8002270:	b29b      	uxth	r3, r3
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002278:	897b      	ldrh	r3, [r7, #10]
 800227a:	019b      	lsls	r3, r3, #6
 800227c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f023 0302 	bic.w	r3, r3, #2
 800228c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800229e:	f7ff f971 	bl	8001584 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022a4:	e015      	b.n	80022d2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80022a6:	f7ff f96d 	bl	8001584 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d309      	bcc.n	80022ca <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e014      	b.n	80022f4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e4      	bne.n	80022a6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	460b      	mov	r3, r1
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b42      	cmp	r3, #66	; 0x42
 800231c:	d101      	bne.n	8002322 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
 8002320:	e04e      	b.n	80023c0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2242      	movs	r2, #66	; 0x42
 8002326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f003 031c 	and.w	r3, r3, #28
 8002338:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8a1b      	ldrh	r3, [r3, #16]
 800233e:	02db      	lsls	r3, r3, #11
 8002340:	b29b      	uxth	r3, r3
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002348:	897b      	ldrh	r3, [r7, #10]
 800234a:	019b      	lsls	r3, r3, #6
 800234c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002378:	f7ff f904 	bl	8001584 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800237e:	e015      	b.n	80023ac <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002380:	f7ff f900 	bl	8001584 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238e:	d309      	bcc.n	80023a4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e00d      	b.n	80023c0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1e4      	bne.n	8002380 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b0b0      	sub	sp, #192	; 0xc0
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d007      	beq.n	80023ee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023e4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80023f6:	2300      	movs	r3, #0
 80023f8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d103      	bne.n	8002416 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800240e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002412:	663b      	str	r3, [r7, #96]	; 0x60
 8002414:	e001      	b.n	800241a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800241a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800241e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002424:	2300      	movs	r3, #0
 8002426:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002434:	2340      	movs	r3, #64	; 0x40
 8002436:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800244a:	2300      	movs	r3, #0
 800244c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800249c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024a0:	4bab      	ldr	r3, [pc, #684]	; (8002750 <ETH_MACDMAConfig+0x388>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80024a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80024aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80024ac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80024ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80024b0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80024b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80024b4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80024ba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80024bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80024be:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80024c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80024c2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80024c8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80024ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80024cc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80024ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80024d0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80024d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80024d4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80024d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80024d8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80024da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80024dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80024de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024f0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff f84d 	bl	800159c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800250a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800250c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800250e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002510:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002512:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002514:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800251a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800251c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002520:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002522:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002526:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800252c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002530:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002538:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800253a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002546:	2001      	movs	r0, #1
 8002548:	f7ff f828 	bl	800159c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002554:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800255e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002568:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002574:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002578:	f64f 7341 	movw	r3, #65345	; 0xff41
 800257c:	4013      	ands	r3, r2
 800257e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002582:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002586:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002588:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800258c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800258e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002592:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002598:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800259a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800259e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80025a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80025a4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80025a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025b8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80025c4:	2001      	movs	r0, #1
 80025c6:	f7fe ffe9 	bl	800159c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025d2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80025d4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80025d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7fe ffd4 	bl	800159c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025fc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002606:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800260c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002610:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002622:	2304      	movs	r3, #4
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800262c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002630:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002636:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800263c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002642:	2300      	movs	r3, #0
 8002644:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002646:	2300      	movs	r3, #0
 8002648:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002652:	4413      	add	r3, r2
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800265a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800265e:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <ETH_MACDMAConfig+0x38c>)
 8002660:	4013      	ands	r3, r2
 8002662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002666:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002668:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800266a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800266c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800266e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002670:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002672:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002674:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002676:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002678:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800267a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800267c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800267e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002682:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002684:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002686:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002688:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	f241 0318 	movw	r3, #4120	; 0x1018
 800269a:	4413      	add	r3, r2
 800269c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026a0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	f241 0318 	movw	r3, #4120	; 0x1018
 80026aa:	4413      	add	r3, r2
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f7fe ff72 	bl	800159c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	f241 0318 	movw	r3, #4120	; 0x1018
 80026c0:	4413      	add	r3, r2
 80026c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026c6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80026c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80026cc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80026ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80026d0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80026d4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80026d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80026d8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80026da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026dc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80026de:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80026e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80026e2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002700:	2001      	movs	r0, #1
 8002702:	f7fe ff4b 	bl	800159c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002712:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d10d      	bne.n	8002738 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	f241 031c 	movw	r3, #4124	; 0x101c
 8002724:	4413      	add	r3, r2
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6811      	ldr	r1, [r2, #0]
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <ETH_MACDMAConfig+0x390>)
 800272e:	431a      	orrs	r2, r3
 8002730:	f241 031c 	movw	r3, #4124	; 0x101c
 8002734:	440b      	add	r3, r1
 8002736:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	461a      	mov	r2, r3
 800273e:	2100      	movs	r1, #0
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f80b 	bl	800275c <ETH_MACAddressConfig>
}
 8002746:	bf00      	nop
 8002748:	37c0      	adds	r7, #192	; 0xc0
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	ff20810f 	.word	0xff20810f
 8002754:	f8de3f23 	.word	0xf8de3f23
 8002758:	00010040 	.word	0x00010040

0800275c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3305      	adds	r3, #5
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	3204      	adds	r2, #4
 8002774:	7812      	ldrb	r2, [r2, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <ETH_MACAddressConfig+0x68>)
 800277e:	4413      	add	r3, r2
 8002780:	461a      	mov	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3303      	adds	r3, #3
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	061a      	lsls	r2, r3, #24
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3302      	adds	r3, #2
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3301      	adds	r3, #1
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	4313      	orrs	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	7812      	ldrb	r2, [r2, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <ETH_MACAddressConfig+0x6c>)
 80027ae:	4413      	add	r3, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	6013      	str	r3, [r2, #0]
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40028040 	.word	0x40028040
 80027c8:	40028044 	.word	0x40028044

080027cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	; 0x24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	e175      	b.n	8002ad8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027ec:	2201      	movs	r2, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	429a      	cmp	r2, r3
 8002806:	f040 8164 	bne.w	8002ad2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d00b      	beq.n	800282a <HAL_GPIO_Init+0x5e>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d007      	beq.n	800282a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800281e:	2b11      	cmp	r3, #17
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b12      	cmp	r3, #18
 8002828:	d130      	bne.n	800288c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002860:	2201      	movs	r2, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 0201 	and.w	r2, r3, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x100>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b12      	cmp	r3, #18
 80028ca:	d123      	bne.n	8002914 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	08da      	lsrs	r2, r3, #3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3208      	adds	r2, #8
 80028d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	220f      	movs	r2, #15
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	08da      	lsrs	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3208      	adds	r2, #8
 800290e:	69b9      	ldr	r1, [r7, #24]
 8002910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2203      	movs	r2, #3
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0203 	and.w	r2, r3, #3
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80be 	beq.w	8002ad2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002956:	4b66      	ldr	r3, [pc, #408]	; (8002af0 <HAL_GPIO_Init+0x324>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	4a65      	ldr	r2, [pc, #404]	; (8002af0 <HAL_GPIO_Init+0x324>)
 800295c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002960:	6453      	str	r3, [r2, #68]	; 0x44
 8002962:	4b63      	ldr	r3, [pc, #396]	; (8002af0 <HAL_GPIO_Init+0x324>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800296e:	4a61      	ldr	r2, [pc, #388]	; (8002af4 <HAL_GPIO_Init+0x328>)
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	3302      	adds	r3, #2
 8002976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	220f      	movs	r2, #15
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a58      	ldr	r2, [pc, #352]	; (8002af8 <HAL_GPIO_Init+0x32c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d037      	beq.n	8002a0a <HAL_GPIO_Init+0x23e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a57      	ldr	r2, [pc, #348]	; (8002afc <HAL_GPIO_Init+0x330>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d031      	beq.n	8002a06 <HAL_GPIO_Init+0x23a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a56      	ldr	r2, [pc, #344]	; (8002b00 <HAL_GPIO_Init+0x334>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d02b      	beq.n	8002a02 <HAL_GPIO_Init+0x236>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a55      	ldr	r2, [pc, #340]	; (8002b04 <HAL_GPIO_Init+0x338>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d025      	beq.n	80029fe <HAL_GPIO_Init+0x232>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a54      	ldr	r2, [pc, #336]	; (8002b08 <HAL_GPIO_Init+0x33c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01f      	beq.n	80029fa <HAL_GPIO_Init+0x22e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a53      	ldr	r2, [pc, #332]	; (8002b0c <HAL_GPIO_Init+0x340>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d019      	beq.n	80029f6 <HAL_GPIO_Init+0x22a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_GPIO_Init+0x344>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_Init+0x226>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a51      	ldr	r2, [pc, #324]	; (8002b14 <HAL_GPIO_Init+0x348>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00d      	beq.n	80029ee <HAL_GPIO_Init+0x222>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a50      	ldr	r2, [pc, #320]	; (8002b18 <HAL_GPIO_Init+0x34c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d007      	beq.n	80029ea <HAL_GPIO_Init+0x21e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4f      	ldr	r2, [pc, #316]	; (8002b1c <HAL_GPIO_Init+0x350>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_GPIO_Init+0x21a>
 80029e2:	2309      	movs	r3, #9
 80029e4:	e012      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029e6:	230a      	movs	r3, #10
 80029e8:	e010      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029ea:	2308      	movs	r3, #8
 80029ec:	e00e      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029ee:	2307      	movs	r3, #7
 80029f0:	e00c      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029f2:	2306      	movs	r3, #6
 80029f4:	e00a      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029f6:	2305      	movs	r3, #5
 80029f8:	e008      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029fa:	2304      	movs	r3, #4
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029fe:	2303      	movs	r3, #3
 8002a00:	e004      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	f002 0203 	and.w	r2, r2, #3
 8002a12:	0092      	lsls	r2, r2, #2
 8002a14:	4093      	lsls	r3, r2
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a1c:	4935      	ldr	r1, [pc, #212]	; (8002af4 <HAL_GPIO_Init+0x328>)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a4e:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a54:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a78:	4a29      	ldr	r2, [pc, #164]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7e:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa2:	4a1f      	ldr	r2, [pc, #124]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b0f      	cmp	r3, #15
 8002adc:	f67f ae86 	bls.w	80027ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3724      	adds	r7, #36	; 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40013800 	.word	0x40013800
 8002af8:	40020000 	.word	0x40020000
 8002afc:	40020400 	.word	0x40020400
 8002b00:	40020800 	.word	0x40020800
 8002b04:	40020c00 	.word	0x40020c00
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40021400 	.word	0x40021400
 8002b10:	40021800 	.word	0x40021800
 8002b14:	40021c00 	.word	0x40021c00
 8002b18:	40022000 	.word	0x40022000
 8002b1c:	40022400 	.word	0x40022400
 8002b20:	40013c00 	.word	0x40013c00

08002b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
 8002b30:	4613      	mov	r3, r2
 8002b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b34:	787b      	ldrb	r3, [r7, #1]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b40:	e003      	b.n	8002b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	041a      	lsls	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	619a      	str	r2, [r3, #24]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e07f      	b.n	8002c6a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe fab2 	bl	80010e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2224      	movs	r2, #36	; 0x24
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ba8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	e006      	b.n	8002be0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d104      	bne.n	8002bf2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bf0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_I2C_Init+0x11c>)
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	ea42 0103 	orr.w	r1, r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	021a      	lsls	r2, r3, #8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69d9      	ldr	r1, [r3, #28]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1a      	ldr	r2, [r3, #32]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	02008000 	.word	0x02008000

08002c78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	4608      	mov	r0, r1
 8002c82:	4611      	mov	r1, r2
 8002c84:	461a      	mov	r2, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	817b      	strh	r3, [r7, #10]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	813b      	strh	r3, [r7, #8]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	f040 80f9 	bne.w	8002e92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_I2C_Mem_Write+0x34>
 8002ca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0ed      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_I2C_Mem_Write+0x4e>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e0e6      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cce:	f7fe fc59 	bl	8001584 <HAL_GetTick>
 8002cd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2319      	movs	r3, #25
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f955 	bl	8002f90 <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0d1      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2221      	movs	r2, #33	; 0x21
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2240      	movs	r2, #64	; 0x40
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a3a      	ldr	r2, [r7, #32]
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d18:	88f8      	ldrh	r0, [r7, #6]
 8002d1a:	893a      	ldrh	r2, [r7, #8]
 8002d1c:	8979      	ldrh	r1, [r7, #10]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	4603      	mov	r3, r0
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f8b9 	bl	8002ea0 <I2C_RequestMemoryWrite>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0a9      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2bff      	cmp	r3, #255	; 0xff
 8002d48:	d90e      	bls.n	8002d68 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	22ff      	movs	r2, #255	; 0xff
 8002d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	8979      	ldrh	r1, [r7, #10]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fa37 	bl	80031d4 <I2C_TransferConfig>
 8002d66:	e00f      	b.n	8002d88 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	8979      	ldrh	r1, [r7, #10]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fa26 	bl	80031d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f93f 	bl	8003010 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e07b      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d034      	beq.n	8002e40 <HAL_I2C_Mem_Write+0x1c8>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d130      	bne.n	8002e40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	2200      	movs	r2, #0
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f8d1 	bl	8002f90 <I2C_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e04d      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2bff      	cmp	r3, #255	; 0xff
 8002e00:	d90e      	bls.n	8002e20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	22ff      	movs	r2, #255	; 0xff
 8002e06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	8979      	ldrh	r1, [r7, #10]
 8002e10:	2300      	movs	r3, #0
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f9db 	bl	80031d4 <I2C_TransferConfig>
 8002e1e:	e00f      	b.n	8002e40 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	8979      	ldrh	r1, [r7, #10]
 8002e32:	2300      	movs	r3, #0
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f9ca 	bl	80031d4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d19e      	bne.n	8002d88 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f91e 	bl	8003090 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e01a      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2220      	movs	r2, #32
 8002e64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <HAL_I2C_Mem_Write+0x224>)
 8002e72:	400b      	ands	r3, r1
 8002e74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e000      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
  }
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	fe00e800 	.word	0xfe00e800

08002ea0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	4611      	mov	r1, r2
 8002eac:	461a      	mov	r2, r3
 8002eae:	4603      	mov	r3, r0
 8002eb0:	817b      	strh	r3, [r7, #10]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	813b      	strh	r3, [r7, #8]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	8979      	ldrh	r1, [r7, #10]
 8002ec0:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <I2C_RequestMemoryWrite+0xa4>)
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f983 	bl	80031d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	69b9      	ldr	r1, [r7, #24]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f89c 	bl	8003010 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e02c      	b.n	8002f3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ee8:	893b      	ldrh	r3, [r7, #8]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ef2:	e015      	b.n	8002f20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ef4:	893b      	ldrh	r3, [r7, #8]
 8002ef6:	0a1b      	lsrs	r3, r3, #8
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	69b9      	ldr	r1, [r7, #24]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f882 	bl	8003010 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e012      	b.n	8002f3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2200      	movs	r2, #0
 8002f28:	2180      	movs	r1, #128	; 0x80
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f830 	bl	8002f90 <I2C_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	80002000 	.word	0x80002000

08002f48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d103      	bne.n	8002f66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d007      	beq.n	8002f84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	619a      	str	r2, [r3, #24]
  }
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa0:	e022      	b.n	8002fe8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d01e      	beq.n	8002fe8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002faa:	f7fe faeb 	bl	8001584 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d302      	bcc.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d113      	bne.n	8002fe8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e00f      	b.n	8003008 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	429a      	cmp	r2, r3
 8003004:	d0cd      	beq.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800301c:	e02c      	b.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f870 	bl	8003108 <I2C_IsAcknowledgeFailed>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e02a      	b.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d01e      	beq.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303a:	f7fe faa3 	bl	8001584 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	d302      	bcc.n	8003050 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d113      	bne.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e007      	b.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	d1cb      	bne.n	800301e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800309c:	e028      	b.n	80030f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f830 	bl	8003108 <I2C_IsAcknowledgeFailed>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e026      	b.n	8003100 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	f7fe fa67 	bl	8001584 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d113      	bne.n	80030f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e007      	b.n	8003100 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d1cf      	bne.n	800309e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b10      	cmp	r3, #16
 8003120:	d151      	bne.n	80031c6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003122:	e022      	b.n	800316a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d01e      	beq.n	800316a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312c:	f7fe fa2a 	bl	8001584 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <I2C_IsAcknowledgeFailed+0x3a>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d113      	bne.n	800316a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	f043 0220 	orr.w	r2, r3, #32
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e02e      	b.n	80031c8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b20      	cmp	r3, #32
 8003176:	d1d5      	bne.n	8003124 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2210      	movs	r2, #16
 800317e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2220      	movs	r2, #32
 8003186:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff fedd 	bl	8002f48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <I2C_IsAcknowledgeFailed+0xc8>)
 800319a:	400b      	ands	r3, r1
 800319c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f043 0204 	orr.w	r2, r3, #4
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	fe00e800 	.word	0xfe00e800

080031d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	817b      	strh	r3, [r7, #10]
 80031e2:	4613      	mov	r3, r2
 80031e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	0d5b      	lsrs	r3, r3, #21
 80031f0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <I2C_TransferConfig+0x58>)
 80031f6:	430b      	orrs	r3, r1
 80031f8:	43db      	mvns	r3, r3
 80031fa:	ea02 0103 	and.w	r1, r2, r3
 80031fe:	897b      	ldrh	r3, [r7, #10]
 8003200:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003204:	7a7b      	ldrb	r3, [r7, #9]
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	431a      	orrs	r2, r3
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	431a      	orrs	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	03ff63ff 	.word	0x03ff63ff

08003230 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	d138      	bne.n	80032b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003250:	2302      	movs	r3, #2
 8003252:	e032      	b.n	80032ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003282:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6819      	ldr	r1, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e000      	b.n	80032ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d139      	bne.n	8003350 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e033      	b.n	8003352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2224      	movs	r2, #36	; 0x24
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003318:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e000      	b.n	8003352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0d2      	b.n	8003518 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fd fef2 	bl	8001170 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69d9      	ldr	r1, [r3, #28]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b60      	ldr	r3, [pc, #384]	; (8003520 <HAL_I2S_Init+0x1c0>)
 80033a0:	400b      	ands	r3, r1
 80033a2:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2202      	movs	r2, #2
 80033aa:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d067      	beq.n	8003484 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033bc:	2310      	movs	r3, #16
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	e001      	b.n	80033c6 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033c2:	2320      	movs	r3, #32
 80033c4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d802      	bhi.n	80033d4 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d102      	bne.n	80033e2 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 80033dc:	4b51      	ldr	r3, [pc, #324]	; (8003524 <HAL_I2S_Init+0x1c4>)
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	e003      	b.n	80033ea <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f954 	bl	8003690 <I2S_GetClockFreq>
 80033e8:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f2:	d125      	bne.n	8003440 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d010      	beq.n	800341e <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	fbb2 f2f3 	udiv	r2, r2, r3
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	461a      	mov	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	3305      	adds	r3, #5
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	e01f      	b.n	800345e <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	fbb2 f2f3 	udiv	r2, r2, r3
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	461a      	mov	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	3305      	adds	r3, #5
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	e00e      	b.n	800345e <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	fbb2 f2f3 	udiv	r2, r2, r3
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	461a      	mov	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	3305      	adds	r3, #5
 800345c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4a31      	ldr	r2, [pc, #196]	; (8003528 <HAL_I2S_Init+0x1c8>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	08db      	lsrs	r3, r3, #3
 8003468:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	e003      	b.n	800348c <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003484:	2302      	movs	r3, #2
 8003486:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d902      	bls.n	8003498 <HAL_I2S_Init+0x138>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2bff      	cmp	r3, #255	; 0xff
 8003496:	d907      	bls.n	80034a8 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	f043 0210 	orr.w	r2, r3, #16
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e037      	b.n	8003518 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	ea42 0103 	orr.w	r1, r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	4b17      	ldr	r3, [pc, #92]	; (8003520 <HAL_I2S_Init+0x1c0>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6851      	ldr	r1, [r2, #4]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6892      	ldr	r2, [r2, #8]
 80034ce:	4311      	orrs	r1, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	68d2      	ldr	r2, [r2, #12]
 80034d4:	4311      	orrs	r1, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6992      	ldr	r2, [r2, #24]
 80034da:	430a      	orrs	r2, r1
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b30      	cmp	r3, #48	; 0x30
 80034ee:	d003      	beq.n	80034f8 <HAL_I2S_Init+0x198>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2bb0      	cmp	r3, #176	; 0xb0
 80034f6:	d107      	bne.n	8003508 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003506:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3720      	adds	r7, #32
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	fffff040 	.word	0xfffff040
 8003524:	00bb8000 	.word	0x00bb8000
 8003528:	cccccccd 	.word	0xcccccccd

0800352c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <HAL_I2S_Transmit_DMA+0x1a>
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e08e      	b.n	8003668 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_I2S_Transmit_DMA+0x2e>
 8003556:	2302      	movs	r3, #2
 8003558:	e086      	b.n	8003668 <HAL_I2S_Transmit_DMA+0x13c>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d005      	beq.n	800357a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 8003576:	2302      	movs	r3, #2
 8003578:	e076      	b.n	8003668 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2203      	movs	r2, #3
 800357e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pTxBuffPtr = pData;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	621a      	str	r2, [r3, #32]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b03      	cmp	r3, #3
 800359e:	d002      	beq.n	80035a6 <HAL_I2S_Transmit_DMA+0x7a>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d10a      	bne.n	80035bc <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = (Size << 1U);
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	84da      	strh	r2, [r3, #38]	; 0x26
 80035ba:	e005      	b.n	80035c8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	88fa      	ldrh	r2, [r7, #6]
 80035c0:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = Size;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	88fa      	ldrh	r2, [r7, #6]
 80035c6:	84da      	strh	r2, [r3, #38]	; 0x26
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	4a28      	ldr	r2, [pc, #160]	; (8003670 <HAL_I2S_Transmit_DMA+0x144>)
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	4a27      	ldr	r2, [pc, #156]	; (8003674 <HAL_I2S_Transmit_DMA+0x148>)
 80035d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	4a26      	ldr	r2, [pc, #152]	; (8003678 <HAL_I2S_Transmit_DMA+0x14c>)
 80035de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
                                 (uint32_t)hi2s->pTxBuffPtr,
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80035e8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80035f0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80035f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80035f8:	f7fe f9b4 	bl	8001964 <HAL_DMA_Start_IT>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00f      	beq.n	8003622 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	f043 0208 	orr.w	r2, r3, #8
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e022      	b.n	8003668 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d107      	bne.n	8003640 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800363e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d107      	bne.n	800365e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0202 	orr.w	r2, r2, #2
 800365c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	0800376b 	.word	0x0800376b
 8003674:	08003729 	.word	0x08003729
 8003678:	08003787 	.word	0x08003787

0800367c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d02d      	beq.n	80036fc <I2S_GetClockFreq+0x6c>
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d12e      	bne.n	8003702 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <I2S_GetClockFreq+0x88>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d108      	bne.n	80036c2 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <I2S_GetClockFreq+0x88>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b8:	4a18      	ldr	r2, [pc, #96]	; (800371c <I2S_GetClockFreq+0x8c>)
 80036ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	e007      	b.n	80036d2 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <I2S_GetClockFreq+0x88>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ca:	4a15      	ldr	r2, [pc, #84]	; (8003720 <I2S_GetClockFreq+0x90>)
 80036cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d0:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <I2S_GetClockFreq+0x88>)
 80036d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d8:	0f1b      	lsrs	r3, r3, #28
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80036e0:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <I2S_GetClockFreq+0x88>)
 80036e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e6:	099b      	lsrs	r3, r3, #6
 80036e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	fb02 f203 	mul.w	r2, r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	613b      	str	r3, [r7, #16]

      break;
 80036fa:	e005      	b.n	8003708 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <I2S_GetClockFreq+0x94>)
 80036fe:	613b      	str	r3, [r7, #16]
      break;
 8003700:	e002      	b.n	8003708 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
      break;
 8003706:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8003708:	693b      	ldr	r3, [r7, #16]
}
 800370a:	4618      	mov	r0, r3
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	00f42400 	.word	0x00f42400
 8003720:	007a1200 	.word	0x007a1200
 8003724:	00bb8000 	.word	0x00bb8000

08003728 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10e      	bne.n	800375c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0202 	bic.w	r2, r2, #2
 800374c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	84da      	strh	r2, [r3, #38]	; 0x26
    hi2s->State = HAL_I2S_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7fd f89a 	bl	8000896 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003762:	bf00      	nop
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f7fd f881 	bl	8000880 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0203 	bic.w	r2, r2, #3
 80037a2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	84da      	strh	r2, [r3, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	f043 0208 	orr.w	r2, r3, #8
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f7ff ff59 	bl	800367c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037dc:	2300      	movs	r3, #0
 80037de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e29b      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8087 	beq.w	8003906 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037f8:	4b96      	ldr	r3, [pc, #600]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b04      	cmp	r3, #4
 8003802:	d00c      	beq.n	800381e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003804:	4b93      	ldr	r3, [pc, #588]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b08      	cmp	r3, #8
 800380e:	d112      	bne.n	8003836 <HAL_RCC_OscConfig+0x62>
 8003810:	4b90      	ldr	r3, [pc, #576]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381c:	d10b      	bne.n	8003836 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381e:	4b8d      	ldr	r3, [pc, #564]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d06c      	beq.n	8003904 <HAL_RCC_OscConfig+0x130>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d168      	bne.n	8003904 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e275      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383e:	d106      	bne.n	800384e <HAL_RCC_OscConfig+0x7a>
 8003840:	4b84      	ldr	r3, [pc, #528]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a83      	ldr	r2, [pc, #524]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	e02e      	b.n	80038ac <HAL_RCC_OscConfig+0xd8>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10c      	bne.n	8003870 <HAL_RCC_OscConfig+0x9c>
 8003856:	4b7f      	ldr	r3, [pc, #508]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a7e      	ldr	r2, [pc, #504]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 800385c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b7c      	ldr	r3, [pc, #496]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a7b      	ldr	r2, [pc, #492]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e01d      	b.n	80038ac <HAL_RCC_OscConfig+0xd8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0xc0>
 800387a:	4b76      	ldr	r3, [pc, #472]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a75      	ldr	r2, [pc, #468]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b73      	ldr	r3, [pc, #460]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a72      	ldr	r2, [pc, #456]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 800388c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e00b      	b.n	80038ac <HAL_RCC_OscConfig+0xd8>
 8003894:	4b6f      	ldr	r3, [pc, #444]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a6e      	ldr	r2, [pc, #440]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 800389a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	4b6c      	ldr	r3, [pc, #432]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a6b      	ldr	r2, [pc, #428]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 80038a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d013      	beq.n	80038dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd fe66 	bl	8001584 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038bc:	f7fd fe62 	bl	8001584 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e229      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	4b61      	ldr	r3, [pc, #388]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0xe8>
 80038da:	e014      	b.n	8003906 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fd fe52 	bl	8001584 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e4:	f7fd fe4e 	bl	8001584 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	; 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e215      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f6:	4b57      	ldr	r3, [pc, #348]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x110>
 8003902:	e000      	b.n	8003906 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d069      	beq.n	80039e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003912:	4b50      	ldr	r3, [pc, #320]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00b      	beq.n	8003936 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391e:	4b4d      	ldr	r3, [pc, #308]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b08      	cmp	r3, #8
 8003928:	d11c      	bne.n	8003964 <HAL_RCC_OscConfig+0x190>
 800392a:	4b4a      	ldr	r3, [pc, #296]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d116      	bne.n	8003964 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_RCC_OscConfig+0x17a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d001      	beq.n	800394e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e1e9      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394e:	4b41      	ldr	r3, [pc, #260]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	493d      	ldr	r1, [pc, #244]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003962:	e040      	b.n	80039e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d023      	beq.n	80039b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800396c:	4b39      	ldr	r3, [pc, #228]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a38      	ldr	r2, [pc, #224]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fd fe04 	bl	8001584 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003980:	f7fd fe00 	bl	8001584 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e1c7      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003992:	4b30      	ldr	r3, [pc, #192]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399e:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4929      	ldr	r1, [pc, #164]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]
 80039b2:	e018      	b.n	80039e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b4:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd fde0 	bl	8001584 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c8:	f7fd fddc 	bl	8001584 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e1a3      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039da:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d038      	beq.n	8003a64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d019      	beq.n	8003a2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fa:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 80039fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fe:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7fd fdbd 	bl	8001584 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0e:	f7fd fdb9 	bl	8001584 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e180      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x23a>
 8003a2c:	e01a      	b.n	8003a64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2e:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a32:	4a08      	ldr	r2, [pc, #32]	; (8003a54 <HAL_RCC_OscConfig+0x280>)
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3a:	f7fd fda3 	bl	8001584 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a40:	e00a      	b.n	8003a58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a42:	f7fd fd9f 	bl	8001584 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d903      	bls.n	8003a58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e166      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
 8003a54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a58:	4b92      	ldr	r3, [pc, #584]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ee      	bne.n	8003a42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80a4 	beq.w	8003bba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a72:	4b8c      	ldr	r3, [pc, #560]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	4b89      	ldr	r3, [pc, #548]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	4a88      	ldr	r2, [pc, #544]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a88:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8a:	4b86      	ldr	r3, [pc, #536]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a96:	2301      	movs	r3, #1
 8003a98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a9a:	4b83      	ldr	r3, [pc, #524]	; (8003ca8 <HAL_RCC_OscConfig+0x4d4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d118      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003aa6:	4b80      	ldr	r3, [pc, #512]	; (8003ca8 <HAL_RCC_OscConfig+0x4d4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a7f      	ldr	r2, [pc, #508]	; (8003ca8 <HAL_RCC_OscConfig+0x4d4>)
 8003aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab2:	f7fd fd67 	bl	8001584 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aba:	f7fd fd63 	bl	8001584 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b64      	cmp	r3, #100	; 0x64
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e12a      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003acc:	4b76      	ldr	r3, [pc, #472]	; (8003ca8 <HAL_RCC_OscConfig+0x4d4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d106      	bne.n	8003aee <HAL_RCC_OscConfig+0x31a>
 8003ae0:	4b70      	ldr	r3, [pc, #448]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	4a6f      	ldr	r2, [pc, #444]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6713      	str	r3, [r2, #112]	; 0x70
 8003aec:	e02d      	b.n	8003b4a <HAL_RCC_OscConfig+0x376>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x33c>
 8003af6:	4b6b      	ldr	r3, [pc, #428]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	4a6a      	ldr	r2, [pc, #424]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	6713      	str	r3, [r2, #112]	; 0x70
 8003b02:	4b68      	ldr	r3, [pc, #416]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	4a67      	ldr	r2, [pc, #412]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003b08:	f023 0304 	bic.w	r3, r3, #4
 8003b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0e:	e01c      	b.n	8003b4a <HAL_RCC_OscConfig+0x376>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	d10c      	bne.n	8003b32 <HAL_RCC_OscConfig+0x35e>
 8003b18:	4b62      	ldr	r3, [pc, #392]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	4a61      	ldr	r2, [pc, #388]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003b1e:	f043 0304 	orr.w	r3, r3, #4
 8003b22:	6713      	str	r3, [r2, #112]	; 0x70
 8003b24:	4b5f      	ldr	r3, [pc, #380]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	4a5e      	ldr	r2, [pc, #376]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b30:	e00b      	b.n	8003b4a <HAL_RCC_OscConfig+0x376>
 8003b32:	4b5c      	ldr	r3, [pc, #368]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	4a5b      	ldr	r2, [pc, #364]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3e:	4b59      	ldr	r3, [pc, #356]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	4a58      	ldr	r2, [pc, #352]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003b44:	f023 0304 	bic.w	r3, r3, #4
 8003b48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d015      	beq.n	8003b7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b52:	f7fd fd17 	bl	8001584 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b58:	e00a      	b.n	8003b70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5a:	f7fd fd13 	bl	8001584 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e0d8      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b70:	4b4c      	ldr	r3, [pc, #304]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0ee      	beq.n	8003b5a <HAL_RCC_OscConfig+0x386>
 8003b7c:	e014      	b.n	8003ba8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7e:	f7fd fd01 	bl	8001584 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b84:	e00a      	b.n	8003b9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b86:	f7fd fcfd 	bl	8001584 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e0c2      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9c:	4b41      	ldr	r3, [pc, #260]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1ee      	bne.n	8003b86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d105      	bne.n	8003bba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bae:	4b3d      	ldr	r3, [pc, #244]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	4a3c      	ldr	r2, [pc, #240]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80ae 	beq.w	8003d20 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bc4:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d06d      	beq.n	8003cac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d14b      	bne.n	8003c70 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd8:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a31      	ldr	r2, [pc, #196]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fd fcce 	bl	8001584 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bec:	f7fd fcca 	bl	8001584 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e091      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	019b      	lsls	r3, r3, #6
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	085b      	lsrs	r3, r3, #1
 8003c22:	3b01      	subs	r3, #1
 8003c24:	041b      	lsls	r3, r3, #16
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	061b      	lsls	r3, r3, #24
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	071b      	lsls	r3, r3, #28
 8003c36:	491b      	ldr	r1, [pc, #108]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fd fc9c 	bl	8001584 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fd fc98 	bl	8001584 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e05f      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x47c>
 8003c6e:	e057      	b.n	8003d20 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fd fc82 	bl	8001584 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fd fc7e 	bl	8001584 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e045      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <HAL_RCC_OscConfig+0x4d0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4b0>
 8003ca2:	e03d      	b.n	8003d20 <HAL_RCC_OscConfig+0x54c>
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003cac:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <HAL_RCC_OscConfig+0x558>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d030      	beq.n	8003d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d129      	bne.n	8003d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d122      	bne.n	8003d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cdc:	4013      	ands	r3, r2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ce2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d119      	bne.n	8003d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d10f      	bne.n	8003d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d107      	bne.n	8003d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800

08003d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0d0      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d48:	4b6a      	ldr	r3, [pc, #424]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d910      	bls.n	8003d78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b67      	ldr	r3, [pc, #412]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 020f 	bic.w	r2, r3, #15
 8003d5e:	4965      	ldr	r1, [pc, #404]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d66:	4b63      	ldr	r3, [pc, #396]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0b8      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d020      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d90:	4b59      	ldr	r3, [pc, #356]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4a58      	ldr	r2, [pc, #352]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da8:	4b53      	ldr	r3, [pc, #332]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4a52      	ldr	r2, [pc, #328]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003db2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db4:	4b50      	ldr	r3, [pc, #320]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	494d      	ldr	r1, [pc, #308]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d040      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	4b47      	ldr	r3, [pc, #284]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d115      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e07f      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df2:	4b41      	ldr	r3, [pc, #260]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e073      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e02:	4b3d      	ldr	r3, [pc, #244]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e06b      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e12:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 0203 	bic.w	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4936      	ldr	r1, [pc, #216]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e24:	f7fd fbae 	bl	8001584 <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2c:	f7fd fbaa 	bl	8001584 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e053      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	4b2d      	ldr	r3, [pc, #180]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 020c 	and.w	r2, r3, #12
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d1eb      	bne.n	8003e2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e54:	4b27      	ldr	r3, [pc, #156]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d210      	bcs.n	8003e84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f023 020f 	bic.w	r2, r3, #15
 8003e6a:	4922      	ldr	r1, [pc, #136]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	4b20      	ldr	r3, [pc, #128]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e032      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e90:	4b19      	ldr	r3, [pc, #100]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4916      	ldr	r1, [pc, #88]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	490e      	ldr	r1, [pc, #56]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ec2:	f000 f821 	bl	8003f08 <HAL_RCC_GetSysClockFreq>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	091b      	lsrs	r3, r3, #4
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	490a      	ldr	r1, [pc, #40]	; (8003efc <HAL_RCC_ClockConfig+0x1cc>)
 8003ed4:	5ccb      	ldrb	r3, [r1, r3]
 8003ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eda:	4a09      	ldr	r2, [pc, #36]	; (8003f00 <HAL_RCC_ClockConfig+0x1d0>)
 8003edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ede:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <HAL_RCC_ClockConfig+0x1d4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fd fb0a 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023c00 	.word	0x40023c00
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	08006318 	.word	0x08006318
 8003f00:	20000000 	.word	0x20000000
 8003f04:	20000004 	.word	0x20000004

08003f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f20:	4b67      	ldr	r3, [pc, #412]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 030c 	and.w	r3, r3, #12
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d00d      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x40>
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	f200 80bd 	bhi.w	80040ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x34>
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d003      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f3a:	e0b7      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f3c:	4b61      	ldr	r3, [pc, #388]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f3e:	60bb      	str	r3, [r7, #8]
      break;
 8003f40:	e0b7      	b.n	80040b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f42:	4b61      	ldr	r3, [pc, #388]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003f44:	60bb      	str	r3, [r7, #8]
      break;
 8003f46:	e0b4      	b.n	80040b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f48:	4b5d      	ldr	r3, [pc, #372]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f50:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f52:	4b5b      	ldr	r3, [pc, #364]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d04d      	beq.n	8003ffa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5e:	4b58      	ldr	r3, [pc, #352]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	099b      	lsrs	r3, r3, #6
 8003f64:	461a      	mov	r2, r3
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f6e:	f04f 0100 	mov.w	r1, #0
 8003f72:	ea02 0800 	and.w	r8, r2, r0
 8003f76:	ea03 0901 	and.w	r9, r3, r1
 8003f7a:	4640      	mov	r0, r8
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	014b      	lsls	r3, r1, #5
 8003f88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f8c:	0142      	lsls	r2, r0, #5
 8003f8e:	4610      	mov	r0, r2
 8003f90:	4619      	mov	r1, r3
 8003f92:	ebb0 0008 	subs.w	r0, r0, r8
 8003f96:	eb61 0109 	sbc.w	r1, r1, r9
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	018b      	lsls	r3, r1, #6
 8003fa4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fa8:	0182      	lsls	r2, r0, #6
 8003faa:	1a12      	subs	r2, r2, r0
 8003fac:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb0:	f04f 0000 	mov.w	r0, #0
 8003fb4:	f04f 0100 	mov.w	r1, #0
 8003fb8:	00d9      	lsls	r1, r3, #3
 8003fba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fbe:	00d0      	lsls	r0, r2, #3
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	eb12 0208 	adds.w	r2, r2, r8
 8003fc8:	eb43 0309 	adc.w	r3, r3, r9
 8003fcc:	f04f 0000 	mov.w	r0, #0
 8003fd0:	f04f 0100 	mov.w	r1, #0
 8003fd4:	0259      	lsls	r1, r3, #9
 8003fd6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003fda:	0250      	lsls	r0, r2, #9
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	f7fc f924 	bl	8000238 <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	e04a      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffa:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	461a      	mov	r2, r3
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	f240 10ff 	movw	r0, #511	; 0x1ff
 800400a:	f04f 0100 	mov.w	r1, #0
 800400e:	ea02 0400 	and.w	r4, r2, r0
 8004012:	ea03 0501 	and.w	r5, r3, r1
 8004016:	4620      	mov	r0, r4
 8004018:	4629      	mov	r1, r5
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	014b      	lsls	r3, r1, #5
 8004024:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004028:	0142      	lsls	r2, r0, #5
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	1b00      	subs	r0, r0, r4
 8004030:	eb61 0105 	sbc.w	r1, r1, r5
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	018b      	lsls	r3, r1, #6
 800403e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004042:	0182      	lsls	r2, r0, #6
 8004044:	1a12      	subs	r2, r2, r0
 8004046:	eb63 0301 	sbc.w	r3, r3, r1
 800404a:	f04f 0000 	mov.w	r0, #0
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	00d9      	lsls	r1, r3, #3
 8004054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004058:	00d0      	lsls	r0, r2, #3
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	1912      	adds	r2, r2, r4
 8004060:	eb45 0303 	adc.w	r3, r5, r3
 8004064:	f04f 0000 	mov.w	r0, #0
 8004068:	f04f 0100 	mov.w	r1, #0
 800406c:	0299      	lsls	r1, r3, #10
 800406e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004072:	0290      	lsls	r0, r2, #10
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4610      	mov	r0, r2
 800407a:	4619      	mov	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	461a      	mov	r2, r3
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	f7fc f8d8 	bl	8000238 <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4613      	mov	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	3301      	adds	r3, #1
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	60bb      	str	r3, [r7, #8]
      break;
 80040aa:	e002      	b.n	80040b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040ae:	60bb      	str	r3, [r7, #8]
      break;
 80040b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040b2:	68bb      	ldr	r3, [r7, #8]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800
 80040c4:	00f42400 	.word	0x00f42400
 80040c8:	007a1200 	.word	0x007a1200

080040cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d0:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000000 	.word	0x20000000

080040e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040e8:	f7ff fff0 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 80040ec:	4602      	mov	r2, r0
 80040ee:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	0a9b      	lsrs	r3, r3, #10
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	4903      	ldr	r1, [pc, #12]	; (8004108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040fa:	5ccb      	ldrb	r3, [r1, r3]
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40023800 	.word	0x40023800
 8004108:	08006328 	.word	0x08006328

0800410c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004110:	f7ff ffdc 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 8004114:	4602      	mov	r2, r0
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	0b5b      	lsrs	r3, r3, #13
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	4903      	ldr	r1, [pc, #12]	; (8004130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004122:	5ccb      	ldrb	r3, [r1, r3]
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40023800 	.word	0x40023800
 8004130:	08006328 	.word	0x08006328

08004134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d012      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800415c:	4b69      	ldr	r3, [pc, #420]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a68      	ldr	r2, [pc, #416]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004166:	6093      	str	r3, [r2, #8]
 8004168:	4b66      	ldr	r3, [pc, #408]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	4964      	ldr	r1, [pc, #400]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800417e:	2301      	movs	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d017      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800418e:	4b5d      	ldr	r3, [pc, #372]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419c:	4959      	ldr	r1, [pc, #356]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ac:	d101      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80041ae:	2301      	movs	r3, #1
 80041b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80041ba:	2301      	movs	r3, #1
 80041bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d017      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041ca:	4b4e      	ldr	r3, [pc, #312]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	494a      	ldr	r1, [pc, #296]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e8:	d101      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041ea:	2301      	movs	r3, #1
 80041ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041f6:	2301      	movs	r3, #1
 80041f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004206:	2301      	movs	r3, #1
 8004208:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 808b 	beq.w	800432e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004218:	4b3a      	ldr	r3, [pc, #232]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	4a39      	ldr	r2, [pc, #228]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004222:	6413      	str	r3, [r2, #64]	; 0x40
 8004224:	4b37      	ldr	r3, [pc, #220]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004230:	4b35      	ldr	r3, [pc, #212]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a34      	ldr	r2, [pc, #208]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800423c:	f7fd f9a2 	bl	8001584 <HAL_GetTick>
 8004240:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004244:	f7fd f99e 	bl	8001584 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e38f      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004256:	4b2c      	ldr	r3, [pc, #176]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004262:	4b28      	ldr	r3, [pc, #160]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d035      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d02e      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004280:	4b20      	ldr	r3, [pc, #128]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004288:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800428a:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042a2:	4a18      	ldr	r2, [pc, #96]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042a8:	4b16      	ldr	r3, [pc, #88]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d114      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fd f966 	bl	8001584 <HAL_GetTick>
 80042b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ba:	e00a      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042bc:	f7fd f962 	bl	8001584 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e351      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d2:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0ee      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ea:	d111      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042fa:	400b      	ands	r3, r1
 80042fc:	4901      	ldr	r1, [pc, #4]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
 8004302:	e00b      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004304:	40023800 	.word	0x40023800
 8004308:	40007000 	.word	0x40007000
 800430c:	0ffffcff 	.word	0x0ffffcff
 8004310:	4bb3      	ldr	r3, [pc, #716]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4ab2      	ldr	r2, [pc, #712]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004316:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800431a:	6093      	str	r3, [r2, #8]
 800431c:	4bb0      	ldr	r3, [pc, #704]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800431e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004328:	49ad      	ldr	r1, [pc, #692]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800432a:	4313      	orrs	r3, r2
 800432c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b00      	cmp	r3, #0
 8004338:	d010      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800433a:	4ba9      	ldr	r3, [pc, #676]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800433c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004340:	4aa7      	ldr	r2, [pc, #668]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004346:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800434a:	4ba5      	ldr	r3, [pc, #660]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800434c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	49a2      	ldr	r1, [pc, #648]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004368:	4b9d      	ldr	r3, [pc, #628]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004376:	499a      	ldr	r1, [pc, #616]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800438a:	4b95      	ldr	r3, [pc, #596]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004398:	4991      	ldr	r1, [pc, #580]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ac:	4b8c      	ldr	r3, [pc, #560]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ba:	4989      	ldr	r1, [pc, #548]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043ce:	4b84      	ldr	r3, [pc, #528]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043dc:	4980      	ldr	r1, [pc, #512]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043f0:	4b7b      	ldr	r3, [pc, #492]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	f023 0203 	bic.w	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	4978      	ldr	r1, [pc, #480]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004412:	4b73      	ldr	r3, [pc, #460]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	f023 020c 	bic.w	r2, r3, #12
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004420:	496f      	ldr	r1, [pc, #444]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004434:	4b6a      	ldr	r3, [pc, #424]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	4967      	ldr	r1, [pc, #412]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004456:	4b62      	ldr	r3, [pc, #392]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004464:	495e      	ldr	r1, [pc, #376]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004478:	4b59      	ldr	r3, [pc, #356]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004486:	4956      	ldr	r1, [pc, #344]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800449a:	4b51      	ldr	r3, [pc, #324]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	494d      	ldr	r1, [pc, #308]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044bc:	4b48      	ldr	r3, [pc, #288]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ca:	4945      	ldr	r1, [pc, #276]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80044de:	4b40      	ldr	r3, [pc, #256]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ec:	493c      	ldr	r1, [pc, #240]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004500:	4b37      	ldr	r3, [pc, #220]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450e:	4934      	ldr	r1, [pc, #208]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d011      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004522:	4b2f      	ldr	r3, [pc, #188]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004528:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004530:	492b      	ldr	r1, [pc, #172]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800453c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004540:	d101      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004542:	2301      	movs	r3, #1
 8004544:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004552:	2301      	movs	r3, #1
 8004554:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004562:	4b1f      	ldr	r3, [pc, #124]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004570:	491b      	ldr	r1, [pc, #108]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004584:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004594:	4912      	ldr	r1, [pc, #72]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00b      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b8:	4909      	ldr	r1, [pc, #36]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00f      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	e002      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800
 80045e4:	4986      	ldr	r1, [pc, #536]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80045f8:	4b81      	ldr	r3, [pc, #516]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004608:	497d      	ldr	r1, [pc, #500]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d006      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80d6 	beq.w	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004624:	4b76      	ldr	r3, [pc, #472]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a75      	ldr	r2, [pc, #468]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800462a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800462e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004630:	f7fc ffa8 	bl	8001584 <HAL_GetTick>
 8004634:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004638:	f7fc ffa4 	bl	8001584 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	; 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e195      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800464a:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d021      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004666:	2b00      	cmp	r3, #0
 8004668:	d11d      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800466a:	4b65      	ldr	r3, [pc, #404]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800466c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004678:	4b61      	ldr	r3, [pc, #388]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467e:	0e1b      	lsrs	r3, r3, #24
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	019a      	lsls	r2, r3, #6
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	041b      	lsls	r3, r3, #16
 8004690:	431a      	orrs	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	071b      	lsls	r3, r3, #28
 800469e:	4958      	ldr	r1, [pc, #352]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d004      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d02e      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d0:	d129      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046d2:	4b4b      	ldr	r3, [pc, #300]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d8:	0c1b      	lsrs	r3, r3, #16
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046e0:	4b47      	ldr	r3, [pc, #284]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e6:	0f1b      	lsrs	r3, r3, #28
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	019a      	lsls	r2, r3, #6
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	041b      	lsls	r3, r3, #16
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	061b      	lsls	r3, r3, #24
 8004700:	431a      	orrs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	071b      	lsls	r3, r3, #28
 8004706:	493e      	ldr	r1, [pc, #248]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800470e:	4b3c      	ldr	r3, [pc, #240]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004714:	f023 021f 	bic.w	r2, r3, #31
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	3b01      	subs	r3, #1
 800471e:	4938      	ldr	r1, [pc, #224]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01d      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004732:	4b33      	ldr	r3, [pc, #204]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004738:	0e1b      	lsrs	r3, r3, #24
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004740:	4b2f      	ldr	r3, [pc, #188]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004746:	0f1b      	lsrs	r3, r3, #28
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	019a      	lsls	r2, r3, #6
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	431a      	orrs	r2, r3
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	061b      	lsls	r3, r3, #24
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	071b      	lsls	r3, r3, #28
 8004766:	4926      	ldr	r1, [pc, #152]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d011      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	019a      	lsls	r2, r3, #6
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	041b      	lsls	r3, r3, #16
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	061b      	lsls	r3, r3, #24
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	071b      	lsls	r3, r3, #28
 8004796:	491a      	ldr	r1, [pc, #104]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800479e:	4b18      	ldr	r3, [pc, #96]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a17      	ldr	r2, [pc, #92]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047aa:	f7fc feeb 	bl	8001584 <HAL_GetTick>
 80047ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047b2:	f7fc fee7 	bl	8001584 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b64      	cmp	r3, #100	; 0x64
 80047be:	d901      	bls.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e0d8      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047c4:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	f040 80ce 	bne.w	8004974 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047d8:	4b09      	ldr	r3, [pc, #36]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a08      	ldr	r2, [pc, #32]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e4:	f7fc fece 	bl	8001584 <HAL_GetTick>
 80047e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047ea:	e00b      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047ec:	f7fc feca 	bl	8001584 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	; 0x64
 80047f8:	d904      	bls.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e0bb      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004804:	4b5e      	ldr	r3, [pc, #376]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800480c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004810:	d0ec      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800482e:	2b00      	cmp	r3, #0
 8004830:	d02e      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d12a      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800483a:	4b51      	ldr	r3, [pc, #324]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004848:	4b4d      	ldr	r3, [pc, #308]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	0f1b      	lsrs	r3, r3, #28
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	019a      	lsls	r2, r3, #6
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	061b      	lsls	r3, r3, #24
 8004868:	431a      	orrs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	071b      	lsls	r3, r3, #28
 800486e:	4944      	ldr	r1, [pc, #272]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004876:	4b42      	ldr	r3, [pc, #264]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800487c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	3b01      	subs	r3, #1
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	493d      	ldr	r1, [pc, #244]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d022      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a4:	d11d      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048a6:	4b36      	ldr	r3, [pc, #216]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	0e1b      	lsrs	r3, r3, #24
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048b4:	4b32      	ldr	r3, [pc, #200]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ba:	0f1b      	lsrs	r3, r3, #28
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	019a      	lsls	r2, r3, #6
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	061b      	lsls	r3, r3, #24
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	071b      	lsls	r3, r3, #28
 80048da:	4929      	ldr	r1, [pc, #164]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d028      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	0e1b      	lsrs	r3, r3, #24
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048fc:	4b20      	ldr	r3, [pc, #128]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004902:	0c1b      	lsrs	r3, r3, #16
 8004904:	f003 0303 	and.w	r3, r3, #3
 8004908:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	019a      	lsls	r2, r3, #6
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	041b      	lsls	r3, r3, #16
 8004914:	431a      	orrs	r2, r3
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	061b      	lsls	r3, r3, #24
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	071b      	lsls	r3, r3, #28
 8004922:	4917      	ldr	r1, [pc, #92]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800492a:	4b15      	ldr	r3, [pc, #84]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800492c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	4911      	ldr	r1, [pc, #68]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fc fe1a 	bl	8001584 <HAL_GetTick>
 8004950:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004954:	f7fc fe16 	bl	8001584 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e007      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800496e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004972:	d1ef      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800

08004984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e040      	b.n	8004a18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fc fc98 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2224      	movs	r2, #36	; 0x24
 80049b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f82c 	bl	8004a20 <UART_SetConfig>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e022      	b.n	8004a18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fa82 	bl	8004ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fb09 	bl	8005028 <UART_CheckIdleState>
 8004a16:	4603      	mov	r3, r0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4ba7      	ldr	r3, [pc, #668]	; (8004ce8 <UART_SetConfig+0x2c8>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	6979      	ldr	r1, [r7, #20]
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a95      	ldr	r2, [pc, #596]	; (8004cec <UART_SetConfig+0x2cc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d120      	bne.n	8004ade <UART_SetConfig+0xbe>
 8004a9c:	4b94      	ldr	r3, [pc, #592]	; (8004cf0 <UART_SetConfig+0x2d0>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d816      	bhi.n	8004ad8 <UART_SetConfig+0xb8>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x90>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ac1 	.word	0x08004ac1
 8004ab4:	08004acd 	.word	0x08004acd
 8004ab8:	08004ac7 	.word	0x08004ac7
 8004abc:	08004ad3 	.word	0x08004ad3
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	e14f      	b.n	8004d66 <UART_SetConfig+0x346>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	77fb      	strb	r3, [r7, #31]
 8004aca:	e14c      	b.n	8004d66 <UART_SetConfig+0x346>
 8004acc:	2304      	movs	r3, #4
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	e149      	b.n	8004d66 <UART_SetConfig+0x346>
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	77fb      	strb	r3, [r7, #31]
 8004ad6:	e146      	b.n	8004d66 <UART_SetConfig+0x346>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	77fb      	strb	r3, [r7, #31]
 8004adc:	e143      	b.n	8004d66 <UART_SetConfig+0x346>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a84      	ldr	r2, [pc, #528]	; (8004cf4 <UART_SetConfig+0x2d4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d132      	bne.n	8004b4e <UART_SetConfig+0x12e>
 8004ae8:	4b81      	ldr	r3, [pc, #516]	; (8004cf0 <UART_SetConfig+0x2d0>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b0c      	cmp	r3, #12
 8004af4:	d828      	bhi.n	8004b48 <UART_SetConfig+0x128>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0xdc>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b31 	.word	0x08004b31
 8004b00:	08004b49 	.word	0x08004b49
 8004b04:	08004b49 	.word	0x08004b49
 8004b08:	08004b49 	.word	0x08004b49
 8004b0c:	08004b3d 	.word	0x08004b3d
 8004b10:	08004b49 	.word	0x08004b49
 8004b14:	08004b49 	.word	0x08004b49
 8004b18:	08004b49 	.word	0x08004b49
 8004b1c:	08004b37 	.word	0x08004b37
 8004b20:	08004b49 	.word	0x08004b49
 8004b24:	08004b49 	.word	0x08004b49
 8004b28:	08004b49 	.word	0x08004b49
 8004b2c:	08004b43 	.word	0x08004b43
 8004b30:	2300      	movs	r3, #0
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	e117      	b.n	8004d66 <UART_SetConfig+0x346>
 8004b36:	2302      	movs	r3, #2
 8004b38:	77fb      	strb	r3, [r7, #31]
 8004b3a:	e114      	b.n	8004d66 <UART_SetConfig+0x346>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e111      	b.n	8004d66 <UART_SetConfig+0x346>
 8004b42:	2308      	movs	r3, #8
 8004b44:	77fb      	strb	r3, [r7, #31]
 8004b46:	e10e      	b.n	8004d66 <UART_SetConfig+0x346>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e10b      	b.n	8004d66 <UART_SetConfig+0x346>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a69      	ldr	r2, [pc, #420]	; (8004cf8 <UART_SetConfig+0x2d8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d120      	bne.n	8004b9a <UART_SetConfig+0x17a>
 8004b58:	4b65      	ldr	r3, [pc, #404]	; (8004cf0 <UART_SetConfig+0x2d0>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b62:	2b30      	cmp	r3, #48	; 0x30
 8004b64:	d013      	beq.n	8004b8e <UART_SetConfig+0x16e>
 8004b66:	2b30      	cmp	r3, #48	; 0x30
 8004b68:	d814      	bhi.n	8004b94 <UART_SetConfig+0x174>
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d009      	beq.n	8004b82 <UART_SetConfig+0x162>
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d810      	bhi.n	8004b94 <UART_SetConfig+0x174>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <UART_SetConfig+0x15c>
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d006      	beq.n	8004b88 <UART_SetConfig+0x168>
 8004b7a:	e00b      	b.n	8004b94 <UART_SetConfig+0x174>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e0f1      	b.n	8004d66 <UART_SetConfig+0x346>
 8004b82:	2302      	movs	r3, #2
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e0ee      	b.n	8004d66 <UART_SetConfig+0x346>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e0eb      	b.n	8004d66 <UART_SetConfig+0x346>
 8004b8e:	2308      	movs	r3, #8
 8004b90:	77fb      	strb	r3, [r7, #31]
 8004b92:	e0e8      	b.n	8004d66 <UART_SetConfig+0x346>
 8004b94:	2310      	movs	r3, #16
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e0e5      	b.n	8004d66 <UART_SetConfig+0x346>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a57      	ldr	r2, [pc, #348]	; (8004cfc <UART_SetConfig+0x2dc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d120      	bne.n	8004be6 <UART_SetConfig+0x1c6>
 8004ba4:	4b52      	ldr	r3, [pc, #328]	; (8004cf0 <UART_SetConfig+0x2d0>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bae:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb0:	d013      	beq.n	8004bda <UART_SetConfig+0x1ba>
 8004bb2:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb4:	d814      	bhi.n	8004be0 <UART_SetConfig+0x1c0>
 8004bb6:	2b80      	cmp	r3, #128	; 0x80
 8004bb8:	d009      	beq.n	8004bce <UART_SetConfig+0x1ae>
 8004bba:	2b80      	cmp	r3, #128	; 0x80
 8004bbc:	d810      	bhi.n	8004be0 <UART_SetConfig+0x1c0>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <UART_SetConfig+0x1a8>
 8004bc2:	2b40      	cmp	r3, #64	; 0x40
 8004bc4:	d006      	beq.n	8004bd4 <UART_SetConfig+0x1b4>
 8004bc6:	e00b      	b.n	8004be0 <UART_SetConfig+0x1c0>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e0cb      	b.n	8004d66 <UART_SetConfig+0x346>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	e0c8      	b.n	8004d66 <UART_SetConfig+0x346>
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e0c5      	b.n	8004d66 <UART_SetConfig+0x346>
 8004bda:	2308      	movs	r3, #8
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e0c2      	b.n	8004d66 <UART_SetConfig+0x346>
 8004be0:	2310      	movs	r3, #16
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e0bf      	b.n	8004d66 <UART_SetConfig+0x346>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a45      	ldr	r2, [pc, #276]	; (8004d00 <UART_SetConfig+0x2e0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d125      	bne.n	8004c3c <UART_SetConfig+0x21c>
 8004bf0:	4b3f      	ldr	r3, [pc, #252]	; (8004cf0 <UART_SetConfig+0x2d0>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfe:	d017      	beq.n	8004c30 <UART_SetConfig+0x210>
 8004c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c04:	d817      	bhi.n	8004c36 <UART_SetConfig+0x216>
 8004c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0a:	d00b      	beq.n	8004c24 <UART_SetConfig+0x204>
 8004c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c10:	d811      	bhi.n	8004c36 <UART_SetConfig+0x216>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <UART_SetConfig+0x1fe>
 8004c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1a:	d006      	beq.n	8004c2a <UART_SetConfig+0x20a>
 8004c1c:	e00b      	b.n	8004c36 <UART_SetConfig+0x216>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e0a0      	b.n	8004d66 <UART_SetConfig+0x346>
 8004c24:	2302      	movs	r3, #2
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e09d      	b.n	8004d66 <UART_SetConfig+0x346>
 8004c2a:	2304      	movs	r3, #4
 8004c2c:	77fb      	strb	r3, [r7, #31]
 8004c2e:	e09a      	b.n	8004d66 <UART_SetConfig+0x346>
 8004c30:	2308      	movs	r3, #8
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e097      	b.n	8004d66 <UART_SetConfig+0x346>
 8004c36:	2310      	movs	r3, #16
 8004c38:	77fb      	strb	r3, [r7, #31]
 8004c3a:	e094      	b.n	8004d66 <UART_SetConfig+0x346>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a30      	ldr	r2, [pc, #192]	; (8004d04 <UART_SetConfig+0x2e4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d125      	bne.n	8004c92 <UART_SetConfig+0x272>
 8004c46:	4b2a      	ldr	r3, [pc, #168]	; (8004cf0 <UART_SetConfig+0x2d0>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c54:	d017      	beq.n	8004c86 <UART_SetConfig+0x266>
 8004c56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c5a:	d817      	bhi.n	8004c8c <UART_SetConfig+0x26c>
 8004c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c60:	d00b      	beq.n	8004c7a <UART_SetConfig+0x25a>
 8004c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c66:	d811      	bhi.n	8004c8c <UART_SetConfig+0x26c>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <UART_SetConfig+0x254>
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c70:	d006      	beq.n	8004c80 <UART_SetConfig+0x260>
 8004c72:	e00b      	b.n	8004c8c <UART_SetConfig+0x26c>
 8004c74:	2301      	movs	r3, #1
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e075      	b.n	8004d66 <UART_SetConfig+0x346>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e072      	b.n	8004d66 <UART_SetConfig+0x346>
 8004c80:	2304      	movs	r3, #4
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e06f      	b.n	8004d66 <UART_SetConfig+0x346>
 8004c86:	2308      	movs	r3, #8
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e06c      	b.n	8004d66 <UART_SetConfig+0x346>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e069      	b.n	8004d66 <UART_SetConfig+0x346>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1c      	ldr	r2, [pc, #112]	; (8004d08 <UART_SetConfig+0x2e8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d137      	bne.n	8004d0c <UART_SetConfig+0x2ec>
 8004c9c:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <UART_SetConfig+0x2d0>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ca6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004caa:	d017      	beq.n	8004cdc <UART_SetConfig+0x2bc>
 8004cac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cb0:	d817      	bhi.n	8004ce2 <UART_SetConfig+0x2c2>
 8004cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb6:	d00b      	beq.n	8004cd0 <UART_SetConfig+0x2b0>
 8004cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cbc:	d811      	bhi.n	8004ce2 <UART_SetConfig+0x2c2>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <UART_SetConfig+0x2aa>
 8004cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc6:	d006      	beq.n	8004cd6 <UART_SetConfig+0x2b6>
 8004cc8:	e00b      	b.n	8004ce2 <UART_SetConfig+0x2c2>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e04a      	b.n	8004d66 <UART_SetConfig+0x346>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e047      	b.n	8004d66 <UART_SetConfig+0x346>
 8004cd6:	2304      	movs	r3, #4
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	e044      	b.n	8004d66 <UART_SetConfig+0x346>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	e041      	b.n	8004d66 <UART_SetConfig+0x346>
 8004ce2:	2310      	movs	r3, #16
 8004ce4:	77fb      	strb	r3, [r7, #31]
 8004ce6:	e03e      	b.n	8004d66 <UART_SetConfig+0x346>
 8004ce8:	efff69f3 	.word	0xefff69f3
 8004cec:	40011000 	.word	0x40011000
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40004400 	.word	0x40004400
 8004cf8:	40004800 	.word	0x40004800
 8004cfc:	40004c00 	.word	0x40004c00
 8004d00:	40005000 	.word	0x40005000
 8004d04:	40011400 	.word	0x40011400
 8004d08:	40007800 	.word	0x40007800
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a71      	ldr	r2, [pc, #452]	; (8004ed8 <UART_SetConfig+0x4b8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d125      	bne.n	8004d62 <UART_SetConfig+0x342>
 8004d16:	4b71      	ldr	r3, [pc, #452]	; (8004edc <UART_SetConfig+0x4bc>)
 8004d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d24:	d017      	beq.n	8004d56 <UART_SetConfig+0x336>
 8004d26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d2a:	d817      	bhi.n	8004d5c <UART_SetConfig+0x33c>
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d30:	d00b      	beq.n	8004d4a <UART_SetConfig+0x32a>
 8004d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d36:	d811      	bhi.n	8004d5c <UART_SetConfig+0x33c>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <UART_SetConfig+0x324>
 8004d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d40:	d006      	beq.n	8004d50 <UART_SetConfig+0x330>
 8004d42:	e00b      	b.n	8004d5c <UART_SetConfig+0x33c>
 8004d44:	2300      	movs	r3, #0
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e00d      	b.n	8004d66 <UART_SetConfig+0x346>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e00a      	b.n	8004d66 <UART_SetConfig+0x346>
 8004d50:	2304      	movs	r3, #4
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e007      	b.n	8004d66 <UART_SetConfig+0x346>
 8004d56:	2308      	movs	r3, #8
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e004      	b.n	8004d66 <UART_SetConfig+0x346>
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e001      	b.n	8004d66 <UART_SetConfig+0x346>
 8004d62:	2310      	movs	r3, #16
 8004d64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d6e:	d15b      	bne.n	8004e28 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004d70:	7ffb      	ldrb	r3, [r7, #31]
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d827      	bhi.n	8004dc6 <UART_SetConfig+0x3a6>
 8004d76:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <UART_SetConfig+0x35c>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004da9 	.word	0x08004da9
 8004d84:	08004db1 	.word	0x08004db1
 8004d88:	08004dc7 	.word	0x08004dc7
 8004d8c:	08004db7 	.word	0x08004db7
 8004d90:	08004dc7 	.word	0x08004dc7
 8004d94:	08004dc7 	.word	0x08004dc7
 8004d98:	08004dc7 	.word	0x08004dc7
 8004d9c:	08004dbf 	.word	0x08004dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da0:	f7ff f9a0 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8004da4:	61b8      	str	r0, [r7, #24]
        break;
 8004da6:	e013      	b.n	8004dd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004da8:	f7ff f9b0 	bl	800410c <HAL_RCC_GetPCLK2Freq>
 8004dac:	61b8      	str	r0, [r7, #24]
        break;
 8004dae:	e00f      	b.n	8004dd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db0:	4b4b      	ldr	r3, [pc, #300]	; (8004ee0 <UART_SetConfig+0x4c0>)
 8004db2:	61bb      	str	r3, [r7, #24]
        break;
 8004db4:	e00c      	b.n	8004dd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db6:	f7ff f8a7 	bl	8003f08 <HAL_RCC_GetSysClockFreq>
 8004dba:	61b8      	str	r0, [r7, #24]
        break;
 8004dbc:	e008      	b.n	8004dd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc2:	61bb      	str	r3, [r7, #24]
        break;
 8004dc4:	e004      	b.n	8004dd0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	77bb      	strb	r3, [r7, #30]
        break;
 8004dce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d074      	beq.n	8004ec0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	005a      	lsls	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	441a      	add	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b0f      	cmp	r3, #15
 8004df2:	d916      	bls.n	8004e22 <UART_SetConfig+0x402>
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfa:	d212      	bcs.n	8004e22 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f023 030f 	bic.w	r3, r3, #15
 8004e04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	89fb      	ldrh	r3, [r7, #14]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	89fa      	ldrh	r2, [r7, #14]
 8004e1e:	60da      	str	r2, [r3, #12]
 8004e20:	e04e      	b.n	8004ec0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	77bb      	strb	r3, [r7, #30]
 8004e26:	e04b      	b.n	8004ec0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e28:	7ffb      	ldrb	r3, [r7, #31]
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d827      	bhi.n	8004e7e <UART_SetConfig+0x45e>
 8004e2e:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <UART_SetConfig+0x414>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004e59 	.word	0x08004e59
 8004e38:	08004e61 	.word	0x08004e61
 8004e3c:	08004e69 	.word	0x08004e69
 8004e40:	08004e7f 	.word	0x08004e7f
 8004e44:	08004e6f 	.word	0x08004e6f
 8004e48:	08004e7f 	.word	0x08004e7f
 8004e4c:	08004e7f 	.word	0x08004e7f
 8004e50:	08004e7f 	.word	0x08004e7f
 8004e54:	08004e77 	.word	0x08004e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e58:	f7ff f944 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8004e5c:	61b8      	str	r0, [r7, #24]
        break;
 8004e5e:	e013      	b.n	8004e88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e60:	f7ff f954 	bl	800410c <HAL_RCC_GetPCLK2Freq>
 8004e64:	61b8      	str	r0, [r7, #24]
        break;
 8004e66:	e00f      	b.n	8004e88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e68:	4b1d      	ldr	r3, [pc, #116]	; (8004ee0 <UART_SetConfig+0x4c0>)
 8004e6a:	61bb      	str	r3, [r7, #24]
        break;
 8004e6c:	e00c      	b.n	8004e88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6e:	f7ff f84b 	bl	8003f08 <HAL_RCC_GetSysClockFreq>
 8004e72:	61b8      	str	r0, [r7, #24]
        break;
 8004e74:	e008      	b.n	8004e88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7a:	61bb      	str	r3, [r7, #24]
        break;
 8004e7c:	e004      	b.n	8004e88 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	77bb      	strb	r3, [r7, #30]
        break;
 8004e86:	bf00      	nop
    }

    if (pclk != 0U)
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d018      	beq.n	8004ec0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	085a      	lsrs	r2, r3, #1
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	441a      	add	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2b0f      	cmp	r3, #15
 8004ea8:	d908      	bls.n	8004ebc <UART_SetConfig+0x49c>
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb0:	d204      	bcs.n	8004ebc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	e001      	b.n	8004ec0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ecc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40007c00 	.word	0x40007c00
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	00f42400 	.word	0x00f42400

08004ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01a      	beq.n	8004ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe2:	d10a      	bne.n	8004ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	605a      	str	r2, [r3, #4]
  }
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af02      	add	r7, sp, #8
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005038:	f7fc faa4 	bl	8001584 <HAL_GetTick>
 800503c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b08      	cmp	r3, #8
 800504a:	d10e      	bne.n	800506a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800504c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f82d 	bl	80050ba <UART_WaitOnFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e023      	b.n	80050b2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b04      	cmp	r3, #4
 8005076:	d10e      	bne.n	8005096 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f817 	bl	80050ba <UART_WaitOnFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e00d      	b.n	80050b2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	603b      	str	r3, [r7, #0]
 80050c6:	4613      	mov	r3, r2
 80050c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ca:	e05e      	b.n	800518a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d05a      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d4:	f7fc fa56 	bl	8001584 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d302      	bcc.n	80050ea <UART_WaitOnFlagUntilTimeout+0x30>
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d11b      	bne.n	8005122 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2220      	movs	r2, #32
 800510e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e043      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d02c      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800513a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513e:	d124      	bne.n	800518a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005148:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005158:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2220      	movs	r2, #32
 800516e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e00f      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4013      	ands	r3, r2
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	bf0c      	ite	eq
 800519a:	2301      	moveq	r3, #1
 800519c:	2300      	movne	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d091      	beq.n	80050cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <_ZdlPvj>:
 80051b2:	f000 b800 	b.w	80051b6 <_ZdlPv>

080051b6 <_ZdlPv>:
 80051b6:	f000 b825 	b.w	8005204 <free>
	...

080051bc <__libc_init_array>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	4d0d      	ldr	r5, [pc, #52]	; (80051f4 <__libc_init_array+0x38>)
 80051c0:	4c0d      	ldr	r4, [pc, #52]	; (80051f8 <__libc_init_array+0x3c>)
 80051c2:	1b64      	subs	r4, r4, r5
 80051c4:	10a4      	asrs	r4, r4, #2
 80051c6:	2600      	movs	r6, #0
 80051c8:	42a6      	cmp	r6, r4
 80051ca:	d109      	bne.n	80051e0 <__libc_init_array+0x24>
 80051cc:	4d0b      	ldr	r5, [pc, #44]	; (80051fc <__libc_init_array+0x40>)
 80051ce:	4c0c      	ldr	r4, [pc, #48]	; (8005200 <__libc_init_array+0x44>)
 80051d0:	f000 f886 	bl	80052e0 <_init>
 80051d4:	1b64      	subs	r4, r4, r5
 80051d6:	10a4      	asrs	r4, r4, #2
 80051d8:	2600      	movs	r6, #0
 80051da:	42a6      	cmp	r6, r4
 80051dc:	d105      	bne.n	80051ea <__libc_init_array+0x2e>
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e4:	4798      	blx	r3
 80051e6:	3601      	adds	r6, #1
 80051e8:	e7ee      	b.n	80051c8 <__libc_init_array+0xc>
 80051ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ee:	4798      	blx	r3
 80051f0:	3601      	adds	r6, #1
 80051f2:	e7f2      	b.n	80051da <__libc_init_array+0x1e>
 80051f4:	08006340 	.word	0x08006340
 80051f8:	08006340 	.word	0x08006340
 80051fc:	08006340 	.word	0x08006340
 8005200:	08006348 	.word	0x08006348

08005204 <free>:
 8005204:	4b02      	ldr	r3, [pc, #8]	; (8005210 <free+0xc>)
 8005206:	4601      	mov	r1, r0
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	f000 b80b 	b.w	8005224 <_free_r>
 800520e:	bf00      	nop
 8005210:	2000000c 	.word	0x2000000c

08005214 <memset>:
 8005214:	4402      	add	r2, r0
 8005216:	4603      	mov	r3, r0
 8005218:	4293      	cmp	r3, r2
 800521a:	d100      	bne.n	800521e <memset+0xa>
 800521c:	4770      	bx	lr
 800521e:	f803 1b01 	strb.w	r1, [r3], #1
 8005222:	e7f9      	b.n	8005218 <memset+0x4>

08005224 <_free_r>:
 8005224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005226:	2900      	cmp	r1, #0
 8005228:	d048      	beq.n	80052bc <_free_r+0x98>
 800522a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522e:	9001      	str	r0, [sp, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f1a1 0404 	sub.w	r4, r1, #4
 8005236:	bfb8      	it	lt
 8005238:	18e4      	addlt	r4, r4, r3
 800523a:	f000 f843 	bl	80052c4 <__malloc_lock>
 800523e:	4a20      	ldr	r2, [pc, #128]	; (80052c0 <_free_r+0x9c>)
 8005240:	9801      	ldr	r0, [sp, #4]
 8005242:	6813      	ldr	r3, [r2, #0]
 8005244:	4615      	mov	r5, r2
 8005246:	b933      	cbnz	r3, 8005256 <_free_r+0x32>
 8005248:	6063      	str	r3, [r4, #4]
 800524a:	6014      	str	r4, [r2, #0]
 800524c:	b003      	add	sp, #12
 800524e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005252:	f000 b83d 	b.w	80052d0 <__malloc_unlock>
 8005256:	42a3      	cmp	r3, r4
 8005258:	d90b      	bls.n	8005272 <_free_r+0x4e>
 800525a:	6821      	ldr	r1, [r4, #0]
 800525c:	1862      	adds	r2, r4, r1
 800525e:	4293      	cmp	r3, r2
 8005260:	bf04      	itt	eq
 8005262:	681a      	ldreq	r2, [r3, #0]
 8005264:	685b      	ldreq	r3, [r3, #4]
 8005266:	6063      	str	r3, [r4, #4]
 8005268:	bf04      	itt	eq
 800526a:	1852      	addeq	r2, r2, r1
 800526c:	6022      	streq	r2, [r4, #0]
 800526e:	602c      	str	r4, [r5, #0]
 8005270:	e7ec      	b.n	800524c <_free_r+0x28>
 8005272:	461a      	mov	r2, r3
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	b10b      	cbz	r3, 800527c <_free_r+0x58>
 8005278:	42a3      	cmp	r3, r4
 800527a:	d9fa      	bls.n	8005272 <_free_r+0x4e>
 800527c:	6811      	ldr	r1, [r2, #0]
 800527e:	1855      	adds	r5, r2, r1
 8005280:	42a5      	cmp	r5, r4
 8005282:	d10b      	bne.n	800529c <_free_r+0x78>
 8005284:	6824      	ldr	r4, [r4, #0]
 8005286:	4421      	add	r1, r4
 8005288:	1854      	adds	r4, r2, r1
 800528a:	42a3      	cmp	r3, r4
 800528c:	6011      	str	r1, [r2, #0]
 800528e:	d1dd      	bne.n	800524c <_free_r+0x28>
 8005290:	681c      	ldr	r4, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	6053      	str	r3, [r2, #4]
 8005296:	4421      	add	r1, r4
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	e7d7      	b.n	800524c <_free_r+0x28>
 800529c:	d902      	bls.n	80052a4 <_free_r+0x80>
 800529e:	230c      	movs	r3, #12
 80052a0:	6003      	str	r3, [r0, #0]
 80052a2:	e7d3      	b.n	800524c <_free_r+0x28>
 80052a4:	6825      	ldr	r5, [r4, #0]
 80052a6:	1961      	adds	r1, r4, r5
 80052a8:	428b      	cmp	r3, r1
 80052aa:	bf04      	itt	eq
 80052ac:	6819      	ldreq	r1, [r3, #0]
 80052ae:	685b      	ldreq	r3, [r3, #4]
 80052b0:	6063      	str	r3, [r4, #4]
 80052b2:	bf04      	itt	eq
 80052b4:	1949      	addeq	r1, r1, r5
 80052b6:	6021      	streq	r1, [r4, #0]
 80052b8:	6054      	str	r4, [r2, #4]
 80052ba:	e7c7      	b.n	800524c <_free_r+0x28>
 80052bc:	b003      	add	sp, #12
 80052be:	bd30      	pop	{r4, r5, pc}
 80052c0:	200042e8 	.word	0x200042e8

080052c4 <__malloc_lock>:
 80052c4:	4801      	ldr	r0, [pc, #4]	; (80052cc <__malloc_lock+0x8>)
 80052c6:	f000 b809 	b.w	80052dc <__retarget_lock_acquire_recursive>
 80052ca:	bf00      	nop
 80052cc:	200042f4 	.word	0x200042f4

080052d0 <__malloc_unlock>:
 80052d0:	4801      	ldr	r0, [pc, #4]	; (80052d8 <__malloc_unlock+0x8>)
 80052d2:	f000 b804 	b.w	80052de <__retarget_lock_release_recursive>
 80052d6:	bf00      	nop
 80052d8:	200042f4 	.word	0x200042f4

080052dc <__retarget_lock_acquire_recursive>:
 80052dc:	4770      	bx	lr

080052de <__retarget_lock_release_recursive>:
 80052de:	4770      	bx	lr

080052e0 <_init>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr

080052ec <_fini>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr
